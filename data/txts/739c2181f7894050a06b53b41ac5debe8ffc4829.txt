Hausdorff Dimension, Heavy Tails, and Generalization in Neural Networks

arXiv:2006.09313v3 [stat.ML] 22 May 2021

Umut S¸ ims¸ekli1,2, Ozan Sener3, George Deligiannidis2,4, Murat A. Erdogdu5,6 LTCI, Télécom Paris, Institut Polytechnique de Paris1, University of Oxford2, Intel Labs3
The Alan Turing Institute4, University of Toronto5, Vector Institute6

Abstract
Despite its success in a wide range of applications, characterizing the generalization properties of stochastic gradient descent (SGD) in non-convex deep learning problems is still an important challenge. While modeling the trajectories of SGD via stochastic differential equations (SDE) under heavy-tailed gradient noise has recently shed light over several peculiar characteristics of SGD, a rigorous treatment of the generalization properties of such SDEs in a learning theoretical framework is still missing. Aiming to bridge this gap, in this paper, we prove generalization bounds for SGD under the assumption that its trajectories can be well-approximated by a Feller process, which deﬁnes a rich class of Markov processes that include several recent SDE representations (both Brownian or heavy-tailed) as its special case. We show that the generalization error can be controlled by the Hausdorff dimension of the trajectories, which is intimately linked to the tail behavior of the driving process. Our results imply that heavier-tailed processes should achieve better generalization; hence, the tail-index of the process can be used as a notion of “capacity metric”. We support our theory with experiments on deep neural networks illustrating that the proposed capacity metric accurately estimates the generalization error, and it does not necessarily grow with the number of parameters unlike the existing capacity metrics in the literature.

1 Introduction

Many important tasks in deep learning can be represented by the following optimization problem,

1 min f (w) :=

n f (i)(w) ,

(1)

w∈Rd

n i=1

where w ∈ Rd denotes the network weights, n denotes the number of training data points, f denotes a non-convex cost function, and f (i) denotes the cost incurred by a single data point. Gradient-based optimization algorithms, perhaps Stochastic gradient descent (SGD) being the most popular one, have been the primary algorithmic choice for attacking such optimization problems. Given an initial point w0, the SGD algorithm is based on the following recursion,

wk+1 = wk − η∇f˜k(wk) with ∇f˜k(w) := 1

∇f (i)(w),

(2)

B i∈B˜k

where η is the step-size, and ∇f˜k is the unbiased stochastic gradient with batch size B = |B˜k| for a random subset B˜k of {1, . . . , n} for all k ∈ N, | · | denoting cardinality.

In contrast to convex optimization setting where the behavior of SGD is fairly well-understood (see e.g. [DDB19, SSBD14]), the generalization properties of SGD in non-convex deep learning problems is an active area of research [PBL19, AZL19, AZLL19]. In the last decade, there has been considerable progress around this topic, where several generalization bounds have been proven in

34th Conference on Neural Information Processing Systems (NeurIPS 2020), Vancouver, Canada.

different mathematical setups [NTS15, MWZZ17, Lon17, DR17, KL17, RRT17, ZLZ19, AZLL19, NHD+19]. While these bounds are useful at capturing the generalization behavior of SGD in certain
cases, they typically grow with dimension d, which contradicts empirical observations [NBMS17].

An important initial step towards developing a concrete generalization theory for the SGD algorithm in deep learning problems, is to characterize the statistical properties of the weights {wk}k∈N, as they might provide guidance for identifying the constituents that determine the performance of SGD. A
popular approach for analyzing the dynamics of SGD, mainly borrowed from statistical physics, is based on viewing it as a discretization of a continuous-time stochastic process that can be described
by a stochastic differential equation (SDE). For instance, if we assume that the gradient noise, i.e., ∇f˜k(w) − ∇f (w) can be well-approximated with a Gaussian random vector, we can represent (2) as the Euler-Maruyama discretization of the following SDE,

dWt = −∇f (Wt)dt + Σ(Wt)dBt,

(3)

where Bt denotes the standard Brownian motion in Rd, and Σ : Rd → Rd×d is called the diffusion coefﬁcient. This approach has been adopted by several studies [MHB16, JKA+17, HLLL17, CS18, ZWY+19]. In particular, based on the ‘ﬂat minima’ argument (cf. [HS97]), Jastrzebski et al. [JKA+17] illustrated that the performance of SGD on unseen data correlates well with the ratio η/B.

More recently, Gaussian approximation for the gradient noise has been taken under investigation. While Gaussian noise can accurately characterize the behavior of SGD for very large batch sizes [PSGN19], Simsekli et. al. [SSG19] empirically demonstrated that the gradient noise in fully connected and convolutional neural networks can exhibit heavy-tailed behavior in practical settings. This characteristic was also observed in recurrent neural networks [ZKV+19]. Favaro et al. [FFP20] illustrated that the iterates themselves can exhibit heavy-tails and investigated the corresponding asymptotic behavior in the inﬁnite-width limit. Similarly, Martin and Mahoney [MM19] observed that the eigenspectra of the weight matrices in individual layers of a neural network can exhibit heavytails; hence, they proposed a layer-wise heavy-tailed model for the SGD iterates. By invoking results from heavy-tailed random matrix theory, they proposed a capacity metric based on a quantiﬁcation of the heavy-tails, which correlated well with the performance of the network on unseen data. Further, they empirically demonstrated that this capacity metric does not necessarily grow with dimension d.
Based on the argument that the observed heavy-tailed behavior of SGD1 in practice cannot be accurately represented by an SDE driven by a Brownian motion, Simsekli et al. [SSG19] proposed modeling SGD with an SDE driven by a heavy-tailed process, so-called the α-stable Lévy motion [Sat99]. By using this framework and invoking metastability results proven in statistical physics [IP06, Pav07], SGD is shown to spend more time around ‘wider minima’, and the time spent around those minima is linked to the tail properties of the driving process [SSG19, NS¸ GR19].

Even though the SDE representations of SGD have provided many insights on several distinguishing characteristics of this algorithm in deep learning problems, a rigorous treatment of their generalization properties in a statistical learning theoretical framework is still missing. In this paper, we aim to take a ﬁrst step in this direction and prove novel generalization bounds in the case where the trajectories of the optimization algorithm (including but not limited to SGD) can be well-approximated by a Feller process [Sch16], which form a broad class of Markov processes that includes many important stochastic processes as a special case. More precisely, as a proxy to SGD, we consider the Feller process that is expressed by the following SDE:

dWt = −∇f (Wt)dt + Σ1(Wt)dBt + Σ2(Wt)dLαt (Wt),

(4)

where Σ1, Σ2 are d × d matrix-valued functions, and Lαt (·) denotes the state-dependent α-stable

Lévy motion, which will be deﬁned in detail in Section 2. Informally, Lαt (·) can be seen as a heavy-

tailed

generalization

of

the

Brownian

motion,

where

α

:

Rd

→

(0, 2]d √

denotes

its

state-dependent

tail-indices. In the case αi(w) = 2 for all i and w, Lαt (·) reduces to 2Bt whereas if αi gets smaller

than 2, the process becomes heavier-tailed in the i-th component, whose tails asymptotically obey a

power-law decay with exponent αi. The SDEs in [MHB16, JKA+17, HLLL17, CS18, ZWY+19]

1Very recently, Gurbuzbalaban et al. [GSZ20] and Hodgkinson and Mahoney [HM20] have simultaneously shown that the law of the SGD iterates (2) can indeed converge to a heavy-tailed stationary distribution with inﬁnite variance when the step-size η is large and/or the batch-size B is small. These results form a theoretical basis for the origins of the observed heavy-tailed behavior of SGD in practice.

2

all appear as a special case of (4) with Σ2 = 0, and the SDE proposed in [SSG19] corresponds to the isotropic setting: Σ2(w) is diagonal and αi(w) = α ∈ (0, 2] for all i, w. In (4), we allow each coordinate of Lαt (·) to have a different tail-index which can also depend on the state Wt. We believe that Lαt (·) provides a more realistic model based on the empirical results of [S¸ GN+19], suggesting that the tail index can have different values at each coordinate and evolve over time.
At the core of our approach lies the fact that the sample paths of Markov processes often exhibit a fractal-like structure [Xia03], and the generalization error over the sample paths is intimately related to the ‘roughness’ of the random fractal generated by the driving Markov process, as measured by a notion called the Hausdorff dimension. Our main contributions are as follows.
(i) We introduce a novel notion of complexity for the trajectories of a stochastic learning algorithm, which we coin as ‘uniform Hausdorff dimension’. Building on [Sch98], we show that the sample paths of Feller processes admit a uniform Hausdorff dimension, which is closely related to the tail properties of the process.
(ii) By using tools from geometric measure theory, we prove that the generalization error can be controlled by the Hausdorff dimension of the process, which can be signiﬁcantly smaller than the standard Euclidean dimension. In this sense, the Hausdorff dimension acts as an ‘intrinsic dimension’ of the problem, mimicking the role of Vapnik-Chervonenkis (VC) dimension in classical generalization bounds.
These two contributions collectively show that heavier-tailed processes achieve smaller generalization error, implying that the heavy-tails of SGD incur an implicit regularization. Our results also provide a theoretical justiﬁcation to the observations reported in [MM19] and [SSG19]. Besides, a remarkable feature of the Hausdorff dimension is that it solely depends on the tail behavior of the process; hence, contrary to existing capacity metrics, it does not necessarily grow with the number of parameters d. Furthermore, we provide an efﬁcient approach to estimate the Hausdorff dimension by making use of existing tail index estimators, and empirically demonstrate the validity of our theory on various neural networks. Experiments on both synthetic and real data verify that our bounds do not grow with the problem dimension, providing an accurate characterization of the generalization performance.

2 Technical Background

Stable distributions. Stable distributions appear as the limiting distribution in the generalized
central limit theorem [Lév37] and can be seen as a generalization of the Gaussian distribution. In
this paper, we will be interested in symmetric α-stable distributions, denoted by SαS. In the one-
dimensional case, a random variable X is SαS(σ) distributed, if its characteristic function (chf.) has the following form: E[exp(iωX)] = exp(−|σω|α), where α ∈ (0, 2] is called the tail-index and σ ∈ R+ is called the scale parameter. When α = 2, SαS(σ) = N (0, 2σ2), where N denotes the Gaussian distribution in R. As soon as α < 2, the distribution becomes heavy-tailed and E[|X|q] becomes ﬁnite if and only if q < α, indicating that the variance of SαS is ﬁnite only when α = 2.

There are multiple ways to extend SαS to the multivariate case. In our experiments, we will be

mainly interested in the elliptically-contoured α-stable distribution [ST94], whose chf. is given by

E[exp(i ω, X )] = exp(− ω α) for X, ω ∈ Rd, where ·, · denotes the Euclidean inner product.

Another common choice is the multivariate α-stable distribution with independent components for a

vector α ∈ Rd, whose chf. is given by E[exp(i ω, X )] = exp(−

d i=1

|ωi|αi ).

Essentially,

the

i-th

component of X is distributed with SαS with parameters αi and σi = 1. Both of these multivariate

distributions reduce to a multivariate Gaussian when their tail indices are 2.

Lévy and Feller processes. We begin by deﬁning a general Lévy process (also called Lévy motion), which includes Brownian motion Bt and the α-stable motion Lαt as special cases2. A Lévy process {Lt}t≥0 in Rd with the initial point L0 = 0, is deﬁned by the following properties:

(i) For N ∈ N and t0 < t1 < · · · < tN , the increments (Lti − Lti−1 ) are independent for all i. (ii) For any t > s > 0, (Lt − Ls) and Lt−s have the same distribution.

(iii) Lt is continuous in probability, i.e., for all δ > 0 and s ≥ 0, P(|Lt − Ls| > δ) → 0 as t → s.

2Here Lαt is equivalent to Lαt (·) with αi(w) = α ∈ (0, 2], ∀i ∈ {1, . . . , d} and ∀w ∈ Rd. 3

By the Lévy-Khintchine formula [Sat99], the chf. of a Lévy process is given by E[exp(i ξ, Lt )] = exp(−tψ(ξ)), where ψ : Rd → C is called the characteristic (or Lévy) exponent, given as:

1 ψ(ξ) = i b, ξ + ξ, Σξ +

1 − ei x,ξ + i x, ξ ν(dx), ∀ξ ∈ Rd.

(5)

2

Rd

1+ x 2

Here, b ∈ Rd denotes a constant drift, Σ ∈ Rd×d is a positive semi-deﬁnite matrix, and ν is called the Lévy measure, which is a Borel measure on Rd \ {0} satisfying ∫Rd x 2/(1 + x 2)ν(dx) < ∞. The choice of (b, Σ, ν) determines the law of Lt−s; hence, it fully characterizes the process Lt by

the Properties (i) and (ii) above. For instance, from (5), we can easily verify that under the choice

b = 0, Σ = 12 Id, and ν(ξ) = 0, with Id denoting the d × d identity matrix, the function exp(−ψ(ξ))

becomes the chf. of a standard Gaussian in Rd; hence, Lt reduces to Bt. On the other hand, if we

choose

b

=

0,

Σ

=

0,

and

ν(dx)

=

r

dr
1+α

λ(dy

),

for

all

x

=

ry, (r, y)

∈

R+

× Sd−1

where

Sd−1

denotes unit sphere in Rd and λ is an arbitrary Borel measure on Sd−1, we obtain the chf. of a generic

multivariate α-stable distribution, hence Lt reduces to Lαt . Depending on λ, exp(−ψ(ξ)) becomes

the chf. of an elliptically contoured α-stable distribution or an α-stable distribution with independent

components [Xia03].

Feller processes (also called Lévy-type processes [BSW13]) are a general family of Markov processes,
which further extend the scope of Lévy processes. In this study, we consider a class of Feller processes
[Cou65], which locally behave like Lévy processes and they additionally allow for state-dependent drifts b(w), diffusion matrices Σ(w), and Lévy measures ν(w, dy) for w ∈ Rd. For a ﬁxed state w, a Feller process {Wt}t≥0 is deﬁned through the chf. of the random variable Wt − w, given as ψt(w, ξ) = E [exp(−i ξ, Wt − w )]. A crucial characteristic of a Feller process related to its chf. is its symbol Ψ, deﬁned as,

1 Ψ(w, ξ) = i b(w), ξ + ξ, Σ(w)ξ +

1 − ei x,ξ + i w, ξ ν(w, dx),

(6)

2 Rd 1 + x 2

for w, ξ ∈ Rd [Sch98, Xia03, Jac02]. Here, for each w ∈ Rd, Σ(w) ∈ Rd×d is symmetric positive semi-deﬁnite, and for all w, ν(w, dx) is a Lévy measure.

Under mild conditions, one can verify that the SDE (4) we use as a proxy for the SGD algorithm indeed corresponds to a Feller process with b(w) = −∇f (w), Σ(w) = 2Σ1(w), and an appropriate choice of ν (see [HDS18]). We also note that many other popular stochastic optimization algorithms can be accurately represented by a Feller process, which we describe in the supplementary document. Hence, our results can be useful in a broader context.

Decomposable Feller processes. In this paper, we will focus on decomposable Feller processes
introduced in [Sch98], which will be useful in both our theory and experiments. Let Wt be a Feller process with symbol Ψ. We call the process Wt ‘decomposable at w0’, if there exists a point w0 ∈ Rd, such that Ψ(w, ξ) = ψ(ξ) + Ψ˜ (w, ξ), where ψ(ξ) := Ψ(w0, ξ) is called the sub-symbol and Ψ˜ (w, ξ) := Ψ(w, ξ) − Ψ(w0, ξ) is the remainder term. Here, Ψ˜ is assumed to satisfy certain
smoothness and boundedness assumptions, which are provided in the supplementary document. Essentially, the technical regularity conditions on Ψ˜ impose a structure on the triplet (b, Σ, ν) around
w0 which ensures that, around that point, Wt behaves like a Lévy process whose characteristic exponent is given by the sub-symbol ψ.

The Hausdorff Dimension. Due to their recursive nature, Markov processes often generate ‘random fractals’ [Xia03] and understanding the structure of such fractals has been a major challenge in modern probability theory [BP17, Kho09, KX17, Yan18, LG19, LY19]. In this paper, we are interested in identifying the complexity of the fractals generated by a Feller process that approximates SGD.

The intrinsic complexity of a fractal is typically characterized by a notion called the Hausdorff dimension [Fal04], which extends the usual notion of dimension (e.g., a line segment is one-dimensional, a plane is two-dimensional) to fractional orders. Informally, this notion measures the ‘roughness’ of an object (i.e., a set) and in the context of Lévy processes, they are deeply connected to the tail properties of the corresponding Lévy measure. [Sch98, Xia03, Yan18].

Before deﬁning the Hausdorff dimension, we need to introduce the Hausdorff measure. Let G ⊂ Rd

and δ > 0, and consider all the δ-coverings {Ai}i of G, i.e., each Ai denotes a set with diameter less

than δ satisfying G ⊂ ∪iAi. For any s ∈ (0, ∞), we then denote: Hδs(G) := inf

∞ i=1

diam(Ai

)s

,

where the inﬁmum is taken over all the δ-coverings. The s-dimensional Hausdorff measure of G

4

is deﬁned as the monotonic limit: Hs(G) := limδ→0 Hδs(G). It can be shown that Hs is an outer measure; hence, it can be extended to a complete measure by the Carathéodory extension theorem [Mat99]. When s is an integer, Hs is equal to the s-dimensional Lebesgue measure up to a constant factor; thus, it strictly generalizes the notion ‘volume’ to the fractional orders. We now proceed with the deﬁnition of the Hausdorff dimension.
Deﬁnition 1. The Hausdorff dimension of G ⊂ Rd is deﬁned as follows.

dimH G := sup{s > 0 : Hs(G) > 0} = inf{s > 0 : Hs(G) < ∞}.

(7)

One can show that if dimH G = s, then Hr(G) = 0 for all r > s and Hr(G) = ∞ for all r < s [EMG90]. In this sense, the Hausdorff dimension of G is the moment order s when Hs(G) drops from ∞ to 0, and we always have 0 ≤ dimH G ≤ d [Fal04]. Apart from the trivial cases such as dimH Rd = d, a canonical example is the well-known Cantor set, whose Hausdorff dimension is (log 2/ log 3) ∈ (0, 1). Besides, the Hausdorff dimension of Riemannian manifolds correspond to their intrinsic dimension, e.g., dimH Sd−1 = d − 1.
We note that, starting with the seminal work of Assouad [Ass83], tools from fractal geometry have been considered in learning theory [SHTY13, MSS19, DSD19] in different contexts. In this paper, we consider the Hausdorff dimension of the sample paths of Markov processes in a learning theoretical framework, which, to the best of our knowledge, has not yet been investigated in the literature.

3 Uniform Hausdorff Dimension and Generalization

Mathematical setup. Let Z = X × Y denote the space of data points, with X being the space of features and Y the space of the labels. We consider an unknown data distribution over Z, denoted by µz. We assume that we have access to a training set with n elements, denoted as S = {z1, . . . , zn}, where each element of S is independently and identically distributed (i.i.d.) from µz. We will denote S ∼ µ⊗z n, where µ⊗z n is the n-times product measure of µz.

To assess the quality of an estimated parameter, we consider a loss function : Rd × Z → R+, such

that (w, z) measures the loss induced by a single data point z for the particular choice of parameter

w ∈ Rd. We accordingly denote the population risk with R(w) := Ez[ (w, z)] and the empirical risk

with Rˆ(w, S) := n1

n i=1

(w, zi). We note that we allow the cost function f in (1) and the loss

to be different from each other, where f should be seen as a surrogate loss function. In particular,

we will have different sets of assumptions on f and . However, as f and are different from each

other, the discrepancy between the risks of their respective minimizers would have an impact on

generalization. We leave the analysis of such discrepancy as a future work.

An iterative training algorithm A (for example SGD) is a function of two variables S and U , where

S denoting the dataset and U encapsulating all the algorithmic randomness (e.g. batch indices to

be used in training). The algorithm A(S, U ) returns the entire evolution of the parameters in the

time frame [0, T ], where [A(S, U )]t = wt being the parameter value returned by A at time t (e.g.

parameters trained by SGD at time t). More precisely, given a training set S and a random variable

U , the algorithm will output a random process {wt}t∈[0,T ] indexed by time, which is the trajectory of

iterates. To formalize this deﬁnition, let us denote the class of bounded Borel functions deﬁned from

[0, T ] to Rd with B([0, T ], Rd), and deﬁne A :

∞ n=1

Zn

×

Ω

→

B([0,

T

],

Rd),

where

Ω

denotes

the

domain of U . We will denote the law of U by µu, and without loss of generality we let T = 1.

In the remainder of the paper, we will consider the case where the algorithm A is chosen to be the
trajectories produced by a Feller process W(S) (e.g. the proxy for SGD (4)), whose symbol depends on the training set S. More precisely, given S ∈ Zn, the output of the training algorithm A(S, ·)
will be the random mapping t → Wt(S), where the symbol of W(S) is determined by the drift bS(w), diffusion matrix ΣS(w), and the Lévy measure νS(w, ·) (see (6) for deﬁnitions), which all depend on S. In this context, the random variable U represents the randomness that is incurred by the Feller
process. In particular, for the SDE proxy (4), U accounts for the randomness due to Bt and Lαt (·).

As our framework requires A to produce continuous-time trajectories to represent the discrete-time recursion of SGD (2), we can consider the linearly interpolated continuous-time process; an approach
which is commonly used in SDE analysis [Dal17, RRT17, EMS18, NS¸ GR19, EH20]. For a given t ∈ [kη, (k + 1)η), we can deﬁne the process W˜ t as the linear interpolation of wk and wk+1 (see

5

Figure 1: Trajectories of Lαt for α = 2.0, 1.5, and 1.0. The colors indicate the evolution in time. We observe that the trajectories become ‘simpler’ as dimH Lα[0, T ] = α gets smaller.
(2)), such that wk = W˜ kη for all k. On the other hand, the random variable U here represents the randomness incurred by the choice of the random minibatches B˜k over iterations (2).
Throughout this paper, we will assume that S and U are independent from each other. In the case of (4), this will entail that the randomness in Bt and Lαt does not depend on S, or in the case of the SGD recursion, it will require the random sets B˜k ⊂ {1, . . . , n} to be drawn independently from S3. Under this assumption, U does not play a crucial role in our analysis; hence, to ease the notation, we will occasionally omit the dependence on U and simply write A(S) := A(S, U ). We will further use the notation [A(S)]t := [A(S, U )]t to refer to wt. Without loss of generality, we will assume that the training algorithm is always initialized with zeros, i.e., [A(S)]0 = 0 ∈ Rd, for all S ∈ Zn. Finally, we deﬁne the collection of the parameters given in a trajectory, as the image of A(S), i.e., WS := {w ∈ Rd : ∃t ∈ [0, 1], w = [A(S)]t} and the collection of all possible parameters as the union W := n≥1 S∈Zn WS. Note that W is still random due to its dependence on U .
Uniform Hausdorff dimension and Feller processes. In this part, we introduce the ‘uniform Hausdorff dimension’ property for a training algorithm A, which is a notion of complexity based on the Hausdorff dimension of the trajectories generated by A. By translating [Sch98] into our context, we will then show that decomposable Feller processes possess this property.
Deﬁnition 2. An algorithm A has uniform Hausdorff dimension dH if for any n ∈ N+ and any training set S ∈ Zn
dimH WS = dimH{w ∈ Rd : ∃t ∈ [0, 1], w = [A(S, U )]t} ≤dH, µu-almost surely. (8)

Since WS ⊂ W ⊂ Rd, by the deﬁnition of Hausdorff dimension, any algorithm A possesses the uniform Hausdorff dimension property trivially with dH = d. However, as we will illustrate in the sequel, dH can be much smaller than d, which is of our interest in this study.
Proposition 1. Let {W(S)}S∈Zn be a family of Feller processes. Assume that for each S, W(S) is decomposable at a point wS with sub-symbol ψS. Consider the algorithm A that returns [A(S)]t = Wt(S) for a given S ∈ Zn and for every t ∈ [0, 1]. Then, we have

dimH WS ≤ βS,

where

βS := inf

λ

≥

0

:

lim

ξ

→∞

|ψS (ξ)| ξλ

=

0

,

(9)

µu-almost surely. Furthermore, A has uniform Hausdorff dimension with dH = supn supS∈Zn βS.

We provide all the proofs in the supplementary document. Informally, this result can be interpreted as follows. Thanks to the decomposability property, for each S, the process W(S) behaves like a
Lévy motion around wS, and the characteristic exponent is given by the sub-symbol ψS. Because of this locally regular behavior, the Hausdorff dimension of the image of W(S) can be bounded by βS, which only depends on tail behavior of the Lévy process whose exponent is the sub-symbol ψS.
Example 1. In order to illustrate Proposition 1, let us consider a simple example, where Wt(S) is taken as the d-dimensional α-stable process with d ≥ 2, which is independent of the data sample S. More precisely, Wt(S) is the solution to the SDE given by dWt(S) = dLαt for some α ∈ (0, 2], where Lα1 is an elliptically-contoured α-stable random vector. As Wt(S) is already a Lévy process, it trivially satisﬁes the assumptions of Proposition 1 with βS = α for all n and S [BG60], hence dimH WS ≤ α, µu-almost surely (in fact, one can show that dimH WS = α, see [BG60], Theorem

3Note that this prevents adaptive minibatching algorithms e.g., [AB99] to be represented in our framework.

6

4.2). Hence, the ‘algorithm’ [A(S)]t = Wt(S) has uniform Hausdorff dimension dH = α. This shows that as the process becomes heavier-tailed (i.e., α decreases), the Hausdorff dimension dH
gets smaller. This behavior is illustrated in Figure 1.

The term βS is often termed as the upper Blumenthal-Getoor (BG) index of the Lévy process with an exponent ψS [BG60], and it is directly related to the tail-behavior of the corresponding Lévy measure. In general, the value of βS decreases as the process gets heavier-tailed, which implies that the heavier-tailed processes have smaller Hausdorff dimension; thus, they have smaller complexity.
Generalization bounds via Hausdorff dimension. This part provides the main contribution of this paper, where we show that the generalization error of a training algorithm can be controlled by the Hausdorff dimension of its trajectories. Even though our interest is still in the case where A is chosen as a Feller process, the results in this section apply to more general algorithms. To this end, we will be mainly interested in bounding the following object:
supt∈[0,1] |Rˆ([A(S)]t, S) − R([A(S)]t)| = supw∈WS |Rˆ(w, S) − R(w)|, (10)
with high probability over the choice of S and U . Note that this is an algorithm dependent deﬁnition of generalization that is widely used in the literature (see [BE02] for a detailed discussion).
To derive our ﬁrst result, we will require the following assumptions.
H 1. is bounded by B and L-Lipschitz continuous in w.
H 2. The diameter of W is ﬁnite µu-almost surely. S and U are independent.
H 3. A has uniform Hausdorff dimension dH. H 4. For µu-almost every W, there exists a Borel measure µ on Rd and positive numbers a, b, r0 and s such that 0 < µ(W) ≤ µ Rd < ∞ and 0 < ars ≤ µ(Bd(x, r)) ≤ brs < ∞ for x ∈ W, 0 < r ≤ r0.

Boundedness of the loss can be relaxed at the expense of using sub-Gaussian concentration bounds wanidthinthtreodauscsuinmgpmtioorne ∃coKmp>lex0i,tysuincthotthhaete∀xpp,reEss[io(wns, [zM)pB]1M/p16≤]. KM√orpe,parnecdisbeylyu, Hsin1gcasnubb-eGraepulsasciaend concentration our bounds will still hold with K in place of B. On the other hand, since we have a ﬁnite time-horizon and we ﬁx the initial point of the processes to 0, by using [XZ20] Lemma 7.1, we can show that the ﬁnite diameter condition on W holds almost surely, if standard regularity assumptions hold uniformly on the coefﬁcients of W(S) (i.e., b, Σ, and ν in (6)) for all S ∈ Zn, and a countability condition on Z. Finally H4 is a common condition in fractal geometry, and ensures that the set W is regular enough, so that we can relate its Hausdorff dimension to its covering numbers [Mat99]4. Under these conditions and an additional countability condition on Z (see [BE02] for similar assumptions), we present our ﬁrst main result as follows.
Theorem 1. Assume that H1 to 4 hold, and Z is countable. Then, for a sufﬁciently large n, we have

sup |Rˆ(w, S) − R(w)| ≤ B 2dH log(nL2) + log(1/γ) ,

(11)

w∈WS

n

n

with probability at least 1 − γ over S ∼ µ⊗z n and U ∼ µu.

This theorem shows that the generalization error can be controlled by the uniform Hausdorff dimension of the algorithm A, along with the constants inherited from the regularity conditions. A
noteworthy property of this result is that it does not have a direct dependency on the number of parameters d; on the contrary, we observe that dH plays the role that d plays in standard bounds [AB09], implying that dH acts as the intrinsic dimension and mimics the role of the VC dimension in binary classiﬁcation [SSBD14]. Furthermore, in combination with Proposition 1 that indicates dH decreases as the processes W(S) get heavier-tailed, Theorem 1 implies that the generalization error
can be controlled by the tail behavior of the process: heavier-tails imply less generalization error.

4H4 ensures that the Hausdorff dimension of W coincides with another notion of dimension, called the Minkowski dimension, which is explained in detail in the supplement. We note that for many fractal-like sets, these two notions of dimensions are equal to each other (see [Mat99] Chapter 5), which include α-stable processes (see [Fal04] Chapter16).

7

We note that the countability condition on Z is crucial for Theorem 1. Thanks to this condition, in our proof, we invoke the stability properties of the Hausdorff dimension and we directly obtain a bound on dimH W. This bound combined with H4 allows us to control the covering number of W, and then the desired result can be obtained by using standard covering techniques [AB09, SSBD14]. Besides, the log n dependency of dH is not crucial; in the supplementary document, we show that the log n factor can be replaced with any increasing function (e.g, log log n) by using a chaining argument, with the expense of having L as a multiplying factor (instead of log L). Theorem 1 holds for sufﬁciently large n; however, this threshold is not a-priori known, which is a limitation of the result.

In our second main result, we control the generalization error without the countability assumption on Z, and more importantly we will also relax H3. Our main goal will be to relate the error to the Hausdorff dimension of a single WS, as opposed to dH, which uniformly bounds dimH WS for every S ∈ Zn. In order to achieve this goal, we introduce a technical assumption, which lets us control the statistical dependency between the training set S and the set of parameters WS.

For any δ > 0, let us consider a ﬁnite δ-cover of W by closed balls of radius δ, whose centers are

on the ﬁxed grid

(2j1√+1)δ , . . . , (2jd√+1)δ : ji ∈ Z, i = 1, . . . , d , and collect the center of each

2d

2d

ball in the set Nδ. Then, for each S, let us deﬁne the set Nδ(S) := {x ∈ Nδ : Bd(x, δ) ∩ WS = ∅},

where Bd(x, δ) ⊂ Rd denotes the closed ball centered around x ∈ Rd with radius δ.

H 5. Let Z∞ := (Z × Z × · · · ) denote the countable product endowed with the product topology and let B be the Borel σ-algebra generated by Z∞. Let F, G be the sub-σ-algebras of B generated by

the collections of random variables given by {Rˆ(w, S) : w ∈ W, n ≥ 1} and 1 {w ∈ Nδ(WS)} :

δ ∈ Q>0, w ∈ Nδ, n ≥ 1 respectively. There exists a constant M ≥ 1 such that for any A ∈ F, B ∈ G we have P [A ∩ B] ≤ M P [A] P[B].

This assumption is common in statistics and is sometimes referred to as the ψ-mixing condition, a measure of weak dependence often used in proving limit theorems, see e.g., [Bra83]; yet, it is unfortunately hard to veryify this condition in practice. In our context H5 essentially quantiﬁes the dependence between S and the set WS , through the constant M > 0: smaller M indicates that the dependencce of Rˆ on the training sample S is weaker. This concept is also similar to the mutual information used recently in [XR17, AAV18, RZ19] and to the concept of stability [BE02].
Theorem 2. Assume that H1, 2 and 5 hold, and H4 holds with WS in place of W for all n ≥ 1 and S ∈ Zn, (with s, a, b, r0 can potentially depend on n and S). Then, for n sufﬁciently large, we have

sup

|Rˆ(w, S) − R(w)| ≤ 2B

[dimH WS + 1] log2(nL2) log(7M/γ)

+

,

(12)

w∈WS

n

n

with probability at least 1 − γ over S ∼ µ⊗z n and U ∼ µu.

This result shows that under H5, we can replace dH in Theorem 1 with dimH WS, at the expense of introducing the coupling coefﬁcient M into the bound. We observe that two competing terms
are governing the generalization error: in the case where dimH WS is small, the error is dominated by the coupling parameter M , and vice versa. On the other hand, in the context of Proposition 1, dimH WS ≤ βS, µu-almost surely, implying again that a heavy-tailed W(S) would achieve smaller generalization error as long as the dependency between S and WS is weak.

4 Experiments
We empirically study the generalization behavior of deep neural networks from the Hausdorff dimension perspective. We use VGG networks [SZ15] as they perform well in practice, and their depth (the number of layers) can be controlled directly. We vary the number of layers from D = 4 to D = 19, resulting in the number of parameters d between 1.3M and 20M. We train models on the CIFAR-10 dataset [KH09] using SGD and we choose various stepsizes η, and batch sizes B. We provide full range of parameters and additional implementation details in the supplementary document. The code can be found in https://github.com/umutsimsekli/ Hausdorff-Dimension-and-Generalization.

8

TrainAcc - TestAcc (%) Test Accuracy (%)

35

30

25

D=4

D=11

D=6

D=16

20

D=7

D=19

D=8

0.75 1B.l0u0men1t.h2a5l-Ge1t.o5o0r Ind1e.7x5( S)2.00 2.25

80

D=4

D=11

D=6

D=16

D=7

D=19

75

D=8

70

65

0.75 1B.l0u0men1t.h2a5l-Ge1t.o5o0r Ind1e.7x5( S)2.00 2.25

(a) Generalization Error

(b) Test Accuracy

Figure 2: Empirical study of generalization behavior on VGG[SZ15] networks with various depth values (the number of layers are shown as D). As our theory predicts, the generalization error is strongly correlated with βS. As βS ∈ (0, 2], the estimates exceeding 2 is an artifact of the estimator.

We assume that SGD can be well-approximated by the process (4). Hence, to bound the corresponding dimH WS to be used in Theorem 2, we invoke Proposition 1, which relies on the existence of a point wS around which the process behaves like a regular Lévy process with exponent ψS. Considering the empirical observation that SGD exhibits a ‘diffusive behavior’ around a local minimum [BJSG+18], we take wS to be the local minimum found by SGD and assume that the conditions of Proposition 1 hold around that point. This perspective indicates that the generalization error can be controlled by the BG index βS of the Lévy process deﬁned by ψS(ξ); the sub-symbol of the process (4) around wS.
Estimating the BG index for a general Lévy process is a challenging task; however, the choice of the SDE (4) imposes some structure on ψS, which lets us express βS in a simpler form. Inspired by the observation that the tail-index of the gradient noise in a multi-layer neural network differs from layer to layer, as reported in [S¸ GN+19], we will assume that, around the local minimum wS, the dynamics of SGD will be similar to the Lévy motion with frozen coefﬁcients: Σ2(wS)Lα(wS), see (4) for deﬁnitions. We will further impose that, around wS, the coordinates corresponding to the same layer l have the same tail-index αl. Under this assumption, the BG index can be analytically computed as βS = maxl αl ∈ (0, 2] [MX05, Hen73]. While the range (0, 2] might seem narrow at the ﬁrst sight, we note that dimH WS; hence βS determines the order of the generalization error and this parameter gets closer to 0 with more layers added to the network (see Figure 2). Thanks to this simpliﬁcation, we can easily compute βS, by ﬁrst estimating each αl by using the estimator proposed in [MMO15], which can efﬁciently estimate αl by using multiple SGD iterates.
We trained all the models for 100 epochs and computed their βS over the last epoch, assuming that the iterations reach near local minima. We monitor the generalization error in terms of the difference between the training and test accuracy with respect to the estimated βS in Figure 2(a). We also plot the ﬁnal test accuracy in Figure 2(b). Test accuracy results validate that the models perform similarly to the state-of-the-art, which suggests that the empirical study matches the practically relevant application settings. Results in Figure 2(a) indicate that, as predicted by our theory, the generalization error is strongly correlated with βS, which is an upper-bound of the Hausdorff dimension. With increasing βS (implying increasing Hausdorff dimension), the generalization error increases, as our theory indicates. Moreover, the resulting behavior validates the importance of considering dimH WS as opposed to ambient Euclidean dimension: for example, the number of parameters in the 4-layer network is signiﬁcantly lower than other networks; however, its Hausdorff dimension as well as generalization error are signiﬁcantly higher. Even more importantly, there is no monotonic relationship between the number of parameters and dimH WS. In other words, increasing depth is not always beneﬁcial from the generalization perspective. It is only beneﬁcial if it also decreases dimH WS. We also observe an interesting behavior: the choice of η and B seems to affect βS, indicating that the choice of the algorithm parameters can impact the tail behavior of the algorithm. In summary, our theory holds over a large selection of depth, step-sizes, and batch sizes when tested on deep neural networks. We provide additional experiments, both real and synthetic, over a collection of model classes in the supplementary document.

5 Conclusion
In this paper, we rigorously tied the generalization in a learning task to the tail properties of the underlying training algorithm, shedding light on an empirically observed phenomenon. We established

9

this relationship through the Hausdorff dimension of the SDE approximating the algorithm, and proved a generalization error bound based on this notion of complexity. Unlike the standard ambient dimension, our bounds do not necessarily grow with the number of parameters in the network, and they solely depend on the tail behavior of the training process, providing an explanation for the implicit regularization effect of heavy-tailed SGD.

Broader Impact
Our work is largely theoretical, studying the generalization properties of deep networks. Our results suggest that the fractal structure and the fractal dimensions of deep learning models can be an accurate metric for the generalization error; hence, in a broader context, we believe that our theory would be useful for practitioners using deep learning tools. On the other hand, our work does not have a direct ethical or societal consequence due to its theoretical nature.

Acknowledgments and Disclosure of Funding
In an earlier version of the manuscript (published at NeurIPS 2020), we identiﬁed an imprecision in Deﬁnition 2 and a mistake in the statement and the proof of Theorem 2, which are now ﬁxed. The authors are grateful to Berﬁn S¸ ims¸ek and Xiaochuan Yang for fruitful discussions, and thank Vaishnavh Nagarajan for pointing out the imprecision in Deﬁnition 2. The contribution of U.S¸ . to this work is partly supported by the French National Research Agency (ANR) as a part of the FBIMATRIX (ANR-16-CE23-0014) project.

References

[AAV18]

Amir Asadi, Emmanuel Abbe, and Sergio Verdú. Chaining mutual information and tightening generalization bounds. In Advances in Neural Information Processing Systems, pages 7234–7243, 2018.

[AB99]

Siu-Kui Au and James L Beck. A new adaptive importance sampling scheme for reliability calculations. Structural Safety, 21(2):135–158, 1999.

[AB09]

Martin Anthony and Peter L Bartlett. Neural network learning: Theoretical foundations. cambridge university press, 2009.

[Ama98] Shun-Ichi Amari. Natural gradient works efﬁciently in learning. Neural computation, 10(2):251–276, 1998.

[Ass83]

Patrick Assouad. Densité et dimension. In Annales de l’Institut Fourier, volume 33, pages 233–282, 1983.

[AZL19]

Zeyuan Allen-Zhu and Yuanzhi Li. Can sgd learn recurrent neural networks with provable generalization? In Advances in Neural Information Processing Systems, pages 10331–10341, 2019.

[AZLL19] Zeyuan Allen-Zhu, Yuanzhi Li, and Yingyu Liang. Learning and generalization in overparameterized neural networks, going beyond two layers. In Advances in neural information processing systems, pages 6155–6166, 2019.

[BB18]

Anas Barakat and Pascal Bianchi. Convergence and dynamical behavior of the adam algorithm for non convex stochastic optimization. arXiv preprint:1810.02263, 2018.

[BE02]

Olivier Bousquet and André Elisseeff. Stability and generalization. JMLR, 2(Mar), 2002.

[BG60]

Robert M Blumenthal and Ronald K Getoor. Some theorems on stable processes. Transactions of the American Mathematical Society, 95(2):263–273, 1960.

[BJSG+18] Marco Baity-Jesi, Levent Sagun, Mario Geiger, Stefano Spigler, Gerard Ben Arous, Chiara Cammarota, Yann LeCun, Matthieu Wyart, and Giulio Biroli. Comparing dynamics: Deep neural networks versus glassy systems. In Proceedings of the 35th International Conference on Machine Learning, volume 80 of Proceedings of Machine Learning Research, pages 314–323, 10–15 Jul 2018.

[Bog07] Vladimir I Bogachev. Measure theory, volume 1. Springer, 2007.

10

[BP17] [Bra83] [BSW13] [Cou65]
[CS18] [Dal17] [DDB19]
[DR17]
[DSD19] [EH20]
[EM15] [EMG90] [EMS18]
[Fal04] [FFP20] [GGZ18]
[GSZ20] [HDS18] [Hen73] [HLLL17] [HM20] [HS97]

Christopher J Bishop and Yuval Peres. Fractals in probability and analysis. Cambridge University Press, 2017.
Richard C Bradley. On the ψ-mixing condition for stationary random sequences. Transactions of the American Mathematical Society, 276(1):55–66, 1983.
B Böttcher, R Schilling, and J Wang. Lévy matters. iii. lévy-type processes: construction, approximation and sample path properties. Lecture Notes in Mathematics, 2099, 2013. Philippe Courrege. Sur la forme intégro-différentielle des opérateurs de c∞ k dans c satisfaisant au principe du maximum. Séminaire Brelot-Choquet-Deny. Théorie du Potentiel, 10(1):1–38, 1965.
P. Chaudhari and S. Soatto. Stochastic gradient descent performs variational inference, converges to limit cycles for deep networks. In ICLR, 2018.
Arnak S Dalalyan. Theoretical guarantees for approximate sampling from smooth and log-concave densities. Journal of the Royal Statistical Society, 79(3):651–676, 2017.
Aymeric Dieuleveut, Alain Durmus, and Francis Bach. Bridging the gap between constant step size stochastic gradient descent and markov chains. The Annals of Statistics (to appear), 2019.
Gintare Karolina Dziugaite and Daniel M Roy. Computing nonvacuous generalization bounds for deep (stochastic) neural networks with many more parameters than training data. arXiv preprint arXiv:1703.11008, 2017.
Nadav Dym, Barak Sober, and Ingrid Daubechies. Expression of fractals through neural network functions. arXiv preprint:1905.11345, 2019.
Murat A Erdogdu and Rasa Hosseinzadeh. On the convergence of langevin monte carlo: The interplay between tail growth and smoothness. arXiv preprint arXiv:2005.13097, 2020.
Murat A Erdogdu and Andrea Montanari. Convergence rates of sub-sampled newton methods. arXiv preprint:1508.02810, 2015.
GA Edgar, Topology Measure, and Fractal Geometry. Undergraduate texts in mathematics, 1990.
Murat A Erdogdu, Lester Mackey, and Ohad Shamir. Global non-convex optimization with discretized diffusions. In Advances in Neural Information Processing Systems, pages 9671–9680, 2018.
Kenneth Falconer. Fractal geometry: mathematical foundations and applications. John Wiley & Sons, 2004.
Stefano Favaro, Sandra Fortini, and Stefano Peluchetti. Stable behaviour of inﬁnitely wide deep neural networks. In AISTATS, 2020.
Xuefeng Gao, Mert Gürbüzbalaban, and Lingjiong Zhu. Global convergence of stochastic gradient hamiltonian monte carlo for non-convex stochastic optimization: Non-asymptotic performance bounds and momentum-based acceleration. arXiv preprint:1809.04618, 2018.
Mert Gurbuzbalaban, Umut Simsekli, and Lingjiong Zhu. The heavy-tail phenomenon in sgd. arXiv preprint arXiv:2006.04740, 2020.
Qiao Huang, Jinqiao Duan, and Renming Song. Homogenization of stable-like feller processes. arXiv preprint:1812.11624, 2018.
WJ Hendricks. A dimension theorem for sample functions of processes with stable components. The Annals of Probability, pages 849–853, 1973.
W. Hu, C. J. Li, L. Li, and J.-G. Liu. On the diffusion approximation of nonconvex stochastic gradient descent. arXiv preprint:1705.07562, 2017.
Liam Hodgkinson and Michael W Mahoney. Multiplicative noise and heavy tails in stochastic optimization. arXiv preprint arXiv:2006.06293, 2020.
Sepp Hochreiter and Jürgen Schmidhuber. Flat minima. Neural Computation, 9(1):1–42, 1997.

11

[IP06]

Peter Imkeller and Ilya Pavlyukevich. First exit times of sdes driven by stable lévy processes. Stochastic Processes and their Applications, 116(4):611–642, 2006.

[Jac02]

Niels Jacob. Pseudo Differential Operators And Markov Processes: Volume II: Generators and Their Potential Theory. World Scientiﬁc, 2002.

[JKA+17] S. Jastrzebski, Z. Kenton, D. Arpit, N. Ballas, A. Fischer, Y. Bengio, and A. Storkey. Three factors inﬂuencing minima in SGD. arXiv preprint:1711.04623, 2017.

[KH09]

Alex Krizhevsky and Geoffrey Hinton. Learning multiple layers of features from tiny images. 2009.

[Kho09]

Davar Khoshnevisan. From fractals and probability to lévy processes and stochastic pdes. In Fractal Geometry and Stochastics IV, pages 111–141. Springer, 2009.

[KL17]

Ilja Kuzborskij and Christoph H Lampert. Data-dependent stability of stochastic gradient descent. arXiv preprint arXiv:1703.01678, 2017.

[KX17]

Davar Khoshnevisan and Yimin Xiao. On the macroscopic fractal geometry of some random sets. In Stochastic Analysis and Related Topics, pages 179–206. Springer, 2017.

[Lév37] P. Lévy. Théorie de l’addition des variables aléatoires. Gauthiers-Villars, Paris, 1937.

[LG19]

Ronan Le Guével. The hausdorff dimension of the range of the lévy multistable processes. Journal of Theoretical Probability, 32(2):765–780, 2019.

[Lon17]

Ben London. A pac-bayesian analysis of randomized learning with application to stochastic gradient descent. In Advances in Neural Information Processing Systems, pages 2931–2940, 2017.

[LPH+17] Xiaoyu Lu, Valerio Perrone, Leonard Hasenclever, Yee Whye Teh, and Sebastian Vollmer. Relativistic Monte Carlo. In AISTATS, 2017.

[LY19]

József Lo˝rinczi and Xiaochuan Yang. Multifractal properties of sample paths of ground state-transformed jump processes. Chaos, Solitons & Fractals, 120:83–94, 2019.

[Mat99]

Pertti Mattila. Geometry of sets and measures in Euclidean spaces: fractals and rectiﬁability. Cambridge university press, 1999.

[MBM16] Song Mei, Yu Bai, and Andrea Montanari. The landscape of empirical risk for nonconvex losses. arXiv preprint arXiv:1607.06534, 2016.

[MHB16] S. Mandt, M. Hoffman, and D. Blei. A variational analysis of stochastic gradient algorithms. In ICML, 2016.

[MM19]

Charles H Martin and Michael W Mahoney. Traditional and heavy-tailed self regularization in neural network models. In ICML, 2019.

[MMO15] Mohammad Mohammadi, Adel Mohammadpour, and Hiroaki Ogata. On estimating the tail index and the spectral measure of multivariate α-stable distributions. Metrika, 78(5):549–561, 2015.

[MSS19] Eran Malach and Shai Shalev-Shwartz. Is deeper better only when shallow is good? In NeurIPS, 2019.

[MWZZ17] Wenlong Mou, Liwei Wang, Xiyu Zhai, and Kai Zheng. Generalization bounds of sgld for non-convex learning: Two theoretical viewpoints. arXiv preprint arXiv:1707.05947, 2017.

[MX05]

Mark M Meerschaert and Yimin Xiao. Dimension results for sample paths of operator stable Lévy processes. Stochastic processes and their applications, 115(1):55–75, 2005.

[NBMS17] Behnam Neyshabur, Srinadh Bhojanapalli, David McAllester, and Nati Srebro. Exploring generalization in deep learning. In NeurIPS, 2017.

[NHD+19] Jeffrey Negrea, Mahdi Haghifam, Gintare Karolina Dziugaite, Ashish Khisti, and Daniel M Roy. Information-theoretic generalization bounds for sgld via data-dependent estimates. In Advances in Neural Information Processing Systems, pages 11015–11025, 2019.

[NS¸ GR19] Thanh Huy Nguyen, Umut S¸ ims¸ekli, Mert Gürbüzbalaban, and Gaël Richard. First exit time analysis of stochastic gradient descent under heavy-tailed gradient noise. In NeurIPS, 2019.

12

[NTS15] [OKL19] [Pav07] [PBL19]
[Pol64] [PSGN19] [RRT17]
[RZ19] [Sat99] [Sch98]
[Sch16] [S¸ GN+19]
[SHTY13]
[SSBD14] [SSG19] [ST94] [SZ15] [S¸ ZTG20]
[Ver19] [Xia03] [XR17] [XZ20]

Behnam Neyshabur, Ryota Tomioka, and Nathan Srebro. Norm-based capacity control in neural networks. In Conference on Learning Theory, pages 1376–1401, 2015.
Antonio Orvieto, Jonas Kohler, and Aurelien Lucchi. The role of memory in stochastic optimization. arXiv preprint:1907.01678, 2019.
Ilya Pavlyukevich. Cooling down lévy ﬂights. Journal of Physics A: Mathematical and Theoretical, 40(41):12299, 2007.
Tomaso Poggio, Andrzej Banburski, and Qianli Liao. Theoretical issues in deep networks: Approximation, optimization and generalization. arXiv preprint arXiv:1908.09375, 2019.
Boris T Polyak. Some methods of speeding up the convergence of iteration methods. USSR Computational Mathematics and Mathematical Physics, 4(5):1–17, 1964.
Abhishek Panigrahi, Raghav Somani, Navin Goyal, and Praneeth Netrapalli. NonGaussianity of stochastic gradient noise. arXiv preprint:1910.09626, 2019.
Maxim Raginsky, Alexander Rakhlin, and Matus Telgarsky. Non-convex learning via stochastic gradient langevin dynamics: a nonasymptotic analysis. arXiv preprint:1702.03849, 2017.
Daniel Russo and James Zou. How much does your data exploration overﬁt? controlling bias via information usage. Transactions on Information Theory, 66(1):302–323, 2019.
Ken-iti Sato. Lévy processes and inﬁnitely divisible distributions. Cambridge university press, 1999.
René L Schilling. Feller processes generated by pseudo-differential operators: On the hausdorff dimension of their sample paths. Journal of Theoretical Probability, 11(2):303–330, 1998.
René L. Schilling. An introduction to lévy and feller processes. In D. Khoshnevisan and R. Schilling, editors, Lévy-type processes to parabolic SPDEs. Birkhäuser, Cham, 2016.
Umut S¸ ims¸ekli, Mert Gürbüzbalaban, Thanh Huy Nguyen, Gaël Richard, and Levent Sagun. On the heavy-tailed theory of stochastic gradient descent for deep neural networks. arXiv preprint arXiv:1912.00018, 2019.
Mahito Sugiyama, Eiju Hirowatari, Hideki Tsuiki, and Akihiro Yamamoto. Learning ﬁgures with the hausdorff metric by fractals—towards computable binary classiﬁcation. Machine learning, 90(1):91–126, 2013.
Shai Shalev-Shwartz and Shai Ben-David. Understanding machine learning: From theory to algorithms. Cambridge University Press, 2014.
Umut Simsekli, Levent Sagun, and Mert Gurbuzbalaban. A tail-index analysis of stochastic gradient noise in deep neural networks. In ICML, 2019.
G. Samorodnitsky and M. S. Taqqu. Stable non-Gaussian random processes: stochastic models with inﬁnite variance, volume 1. CRC press, 1994.
Karen Simonyan and Andrew Zisserman. Very deep convolutional networks for largescale image recognition. In Yoshua Bengio and Yann LeCun, editors, ICLR, 2015.
Umut S¸ ims¸ekli, Lingjiong Zhu, Yee Whye Teh, and Mert Gürbüzbalaban. Fractional underdamped langevin dynamics: Retargeting sgd with momentum under heavy-tailed gradient noise. arXiv preprint:2002.05685, 2020.
Roman Vershynin. High-dimensional probability, 2019.
Yimin Xiao. Random fractals and markov processes. Mathematics Preprint Archive, 2003(6):830–907, 2003.
Aolin Xu and Maxim Raginsky. Information-theoretic analysis of generalization capability of learning algorithms. In NeurIPS, 2017.
Longjie Xie and Xicheng Zhang. Ergodicity of stochastic differential equations with jumps and singular coefﬁcients. In Annales de l’Institut Henri Poincaré, Probabilités et Statistiques, volume 56, pages 175–229. Institut Henri Poincaré, 2020.

13

[Yan18]

Xiaochuan Yang. Multifractality of jump diffusion processes. In Annales de l’Institut Henri Poincaré, Probabilités et Statistiques, volume 54, pages 2042–2074. Institut Henri Poincaré, 2018.

[ZKV+19] Jingzhao Zhang, Sai Praneeth Karimireddy, Andreas Veit, Seungyeon Kim, Sashank J Reddi, Sanjiv Kumar, and Suvrit Sra. Why ADAM beats SGD for attention models. arXiv preprint:1912.03194, 2019.

[ZLZ19]

Yi Zhou, Yingbin Liang, and Huishuai Zhang. Understanding generalization error of sgd in nonconvex optimization. stat, 1050:7, 2019.

[ZWY+19] Zhanxing Zhu, Jingfeng Wu, Bing Yu, Lei Wu, and Jinwen Ma. The anisotropic noise in stochastic gradient descent: Its behavior of escaping from sharp minima and regularization effects. In ICML, 2019.

14

Hausdorff Dimension, Heavy Tails, and Generalization in Neural Networks
SUPPLEMENTARY DOCUMENT

S1 Additional Experimental Results and Implementation Details

S1.1 Comparison with Other Generalization Metrics for Deep Networks

In this section, we empirically analyze the proposed metric with respect to existing generalization metrics, developed for neural networks. Speciﬁcally, we consider the ‘ﬂat minima’ argument of Jastrzevski et al. [JKA+17] and plot the generalization error vs η/B which is the ratio of step size to the batch size. As a second comparison, we use heavy-tailed random matrix theory based metric of Martin and Mahoney [MM19]. We plot the generalization error with respect to each metric in Figure S1. As the results suggest, our metric is the one which correlates best with the empirically observed generalization error. The metric proposed by Martin and Mahoney [MM19] fails for the low number of layers and the resulting behavior is not monotonic. Similarly, η/B captures the relationship for very deep networks (for D = 16&19), however, it fails for other settings.
We also note that the norm-based capacity metrics [NTS15] typically increase with the increasing dimension d, we refer to [NBMS17] for details.

30

35

25

30

20

15

25

D=4

D=11 10

20

D=6 D=7

D=16 D=19

5

D=8

0

0.6 0.8 1B.0lume1n.2thal-1G.e4toor1I.n6dex1(.8S) 2.0 2.2

(a) Hausdorff Dimension [Ours]

D=4 D=6 D=7 D=8 0246
(c) α [MM19]

D=11 D=16 D=19 8 10

D=4

D=11

35

D=6 D=7

D=16 D=19

30 D=8

25

20

10 7

10 6 /B 10 5

10 4

(b) η/B [JKA+17]

Figure S1: Empirical comparison to other capacity metrics.

TrainAcc - TestAcc (%) TrainAcc - TestAcc (%) TrainAcc - TestAcc (%)

S1.2 Synthetic Experiments
We consider a simple synthetic logistic regression problem, where the data distribution is a Gaussian mixture model with two components. Each data point zi ≡ (xi, yi) ∈ Z = Rd × {−1, 1} is generated by simulating the model: yi ∼ Bernoulli(1/2) and xi|yi ∼ N (myi , 100Id), where the means are drawn from a Gaussian: m−1, m1 ∼ N (0, 25Id). The loss function is the logistic loss as (w, z) = log(1 + exp(−yx w)).

n=10

10 1

n=100 n=1000

n=10000

10 2

Training Loss - Test Loss

1.2 1.4 1.6 1.8 2.0

Figure S2: Results on synthetic data.
As for the algorithm, we consider a data-independent multivariate stable process: [A(S)]t = Lαt for any S ∈ Zn, where Lα1 is distributed with an elliptically contoured α-stable distribution with α ∈ (0, 2] (see Section 2): when α = 2, Lαt is just a Brownian motion, as α gets smaller, the process becomes heavier-tailed. By Theorem 4.2 of [BG60], A has the uniform Hausdorff dimension property with dH = α independently from d when d ≥ 2.

15

We set d = 10 and generate points to represent the whole population, i.e., {zi}ni=tot1 with ntot = 100K. Then, for different values of α, we simulate A for t ∈ [0, 1], by using a small step-size η = 0.001 (the total number of iterations is hence 1/η). We ﬁnally draw 20 random sets S with n elements from this population, and we monitor the maximum difference supw∈WS |Rˆ(w, S) − R(w)| for different values of n. We repeat the whole procedure 20 times and report the average values in Figure S2. We observe that the results support Theorems 1 and 2: for every n, the generalization error decreases with decreasing α, hence illustrates the role of the Hausdorff dimension.
S1.3 Implementation Details for the Deep Neural Network Experiments
In this section, we provide the additional details which are skipped in the main text for the sake of space. We use the following VGG-style neural networks with various number of layers as
• VGG4: Conv(512) - ReLU - MaxPool - Linear
• VGG6: Conv(256) - ReLU - MaxPool - Conv(512) - ReLU - MaxPool - Conv(512) - ReLU - MaxPool - Linear
• VGG7: Conv(128) - ReLU - MaxPool - Conv(256) - ReLU - MaxPool - Conv(512) - ReLU - MaxPool - Conv(512) - ReLU - MaxPool - Linear
• VGG8: Conv(64) - ReLU - MaxPool - Conv(128) - ReLU - MaxPool - Conv(256) - ReLU MaxPool - Conv(512) - ReLU - MaxPool - Conv(512) - ReLU - MaxPool - Linear
• VGG11: Conv(64) - ReLU - MaxPool - Conv(128) - ReLU - MaxPool - Conv(256) - ReLU - Conv(256) - ReLU - MaxPool - Conv(512) - ReLU - Conv(512) - ReLU - MaxPool Conv(512) - ReLU - Conv(512) - ReLU - MaxPool - Linear
• VGG16: Conv(64) - ReLU - Conv(64) - ReLU - MaxPool - Conv(128) - ReLU - Conv(128) - ReLU - MaxPool - Conv(256) - ReLU - Conv(256) - ReLU - Conv(256) - ReLU - MaxPool - Conv(512) - ReLU - Conv(512) - ReLU - Conv(512) - ReLU - MaxPool - Conv(512) ReLU - Conv(512) - ReLU - Conv(512) - ReLU - MaxPool - Linear
• VGG19: Conv(64) - ReLU - Conv(64) - ReLU - MaxPool - Conv(128) - ReLU - Conv(128) ReLU - MaxPool - Conv(256) - ReLU - Conv(256) - ReLU - Conv(256) - ReLU - Conv(256) - ReLU - MaxPool - Conv(512) - ReLU - Conv(512) - ReLU - Conv(512) - ReLU - Conv(512) - ReLU - MaxPool - Conv(512) - ReLU - Conv(512) - ReLU - Conv(512) - ReLU - Conv(512) - ReLU - MaxPool - Linear
where all convolutions are noted with the number of ﬁlters in the paranthesis. Moreover, we use the following hyperparameter ranges for step size of SGD: {1e−2, 1e−3, 3e−3, 1e−4, 3e−4, 1e−5, 3e−5} with the batch sizes {32, 64, 128, 256}. All networks are learned with cross entropy loss and ReLU activations, and no additional technique like batch normalization or dropout is used. We will also release the full source code of the experiments.

S2 Representing Optimization Algorithms as Feller Processes

Thanks to the generality of the Feller processes, we can represent multiple popular stochastic optimization algorithms as a Feller process, in addition to SGD. For instance, let us consider the following SDE:

dWt = −Σ0(Wt)∇f (Wt)dt + Σ1(Wt)dBt + Σ2(Wt)dLtα(Wt),

(S1)

where Σ0, Σ1, Σ2 are d × d matrix-valued functions and the tail-index α(·) of Lαt (·) is also allowed to change depending on value of the state Wt. We can verify that this SDE corresponds to a Feller process with b(w) = −Σ0(w)∇f (w), Σ(w) = 2Σ1(w), and an appropriate choice of ν [HDS18]. As we discussed in the main document, we the choice Σ0 = Id can represent SGD with state-dependent Gaussian and/or heavy-tailed noise. Besides, we can choose an appropriate Σ0 in order to be able to represent optimization algorithms that use second-order geometric information, such as natural
gradient [Ama98] or stochastic Newton [EM15] algorithms. On the other hand, by using the SDEs proposed in [GGZ18, S¸ ZTG20, LPH+17, OKL19, BB18], we can further represent momentum-based
algorithms such as SGD with momentum [Pol64] as a Feller process.

16

S3 Decomposable Feller Processes and their Hausdorff Dimension

In our study, we focus on decomposable Feller processes, introduced in [Sch98]. Let us consider a Feller process expressed by its symbol Ψ. We call the process deﬁned by Ψ decomposable at w0, if there exists a point w0 ∈ Rd such that the symbol can be decomposed as

Ψ(w, ξ) = ψ(ξ) + Ψ˜ (w, ξ),

(S2)

where ψ(ξ) := Ψ(w0, ξ) is the sub-symbol and Ψ˜ (w, ξ) = Ψ(w, ξ) − Ψ(w0, ξ) is the reminder term. Let j ∈ Nd0 denote a multi-index5. We assume that there exist functions a, Φj : Rd → R such that the following holds:

• Ψ(x, 0) ≡ 0 • Φ0 ∞ < ∞, and Φj ∈ L1 Rd for all |j| ≤ d + 1.

•

∂

j w

Ψ˜ (w

,

ξ

)

≤ Φj(w)

1 + a2(ξ)

, for all w, ξ ∈ Rd and |j| ≤ d + 1.

• a2(ξ) ≥ κ0 ξ r0 , for ξ large, r0 ∈ (0, 2], and κ0 > 0.

The Hausdorff dimension of the image of a decomposable Feller process is bounded, due to the following result.

Theorem S3 ([Sch98] Theorem 4). Let Ψ(x, ξ) generate a Feller process, denoted by {Wt}t≥0. Assume that Ψ is decomposable at w0 with the sub-symbol ψ. Then, for any given T ∈ R+, we have

dimH W([0, T ]) ≤ β, Px-almost surely,

(S3)

where W([0, T ]) := {w : w = Wt, for some t ∈ [0, T ]} is the image of the process, Px denotes the law of the process {Wt}t≥0 with initial value x, and β is the upper Blumenthal-Getoor index of the Lévy process with the characteristic exponent ψ(ξ), given as follows:

|ψ(ξ)|

β := inf λ ≥ 0 : lim ξ →∞ ξ λ = 0 .

(S4)

S4 Improving the Convergence Rate via Chaining

In this section, we present additional theoretical results. We improve the bound in Theorem 1, in the sense that we replace the log n factor any increasing function.
Theorem S4. Assume that H1 to 4 hold, and Z is countable. Then, for any function ξ : R → R satisfying limx→∞ ρ(x) = ∞, and for a sufﬁciently large n, we have

sup Rˆ(w, S) − R(w) ≤ cLBdiam(W) dHρ(n) + log(1/γ) ,

w∈WS

n

n

with probability at least 1 − γ over S ∼ µ⊗z n and U ∼ µu, where c is an absolute constant.

This result implies that the log n dependency of Theorem 1 can be replaced with any increasing function ρ, at the expense of having the constant diam(W) and having L instead of log L in the bound.

S5 Additional Technical Background

In this section, we will deﬁne the notions that will be used in our proofs. For the sake of completeness we also provide the main theoretical results that will be used in our proofs.

5We use the multi-index convention j = (j1, . . . , jd) with each ji ∈ N0, and we use the notation

∂wj Ψ˜ (w, ξ)

=

∂j1 Ψ˜ (w,ξ) j

···

∂jd Ψ˜ (jw,ξ) , and |j|

=

∂ w11

∂ wdd

d i=1

ji.

17

S5.1 The Minkowski Dimension

In our proofs, in addition to the Hausdorff dimension, we also make use of another notion of dimension, referred to as the Minkowski dimension (also known as the box-counting dimension [Fal04]), which is deﬁned as follows.
Deﬁnition S3. Let G ⊂ Rd be a set and let Nδ(G) be a collection of sets that contains either one of the following:

• The smallest number of sets of diameter at most δ which cover G • The smallest number of closed balls of diameter at most δ which cover G • The smallest number of cubes of side at most δ which cover G • The number of δ-mesh cubes that intersect G • The largest number of disjoint balls of radius δ, whose centers are in G.

Then the lower- and upper-Minkowski dimensions of G are respectively deﬁned as follows:

dimMG := lim infδ→0 log |Nδ(G)| , − log δ

log |Nδ(G)|

dimMG := lim supδ→0 − log δ .

(S5)

In case the dimMG = dimMG, the Minkowski dimension dimM(G) is their common value.

We always have 0 ≤ dimH G ≤ dimMG ≤ dimMG ≤ d where the inequalities can be strict [Fal04].

It is possible to construct examples where the Hausdorff and Minkowski dimensions are different from each other. However, in many interesting cases, these two dimensions often match each other [Fal04]. In this paper, we are interested in such a case, i.e. the case when the Hausdorff and Minkowski dimensions match. The following result identiﬁes the conditions for which the two dimensions match each other, which form the basis of H4:
Theorem S5 ([Mat99] Theorem 5.7). Let A be a non-empty bounded subset of Rd. Suppose there is a Borel measure µ on Rd and there are positive numbers a, b, r0 and s such that 0 < µ(A) ≤ µ Rd < ∞ and

0 < ars ≤ µ(Bd(x, r)) ≤ brs < ∞ for x ∈ A, 0 < r ≤ r0

(S6)

Then dimH A = dimM A = dimMA = s.

S5.2 Egoroff’s Theorem
Egoroff’s theorem is an important result in measure theory and establishes a condition for measurable functions to be uniformly continuous in an almost full-measure set.
Theorem S6 (Egoroff’s Theorem [Bog07] Theorem 2.2.1). Let (X, A, µ) be a space with a ﬁnite nonnegative measure µ and let µ-measurable functions fn be such that µ-almost everywhere there is a ﬁnite limit f (x) := limn→∞ fn(x). Then, for every ε > 0, there exists a set Xε ∈ A such that µ (X\Xε) < ε and the functions fn converge to f uniformly on Xε.

S6 Postponed Proofs
S6.1 Proof of Proposition 1 Proof. Let ΨS denote the symbol of the process W(S). Then, the desired result can obtained by directly applying Theorem S3 on each ΨS.
S6.2 Proof of Theorem 1 We ﬁrst prove the following more general result which relies on dimMW.

18

Lemma S1. Assume that is bounded by B and L-Lipschitz continuous in w. Let W ⊂ Rd be a set with ﬁnite diameter. Then, for n sufﬁciently large, we have

sup |Rˆ(w, S) − R(w)| ≤ B 2dimMW log(nL2) + log(1/γ) ,

(S7)

w∈W

n

n

with probability at least 1 − γ over S ∼ µ⊗z n.

Proof. As is L-Lipschitz, so are R and Rˆ. By using the notation Rˆn(w) := Rˆ(w, S), and by the triangle inequality, for any w ∈ W we have:
|Rˆn(w) − R(w)| = Rˆn (w ) − R (w ) + Rˆn(w) − Rˆn (w ) − R(w) + R (w ) (S8)

≤ Rˆn (w ) − R (w ) + 2L w − w .

(S9)

Now since W has ﬁnite diameter, let us consider a ﬁnite δ-cover of W by balls and collect the center of each ball in the set Nδ := Nδ(W). Then, for each w ∈ W, there exists a w ∈ Nδ, such that w − w ≤ δ. By choosing this w in the above inequality, we obtain:

|Rˆn(w) − R(w)| ≤ Rˆn (w ) − R (w ) + 2Lδ.

(S10)

Taking the supremum of both sides of the above equation yields:

sup |Rˆn(w) − R(w)| ≤ max Rˆn(w) − R(w) + 2Lδ.

w∈W

w∈Nδ

Using the union bound over Nδ, we obtain

(S11)

PS max |Rˆn(w) − R(w)| ≥ ε =PS

|Rˆn(w) − R(w)| ≥ ε

w∈Nδ

w∈Nδ

(S12)

≤

PS |Rˆn(w) − R(w)| ≥ ε .

w∈Nδ

(S13)

Further, for δ > 0, since |Nδ| has ﬁnitely many elements, we can invoke Hoeffding’s inequality for each of the summands on the right hand side and obtain

PS max |Rˆn(w) − R(w)| ≥ ε
w∈Nδ

2nε2 ≤ 2|Nδ| exp − B2

=: γ.

(S14)

Notice that Nδ is a random set, and choosing ε based on |Nδ|, one can obtain a deterministic γ. Therefore, we can plug this back in (S11) and obtain that, with probability at least 1 − γ

sup |Rˆn(w) − R(w)| ≤ B log(2|Nδ|) + log(1/γ) + 2Lδ.

w∈W

2n

2n

(S15)

Now since W ⊂ Rd, dimMW is ﬁnite. Then, for any sequence {δn}n∈N such that limn→∞ δn = 0, we have, ∀ > 0, ∃n > 0 such that n ≥ n implies

log(|Nδ|) ≤ (dimMW +

)

log

(δ

− n

1

).

√

Choosing δn = 1/ nL2 and = dimMW, we have for ∀n ≥ ndimMW ,

log(2|Nδ|) ≤ log(2) + dimMW log(nL2)

and

2 2Lδn = √

.

n

(S16) (S17)

Therefore, we obtain with probability at least 1 − γ

sup |Rˆn(w) − R(w)| ≤B
w∈W

log(2) + dimMW log(nL2) log(1/γ) 2

+

+√ ,

2n

2n

n

(S18)

≤B 2dimMW log(nL2) + log(1/γ) ,

n

n

for sufﬁciently large n. This concludes the proof.

(S19)

19

We now proceed to the proof of Theorem 1.

Proof of Theorem 1. By noticing Zn is countable (since Z is countable) and using the property that dimH ∪i∈NAi = supi∈N dimH Ai (cf. [Fal04], Section 3.2), we observe that

dimH W = dimH

WS = sup dimH WS ≤ dH,

S ∈Z n

S ∈Z n

(S20)

µu-almost surely. Deﬁne the event QR = {diam(W) ≤ R}. On the event QR, by Theorem S5, we have that dimM W = dimMW = dimH W ≤ dH, µu-almost surely.

Now, we observe that

sup |Rˆ(w, S) − R(w)| ≤ sup |Rˆ(w, S) − R(w)|.

w∈WS

w∈W

(S21)

Hence, by deﬁning ε = B 2(dimMWn) log(nL2) + log(n1/γ) , and using the independence of S and U , Lemma S1, and (S20), we write

PS,U sup |Rˆ(w, S) − R(w)| > B
w∈WS

2dH log(nL2) log(1/γ)

+

; QR

n

n

≤ PS,U sup |Rˆ(w, S) − R(w)| > B
w∈W

2dH log(nL2) log(1/γ)

+

; QR

n

n

= PS,U sup |Rˆ(w, S) − R(w)| > B
w∈W

2dH log(nL2) log(1/γ)

+

; dimMW ≤ dH; QR

n

n

≤ PS,U sup |Rˆ(w, S) − R(w)| > ε ; QR .
w∈W

Finally, we let R → ∞ and use dominated convergence theorem to obtain

PS,U sup |Rˆ(w, S) − R(w)| > B
w∈WS

2dH log(nL2) + log(1/γ)

n

n

≤ PS,U sup |Rˆ(w, S) − R(w)| > ε
w∈W
≤ γ,
which concludes the proof.

S6.3 Proof of Theorem 2

Proof. We start by restating our theoretical framework in an equivalent way for mathematical convenience. In particular, consider the (countable) product measure µ∞ z = µz ⊗ µz ⊗ . . . deﬁned on the cylindrical sigma-algebra. Accordingly, denote S ∼ µ∞ z as an inﬁnite sequence of i.i.d. random vectors, i.e., S = (zj)j≥1 with zj ∼i.i.d. µz for all j = 1, 2, . . . . Furthermore, let Sn := (z1, . . . , zn)
be the ﬁrst n elements of S. In this notation, we have S =d Sn and WS =d WSn , where =d denotes equality in distribution. Similarly, we have Rˆn(w) = Rˆ(w, Sn).

Due to the hypotheses and Theorem S5, we have dimMWSn = dimH WSn =: dH(S, n), µu-almost surely. It is easy to verify that the particular forms of the δ-covers and Nδ in H5 still yield the same
Minkowski dimension in (S5). Then by deﬁnition, we have for all S and n:

lim sup log |Nδ(WSn )| = lim sup log |Nr(WSn )| = dH(S, n),

δ→0 log(1/δ)

δ→0 r<δ log(1/r)

µu-almost surely. Hence for each n

f n(S) := sup log |Nr(WSn )| → dH(S, n),

δ

Q r<δ log(1/r)

(S22) (S23)

20

as δ → 0 almost surely, or alternatively, for each n, there exists a set Ωn of full measure such that

lim f n(S) = lim sup log |Nr(WSn )| → dH(S, n),

δ→0 δ

δ→0 Q r<δ log(1/r)

(S24)

for all S ∈ Ωn. Let Ω∗ := ∩nΩn. Then for S ∈ Ω∗ we have that for all n

lim f n(S) = lim sup log |Nr(WSn )| → dH(S, n),

δ→0 δ

δ→0 Q r<δ log(1/r)

(S25)

and therefore, on this set we also have

lim sup 1 min{1, |f n(S) − dH(S, n)|} → 0,

δ→0 n αn

δ

where αn is a monotone increasing sequence such that αn ≥ 1 and αn → ∞. To see why, suppose that we are given a collection of functions {gn(r)}n where r > 0, such that limr→0 gn(r) → 0 for each n. We then have that the inﬁnite dimensional vector (gn(r))n → (0, 0, . . . ) in the product topology on R∞. We can metrize the product topology on R∞ using the metric

d¯(x, y) =

1 min{1, |xn − yn|},

n αn

where x = (xn)n≥1, y = (yn)n≥1, and 1 ≤ αn → ∞ is monotone increasing. Alternatively, notice that if limr→0 gn(r) → 0 for all n, for any > 0 choose N0 such that for n ≥ N0, 1/αn < , and choose r0 such that for r < r0, we have maxn≤N0 |gn(r)| < . Then for r < r0 we have

1 sunp αn min{1, |gn(r)|} ≤ max
≤ max

1

1

ns≤uNp0 αn min{1, |gn(r)|}, ns>uNp0 αn min{1, |gn(r)|}

1 , sup αn n>N0 αn

≤,

where we used that αn ≥ 1. Applying the above reasoning we have that for all S ∈ Ω∗

Fδ(S) := sup 1 min{1, |f n(S) − dH(S, n)|} → 0,

n αn

δ

as δ → 0. By applying Theorem S6 to the collection of random variables {Fδ(S); δ}, for any δ > 0 we can ﬁnd a subset Z ⊂ Z∞, with probability at least 1 − δ under µ∞ z , such that on Z the convergence is uniform, that is

sup sup 1 min{1, |f n(S) − dH(S, n)|} ≤ c(r),

S∈Z n αn

r

where c(r) → 0 as r → 0. Notice that c(r) = c(δ , r), that is it depends on the choice of δ (for any δ , we have limr→0 c(r; δ ) = 0).
As U and S are assumed to be independent, all the following statements hold µu-almost surely, hence we drop the dependence on U to ease the notation. We proceed as in the proof of Lemma S1:

sup |Rˆn(w) − R(w)| ≤ max Rˆn(w) − R(w) + 2Lδ.

w∈WSn

w∈NδSn

Notice that on Z we have that

sup sup 1 min{1, |f n(S) − dH(S, n)|} ≤ c(r),

S∈Z n αn

r

for all r > 0,

(S26)

so in particular for any sequence {δn; n ≥ 0} we have that

{S ∈ Z} ⊆
n

1 min{1, |f n (S) − dH(S, n)|} ≤ c(δn) ,

αn

δn

21

or

{S ∈ Z} ⊆
n

|Nδn (WSn )| ≤ (1/δn)dH(S,n)+αnc(δn) .

Let (δn)n≥0 be a decreasing sequence such that δn ∈ Q for all n and δn → 0. We then have

P max |Rˆn(w) − R(w)| ≥ ε
w∈Nδn (WSn )

≤ P {S ∈ Z} ∩

max |Rˆn(w) − R(w)| ≥ ε

w∈Nδn (WSn )

+δ .

For ρ > 0 and k ∈ N+ let us deﬁne Jk(ρ) := (kρ, (k + 1)ρ] and set ρn := log(1/δn). Furthermore, for any t > 0 deﬁne

ε(t) :=

B2 2n log(1/δn) (t + αnc(δ , δn)) + log(M/δ ) .

Notice that ε(t) is increasing in t. Therefore, we have

P max |Rˆn(w) − R(w)| ≥ ε(dH(S, n))
w∈Nδn (WSn )

≤δ +P

1 dH(S,n)+αnc(δn)

|Nδn (WSn )| ≤ δn

∩

d ρn
=δ + P
k=0

|Nδn (WSn )| ≤

1 dH(S,n)+αnc(δn) δn

max |Rˆn(w) − R(w)| ≥ ε(dH(S, n))
w∈Nδn (WSn )

∩

max |Rˆn(w) − R(w)| ≥ ε(dH(S, n)) ∩ {dH(S, n) ∈ Jk(ρn)}

w∈Nδn (WSn )

d ρn
=δ + P
k=0

|Nδn (WSn )| ≤

1 dH(S,n)+αnc(δn) δn

∩ {dH(S, n) ∈ Jk(ρn)}

∩ {w ∈ Nδn (WSn )} ∩ |Rˆn(w) − R(w)| ≥ ε(dH(S, n))

w∈N (δn)

d ρn
≤δ +

P |Rˆn(w) − R(w)| ≥ ε(kρn)

k=0 w∈Nδn

∩ w ∈ Nδn (WSn ) ∩

|Nδn (WSn )| ≤

1 dH(S,n)+αnc(δn) δn

∩ {dH(S, n) ∈ Jk(ρn)} ,

where we used the fact dH(S, n) ≤ d almost surely, and that on the event dH(S, n) ∈ Jk(ρn), ε(dH(S, n)) ≥ ε(kρn). Notice that the events
w ∈ Nδn (WSn ) , |Nδn (WSn )| ≤ (1/δn)dH(S,n)+αnc(δn) , {dH(S, n) ∈ Jk(ρn)}
are in G. To see why, notice ﬁrst that for any 0 < δ ∈ Q

|Nδ(WSn )| =

1 {w ∈ Nδ(WSn )} ,

w∈Nδ

so |Nδ(WSn )| is G-measurable as a ﬁnite sum of G-measurable variables. From (S23) it can also be seen that dH(S, n) is also G-measurable as a countable supremum of G-measurable random variables. On the other hand, the event {|Rˆn(w) − R(w)| ≥ ε(kρn)} is clearly in F (see H5 for deﬁnitions).

22

Therefore,

P max |Rˆn(w) − R(w)| ≥ ε(dH(S, n)))
w∈Nδn (WSn )

≤δ

+M

d ρn
P
k=0 w∈Nδn

|Rˆn(w) − R(w)| ≥ ε(kρn)

× P w ∈ Nδn (WSn ) ∩ |Nδn (WSn )| ≤

1 dH(S,n)+αnc(δn) δn

∩ {dH(S, n) ∈ Jk(ρn)} ,

≤δ

+ 2M

d

e P ρn

2nε2(kρn )

− B2

k=0

w∈Nδn

w ∈ Nδn (WSn ) ∩

|Nδn (WSn )| ≤

1 dH(S,n)+αnc(δn) δn

∩ {dH(S, n) ∈ Jk(ρn)}

d

≤ δ + 2M e ρn

2nε2(kρn )

− B2

E 1 w ∈ Nδn (WSn )

k=0

w∈Nδn

×1

|Nδn (WSn )| ≤

1 dH(S,n)+αnc(δn) δn

× 1 {dH(S, n) ∈ Jk(ρn)}

≤δ

+ 2M

d

e E ρn

2nε2(kρn )

− B2

k=0

1
w∈Nδn

w ∈ Nδn (WSn )

×1

|Nδn (WSn )| ≤

1 dH(S,n)+αnc(δn) δn

× 1 {dH(S, n) ∈ Jk(ρn)}

≤δ

+ 2M

d

e E ρn

2nε2(kρn )

− B2

k=0

|Nδn (WSn )| × 1

|Nδn (WSn )| ≤

1 dH(S,n)+αnc(δn) δn

× 1 {dH(S, n) ∈ Jk(ρn)}

=δ

+ 2M

d

e E ρn

2nε2(kρn )

− B2

k=0

1 dH(S,n)+αnc(δn) δn × 1 {dH(S, n) ∈ Jk(ρn)} .

Now, notice that the mapping t → ε2(t) is linear, with Lipschitz coefﬁcient

dε2(t) B2 dt = 2n log(1/δn).

Therefore, on the event {dH(S, n) ∈ Jk(ρn)} we have

Hence,

ε2(dH(S, n)) − ε2(kρn) ≤(dH(S, n) − kρn) B2 log(1/δn) 2n
B2 ≤ρn 2n log(1/δn).
ε2(kρn) ≥ ε2 (dH(S, n)) − B2 , 2n

(S27) (S28)

23

where we used the fact that ρn = log(1/δn). Therefore, we have

P max |Rˆn(w) − R(w)| ≥ ε(dH(S, n))
w∈Nδn (WSn )

≤ δ + 2M E ≤ δ + 2M E = δ + 2M E

d

e ρn

2nε2(kρn )

− B2

k=0

1 dH(S,n)+αnc(δn) δn × 1 {dH(S, n) ∈ Jk(ρn)}

d

e ρn

2nε2(d (S,n))

−

H B2

+1

k=0

1 dH(S,n)+αnc(δn) δn × 1 {dH(S, n) ∈ Jk(ρn)}

1 − 2nε2(dH(S,n)) +1 e δ . B2

dH (S,n)+αn c(δn ) n

By the deﬁnition of ε(t), for any S and n, we have that:

2M

e

−

2nε2

(

dH (S B2

,n

))

+1

1 dH(S,n)+αnc(δn) = 2eδ .
δn

Therefore,

P max |Rˆn(w) − R(w)| ≥ ε(dH(S, n)) ≤ (1 + 2e)δ .
w∈Nδn (WSn )

That is, with probability at least 1 − (1 + 2e)δ we have:

max |Rˆn(w) − R(w)| ≤ ε(dH(S, n))
w∈Nδn (WSn )

B2

√

= 2n log( nL) (t + αnc(δ , δn)) + log(M/δ ) .

√ Choosing δn = 1/ nL2 and αn = log(n), for each δ > 0, with probability at least 1 − (1 + 2e)δ

we have

sup |Rˆn(w) − R(w)| ≤ B
w∈WSn

log(√nL) [dH(S, n) + c(δ , δn) log n] + log Mδ 2n

2 +√ ,
n (S29)

where for each δ > 0, we have limn→∞ c(δ , δn) = 0. Hence, for sufﬁciently large n, we have with probability at least 1 − (1 + 2e)δ we have:

sup |Rˆn(w) − R(w)| ≤ 2B
w∈WSn

[dH(S, n) + 1] log2(nL2) + log Mδ . n

(S30)

Setting γ := (1 + 2e)δ and using 1 + 2e < 7, we obtain the desired result. This concludes the proof.

S6.4 Proof of Theorem S4

Similar to the proof of Theorem 1, we ﬁrst prove a more general result where dimMW is ﬁxed.
Lemma S2. Assume that is bounded by B and L-Lipschitz continuous in w. Let W ⊂ Rd be a bounded set with dimMW ≤ dM. For any function ρ : R → R satisfying limx→∞ ρ(x) = ∞ and for a sufﬁciently large n, with probability at least 1 − γ, we have

sup Rˆn(w) − R(w)
w∈W
where c is an absolute constant.

≤ cLBdiam(W)

dMρ(n) + log(1/γ) , n

24

Proof. We deﬁne the empirical process

Gn(w) := Rˆn(w) − R(w) = n1 n (w, zi) − Ez[ (w, z)],
i=1

and we notice that

E[Gn(w)] = 0.

Recall that a random process {G(w)}w∈W on a metric space (W, d) is said to have sub-Gaussian increments if there exists K ≥ 0 such that

G(w) − G(w ) ψ2 ≤ Kd(w, w ),

(S31)

where · ψ2 denotes the sub-Gaussian norm [Ver19]. √
We verify that {Gn(w)}w has sub-Gaussian increments with K = 2L/ n and for the metric being the standard Euclidean metric, d(w, w ) = w − w . To see why this is the case, notice that

1n Gn(w) − Gn(w ) = n [ (w, zi) − (w , zi) − (Ez (w, z) − Ez (w , z))]
i=1

which is a sum of i.i.d. random variables that are uniformly bounded by

| (w, zi) − (w , zi) − (Ez (w, z) − Ez (w , z))| ≤ 2L w − w ,

by the Lipschitz continuity of the loss. Therefore, Hoeffding’s lemma for bounded and centered random variables easily imply that

E {exp [λ (Gn(w) − Gn(w ))]} ≤ exp 2λ2 L2 w − w 2 , n
√ thus, we have Gn(w) − Gn(w ) ψ2 ≤ (2L/ n) w − w .

(S32)

Next, deﬁne the sequence δk = 2−k and notice that we have δk ↓ 0. Dudley’s tail bound (see for example [Ver19, Thm. 8.1.6]) for this empirical process implies that, with probability at least 1 − γ,
we have

L sup (Gn(w) − Gn(w )) ≤ C √ SW +

w,w ∈W

n

log(2/γ )diam(W )

(S33)

where C is an absolute constant and
SW = δk
k∈Z

log |Nδk (W)|.

In order to apply Dudley’s lemma, we need to bound the above summation. For that, choose κ0 such that
2κ0 ≥ diam(W) > 2κ0−1,
and any strictly increasing function ρ : R → R.
Now since dimMW ≤ dM, for the sequence {δk}k∈N, and for a sufﬁciently large n, whenever k ≥ ρ(n) , we have
log |Nδk (W)| ≤2dM log(δk−1) = log(4)dMk.
By splitting the entropy sum in Dudley’s tail inequality in two terms, we obtain

SW = δk log |Nδk (W)|

k∈Z

ρ(n)

∞

=

δk log |Nδk (W)| +

δk

k=−κ0

k= ρ(n)

log |Nδk (W)|.

25

For the ﬁrst term on the right hand side, we use the monotonicity of covering numbers, i.e. |Nδk | ≤ |Nδl | for k ≤ l, and write

ρ(n)
δk
k=−κ0

log |Nδk (W)| ≤ ≤ ≤

ρ(n)

log |Nδ ρ(n) (W)|

δk

k=−κ0

∞

log(4)dM ρ(n)

δk

k=−κ0

log(4)dMρ(n)2κ0+1

≤4diam(W) log(4)dMρ(n).

For the second term on the right hand side, we have

∞
δk
k= ρ(n)

log |Nδk (W)| ≤ ≤

∞√

log(4)dM

kδk

k= ρ(n)

∞

log(4)dM kδk

k=0

=2 log(4)dM.

Combining these, we obtain

SW ≤ 2 log(4)dM 1 + 2diam(W) ρ(n) .

Plugging this bound back in Dudley’s tail bound (S33), we obtain

dMρ(n) + log(2/γ)

sup (Gn(w) − Gn(w )) ≤ CLdiam(W)

√

.

w,w ∈W

n

Now ﬁx w0 ∈ W and write the triangle inequality,

sup Gn(w) ≤ sup (Gn(w) − Gn(w )) + Gn(w0).

w∈W

w,w ∈W

Clearly for a ﬁxed w0 ∈ W, we can apply Hoeffding’s inequality and obtain that, with probability at least 1 − γ,

log(2/γ)

Gn(w0) ≤ B

. n

Combining this with the previous result, we have with probability at least 1 − 2γ

√ dM
sup Gn(w) ≤ CLdiam(W)
w∈W

KdM + √ n

log(2/γ) +B

log(2/γ) .
n

Finally replacing and γ with γ/2 and collecting the absolute constants in c, we conclude the proof.

Proof of Theorem S4. The proof follows the same lines of the proof of Theorem 1, except that we invoke Lemma S2 instead of Lemma S1.

26

