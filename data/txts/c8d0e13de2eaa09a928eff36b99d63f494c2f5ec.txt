A Syntactic Neural Model for General-Purpose Code Generation

Pengcheng Yin Language Technologies Institute
Carnegie Mellon University pcyin@cs.cmu.edu

Graham Neubig Language Technologies Institute
Carnegie Mellon University gneubig@cs.cmu.edu

arXiv:1704.01696v1 [cs.CL] 6 Apr 2017

Abstract
We consider the problem of parsing natural language descriptions into source code written in a general-purpose programming language like Python. Existing datadriven methods treat this problem as a language generation task without considering the underlying syntax of the target programming language. Informed by previous work in semantic parsing, in this paper we propose a novel neural architecture powered by a grammar model to explicitly capture the target syntax as prior knowledge. Experiments ﬁnd this an effective way to scale up to generation of complex programs from natural language descriptions, achieving state-of-the-art results that well outperform previous code generation and semantic parsing approaches.
1 Introduction
Every programmer has experienced the situation where they know what they want to do, but do not have the ability to turn it into a concrete implementation. For example, a Python programmer may want to “sort my list in descending order,” but not be able to come up with the proper syntax sorted(my list, reverse=True) to realize his intention. To resolve this impasse, it is common for programmers to search the web in natural language (NL), ﬁnd an answer, and modify it into the desired form (Brandt et al., 2009, 2010). However, this is time-consuming, and thus the software engineering literature is ripe with methods to directly generate code from NL descriptions, mostly with hand-engineered methods highly tailored to speciﬁc programming languages (Balzer, 1985; Little and Miller, 2009; Gvero and Kuncak, 2015).

In parallel, the NLP community has developed methods for data-driven semantic parsing, which attempt to map NL to structured logical forms executable by computers. These logical forms can be general-purpose meaning representations (Clark and Curran, 2007; Banarescu et al., 2013), formalisms for querying knowledge bases (Tang and Mooney, 2001; Zettlemoyer and Collins, 2005; Berant et al., 2013) and instructions for robots or personal assistants (Artzi and Zettlemoyer, 2013; Quirk et al., 2015), among others. While these methods have the advantage of being learnable from data, compared to the programming languages (PLs) in use by programmers, the domainspeciﬁc languages targeted by these works have a schema and syntax that is relatively simple.
Recently, Ling et al. (2016) have proposed a data-driven code generation method for high-level, general-purpose PLs like Python and Java. This work treats code generation as a sequence-tosequence modeling problem, and introduce methods to generate words from character-level models, and copy variable names from input descriptions. However, unlike most work in semantic parsing, it does not consider the fact that code has to be well-deﬁned programs in the target syntax.
In this work, we propose a data-driven syntaxbased neural network model tailored for generation of general-purpose PLs like Python. In order to capture the strong underlying syntax of the PL, we deﬁne a model that transduces an NL statement into an Abstract Syntax Tree (AST; Fig. 1(a), § 2) for the target PL. ASTs can be deterministically generated for all well-formed programs using standard parsers provided by the PL, and thus give us a way to obtain syntax information with minimal engineering. Once we generate an AST, we can use deterministic generation tools to convert the AST into surface code. We hypothesize that such a structured approach has two beneﬁts.

Production Rule Call → expr[func] expr*[args] keyword*[keywords]
If → expr[test] stmt*[body] stmt*[orelse]
For → expr[target] expr*[iter] stmt*[body] stmt*[orelse]
FunctionDef → identiﬁer[name] arguments*[args] stmt*[body]

Role Function Call If Statement For Loop Function Def.

Explanation func: the function to be invoked args: arguments list keywords: keyword arguments list test: condition expression body: statements inside
the If clause orelse: elif or else statements target: iteration variable iter: enumerable to iterate
over body: loop body orelse: else statements name: function name args: function arguments body: function body

Table 1: Example production rules for common Python statements (Python Software Foundation, 2016)

First, we hypothesize that structure can be used to constrain our search space, ensuring generation of well-formed code. To this end, we propose a syntax-driven neural code generation model. The backbone of our approach is a grammar model (§ 3) which formalizes the generation story of a derivation AST into sequential application of actions that either apply production rules (§ 3.1), or emit terminal tokens (§ 3.2). The underlying syntax of the PL is therefore encoded in the grammar model a priori as the set of possible actions. Our approach frees the model from recovering the underlying grammar from limited training data, and instead enables the system to focus on learning the compositionality among existing grammar rules. Xiao et al. (2016) have noted that this imposition of structure on neural models is useful for semantic parsing, and we expect this to be even more important for general-purpose PLs where the syntax trees are larger and more complex.
Second, we hypothesize that structural information helps to model information ﬂow within the neural network, which naturally reﬂects the recursive structure of PLs. To test this, we extend a standard recurrent neural network (RNN) decoder to allow for additional neural connections which reﬂect the recursive structure of an AST (§ 4.2). As an example, when expanding the node in Fig. 1(a), we make use of the information from both its parent and left sibling (the dashed rectangle). This enables us to locally pass information of relevant code segments via neural network connections, resulting in more conﬁdent predictions.
Experiments (§ 5) on two Python code generation tasks show 11.7% and 9.3% absolute improvements in accuracy against the state-of-the-art system (Ling et al., 2016). Our model also gives competitive performance on a standard semantic parsing benchmark.
2 The Code Generation Problem
Given an NL description x, our task is to generate the code snippet c in a modern PL based on the in-

tent of x. We attack this problem by ﬁrst generating the underlying AST. We deﬁne a probabilistic grammar model of generating an AST y given x: p(y|x). The best-possible AST yˆ is then given by

yˆ = arg max p(y|x).

(1)

y

yˆ is then deterministically converted to the corresponding surface code c.1 While this paper uses examples from Python code, our method is PLagnostic.
Before detailing our approach, we ﬁrst present a brief introduction of the Python AST and its underlying grammar. The Python abstract grammar contains a set of production rules, and an AST is generated by applying several production rules composed of a head node and multiple child nodes. For instance, the ﬁrst rule in Tab. 1 is used to generate the function call sorted(·) in Fig. 1(a). It consists of a head node of type Call, and three child nodes of type expr, expr* and keyword*, respectively. Labels of each node are noted within brackets. In an AST, non-terminal nodes sketch the general structure of the target code, while terminal nodes can be categorized into two types: operation terminals and variable terminals. Operation terminals correspond to basic arithmetic operations like AddOp.Variable terminal nodes store values for variables and constants of built-in data types2. For instance, all terminal nodes in Fig. 1(a) are variable terminal nodes.

3 Grammar Model

Before detailing our neural code generation method, we ﬁrst introduce the grammar model at its core. Our probabilistic grammar model deﬁnes the generative story of a derivation AST. We factorize the generation process of an AST into sequential application of actions of two types:

• APPLYRULE[r] applies a production rule r to the current derivation tree;
1We use astor library to convert ASTs into Python code. 2bool, float, int, str.

t0 root t1 Expr t2 expr[value] t3 Call

t1

root ↦ Expr

t2

Expr ↦ expr[value]

t3

expr ↦ Call

t4

Call ↦ expr[func] expr*[args] keyword*[keywords]

t4 expr[func] t4 expr*[args] ⋆

t4 keyword*[keywords]

t5 expr ↦ Name

t9

expr* ↦ expr

t14 keyword* ↦ keyword

. . .

t5 Name t6 t7 t8 str(sorted)

t9 expr

t14 keyword

t10 Name t15 t16 t17 str(reverse)

t16 expr[value]

t6 Name ↦ str

t10

expr ↦ Name

t7

[sorted]

t11

Name ↦ str

Action Flow Parent Feeding

t11 t12 t13 str(my_list)

t18 Name t8 t19 t20 t21 str(True)

[</n>]

t12 t13

[my_list] [</n>]

ti Apply Rule ti Generate Token ti GenToken with Copy

Input:

(a)
_

Code:

(b)

(_

,

=

)

Figure 1: (a) the Abstract Syntax Tree (AST) for the given example code. Dashed nodes denote terminals. Nodes are labeled with time steps during which they are generated. (b) the action sequence (up to t14) used to generate the AST in (a)

• GENTOKEN[v] populates a variable terminal node by appending a terminal token v.

Fig. 1(b) shows the generation process of the target AST in Fig. 1(a). Each node in Fig. 1(b) indicates an action. Action nodes are connected by solid arrows which depict the chronological order of the action ﬂow. The generation proceeds in depth-ﬁrst, left-to-right order (dotted arrows represent parent feeding, explained in § 4.2.1).
Formally, under our grammar model, the probability of generating an AST y is factorized as:

T

p(y|x) = p(at|x, a<t),

(2)

t=1

where at is the action taken at time step t, and a<t

is the sequence of actions before t. We will explain

how to compute Eq. (2) in § 4. Put simply, the

generation process begins from a root node at t0,

and proceeds by the model choosing APPLYRULE

actions to generate the overall program structure

from a closed set of grammar rules, then at leaves

of the tree corresponding to variable terminals, the

model switches to GENTOKEN actions to gener-

ate variables or constants from the open set. We

describe this process in detail below.

3.1 APPLYRULE Actions

APPLYRULE actions generate program structure, expanding the current node (the frontier node at time step t: nft) in a depth-ﬁrst, left-to-right traversal of the tree. Given a ﬁxed set of production rules, APPLYRULE chooses a rule r from the subset that has a head matching the type of nft, and uses r to expand nft by appending all child nodes speciﬁed by the selected production. As an

example, in Fig. 1(b), the rule Call → expr. . . expands the frontier node Call at time step t4, and its three child nodes expr, expr* and keyword* are added to the derivation.
APPLYRULE actions grow the derivation AST by appending nodes. When a variable terminal node (e.g., str) is added to the derivation and becomes the frontier node, the grammar model then switches to GENTOKEN actions to populate the variable terminal with tokens.
Unary Closure Sometimes, generating an AST requires applying a chain of unary productions. For instance, it takes three time steps (t9 − t11) to generate the sub-structure expr* → expr → Name → str in Fig. 1(a). This can be effectively reduced to one step of APPLYRULE action by taking the closure of the chain of unary productions and merging them into a single rule: expr* →∗ str. Unary closures reduce the number of actions needed, but would potentially increase the size of the grammar. In our experiments we tested our model both with and without unary closures (§ 5).
3.2 GENTOKEN Actions
Once we reach a frontier node nft that corresponds to a variable type (e.g., str), GENTOKEN actions are used to ﬁll this node with values. For generalpurpose PLs like Python, variables and constants have values with one or multiple tokens. For instance, a node that stores the name of a function (e.g., sorted) has a single token, while a node that denotes a string constant (e.g., a=‘hello world’) could have multiple tokens. Our model copes with both scenarios by ﬁring GENTOKEN actions at one or more time steps. At each time

step, GENTOKEN appends one terminal token to the current frontier variable node. A special </n> token is used to “close” the node. The grammar model then proceeds to the new frontier node.
Terminal tokens can be generated from a predeﬁned vocabulary, or be directly copied from the input NL. This is motivated by the observation that the input description often contains out-ofvocabulary (OOV) variable names or literal values that are directly used in the target code. For instance, in our running example the variable name my list can be directly copied from the the input at t12. We give implementation details in § 4.2.2.
4 Estimating Action Probabilities
We estimate action probabilities in Eq. (2) using attentional neural encoder-decoder models with an information ﬂow structured by the syntax trees.
4.1 Encoder
For an NL description x consisting of n words {wi}ni=1, the encoder computes a context sensitive embedding hi for each wi using a bidirectional Long Short-Term Memory (LSTM) network (Hochreiter and Schmidhuber, 1997), similar to the setting in (Bahdanau et al., 2014). See supplementary materials for detailed equations.
4.2 Decoder
The decoder uses an RNN to model the sequential generation process of an AST deﬁned as Eq. (2). Each action step in the grammar model naturally grounds to a time step in the decoder RNN. Therefore, the action sequence in Fig. 1(b) can be interpreted as unrolling RNN time steps, with solid arrows indicating RNN connections. The RNN maintains an internal state to track the generation process (§ 4.2.1), which will then be used to compute action probabilities p(at|x, a<t) (§ 4.2.2).
4.2.1 Tracking Generation States
Our implementation of the decoder resembles a vanilla LSTM, with additional neural connections (parent feeding, Fig. 1(b)) to reﬂect the topological structure of an AST. The decoder’s internal hidden state at time step t, st, is given by:
st = fLSTM([at−1 : ct : pt : nft ], st−1), (3)
where fLSTM(·) is the LSTM update function. [:] denotes vector concatenation. st will then be used to compute action probabilities p(at|x, a<t) in Eq. (2). Here, at−1 is the embedding of the previous action. ct is a context vector retrieved from

ApplyRule
...
non­terminal
embedding of GenToken[</n>]

GenToken
...
variable terminal
a8 type of nf9 ?

a4

+

s4

p9

s9

s8

ApplyRule[Call] Parent State

embedding of node type expr* nf 9 c9

h1

h2

sort my_list

h3

h4

h5

in descending order

Figure 2: Illustration of a decoder time step (t = 9)

input encodings {hi} via soft attention. pt is a vector that encodes the information of the parent action. nft denotes the node type embedding of the current frontier node nft3. Intuitively, feeding the decoder the information of nft helps the model to keep track of the frontier node to expand. Action Embedding at We maintain two action embedding matrices, WR and WG. Each row in WR (WG) corresponds to an embedding vector for an action APPLYRULE[r] (GENTOKEN[v]). Context Vector ct The decoder RNN uses soft attention to retrieve a context vector ct from the input encodings {hi} pertain to the prediction of the current action. We follow Bahdanau et al. (2014)
and use a Deep Neural Network (DNN) with a sin-
gle hidden layer to compute attention weights. Parent Feeding pt Our decoder RNN uses additional neural connections to directly pass infor-
mation from parent actions. For instance, when computing s9, the information from its parent action step t4 will be used. Formally, we deﬁne the parent action step pt as the time step at which the frontier node nft is generated. As an example, for t9, its parent action step p9 is t4, since nf9 is the node , which is generated at t4 by the APPLYRULE[Call→. . .] action.
We model parent information pt from two sources: (1) the hidden state of parent action spt, and (2) the embedding of parent action apt. pt is the concatenation. The parent feeding schema en-
ables the model to utilize the information of par-
ent code segments to make more conﬁdent predic-
tions. Similar approaches of injecting parent in-
formation were also explored in the SEQ2TREE model in Dong and Lapata (2016)4.
3We maintain an embedding for each node type. 4SEQ2TREE generates tree-structured outputs by condi-

4.2.2 Calculating Action Probabilities
In this section we explain how action probabilities p(at|x, a<t) are computed based on st. APPLYRULE The probability of applying rule r as the current action at is given by a softmax5:

p(at = APPLYRULE[r]|x, a<t) = softmax(WR · g(st)) · e(r) (4)
where g(·) is a non-linearity tanh(W·st +b), and e(r) the one-hot vector for rule r. GENTOKEN As in § 3.2, a token v can be generated from a predeﬁned vocabulary or copied from the input, deﬁned as the marginal probability:

p(at = GENTOKEN[v]|x, a<t) =

p(gen|x, a<t)p(v|gen, x, a<t)

+ p(copy|x, a<t)p(v|copy, x, a<t).

The selection probabilities p(gen|·) and p(copy|·) are given by softmax(WS · st). The probability of generating v from the vocabulary, p(v|gen, x, a<t), is deﬁned similarly as Eq. (4), except that we use the GENTOKEN embedding matrix WG, and we concatenate the context vector ct with st as input. To model the copy probability, we follow recent advances in modeling copying mechanism in neural networks (Gu et al., 2016; Jia and Liang, 2016; Ling et al., 2016), and use a pointer network (Vinyals et al., 2015) to compute the probability of copying the i-th word from the input by attending to input representations {hi}:

p(wi|copy, x, a<t) =

exp(ω(hi, st, ct)) ni =1 exp(ω(hi , st, ct)) ,

where ω(·) is a DNN with a single hidden layer.

Speciﬁcally, if wi is an OOV word (e.g., my list,

which is represented by a special <unk> token in

encoding), we directly copy the actual word wi to

the derivation.

4.3 Training and Inference
Given a dataset of pairs of NL descriptions xi and code snippets ci, we parse ci into its AST yi and decompose yi into a sequence of oracle actions under the grammar model. The model is then optimized by maximizing the log-likelihood of the oracle action sequence. At inference time, we use beam search to approximate the best AST yˆ in Eq. (1). See supplementary materials for the pseudo-code of the inference algorithm.
tioning on the hidden states of parent non-terminals, while our parent feeding uses the states of parent actions.
5We do not show bias terms for all softmax equations.

Dataset
Train Development Test
Avg. tokens in description Avg. characters in code Avg. size of AST (# nodes)

HS
533 66 66
39.1 360.3 136.6

DJANGO
16,000 1,000 1,805
14.3 41.1 17.2

Statistics of Grammar

w/o unary closure

# productions

100 222

# node types

61 96

terminal vocabulary size 1361 6733

Avg. # actions per example 173.4 20.3

w/ unary closure

# productions

100 237

# node types

57 92

Avg. # actions per example 141.7 16.4

IFTTT 77,495 5,171 758 7.4 62.2 7.0
1009 828 0 5.0
– – –

Table 2: Statistics of datasets and associated grammars

5 Experimental Evaluation
5.1 Datasets and Metrics
HEARTHSTONE (HS) dataset (Ling et al., 2016) is a collection of Python classes that implement cards for the card game HearthStone. Each card comes with a set of ﬁelds (e.g., name, cost, and description), which we concatenate to create the input sequence. This dataset is relatively difﬁcult: input descriptions are short, while the target code is in complex class structures, with each AST having 137 nodes on average. DJANGO dataset (Oda et al., 2015) is a collection of lines of code from the Django web framework, each with a manually annotated NL description. Compared with the HS dataset where card implementations are somewhat homogenous, examples in DJANGO are more diverse, spanning a wide variety of real-world use cases like string manipulation, IO operations, and exception handling. IFTTT dataset (Quirk et al., 2015) is a domainspeciﬁc benchmark that provides an interesting side comparison. Different from HS and DJANGO which are in a general-purpose PL, programs in IFTTT are written in a domain-speciﬁc language used by the IFTTT task automation App. Users of the App write simple instructions (e.g., If Instagram.AnyNewPhotoByYou Then Dropbox.AddFileFromURL) with NL descriptions (e.g., “Autosave your Instagram photos to Dropbox”). Each statement inside the If or Then clause consists of a channel (e.g., Dropbox) and a function (e.g., AddFileFromURL)6. This
6Like Beltagy and Quirk (2016), we strip function param-

simple structure results in much more concise ASTs (7 nodes on average). Because all examples are created by ordinary Apps users, the dataset is highly noisy, with input NL very loosely connected to target ASTs. The authors thus provide a high-quality ﬁltered test set, where each example is veriﬁed by at least three annotators. We use this set for evaluation. Also note IFTTT’s grammar has more productions (Tab. 2), but this does not imply that its grammar is more complex. This is because for HS and DJANGO terminal tokens are generated by GENTOKEN actions, but for IFTTT, all the code is generated directly by APPLYRULE actions. Metrics As is standard in semantic parsing, we measure accuracy, the fraction of correctly generated examples. However, because generating an exact match for complex code structures is nontrivial, we follow Ling et al. (2016), and use tokenlevel BLEU-4 with as a secondary metric, deﬁned as the averaged BLEU scores over all examples.7
5.2 Setup
Preprocessing All input descriptions are tokenized using NLTK. We perform simple canonicalization for DJANGO, such as replacing quoted strings in the inputs with place holders. See supplementary materials for details. We extract unary closures whose frequency is larger than a threshold k (k = 30 for HS and 50 for DJANGO). Conﬁguration The size of all embeddings is 128, except for node type embeddings, which is 64. The dimensions of RNN states and hidden layers are 256 and 50, respectively. Since our datasets are relatively small for a data-hungry neural model, we impose strong regularization using recurrent dropouts (Gal and Ghahramani, 2016), together with standard dropout layers added to the inputs and outputs of the decoder RNN. We validate the dropout probability from {0, 0.2, 0.3, 0.4}. For decoding, we use a beam size of 15.
5.3 Results
Evaluation results for Python code generation tasks are listed in Tab. 3. Numbers for our sys-
eters since they are mostly speciﬁc to users. 7These two metrics are not ideal: accuracy only measures
exact match and thus lacks the ability to give credit to semantically correct code that is different from the reference, while it is not clear whether BLEU provides an appropriate proxy for measuring semantics in the code generation task. A more intriguing metric would be directly measuring semantic/functional code equivalence, for which we present a pilot study at the end of this section (cf. Error Analysis). We leave exploring more sophisticated metrics (e.g. based on static code analysis) as future work.

Retrieval System† Phrasal Statistical MT† Hierarchical Statistical MT†
NMT
SEQ2TREE SEQ2TREE–UNK
LPN†
Our system
Ablation Study – frontier embed. – parent feed. – copy terminals + unary closure – unary closure

HS
ACC BLEU
0.0 62.5 0.0 34.1 0.0 43.2
1.5 60.4 1.5 53.4 13.6 62.8 4.5 65.6 16.2 75.8
16.7 75.8 10.6 75.7 3.0 65.7
– 10.1 74.8

DJANGO
ACC BLEU
14.7 18.6 31.5 47.6 9.5 35.9
45.1 63.4 28.9 44.6 39.4 58.2 62.3 77.6 71.6 84.5
70.7 83.8 71.5 84.3 32.3 61.7 70.3 83.3
–

Table 3: Results on two Python code generation tasks. †Results previously reported in Ling et al. (2016).

tems are averaged over three runs. We compare primarily with two approaches: (1) Latent Predictor Network (LPN), a state-of-the-art sequenceto-sequence code generation model (Ling et al., 2016), and (2) SEQ2TREE, a neural semantic parsing model (Dong and Lapata, 2016). SEQ2TREE generates trees one node at a time, and the target grammar is not explicitly modeled a priori, but implicitly learned from data. We test both the original SEQ2TREE model released by the authors and our revised one (SEQ2TREE–UNK) that uses unknown word replacement to handle rare words (Luong et al., 2015). For completeness, we also compare with a strong neural machine translation (NMT) system (Neubig, 2015) using a standard encoder-decoder architecture with attention and unknown word replacement8, and include numbers from other baselines used in Ling et al. (2016). On the HS dataset, which has relatively large ASTs, we use unary closure for our model and SEQ2TREE, and for DJANGO we do not. System Comparison As in Tab. 3, our model registers 11.7% and 9.3% absolute improvements over LPN in accuracy on HS and DJANGO. This boost in performance strongly indicates the importance of modeling grammar in code generation. For the baselines, we ﬁnd LPN outperforms others in most cases. We also note that SEQ2TREE achieves a decent accuracy of 13.6% on HS, which is due to the effect of unknown word replacement, since we only achieved 1.5% without it. A closer
8For NMT, we also attempted to ﬁnd the best-scoring syntactically correct predictions in the size-5 beam, but this did not yield a signiﬁcant improvement over the NMT results in Tab. 3.

Performance

1.0

0.8

BLEU

acc

0.6

0.4

0.2

0.00

10

20

30

40

50

Reference AST Size (# nodes)

Figure 3: Performance w.r.t reference AST size on DJANGO

Performance

1.0

0.8

BLEU

acc

0.6

0.4

0.2

0.050

100

150

200

250

Reference AST Size (# nodes)

Figure 4: Performance w.r.t reference AST size on HS

comparison with SEQ2TREE is insightful for understanding the advantage of our syntax-driven approach, since both SEQ2TREE and our system output ASTs: (1) SEQ2TREE predicts one node each time step, and requires additional “dummy” nodes to mark the boundary of a subtree. The sheer number of nodes in target ASTs makes the prediction process error-prone. In contrast, the APPLYRULE actions of our grammar model allows for generating multiple nodes at a single time step. Empirically, we found that in HS, SEQ2TREE takes more than 300 time steps on average to generate a target AST, while our model takes only 170 steps. (2) SEQ2TREE does not directly use productions in the grammar, which possibly leads to grammatically incorrect ASTs and thus empty code outputs. We observe that the ratio of grammatically incorrect ASTs predicted by SEQ2TREE on HS and DJANGO are 21.2% and 10.9%, respectively, while our system guarantees grammaticality.
Ablation Study We also ablated our bestperforming models to analyze the contribution of each component. “–frontier embed.” removes the frontier node embedding nft from the decoder RNN inputs (Eq. (3)). This yields worse results on DJANGO while gives slight improvements in accuracy on HS. This is probably because that the grammar of HS has fewer node types, and thus the RNN is able to keep track of nft without depending on its embedding. Next, “–parent feed.” removes the parent feeding mechanism. The accuracy drops signiﬁcantly on HS, with a marginal deterioration on DJANGO. This result is interesting because it suggests that parent feeding is more important when the ASTs are larger, which will be the case when handling more complicated code generation tasks like HS. Finally, removing the pointer network (“–copy terminals”) in GENTO-

CHANNEL FULL TREE

Classical Methods posclass (Quirk et al., 2015) LR (Beltagy and Quirk, 2016)

81.4

71.0

88.8

82.5

Neural Network Methods

NMT

87.7

77.7

NN (Beltagy and Quirk, 2016)

88.0

74.3

SEQ2TREE (Dong and Lapata, 2016)

89.7

78.4

Doubly-Recurrent NN

90.1

78.2

(Alvarez-Melis and Jaakkola, 2017)

Our system – parent feed. – frontier embed.

90.0

82.0

89.9

81.1

90.1

78.7

Table 4: Results on the noise-ﬁltered IFTTT test set of “>3 agree with gold annotations” (averaged over three runs), our model performs competitively among neural models.

KEN actions gives poor results, indicating that it is important to directly copy variable names and values from the input.
The results with and without unary closure demonstrate that, interestingly, it is effective on HS but not on DJANGO. We conjecture that this is because on HS it signiﬁcantly reduces the number of actions from 173 to 142 (c.f., Tab. 2), with the number of productions in the grammar remaining unchanged. In contrast, DJANGO has a broader domain, and thus unary closure results in more productions in the grammar (237 for DJANGO vs. 100 for HS), increasing sparsity. Performance by the size of AST We further investigate our model’s performance w.r.t. the size of the gold-standard ASTs in Figs. 3 and 4. Not surprisingly, the performance drops when the size of the reference ASTs increases. Additionally, on the HS dataset, the BLEU score still remains at around 50 even when the size of ASTs grows to 200, indicating that our proposed syntax-driven approach is robust for long code segments. Domain Speciﬁc Code Generation Although this is not the focus of our work, evaluation on IFTTT brings us closer to a standard semantic parsing setting, which helps to investigate similarities and differences between generation of more complicated general-purpose code and and more limiteddomain simpler code. Tab. 4 shows the results, following the evaluation protocol in (Beltagy and Quirk, 2016) for accuracies at both channel and full parse tree (channel + function) levels. Our full model performs on par with existing neural network-based methods, while outperforming other neural models in full tree accuracy (82.0%). This score is close to the best classical method (LR), which is based on a logistic regression

input pred.

<name> Brawl </name> <cost> 5 </cost> <desc> Destroy all minions except one (chosen randomly) </desc> <rarity> Epic </rarity> ...
class Brawl(SpellCard): def init (self): super(). init (’Brawl’, 5, CHARACTER CLASS. WARRIOR, CARD RARITY.EPIC) def use(self, player, game): super().use(player, game) targets = copy.copy(game.other player.minions) targets.extend(player.minions)
fomrinmiionni.odniei(nsetlafr)gets: A

ref. minions = copy.copy(player.minions)

B

minions.extend(game.other player.minions)

if len(minions) > 1:

survivor = game.random choice(minions)

for minion in minions:

if minion is not survivor: minion.die(self)

input join app conﬁg.path and string ’locale’ into a ﬁle path, substitute it for localedir.
pred. localedir = os.path.join( app config.path, ’locale’) 
input self.plural is an lambda function with an argument n, which returns result of boolean expression n not equal to integer 1
pred. self.plural = lambda n: len(n)  ref. self.plural = lambda n: int(n!=1)

Table 5: Predicted examples from HS (1st) and DJANGO. Copied contents (copy probability > 0.9) are highlighted.

model with rich hand-engineered features (e.g., brown clusters and paraphrase). Also note that the performance between NMT and other neural models is much closer compared with the results in Tab. 3. This suggests that general-purpose code generation is more challenging than the simpler IFTTT setting, and therefore modeling structural information is more helpful. Case Studies We present output examples in Tab. 5. On HS, we observe that most of the time our model gives correct predictions by ﬁlling learned code templates from training data with arguments (e.g., cost) copied from input. However, we do ﬁnd interesting examples indicating that the model learns to generalize beyond trivial copying. For instance, the ﬁrst example is one that our model predicted wrong — it generated code block A instead of the gold B (it also missed a function deﬁnition not shown here). However, we ﬁnd that the block A actually conveys part of the input intent by destroying all, not some, of the minions. Since we are unable to ﬁnd code block A in the training data, it is clear that the model has learned to generalize to some extent from multiple training card examples with similar semantics or structure.
The next two examples are from DJANGO. The ﬁrst one shows that the model learns the usage of common API calls (e.g., os.path.join), and

how to populate the arguments by copying from inputs. The second example illustrates the difﬁculty of generating code with complex nested structures like lambda functions, a scenario worth further investigation in future studies. More examples are attached in supplementary materials. Error Analysis To understand the sources of errors and how good our evaluation metric (exact match) is, we randomly sampled and labeled 100 and 50 failed examples (with accuracy=0) from DJANGO and HS, resp. We found that around 2% of these examples in the two datasets are actually semantically equivalent. These examples include: (1) using different parameter names when deﬁning a function; (2) omitting (or adding) default values of parameters in function calls. While the rarity of such examples suggests that our exact match metric is reasonable, more advanced evaluation metrics based on statistical code analysis are deﬁnitely intriguing future work.
For DJANGO, we found that 30% of failed cases were due to errors where the pointer network failed to appropriately copy a variable name into the correct position. 25% were because the generated code only partially implementated the required functionality. 10% and 5% of errors were due to malformed English inputs and preprocessing errors, respectively. The remaining 30% of examples were errors stemming from multiple sources, or errors that could not be easily categorized into the above. For HS, we found that all failed card examples were due to partial implementation errors, such as the one shown in Table 5.
6 Related Work
Code Generation and Analysis Most existing works on code generation focus on generating code for domain speciﬁc languages (DSLs) (Kushman and Barzilay, 2013; Raza et al., 2015; Manshadi et al., 2013), with neural network-based approaches recently explored (Parisotto et al., 2016; Balog et al., 2016). For general-purpose code generation, besides the general framework of Ling et al. (2016), existing methods often use language and task-speciﬁc rules and strategies (Lei et al., 2013; Raghothaman et al., 2016). A similar line is to use NL queries for code retrieval (Wei et al., 2015; Allamanis et al., 2015). The reverse task of generating NL summaries from source code has also been explored (Oda et al., 2015; Iyer et al., 2016). Finally, there are probabilistic models of

source code (Maddison and Tarlow, 2014; Nguyen et al., 2013). The most relevant work is Allamanis et al. (2015), which uses a factorized model to measure semantic relatedness between NL and ASTs for code retrieval, while our model tackles the more challenging generation task. Semantic Parsing Our work is related to the general topic of semantic parsing, where the target logical forms can be viewed as DSLs. The parsing process is often guided by grammatical formalisms like combinatory categorical grammars (Kwiatkowski et al., 2013; Artzi et al., 2015), dependency-based syntax (Liang et al., 2011; Pasupat and Liang, 2015) or task-speciﬁc formalisms (Clarke et al., 2010; Yih et al., 2015; Krishnamurthy et al., 2016; Misra et al., 2015; Mei et al., 2016). Recently, there are efforts in designing neural network-based semantic parsers (Misra and Artzi, 2016; Dong and Lapata, 2016; Neelakantan et al., 2016; Yin et al., 2016). Several approaches have be proposed to utilize grammar knowledge in a neural parser, such as augmenting the training data by generating examples guided by the grammar (Kocisky´ et al., 2016; Jia and Liang, 2016). Liang et al. (2016) used a neural decoder which constrains the space of next valid tokens in the query language for question answering. Finally, the structured prediction approach proposed by Xiao et al. (2016) is closely related to our model in using the underlying grammar as prior knowledge to constrain the generation process of derivation trees, while our method is based on a uniﬁed grammar model which jointly captures production rule application and terminal symbol generation, and scales to general purpose code generation tasks.
7 Conclusion
This paper proposes a syntax-driven neural code generation approach that generates an abstract syntax tree by sequentially applying actions from a grammar model. Experiments on both code generation and semantic parsing tasks demonstrate the effectiveness of our proposed approach.
Acknowledgment
We are grateful to Wang Ling for his generous help with LPN and setting up the benchmark. We also thank Li Dong for helping with SEQ2TREE and insightful discussions.

References
Miltiadis Allamanis, Daniel Tarlow, Andrew D. Gordon, and Yi Wei. 2015. Bimodal modelling of source code and natural language. In Proceedings of ICML. volume 37.
David Alvarez-Melis and Tommi S. Jaakkola. 2017. Tree-structured decoding with doubly recurrent neural networks. In Proceedings of ICLR.
Yoav Artzi, Kenton Lee, and Luke Zettlemoyer. 2015. Broad-coverage CCG semantic parsing with AMR. In Proceedings of EMNLP.
Yoav Artzi and Luke Zettlemoyer. 2013. Weakly supervised learning of semantic parsers for mapping instructions to actions. Transaction of ACL 1(1).
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. 2014. Neural machine translation by jointly learning to align and translate. CoRR abs/1409.0473.
Matej Balog, Alexander L. Gaunt, Marc Brockschmidt, Sebastian Nowozin, and Daniel Tarlow. 2016. Deepcoder: Learning to write programs. CoRR abs/1611.01989.
Robert Balzer. 1985. A 15 year perspective on automatic programming. IEEE Trans. Software Eng. 11(11).
Laura Banarescu, Claire Bonial, Shu Cai, Madalina Georgescu, Kira Grifﬁtt, Ulf Hermjakob, Kevin Knight, Philipp Koehn, Martha Palmer, and Nathan Schneider. 2013. Abstract meaning representation for sembanking. In Proceedings of the 7th Linguistic Annotation Workshop and Interoperability with Discourse, LAW-ID@ACL.
I. Beltagy and Chris Quirk. 2016. Improved semantic parsers for if-then statements. In Proceedings of ACL.
Jonathan Berant, Andrew Chou, Roy Frostig, and Percy Liang. 2013. Semantic parsing on freebase from question-answer pairs. In Proceedings of EMNLP.
Joel Brandt, Mira Dontcheva, Marcos Weskamp, and Scott R. Klemmer. 2010. Example-centric programming: integrating web search into the development environment. In Proceedings of CHI.
Joel Brandt, Philip J. Guo, Joel Lewenstein, Mira Dontcheva, and Scott R. Klemmer. 2009. Two studies of opportunistic programming: interleaving web foraging, learning, and writing code. In Proceedings of CHI.
Stephen Clark and James R. Curran. 2007. Widecoverage efﬁcient statistical parsing with CCG and log-linear models. Computational Linguistics 33(4).
James Clarke, Dan Goldwasser, Ming-Wei Chang, and Dan Roth. 2010. Driving semantic parsing from the world’s response. In Proceedings of CoNLL.

Li Dong and Mirella Lapata. 2016. Language to logical form with neural attention. In Proceedings of ACL.
Yarin Gal and Zoubin Ghahramani. 2016. A theoretically grounded application of dropout in recurrent neural networks. In Proceedings of NIPS.
Jiatao Gu, Zhengdong Lu, Hang Li, and Victor O. K. Li. 2016. Incorporating copying mechanism in sequence-to-sequence learning. In Proceedings of ACL.
Tihomir Gvero and Viktor Kuncak. 2015. Interactive synthesis using free-form queries. In Proceedings of ICSE.
Sepp Hochreiter and Ju¨rgen Schmidhuber. 1997. Long short-term memory. Neural Computation 9(8).
Srinivasan Iyer, Ioannis Konstas, Alvin Cheung, and Luke Zettlemoyer. 2016. Summarizing source code using a neural attention model. In Proceedings of ACL.
Robin Jia and Percy Liang. 2016. Data recombination for neural semantic parsing. In Proceedings of ACL.
Toma´s Kocisky´, Ga´bor Melis, Edward Grefenstette, Chris Dyer, Wang Ling, Phil Blunsom, and Karl Moritz Hermann. 2016. Semantic parsing with semi-supervised sequential autoencoders. In Proceedings of EMNLP.
Jayant Krishnamurthy, Oyvind Tafjord, and Aniruddha Kembhavi. 2016. Semantic parsing to probabilistic programs for situated question answering. In Proceedings of EMNLP.
Nate Kushman and Regina Barzilay. 2013. Using semantic uniﬁcation to generate regular expressions from natural language. In Proceedings of NAACL.
Tom Kwiatkowski, Eunsol Choi, Yoav Artzi, and Luke S. Zettlemoyer. 2013. Scaling semantic parsers with on-the-ﬂy ontology matching. In Proceedings of the EMNLP.
Tao Lei, Fan Long, Regina Barzilay, and Martin C. Rinard. 2013. From natural language speciﬁcations to program input parsers. In Proceedings of ACL.
Chen Liang, Jonathan Berant, Quoc Le, Kenneth D. Forbus, and Ni Lao. 2016. Neural symbolic machines: Learning semantic parsers on freebase with weak supervision. CoRR abs/1611.00020.
Percy Liang, Michael I. Jordan, and Dan Klein. 2011. Learning dependency-based compositional semantics. In Proceedings of ACL.
Wang Ling, Phil Blunsom, Edward Grefenstette, Karl Moritz Hermann, Toma´s Kocisky´, Fumin Wang, and Andrew Senior. 2016. Latent predictor networks for code generation. In Proceedings of ACL.

Greg Little and Robert C. Miller. 2009. Keyword programming in java. Autom. Softw. Eng. 16(1).
Thang Luong, Ilya Sutskever, Quoc V. Le, Oriol Vinyals, and Wojciech Zaremba. 2015. Addressing the rare word problem in neural machine translation. In Proceedings of ACL.
Chris J. Maddison and Daniel Tarlow. 2014. Structured generative models of natural source code. In Proceedings of ICML. volume 32.
Mehdi Hafezi Manshadi, Daniel Gildea, and James F. Allen. 2013. Integrating programming by example and natural language programming. In Proceedings of AAAI.
Hongyuan Mei, Mohit Bansal, and Matthew R. Walter. 2016. Listen, attend, and walk: Neural mapping of navigational instructions to action sequences. In Proceedings of AAAI.
Dipendra K. Misra and Yoav Artzi. 2016. Neural shiftreduce CCG semantic parsing. In Proceedings of EMNLP.
Dipendra Kumar Misra, Kejia Tao, Percy Liang, and Ashutosh Saxena. 2015. Environment-driven lexicon induction for high-level instructions. In Proceedings of ACL.
Arvind Neelakantan, Quoc V. Le, and Ilya Sutskever. 2016. Neural programmer: Inducing latent programs with gradient descent. In Proceedings of ICLR.
Graham Neubig. 2015. lamtram: A toolkit for language and translation modeling using neural networks. http://www.github.com/neubig/lamtram.
Tung Thanh Nguyen, Anh Tuan Nguyen, Hoan Anh Nguyen, and Tien N. Nguyen. 2013. A statistical semantic language model for source code. In Proceedings of ACM SIGSOFT.
Yusuke Oda, Hiroyuki Fudaba, Graham Neubig, Hideaki Hata, Sakriani Sakti, Tomoki Toda, and Satoshi Nakamura. 2015. Learning to generate pseudo-code from source code using statistical machine translation (T). In Proceedings of ASE.
Emilio Parisotto, Abdel-rahman Mohamed, Rishabh Singh, Lihong Li, Dengyong Zhou, and Pushmeet Kohli. 2016. Neuro-symbolic program synthesis. CoRR abs/1611.01855.
Panupong Pasupat and Percy Liang. 2015. Compositional semantic parsing on semi-structured tables. In Proceedings of ACL.
Python Software Foundation. 2016. Python abstract grammar. https://docs.python.org/2/library/ast.html.
Chris Quirk, Raymond J. Mooney, and Michel Galley. 2015. Language to code: Learning semantic parsers for if-this-then-that recipes. In Proceedings of ACL.

Mukund Raghothaman, Yi Wei, and Youssef Hamadi. 2016. SWIM: synthesizing what i mean: code search and idiomatic snippet synthesis. In Proceedings of ICSE.

Mohammad Raza, Sumit Gulwani, and Natasa MilicFrayling. 2015. Compositional program synthesis from natural language and examples. In Proceedings of IJCAI.

Lappoon R. Tang and Raymond J. Mooney. 2001. Using multiple clause constructors in inductive logic programming for semantic parsing. In Proceedings of ECML.

Oriol Vinyals, Meire Fortunato, and Navdeep Jaitly. 2015. Pointer networks. In Proceedings of NIPS.

Yi Wei, Nirupama Chandrasekaran, Sumit Gul-

wani, and Youssef Hamadi. 2015. Build-

ing bing developer assistant.

Techni-

cal report.

https://www.microsoft.com/en-

us/research/publication/building-bing-developer-

assistant/.

Chunyang Xiao, Marc Dymetman, and Claire Gardent. 2016. Sequence-based structured prediction for semantic parsing. In Proceedings of ACL.

Wen-tau Yih, Ming-Wei Chang, Xiaodong He, and Jianfeng Gao. 2015. Semantic parsing via staged query graph generation: Question answering with knowledge base. In Proceedings of ACL.

Pengcheng Yin, Zhengdong Lu, Hang Li, and Ben Kao. 2016. Neural enquirer: Learning to query tables in natural language. In Proceedings of IJCAI.

Luke Zettlemoyer and Michael Collins. 2005. Learning to map sentences to logical form structured classiﬁcation with probabilistic categorial grammars. In Proceedings of UAI.

Supplementary Materials
A Encoder LSTM Equations
Suppose the input natural language description x consists of n words {wi}ni=1. Let wi denote the embedding of wi. We use two LSTMs to process x in forward and backward order, and get the sequence of hidden states {hi}ni=1 and {hi}ni=1 in the two directions:
hi = fL→STM(wi, hi−1) hi = fL←STM(wi, hi+1), where fL→STM and fL←STM are standard LSTM update functions. The representation of the i-th word, hi, is given by concatenating hi and hi.
B Inference Algorithm
Given an NL description, we approximate the best AST yˆ in Eq. 1 using beam search. The inference procedure is listed in Algorithm 1.
We maintain a beam of size K. The beam is initialized with one hypothesis AST with a single root node (line 2). At each time step, the decoder enumerates over all hypotheses in the beam. For each hypothesis AST, we ﬁrst ﬁnd its frontier node nft (line 6). If nft is a non-terminal node, we collect all syntax rules r with nft as the head node to the actions set (line 10). If nft is a variable terminal node, we add all terminal tokens in the vocabulary and the input description as candidate actions (line 13). We apply each candidate action on the current hypothesis AST to generate a new hypothesis (line 15). We then rank all newly generated hypotheses and keep the top-K scored ones in the beam. A complete hypothesis AST is generated when it has no frontier node. We then convert the top-scored complete AST into the surface code (lines 18-19).
We remark that our inference algorithm can be implemented efﬁciently by expanding multiple hypotheses (lines 5-16) simultaneously using mini-batching on GPU.
C Dataset Preprocessing
Infrequent Words We replace word types whose frequency is lower than d with a special <unk> token (d = 3 for DJANGO, 3 for HS and 2 for IFTTT). Canonicalization We perform simple canonicalization for the DJANGO dataset: (1) We observe that input descriptions often come with

quoted string literals (e.g., verbose name is a string ‘cache entry’). We therefore replace quoted strings with indexed placeholders using regular expression. After decoding, we run a postprocessing step to replace all placeholders with their actual values. (2) For descriptions with cascading variable reference (e.g., call method self.makekey), we append after the whole variable name with tokens separated by ‘.’ (e.g., append self and makekey after self.makekey). This gives the pointer network ﬂexibility to copy either partial or whole variable names. Generate Oracle Action Sequence To train our model, we generate the gold-standard action sequence from reference code. For IFTTT, we simply parse the ofﬁcially provided ASTs into sequences of APPLYRULE actions. For HS and DJANGO, we ﬁrst convert the Python code into ASTs using the standard ast module. Values inside variable terminal nodes are tokenized by space and camel case (e.g., ClassName is tokenized to Class and Name). We then traverse the AST in pre-order to generate the reference action sequence according to the grammar model.
D Additional Decoding Examples
We provide extra decoding examples from the DJANGO and HS datasets, listed in Table 6 and Table 7, respectively. The model heavily relies on the pointer network to copy variable names and constants from input descriptions. We ﬁnd the source of errors in DJANGO is more diverse, with most incorrect examples resulting from missing arguments and incorrect words copied by the pointer network. Errors in HS are mostly due to partially or incorrectly implemented effects. Also note that the ﬁrst example in Table 6 is semantically correct, although it was considered incorrect under our exact-match metric. This suggests more advanced evaluation metric that takes into account the execution results in future studies.

Algorithm 1: Inference Algorithm

Input : NL description x

Output: code snippet c

1 call Encoder to encode x

2 Q = {y0 (root)}

3 for time step t do

4

Q =∅

5

foreach hypothesis yt ∈ Q do

6

nft = FrontierNode(yt)

7

A=∅

8

if nft is non-terminal then

9

foreach production rule r with nft as the head node do

10

A = A ∪ {APPLYRULE[r]}

11

else

12

foreach terminal token v do

13

A = A ∪ {GENTOKEN[v]}

14

foreach action at ∈ A do

15

yt = ApplyAction(yt, at)

16

Q = Q ∪ {yt }

17

Q = top-K scored hypotheses in Q

18 yˆ = top-scored complete hypothesis AST

19 convert yˆ to surface code c

20 return c

Initialize a beam of size K
Initialize the set of candidate actions APPLYRULE actions for non-terminal nodes GENTOKEN actions for variable terminal nodes

input for every i in range of integers from 0 to length of result, not included

pred. for i in range(0, len(result)): 

ref. for i in range(len(result)):

input call the function blankout with 2 arguments: t.contents and ’B’, write the result to out. pred. out.write(blankout(t.contents, ’B’))  ref. out.write(blankout(t.contents, ’B’))

pred. code list.append(foreground[v]) 

ref. code list.append(foreground[v])

input zip elements of inner result and inner args into a list of tuples, for every i item and i args in the result

pred. for i item, i args in zip(inner result, ref. for i item, i args in zip(inner result,

inner args): 

inner args):

input activate is a lambda function which returns None for any argument x.

pred. activate = lambda x: None 

ref. activate = lambda x: None

input if elt is an instance of Choice or NonCapture classes

pred. if isinstance(elt, Choice): 

ref. if isinstance(elt, (Choice, NonCapture)):

input get translation function attribute of the object t, call the result with an argument eol message, substitute the result for

result.

pred. translation function = getattr(t,

ref. result = getattr(t, translation function)(

translation function) 

eol message)

input for every s in strings, call the function force text with an argument s, join the results in a string, return the result.

pred. return ’’.join(force text(s)) 

ref. return ’’.join(force text(s) for s in strings)

input for every p in parts without the ﬁrst element pred. for p in p[1:]: 

ref. for p in parts[1:]:

input call the function get language, split the result by ’-’, substitute the ﬁrst element of the result for base lang. pred. base lang = get language().split()[0]  ref. base lang = get language().split(’−’)[0]

Table 6: Predicted examples from DJANGO dataset. Copied contents (copy probability > 0.9) are highlighted

input pred.

<name> Burly Rockjaw Trogg </name> <cost> 5 </cost> <attack> 3 </attack> <defense> 5 </defense> <desc> Whenever your opponent casts a spell, gain 2 Attack. </desc> <rarity> Common </rarity> ...
class BurlyRockjawTrogg(MinionCard): def init (self): super(). init (’Burly Rockjaw Trogg’, 4, CHARACTER CLASS.ALL, CARD RARITY.COMMON) def create minion(self, player): return Minion(3, 5, effects=[Effect(SpellCast(player=EnemyPlayer()), ActionTag(Give(ChangeAttack(2)), SelfSelector()))]) 

input pred.

<name> Maexxna </name> <cost> 6 </cost> <attack> 2 </attack> <defense> 8 </defense> <desc> Destroy any minion damaged by this minion. </desc> <rarity> Legendary </rarity> ...
class Maexxna(MinionCard): def init (self): super(). init (’Maexxna’, 6, CHARACTER CLASS.ALL, CARD RARITY.LEGENDARY, minion type=MINION TYPE.BEAST) def create minion(self, player): return Minion(2, 8, effects=[Effect(DidDamage(), ActionTag(Kill(), TargetSelector(IsMinion())))]) 

input <name> Hellﬁre </name> <cost> 4 </cost> <attack> -1 </attack> <defense> -1 </defense> <desc> Deal 3 damage to ALL characters. </desc> <rarity> Free </rarity> ...
pred. class Hellfire(SpellCard):
def init (self): super(). init (’Hellfire’, 4, CHARACTER CLASS.WARLOCK, CARD RARITY.FREE)

def use(self, player, game): super().use(player, game) for minion in copy.copy(game.other player.minions): minion.damage(player.effective spell damage(3), self) 
ref. class Hellfire(SpellCard):
def init (self): super(). init (’Hellfire’, 4, CHARACTER CLASS.WARLOCK, CARD RARITY.FREE)

def use(self, player, game): super().use(player, game) targets = copy.copy(game.other player.minions) targets.extend(game.current player.minions) targets.append(game.other player.hero) targets.append(game.current player.hero) for minion in targets: minion.damage(player.effective spell damage(3),

self)

reason Partially implemented effect: only deal 3 damage to opponent’s characters

input pred.

<name> Darkscale Healer </name> <cost> 5 </cost> <attack> 4 </attack> <defense> 5 </defense> <desc> Battlecry: Restore 2 Health to all friendly characters. </desc> <rarity> Common </rarity> ...
class DarkscaleHealer(MinionCard): def init (self): super(). init (’Darkscale Healer’, 5, CHARACTER CLASS.ALL, CARD RARITY.COMMON, battlecry=Battlecry(Damage(2), CharacterSelector(players=BothPlayer(), picker=UserPicker())))

def create minion(self, player): return Minion(4, 5) 
ref. class DarkscaleHealer(MinionCard):
def init (self): super(). init (’Darkscale Healer’, 5, CHARACTER CLASS.ALL, CARD RARITY.COMMON, battlecry=Battlecry(Heal(2), CharacterSelector()))

def create minion(self, player): return Minion(4, 5)
reason Incorrect effect: damage 2 health instead of restoring. Cast effect to all players instead of friendly players only.

Table 7: Predicted card examples from HS dataset. Copied contents (copy probability > 0.9) are highlighted.

