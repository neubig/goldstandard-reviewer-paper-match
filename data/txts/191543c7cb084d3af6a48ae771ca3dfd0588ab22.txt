TransNets: Learning to Transform for Recommendation

arXiv:1704.02298v2 [cs.IR] 30 Jun 2017

Rose Catherine

William Cohen

School of Computer Science Carnegie Mellon University

{rosecatherinek,wcohen}@cs.cmu.edu

Pooling Connected

ABSTRACT
Recently, deep learning methods have been shown to improve the performance of recommender systems over traditional methods, especially when review text is available. For example, a recent model, DeepCoNN, uses neural nets to learn one latent representation for the text of all reviews wri en by a target user, and a second latent representation for the text of all reviews for a target item, and then combines these latent representations to obtain state-of-the-art performance on recommendation tasks. We show that (unsurprisingly) much of the predictive value of review text comes from reviews of the target user for the target item. We then introduce a way in which this information can be used in recommendation, even when the target user’s review for the target item is not available. Our model, called TransNets, extends the DeepCoNN model by introducing an additional latent layer representing the target user-target item pair. We then regularize this layer, at training time, to be similar to another latent representation of the target user’s review of the target item. We show that TransNets and extensions of it improve substantially over the previous state-of-the-art.
1 INTRODUCTION
Using review text for predicting ratings has been shown to greatly improve the performance of recommender systems [4, 22, 24], compared to Collaborative Filtering (CF) techniques that use only past ratings [18, 33]. Recent advances in Deep Learning research have made it possible to use Neural Networks in a multitude of domains including recommender systems, with impressive results. Most neural recommender models [3, 10, 16, 21, 40] have focussed on the content associated with the user and the item, which are used to construct their latent representations. Content associated with a user could include their demographic information, socioeconomic characteristics, their product preferences and the like. Content linked to an item could include their price, appearance, usability and similar a ributes in the case of products, food quality, ambience, service and wait times in the case of restaurants, or actors, director, genre, and similar metadata in the case of movies. ese representations are then fed into a CF-style architecture or a regression model to make the rating prediction.
Review text, unlike content, is not a property of only the user or only the item; it is a property associated with their joint interaction. In that sense, it is a context [1] feature. Only a few neural net models [2, 34, 44] have been proposed to date that use review text for predicting the rating. Of these, the most recent model, Deep Cooperative Neural Networks (DeepCoNN) [44] uses neural nets to learn a latent representation for the user from the text of all reviews wri en by her and a second latent representation for the item from the text of all reviews that were wri en for it, and then combines these two representations in a regression layer to obtain

Embedding Layer

Convolutional Layer

Max

Fully

...
...
* Kj
...
`
...
Text
Figure 1: e CNN Text Processor architecture
state-of-the-art performance on rating prediction. However, as we will show, much of the predictive value of review text comes from reviews of the target user for the target item, which can be assumed to be available only at training time, and is not available at test time. In this paper, we introduce a way in which this information can be used in training the recommender system, such that when the target user’s review for the target item is not available at the time of prediction, an approximation for it is generated, which is then used for predicting the rating. Our model, called Transformational Neural Networks (TransNets), extends the DeepCoNN model by introducing an additional latent layer representing an approximation of the review corresponding to the target user-target item pair. We then regularize this layer, at training time, to be similar to the latent representation of the actual review wri en by the target user for the target item. Our experiments illustrate that TransNets and its extensions give substantial improvements in rating prediction.
e rest of this paper is organized as follows. e proposed model and architecture are discussed in detail in Section 2. e experiments and results are discussed in Section 3. Section 4 summarizes related work, and we conclude in Section 5.
2 PROPOSED METHOD
2.1 CNNs to process text
We process text using the same approach as the current state-ofthe-art method for rating prediction, DeepCoNN [44]. e basic building block, referred to as a CNN Text Processor in the rest of

this paper, is a Convolutional Neural Network (CNN) [20] that
inputs a sequence of words and outputs a n-dimensional vector
representation for the input, i.e., the CNN Text Processor is a function Γ : [w1, w2, ..., wT ] → Rn . Figure 1 gives the architecture of the CNN Text Processor. In the rst layer, a word embedding function f : M → Rd maps each word in the review that are also in its M-
sized vocabulary into a d dimensional vector. e embedding can be
any pre-trained embedding like those trained on the GoogleNews corpus using word2vec1[27], or on Wikipedia using GloVe2 [30].
ese word vectors are held xed throughout the training process.
Following the embedding layer is the Convolutional Layer, adapted
to text processing [8]. It consists of m neurons each associated with a lter K ∈ Rt×d , where t is a window size, typically 2 – 5. e lter
processes t-length windows of d-dimensional vectors to produce
features. Let V1:T be the embedded matrix corresponding to the T -length input text. en, jth neuron produces its features as:

zj = α (V1:T ∗ Kj + bj )

where, bj is its bias, ∗ is the convolution operation and α is a nonlinearity like Recti ed Linear Unit (ReLU) [28] or tanh.
Let z1, z2, ...z(T −t +1) be the features produced by the jth neuron
jj j
on the sliding windows over the embedded text. en, the nal
feature corresponding to this neuron is computed using a max-
pooling operation, de ned as:

oj

=

max

{z

1 j

,

z

2 j

,

.

.

.z

(T j

−t

+1)

}

e max-pooling operation provides location invariance to the neuron, i.e., the neuron is able to detect the features in the text regardless of where it appears.
e nal output of the Convolutional Layer is the concatenation of the output from its m neurons, denoted by:

O = [o1, o2, ...om ]

is output is then passed to a fully connected layer consisting of a weight matrix W ∈ Rm×n and a bias ∈ Rn , which computes
the nal representation of the input text as:

x = α(W × O + )

2.2 e DeepCoNN model
To compute the rating rAB that userA would assign to itemB , the DeepCoNN model of [44] uses two CNN Text Processors side by side as shown in Figure 2. e rst one processes the text labeled textA, which consists of a concatenation of all the reviews that userA has wri en and produces a representation, xA. Similarly, the second processes the text called textB , which consists of a concatenation of all the reviews that have been wri en about itemB and produces a representation, B . Both outputs are passed through a dropout layer [36]. Dropout is a function δ : Rn → Rn , that suppresses the output of some of the neurons randomly and is a popular technique for regularizing a network. Let x¯A = δ (xA) and ¯B = δ ( B ), denote the output of the dropout layer applied on xA and B .
e model then concatenates the two representations as z = [x¯A, ¯B ] and passes it through a regression layer consisting of a
1h ps://code.google.com/archive/p/word2vec 2h ps://nlp.stanford.edu/projects/glove
2

Regression Layer

Factorization Machines

Drop out Layer

ΓA

ΓB

Reviews by userA

Reviews for itemB

Figure 2: DeepCoNN model for predicting rating

Factorization Machine (FM) [32]. e FM computes the second order interactions between the elements of the input vector as:

|z |

|z | |z |

rˆAB = w0 + wi zi +

vi , vj zi zj

i =1

i=1 j=i+1

where w0 ∈ R is the global bias, w ∈ R2n weights each dimension of the input, and V ∈ R2n×k assigns a k dimensional vector to each dimension of the input so that the pair-wise interaction between two dimensions i and j can be weighted using the inner product of the corresponding vectors vi and vj . Note that the FM factorizes the pair-wise interaction, and therefore requires only O(nk) parameters instead of O(n2) parameters which would have been required otherwise, where k is usually chosen such that k n. is has been shown to give be er parameter estimates under sparsity [32]. FMs have been used successfully in large scale recommendation services like online news[42].
FMs can be trained using di erent kinds of loss functions including least squared error (L2), least absolute deviation (L1), hinge loss and logit loss. In our experiments, L1 loss gave a slightly be er performance than L2. DeepCoNN [44] also uses L1 loss. erefore, in this paper, all FMs are trained using L1 loss, de ned as:

loss =

|rAB − rˆAB |

(uA,iB,rAB )∈D

2.3 Limitations of DeepCoNN
DeepCoNN model has achieved impressive MSE values surpassing that of the previous state-of-the-art models that use review texts, like the Hidden Factors as Topics (HFT) model [24], Collaborative Topic Regression (CTR) [39] and Collaborative Deep Learning (CDL) [40], as well as Collaborative Filtering techniques that use only the rating information like Matrix Factorization (MF) [18] and Probabilistic Matrix Factorization (PMF) [33].
However, it was observed in our experiments that DeepCoNN achieves its best performance only when the text of the review wri en by the target user for the target item is available at test time. In real world recommendation se ings, an item is always recommended to a user before they have experienced it. erefore,

Source Network FMS

Target Network

TransNet consists of two networks as shown in the architecture

diagram of Figure 3, a Target Network that processes the target

FMT

review re AB and a Source Network that processes the texts of the

(userA, itemB ) pair that does not include the joint review, re AB .

Given a review text re AB , the Target Network uses a CNN Text

Processor, ΓT , and a Factorization Machine, F MT , to predict the

loss

rating as:

TRANSFORM

ΓT revAB

ΓA

ΓB

Reviews by userA sans revAB

Reviews for itemB sans revAB

Figure 3: e TransNet architecture

xT = ΓT (re AB ) x¯T = δ (xT ) rˆT = F MT (x¯T )

Since the Target Network uses the actual review, its task is similar

to sentiment analysis [19, 35].

e Source Network is like the DeepCoNN model with two CNN

Text Processors, ΓA for user text, textA − re AB , and ΓB for item

text, textB − re AB , and a Factorization Machine, F MS , but with

an additional T

layer. e goal of the T

layer

is to transform the user and the item texts into an approximation

of re AB , denoted by reˆ AB , which is then used for predicting the

rating. e Source Network predicts the rating as given below:

First, it converts the input texts into their latent form as:

it would be unreasonable to assume that the target review would
be available at the time of testing.
Let re AB denote the review wri en by userA for an itemB . At training time, the text corresponding to userA, denoted as textA, consists of a concatenation of all reviews wri en by her in the
training set. Similarly, the text for itemB , denoted by textB , is a concatenation of all reviews wri en for that item in the training
set. Both textA and textB includes re AB for all (userA, itemB ) pairs in the training set. At test time, there are two options for
constructing the test inputs. For a test pair (userP , itemQ ), their pairwise review, re PQ in the test set, could be included in the texts corresponding to the user, textP , and the item, textQ , or could be omi ed. In one of our datasets, the MSE obtained by DeepCoNN
if re PQ is included in the test inputs is only 1.21. However, if re PQ is omi ed, then the performance degrades severely to 1.89.
is is lower than Matrix Factorization applied to the same dataset,
which has an MSE of 1.86. If we train DeepCoNN in the se ing
that mimics the test setup, by omi ing re AB in the texts of all (userA, itemB ) pairs in the training set, the performance is be er at 1.70, but still much higher than when re AB is available in both training and testing.
In the se ing used in this paper, reviews in the validation and
the test set are never accessed at any time, i.e., assumed to be
unavailable — both during training and testing — simulating a real
world situation.

xA = ΓA(textA − re AB ) xB = ΓB (textB − re AB ) z0 = [xAxB ]

e last step above is a concatenation of the two latent represen-

tations. is is then input to the T

sub-network, which

is a L-layer deep non-linear transformational network. Each layer

l in T

has a weight matrix Gl ∈ Rn×n and bias l ∈ Rn ,

and transforms its input zl−1 as:

zl = σ (zl −1Gl + l )

where σ is a non-linear activation function. Since the input to the

rst layer, z0, is a concatenation of two vectors each of n dimensions,

the rst layer of T

uses a weight matrix G1 ∈ R2n×n .

e output of the Lth layer of T

, zL is the approxi-

mation constructed by the TransNet for re AB , denoted by reˆ AB .

Note that we do not have to generate the surface form of re AB ; It

su ces to approximate ΓT (re AB ), the latent representation of the

target review. e Source Network then uses this representation to

predict the rating as:

z¯L = δ (zL) rˆS = F MS (z¯L)

During training, we will force the Source Network’s representation
zL to be similar to the encoding of re AB produced by the Target Network, as we discuss below.

2.4 TransNets

As we saw in the case of DeepCoNN, learning using the target re-
view re AB at train time inadvertently makes the model dependent on the presence of such reviews at test time, which is unrealistic.
However, as shown by the experiment above, re AB gives an insight into what userA thought about their experience with itemB , and can be an important predictor of the rating rAB . Although unavailable at test time, re AB is available during training.

2.5 Training TransNets
TransNet is trained using 3 sub-steps as shown in Algorithm 1. In the rst sub-step, for each training example (or a batch of such examples), the parameters of the Target Network, denoted by θT , which includes those of ΓT and F MT , are updated to minimize a L1 loss computed between the actual rating rAB and the rating rˆT predicted from the actual review text re AB .

3

To teach the Source Network how to generate an approximation
of the latent representation of the original review re AB generated by the Target Network, in the second sub-step, its parameters,
denoted by θtr ans , are updated to minimize a L2 loss computed between the transformed representation, z¯L, of the texts of the user and the item, and the representation xT of the actual review. θtr ans includes the parameters of ΓA and ΓB , as well as the weights Wl and biases l in each of the transformation layers. θtr ans does not include the parameters of F MS .
In the nal sub-step, the remaining parameters of the Source
Network, θS , which consists of the parameters of the F MS are updated to minimize a L1 loss computed between the actual rating rAB and the rating rˆS predicted from the transformed representation, z¯L. Note that each sub-step is repeated for each training example (or a batch of such examples), and not trained to convergence
independently. e training method is detailed in Algorithm 1.

Algorithm 1 Training TransNet

1: procedure T (Dtr ain ) 2: while not converged do

3:

for (textA, textB , re AB , rAB ) ∈ Dtr ain do

4:

#Step 1: Train Target Network on the actual review

5:

xT = ΓT (re AB )

6:

rˆT = F MT (δ (xT ))

7:

lossT = |rAB − rˆT |

8:

update θT to minimize lossT

9:

#Step 2: Learn to Transform

10:

xA = ΓA(textA)

11:

xB = ΓB (textB )

12:

z0 = [xAxB ]

13:

zL = T

(z0)

14:

z¯L = δ (zL)

15:

losstr ans = ||z¯L − xT ||2

16:

update θtr ans to minimize losstr ans

17:

#Step 3: Train a predictor on the transformed input

18:

rˆS = F MS (z¯L)

19:

lossS = |rAB − rˆS |

20:

update θS to minimize lossS

21: return θtr ans , θS

Algorithm 3 Testing using TransNet

1: procedure T (Dtest )

2: for (textP , textQ ) ∈ Dtest do

3:

#Step 1: Transform the input

4:

xP = ΓA(textP )

5:

xQ = ΓB (textQ )

6:

z0 = [xP xQ ]

7:

zL = T

(z0)

8:

z¯L = δ (zL)

9:

#Step 2: Predict using the transformed input

10:

rˆPQ = F MS (z¯L)

2.6.1 Training with sub-steps vs. jointly. While training TransNets using Algorithm 1, in each iteration (or batch), we could choose to jointly minimize a total loss, losstotal = lossT + losstr ans + lossS . However, doing so will result in parameter updates to the target network, ΓT , resulting from losstr ans , in addition to those from lossT , i.e., the Target Network will get penalized for producing a representation that is di erent from that produced by the Source Network. is results in both networks learning to produce sub-optimal representations and converging to a lower performance in our experiments. erefore, it is important to separate the Target Network’s parameter updates so that it learns to produce the best representation which will enable it to make the most accurate rating predictions from the review text.
2.6.2 Training Target Network to convergence independently. We could choose to rst train the Target Network to convergence and then train the Source Network to emulate the trained Target Network. However, note that the Target Network’s input is the actual review, which is unavailable for testing its performance, i.e., we do not know when the Target Network has converged with good generalization vs. when it is over ing. e only way to measure the performance at test time is to check the output of the Source Network. erefore, we let the Source and the Target Networks learn simultaneously and stop when the Source Network’s test performance is good.

Algorithm 2 Transform the input

1: procedure T

(z0)

2: for layer l ∈ L do

3:

zl = σ (zl −1Gl + l )

4: return zL

At test time, TransNet uses only the Source Network to make the prediction as shown in Algorithm 3.

2.6 Design Decisions and Other Architectural
Choices
In this section, we describe some of the choices we have in designing the TransNet architecture and why they did not give good results in our preliminary experiments.

2.6.3 Using the same convolutional model to process text in both the Source and Target networks. We could choose to use the ΓT that was trained in the Target Network to generate features from the user and the item text in the Source Network, instead of learning separate ΓA and ΓB . A er all, we are learning to transform the la er’s output into the former. However, in that case, TransNet would be constrained to generate generic features similar to topics. By providing it with separate feature generators, it can possibly learn to transform the occurrence of di erent features in the user text and the item text of the Source Network to another feature in the Target Network. For example, it could learn to transform the occurrence of features corresponding to say, ‘love indian cuisine’ & ‘dislike long wait’ in the user pro le, and ‘lousy service’ & ‘terrible chicken curry’ in the item (restaurant) pro le, to a feature corresponding to say, ‘disappointed’ in the target review, and subsequently predict a lower rating. Having separate feature generators in the Source Network gives TransNets more expressive

4

FMSE Table 1: Dataset Statistics

TRANSFORM

...

ΩA

ΩB

userA

itemB

Figure 4: e Extended TransNet sub-architecture

Dataset Yelp17 AZ-Elec AZ-CSJ
AZ-Mov

Category
Electronics
Clothing, Shoes and Jewelry Movies and TV

#Users 1,029,432 4,200,520 3,116,944
2,088,428

#Items 144,072 475,910 1,135,948
200,915

#Ratings & Reviews
4,153,150
7,820,765 (7,824,482) 5,748,260 (5,748,920)
4,606,671 (4,607,047)

power and gave a be er performance compared to an architecture that reuses the Target Network’s feature generator.

2.6.4 Training the T

without the dropout. We

could choose to match the output zL of T

with xT instead

of its dropped out version z¯L in Step 2 of Algorithm 1. However,

this makes the T

layer unregularized, leading it to over t

thus giving poor performance.

2.7 Extended TransNets

ratings of businesses by about 1M users. e rest are three of the larger datasets in the latest release of Amazon reviews4 [25, 26] containing reviews and ratings given by users for products purchased on amazon.com, over the period of May 1996 - July 2014. We use the aggressively de-duplicated version of the dataset and also discard entries where the review text is empty. e statistics of the datasets are given in Table 1. e original size of the dataset before discarding empty reviews is given in brackets when applicable.

TransNet uses only the text of the reviews and is user/item identity-

agnostic, i.e., the user and the item are fully represented using

the review texts, and their identities are not used in the model.

However, in most real world se ings, the identities of the users and

items are known to the recommender system. In such a scenario, it

is bene cial to learn a latent representation of the users and items,

similar to Matrix Factorization methods. e Extended TransNet

(TransNet-Ext) model achieves that by extending the architecture

of TransNet as shown in Figure 4.

e Source Network now has two embedding matrices ΩA

for users and ΩB for items, which are functions of the form, Ω : id → Rn . ese map the string representing the identity

of userA and itemB into a n-dimensional representation. ese

latent representations are then passed through a dropout layer and

concatenated with the output of the T

layer before be-

ing passed to the FM regression layer. erefore, given userA and

itemB , TransNet-Ext computes the rating as:

ωA = Ω(userA)

ωB = Ω(itemB )

z¯ = [δ (ωA) δ (ωB ) z¯L]

rˆS E = F MS E (z¯)

Computation of the loss in Step 3 of Algorithm 1, lossSE is same as earlier: lossSE = |rAB − rˆSE |. But the parameter θS updated at the end now contains the embedding matrices ΩA and ΩB .

3 EXPERIMENTS AND RESULTS
3.1 Datasets
We evaluate the performance of the approach proposed in this paper on four large datasets. e rst one, Yelp17, is from the latest Yelp dataset challenge3, containing about 4M reviews and
3h ps://www.yelp.com/dataset challenge

3.2 Evaluation Procedure and Settings
Each dataset is split randomly into train, validation and test sets in the ratio 80 : 10 : 10. A er training on every 1000 batches of 500 training examples each, MSE is calculated on the validation and the test datasets. We report the MSE obtained on the test dataset when the MSE on the validation dataset was the lowest, similar to [24]. All algorithms, including the competitive baselines, were implemented in Python using TensorFlow5, an open source so ware library for numerical computation, and were trained/tested on NVIDIA GeForce GTX TITAN X GPUs. Training TransNet on Yelp17 takes approximately 40 minutes for 1 epoch (∼6600 batches) on 1 GPU, and gives the best performance in about 2–3 epochs.
Below are the details of the text processing and the parameter se ings used in the experiments:
3.2.1 Text Pre-Processing and Embedding. All reviews are rst passed through a Stanford Core NLP Tokenizer [23] to obtain the tokens, which are then lowercased. Stopwords (the, and, is etc.) as well as punctuations are considered as separate tokens and are retained. A 64-dimensional word2 ec6 [27] embedding using the Skip-gram model is pre-trained on the 50,000 most frequent tokens in each of the training corpora.
3.2.2 CNN Text Processor. We reuse most of the hyperparameter se ings reported by the authors of DeepCoNN [44] since varying them did not give any perceivable improvement. In all of the CNN Text Processors ΓA, ΓB and ΓT , the number of neurons, m, in the convolutional layer is 100, the window size t is 3, and n, the dimension of the output of the CNN Text Processor, is 50. e maximum length of the input text, T , is set to 1000. If there are many reviews, they are randomly sorted and concatenated, and the rst
4h p://jmcauley.ucsd.edu/data/amazon 5h ps://www.tensor ow.org 6h ps://www.tensor ow.org/tutorials/word2vec#the skip-gram model

5

T tokens of the concatenated version are used. In our experiments,

the word embedding dimension, d, is 64, and the vocabulary size,

|M | is 50,000. Also, the non-linearity, α, is tanh.

3.2.3 Dropout Layer and Factorization Machines. All

dropout layers have a keep probability of 0.5. In all of the factor-

ization machines, F MT , F MS and F MSE , the pair-wise interaction is factorized using a k = 8 dimensional matrix, V . Since F MT processes a n-dimensional input, its parameters are wT ∈ Rn and VT ∈ Rn×k . Similarly, since F MSE processes a 3n-dimensional input, its parameters are wS E ∈ R3n and VS E ∈ R3n×k . All w’s are initialized to 0.001, and all V’s are initialized from a truncated

normal distribution with 0.0 mean and 0.001 standard deviation.

All FMs are trained to minimize an L1 loss.

3.2.4 T

. e default se ing for the number of layers,

L, is 2. We show the performance for di erent values of L in Section

3.5. All weight matrices Gl are initialized from a truncated normal distribution with 0.0 mean and 0.1 standard deviation, and all biases

l are initialized to 0.1. e non-linearity, σ , is tanh.

3.2.5 TransNet-Ext. e user (item) embedding matrices, Ω,

are initialized from a random uniform distribution (-1.0, 1.0), and

map users (items) that appear in the training set to a n = 50 dimen-

sional space. New users (items) in the validation and test sets are

mapped to a random vector.

3.2.6 Training. All optimizations are learned using Adam [17],

a stochastic gradient-based optimizer with adaptive estimates, at a

learning rate set to 0.002. All gradients are computed by automatic

di erentiation in TensorFlow.

MSE

1.80 1.75 1.70 1.65 1.60 1.55 1.50
0

2

4

6

8

10

Number of Layers

Figure 5: Variation in MSE with di erent Layers: TransNets on Yelp dataset

(3) MF: A neural net implementation of Matrix Factorization with n = 50 latent dimensions. It uses only ratings.
We also provide the performance numbers of DeepCoNN in the se ing where the test reviews are available at the time of testing. i.e. the same DeepCoNN model (1) above, but with the exception that at test time, for a userP -itemQ pair, textP and textQ are constructed from the training set as well as the test set, and therefore, contains their joint review re PQ from the test set. is is denoted as DeepCoNN + Test Reviews, and its performance is provided for the sole purpose of illustrating how much be er the algorithm could perform, had it been given access to the test reviews.

3.3 Competitive Baselines
We compare our method against the current state-of-the-art, DeepCoNN [44]. Since DeepCoNN was extensively evaluated against the previous state-of-the-art models like Hidden Factors as Topics (HFT) model [24], Collaborative Topic Regression (CTR) [39], Collaborative Deep Learning (CDL) [40] and Probabilistic Matrix Factorization (PMF) [33], and shown to surpass their performance by a wide margin, we refrain from repeating those comparisons in this paper. However, we do consider some variations of DeepCoNN.
Our competitive baselines are:
(1) DeepCoNN: e model proposed in [44]. During training, textA and textB corresponding to the userA-itemB pair contains their joint review re AB , along with reviews that userA wrote for other items and what other users wrote for itemB in the training set. During testing, for a userP itemQ pair, textP and textQ are constructed from only the training set and therefore, does not contain their joint review re PQ .
(2) DeepCoNN-revAB: e same DeepCoNN model (1) above, but trained in a se ing that mimics the test setup, i.e., during training, textA and textB corresponding to the userAitemB pair does not contain their joint review re AB , but only the reviews that userA wrote for other items and what other users wrote for itemB in the training set. Testing procedure is the same as above: for a userP -itemQ pair, textP and textQ are constructed from only the training set and therefore, does not contain their joint review re PQ which is present in the test set.

3.4 Evaluation on Rating Prediction

Like prior work, we use the Mean Square Error (MSE) metric to evaluate the performance of the algorithms. Let N be the total number of datapoints being tested. en MSE is de ned as:

MSE = 1

N
(r

− rˆ )2

N i=1 i i

where, ri is the ground truth rating and rˆi is the predicted rating for the ith datapoint. Lower MSE indicates be er performance.
e MSE values of the various competitive baselines are given

in Table 2. For each dataset, the best score is highlighted in blue . As can be seen from the Table, it is clear that TransNet and its
variant TransNet-Ext perform be er at rating prediction compared to the competitive baselines on all the datasets (p-value ≤ 0.05). It can also be seen that learning a user and item embedding using only the ratings in addition to the text helps TransNet-Ext improve the performance over the vanilla TransNet (p-value ≤ 0.1), except in the case of one dataset (AZ-CSJ).
It is also interesting to note that training DeepCoNN mimicking the test setup (DeepCoNN-revAB ) gives a large improvement in the case of Yelp, but does not help in the case of the AZ datasets.

3.5 Picking the number of T

layers

eT

network uses L fully connected layers. In Figure 5,

we plot the MSE of TransNet on the Yelp17 dataset when varying

L from 1 to 10. It can be seen from the gure that TransNets are

quite robust to the choice of L, uctuating only narrowly in its

performance. Using only one layer gives the highest MSE, most

6

Table 2: Performance comparison using MSE metric

Dataset
Yelp17 AZ-Elec AZ-CSJ AZ-Mov

DeepCoNN + Test Reviews
1.2106
0.9791 0.7747 0.9392

MF
1.8661 1.8898 1.5212 1.4324

DeepCoNN
1.8984 1.9704 1.5487 1.3611

DeepCoNN-revAB
1.7045 2.0774 1.7044 1.5276

TransNet
1.6387 1.8380 1.4487 1.3599

TransNet-Ext
1.5913 1.7781 1.4780 1.2691

probably because it doesn’t have enough parameters to learn how to transform the input. Using 10 layers also gives a high MSE, probably because it over ts or because it has too many parameters to learn. From the gure, using 2 or 5 layers gives the best MSE for this particular se ing of TransNets. It is known that a 2 layer nonlinear neural network is su cient to represent all the logic gates including the XOR [11]. So, using 2 layers seems like a reasonable choice.
3.6 Finding the most similar (helpful) reviews
Our primary evaluation of TransNet is quantitative, using MSE of predicted ratings. We would also like to investigate whether the learned representation is qualitatively useful—i.e., does it capture interesting high-level properties of the user’s review. One possible use of learning representation would be to give the user information about her predicted reaction to the item that is more detailed than a rating. In this section, we show how TransNets could be used to nd reviews that are most similar to what the user would have wri en, which in turn, could be helpful in making an informed decision. For example, the most helpful review for a user who is more concerned about the quality of service and wait times would be di erent from the most helpful review for another user who is sensitive to the price. For a test userP -itemQ pair, we run the Source Network with the text of their reviews from the training set to construct zL, which is an approximation for the representation of their actual joint review. Candidate reviews are all the reviews re CQ in the training set wri en for itemQ by other users. We pass each of them separately through the Target Network to obtain their latent representation xCQ = ΓT (re CQ ). If re CQ had been most similar to what userP would write for itemQ , then xCQ would be most similar to zL. erefore, the most similar review is simply the re CQ whose xCQ is closest to zL in Euclidean distance.
Some examples of such predicted most similar reviews on the Yelp17 dataset are listed in Table 3. Here, the column Original Review is the actual review that userP wrote for itemQ , and the column Predicted Review gives the most similar of the candidate reviews predicted by TransNet. e examples show how the predicted reviews talk about particulars that the original reviews also highlight.
4 RELATED WORK
4.1 Recommendation Models
4.1.1 Non-Neural Models. e Hidden Factors as Topics (HFT) model [24] aims to nd topics in the review text that are correlated with the latent parameters of users. ey propose a transformation

function which converts user’s latent factors to the topic distribution of the review, and since the former exactly de nes the la er, only one of them is learned. A modi ed version of HFT is the TopicMF model [4], where the goal is to match the latent factors learned for the users and items using MF with the topics learned on their joint reviews using a Non-Negative Matrix Factorization, which is then jointly optimized with the rating prediction. In their transformation function, the proportion of a particular topic in the review is a linear combination of its proportion in the latent factors of the user and the item, which is then converted into a probability distribution over all topics in that review. Unlike these two models, TransNet computes each factor in the transformed review from a non-linear combination of any number of factors from the latent representations of either the user or the item or both. Another extension to HFT is the Rating Meets Reviews (RMR) model [22] where the rating is sampled from a Gaussian mixture.
e Collaborative Topic Regression (CTR) model proposed in [39] is a content based approach, as opposed to a context / review based approach. It uses LDA [5] to model the text of documents (scienti c articles), and a combination of MF and content based model for recommendation. e Rating-boosted Latent Topics (RBLT) model of [37] uses a simple technique of repeating a review r times in the corpus if it was rated r , so that features in higher rated reviews will dominate the topics. Explicit Factor Models (EFM) proposed in [43] aims to generate explainable recommendations by extracting explicit product features (aspects) and users’ sentiments towards these aspects using phrase-level sentiment analysis.
4.1.2 Neural Net Models. e most recent model to successfully employ neural networks at scale for rating prediction is the Deep Cooperative Neural Networks (DeepCoNN) [44], which was discussed in detail in Section 2. Prior to that work, [2] proposed two models: Bag-of-Words regularized Latent Factor model (BoWLF) and Language Model regularized Latent Factor model (LMLF), where MF was used to learn the latent factors of users and items, and likelihood of the review text, represented either as a bag-of-words or an LSTM embedding [14], was computed using the item factors. [34] proposed a CNN based model identical to DeepCoNN, but with a ention mechanism to construct the latent representations, the inner product of which gave the predicted ratings.
Some of the other past research uses neural networks in a CF setting with content, but not reviews. e Collaborative Deep Learning (CDL) model [40] uses a Stacked De-noising Auto Encoder (SDAE) [38] to learn robust latent representations of items from their content, which is then fed into a CTR model [39] for predicting the ratings. A very similar approach to CDL is the Deep Collaborative

7

Table 3: Original review vs. Predicted most helpful review

Original Review

Predicted Review

my laptop at lined and i did n’t know why , just one day it did n’t turn on . i cam here based on the yelp reviews and happy i did . although my laptop could n’t be revived due to the fried motherboard , they did give me a full explanation about what they found and my best options . i was grateful they did n’t charge me for looking into the problem , other places would have . i will de nitely be coming back if needed . . excellent quality korean restaurant . it ’s a tiny place but never too busy , and quite possibly the best korean dumplings i ’ve had to date .
this place is so cool . the outdoor area is n’t as big as the llmore location , but they make up for it with live music . i really like the atmosphere and the food is pre y spot on . the sweet potato fry dip is really something special . the vig was highly recommended to me , and i ’m passing that recommendation on to all who read this . i have a empted at coming here before but i have never been able to make it in because it ’s always so packed with people wanting to eat . i nally came here at a good time around 6ish … and not packed but by the time i le , it was packed ! the miso ramen was delicious . you can choose from add on ’s on your soup but they charge you , i dont think they should , they should just treat them as condiments . at other ramen places that i have been too i get the egg , bamboo shoot , re ball add on ’s free . so i am not sure what their deal is . this place can be a zoo ‼ however , with the produce they have , at the prices they sell it at , it is worth the hassle . be prepared to be pushed and shoved . this is much the same as in asia . my wife ( from vietnam ) says that the markets in asia are even more crowded . i agree as i have seen vietnam with my own eyes .
great spot for outdoor seating in the summer since it ’s sheltered early from the sun . good service but americanos sometimes are not made right
this is my favorite place to eat in south charlo e . great cajun food . my favorite is the fried oysters with cuke salad and their awesome mac ’n’ cheese ( their mac ’n’ cheese is not out of a box ) . their sweet tea would make my southern grandma proud . to avoid crowds , for lunch i recommend arriving before 11:30 a.m. or after 1 p.m. and for dinner try to get there before 6 p.m. is not open on sundays . very overpriced food , very substandard food . wait sta is a joke . if you like being ignored in the front room of a one story house and being charged for it , by all means . otherwise , go to freaking mcdonald ’s .
holey moley - these bagels are delicious ! i ’m a bit of a bagel connoisseur . ( note : the bagels at dave ’s grocery in ohio city are currently my favs ) . these bagels had me oored . thankfully , cleveland bagel pops up at festivals and ea markets so there are plenty of opportunities to put them in your mouth ( though rising star coffee is a regular option ) . their are also amazing ! though they are n’t the cheapest bagels in the world , you can taste the love that goes into them . they ’re perfectly crisp , yet doughy in the middle . the add an added avor - honestly , it ’s a bagel experience .
ok the rst time i came here , i was very disappointed in the selection of items , especially a er reading previous review . but , then i realized that i went at a bad time , it was the end of the day and they sold out of everything ! i recently went back at the store opening time and a lot happier with the market . they sell freshly made bentos , made in house , and they are perfect for microwaving at home or in the market for a cheap and satisfying meal . the key is to get there early , bc they are limited and run out quick , but they have a good variety of bentos . one draw back is that it is smaller than expected , so if you come from a place like socal , where japanese markets were like large grocery stores with mini stores and restaurants located inside , you might not be too happy .

my hard drive crashed and i had to buy a new computer . the store where i bought my computer could n’t get data o my old hard drive . neither could a tech friend of mine . works could ! they did n’t charge for the diagnosis and only charged $ 100 for the transfer . very happy .
for those who live near by islington station you must visit this new korean restaurant that just opened up . the food too good to explain . i will just say i havent had a chance to take picture since the food was too grat .
like going on monday ’s . happy hour for drinks and apps then at 6pm their burger special . sundays are cool too , when they have live music on their patio .
hands down top three ramen spots on the west coast , right up there with , and the line can be just as long .
i enjoy going to this market on main street when i am ready to can … the prices are great esp for onions . . broccoli and bell peppers … a few times they have had bananas for $ 3.00 for a huge box like 30 lbs … you can freeze them or cover in … or make banana bread if they begin to go dark … and ripe . the employees will talk if you say hello rst …
this is my “ go to ” starbucks due to the location being close to where i live . i normally go through the drive-thru , which more likely than not , has a long line . . but does n’t every starbucks ? i have always received great customer service at this location ! there has been a couple times that my order was n’t correct - which is frustrating when you are short on time & depend on your morning coffee ! but overall you should have a good experience whether you drive-thru or dine in !
always ‼ too small location so wait line can be long . been going to for 13 years .
i want this place to be good but it fails me every time . i brought my parents here for dinner and was totally embarrassed with my dining choice . i tried it two more times a er that and continue to be disappointed . their menu looks great but what is delivered is a total let down . to top it o , the service is painfully slow . the only thing this place has going for it is the dog friendly patio and cra beers . i hope someone reads these reviews as the poor service piece continues to be brought up as an issue .
i had heard from a colleague at work about cleveland bagel company ’s bagels and how they were , “ be er than new york city bagels . ” naturally , i laughed at this colleague and thought he was a for even thinking such a thing . so , a few weeks later i happened to be up early on a saturday morning and made the trek up to their storefront -( located across from the harp . ) when i arrived was around 8:15 am ; upon walking in i found most bagel bins to be empty and only a few poppyseed bagels le . i do n’t like poppyseed bagels so i asked them what was going on with the rest and when they ’d have more . to my surprise i found out that they only stay open as long as they have bagels to sell . once they sell out , they close up shop and get going for the next day . i ordered a poppyseed bagel even though i do n’t like them as i was curious as to what was up with these bagels and can tell you that they are in fact better than new york city bagels . i ca n’t even believe i ’m saying that , but it ’s true . you all need to do what you can to get over there to get some of these bagels . they ’re unbelievable . i ca n’t explain with words exactly why they ’re so amazing , but trust me , you will love yourself for eating these bagels . coffee is n’t that great , but it does n’t matter . get these bagels
the main reason i go here is for the bento boxes -LRB- see example pic -RRB- . made fresh every day , and when they ’re gone , they ’re gone . on my way home from work it ’s a toss up whether there will be any le when i get there at 5:30 . i would by no means call them spectacular , but they ’re good enough that i stop in every weeks i like to pick up some of the nori maki as well -LRB- see pic -RRB- one thing i wish they had more o en is the spam and egg onigiri -LRB- see pic -RRB- . very cool . i ’m told you can order them in advance , so may have to do that

8

Filtering (DCF) method [21] which uses Marginalized De-noising Auto-Encoder (mDA) [7] instead. e Convolutional Matrix Factorization (ConvMF) model [16] uses a CNN to process the description associated with the item and feed the resulting latent vectors into a PMF model for rating prediction. e Multi-View Deep Neural Net (MV-DNN) model [10] uses a deep neural net to map user’s and item’s content into a shared latent space such that their similarity in that space is maximized. [29] proposed to generate the latent factors of items – music in this case— from the content, audio signals. e predicted latent factors of the item were then used in a CF style with the latent factors of the user. [3] also proposed a similar technique but adapted to recommending scienti c-articles. [9] used a deep neural net to learn a latent representation from video content which is then fed into a deep ranking network.
Prior research has also used deep neural nets for learning latent factors from ratings alone, i.e., without using any content or review. Collaborative De-noising Auto-Encoder model (CDAE) [41] learns to reconstruct user’s feedback from a corrupted version of the same.
4.2 Comparison to Related Architectures
4.2.1 Student-Teacher Models. Student-Teacher models [6, 13] also have two networks: a Teacher Network, which is large and complex, and typically an ensemble of di erent models, is rst trained to make predictions, and a much simpler Student Network, which learns to emulate the output of the Teacher Network, is trained later. ere are substantial di erences between StudentTeacher models and TransNets in how they are structured. Firstly, in Student-Teacher models, the input to both the student and the teacher models are the same. For example, in the case of digit recognition, both networks input the same image of the digit. However, in TransNets, the inputs to the two networks are di erent. In the Target, there is only one input – the review by userA for an itemB designated as re AB . But, in the Source, there are two inputs: all the reviews wri en by userA sans re AB and all the reviews wri en for itemB sans re AB . Secondly, in Student-Teacher models, the Teacher is considerably complex in terms of width and depth, and the Student is more light-weight, trying to mimic the Teacher. In TransNets, the complexities are reversed. e Target is lean while the Source is heavy-weight, o en processing large pieces of text using twice the number of parameters as the Target. irdly, in Student-Teacher models, the Teacher is pre-trained whereas in TransNets the Target is trained simultaneously with the Source. A recently proposed Student-Teacher model in [15] does train both the Student and the Teacher simultaneously. Also, in Student-Teacher models, the emphasis is on learning a simpler and easier model that can achieve similar results as a very complex model. But in TransNets, the objective is to learn how to transform a source representation to a target representation.
4.2.2 Generative Adversarial Networks. TransNets also bear semblance to GANs [12, 31] since both are a empting to generate an output which is similar to realistic data. But the models are fundamentally di erent. Firstly, unlike GAN where the Generative network generates an output from a random starting point, TransNets have a starting point for each example – the reviews wri en by the user and those wri en for the item. Secondly, the Adversarial network in GAN tries to classify if the output is real or

synthetic. In TransNets, although the objective is to minimize the dissimilarity between the generated representation and that of the real input, there is no adversarial classi er that a empts to separate each out. irdly, in GANs, the adversarial network needs to learn a notion of ‘real’ outputs, which is quite generic. In TransNets, there is always a speci c real output to compare to and does not need to learn what a generic real output will look like.

5 CONCLUSIONS

Using reviews for improving recommender systems is an important

task and is gaining a lot of a ention in the recent years. A recent

neural net model, DeepCoNN, uses the text of the reviews wri en by

the user and for the item to learn their latent representations, which

are then fed into a regression layer for rating prediction. However,

its performance is dependent on having access to the user-item

pairwise review, which is unavailable in real-world se ings.

In this paper, we propose a new model called TransNets which

extends DeepCoNN with an additional T

layer. is addi-

tional layer learns to transform the latent representations of user

and item into that of their pair-wise review so that at test time,

an approximate representation of the target review can be gener-

ated and used for making the predictions. We also showed how

TransNets can be extended to learn user and item representations

from ratings only which can be used in addition to the generated

review representation. Our experiments showed that TransNets and

its extended version can improve the state-of-the-art substantially.

ACKNOWLEDGMENTS
We would like to thank Kathryn Mazaitis for her assistance with the GPU machines. is research was supported in part by Yahoo! through the CMU-Yahoo InMind project.

REFERENCES
[1] Gediminas Adomavicius and Alexander Tuzhilin. 2008. Context-aware Recommender Systems. In Proceedings of the 2008 ACM Conference on Recommender Systems (RecSys ’08). 335–336.
[2] Amjad Almahairi, Kyle Kastner, Kyunghyun Cho, and Aaron Courville. 2015. Learning Distributed Representations from Reviews for Collaborative Filtering. In Proceedings of the 9th ACM Conference on Recommender Systems (RecSys ’15). 147–154.
[3] Trapit Bansal, David Belanger, and Andrew McCallum. 2016. Ask the GRU: Multi-task Learning for Deep Text Recommendations. In Proceedings of the 10th ACM Conference on Recommender Systems (RecSys ’16). 107–114.
[4] Yang Bao, Hui Fang, and Jie Zhang. 2014. TopicMF: Simultaneously Exploiting Ratings and Reviews for Recommendation. In Proceedings of the Twenty-Eighth AAAI Conference on Arti cial Intelligence (AAAI’14). 2–8.
[5] David M. Blei, Andrew Y. Ng, and Michael I. Jordan. 2003. Latent Dirichlet Allocation. J. Mach. Learn. Res. 3 (March 2003), 993–1022.
[6] Cristian Buciluaˇ, Rich Caruana, and Alexandru Niculescu-Mizil. 2006. Model Compression. In Proceedings of the 12th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD ’06). 535–541.
[7] Minmin Chen, Zhixiang Xu, Kilian Q. Weinberger, and Fei Sha. 2012. Marginalized Denoising Autoencoders for Domain Adaptation. In Proceedings of the
29th International Coference on International Conference on Machine Learning (ICML’12). 1627–1634. [8] Ronan Collobert, Jason Weston, Le´on Bo ou, Michael Karlen, Koray Kavukcuoglu, and Pavel Kuksa. 2011. Natural Language Processing (Almost) from Scratch. J. Mach. Learn. Res. 12 (Nov. 2011), 2493–2537. [9] Paul Covington, Jay Adams, and Emre Sargin. 2016. Deep Neural Networks for YouTube Recommendations. In Proceedings of the 10th ACM Conference on Recommender Systems (RecSys ’16). 191–198. [10] Ali Mamdouh Elkahky, Yang Song, and Xiaodong He. 2015. A Multi-View Deep Learning Approach for Cross Domain User Modeling in Recommendation Systems. In Proceedings of the 24th International Conference on World Wide Web (WWW ’15). 278–288.

9

[11] Ian Goodfellow, Yoshua Bengio, and Aaron Courville. 2016. Deep Learning. MIT Press. h p://www.deeplearningbook.org.
[12] Ian J. Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David WardeFarley, Sherjil Ozair, Aaron Courville, and Yoshua Bengio. 2014. Generative Adversarial Nets. In Proceedings of the 27th International Conference on Neural Information Processing Systems (NIPS’14). 2672–2680.
[13] Geo rey E. Hinton, Oriol Vinyals, and Je rey Dean. 2014. Distilling the Knowledge in a Neural Network. In Deep Learning and Representation Learning Workshop (NIPS ’14).
[14] Sepp Hochreiter and Ju¨rgen Schmidhuber. 1997. Long Short-Term Memory. Neural Computation 9, 8 (Nov. 1997), 1735–1780.
[15] Zhiting Hu, Xuezhe Ma, Zhengzhong Liu, Eduard Hovy, and Eric Xing. 2016. Harnessing Deep Neural Networks with Logic Rules. In Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics (ACL). 2410– 2420.
[16] Donghyun Kim, Chanyoung Park, Jinoh Oh, Sungyoung Lee, and Hwanjo Yu. 2016. Convolutional Matrix Factorization for Document Context-Aware Recommendation. In Proceedings of the 10th ACM Conference on Recommender Systems (RecSys ’16). 233–240.
[17] Diederik P. Kingma and Jimmy Ba. 2014. Adam: A Method for Stochastic Optimization. In Proceedings of the 3rd International Conference on Learning Representations (ICLR).
[18] Yehuda Koren. 2008. Factorization Meets the Neighborhood: A Multifaceted Collaborative Filtering Model. In Proc. KDD ’08. 426–434.
[19] oc V Le and Tomas Mikolov. 2014. Distributed Representations of Sentences and Documents.. In ICML, Vol. 14. 1188–1196.
[20] Y. Lecun, L. Bo ou, Y. Bengio, and P. Ha ner. 1998. Gradient-based learning applied to document recognition. Proc. IEEE 86, 11 (1998), 2278–2324.
[21] Sheng Li, Jaya Kawale, and Yun Fu. 2015. Deep Collaborative Filtering via Marginalized Denoising Auto-encoder. In Proceedings of the 24th ACM International on Conference on Information and Knowledge Management (CIKM ’15). 811–820.
[22] Guang Ling, Michael R. Lyu, and Irwin King. 2014. Ratings Meet Reviews, a Combined Approach to Recommend. In Proceedings of the 8th ACM Conference on Recommender Systems (RecSys ’14). 105–112.
[23] Christopher D. Manning, Mihai Surdeanu, John Bauer, Jenny Finkel, Steven J. Bethard, and David McClosky. 2014. e Stanford CoreNLP Natural Language Processing Toolkit. In Association for Computational Linguistics (ACL) System Demonstrations. 55–60.
[24] Julian McAuley and Jure Leskovec. 2013. Hidden Factors and Hidden Topics: Understanding Rating Dimensions with Review Text. In Proceedings of the 7th ACM Conference on Recommender Systems (RecSys ’13). 165–172.
[25] Julian McAuley, Rahul Pandey, and Jure Leskovec. 2015. Inferring Networks of Substitutable and Complementary Products. In Proceedings of the 21th ACM
SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD ’15). 785–794. [26] Julian McAuley, Christopher Targe , Qinfeng Shi, and Anton van den Hengel. 2015. Image-Based Recommendations on Styles and Substitutes. In Proceedings
of the 38th International ACM SIGIR Conference on Research and Development in Information Retrieval (SIGIR ’15). 43–52. [27] Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg Corrado, and Je rey Dean. 2013. Distributed Representations of Words and Phrases and eir Compositionality. In
Proceedings of the 26th International Conference on Neural Information Processing Systems (NIPS’13). 3111–3119. [28] Vinod Nair and Geo rey E. Hinton. 2010. Recti ed Linear Units Improve Restricted Boltzmann Machines. In Proceedings of the 27th International Conference on Machine Learning (ICML-10), June 21-24, 2010, Haifa, Israel. 807–814. [29] Aa¨ron van den Oord, Sander Dieleman, and Benjamin Schrauwen. 2013. Deep Content-based Music Recommendation. In Proceedings of the 26th International Conference on Neural Information Processing Systems (NIPS’13). 2643–2651. [30] Je rey Pennington, Richard Socher, and Christopher D. Manning. 2014. GloVe: Global Vectors for Word Representation. In Empirical Methods in Natural Language Processing (EMNLP). 1532–1543. [31] Sco Reed, Zeynep Akata, Xinchen Yan, Lajanugen Logeswaran, Bernt Schiele, and Honglak Lee. 2016. Generative Adversarial Text to Image Synthesis. In
Proceedings of the 33rd International Conference on International Conference on Machine Learning - Volume 48 (ICML’16). 1060–1069. [32] Ste en Rendle. 2010. Factorization Machines. In Proceedings of the 2010 IEEE International Conference on Data Mining (ICDM ’10). 995–1000. [33] Ruslan Salakhutdinov and Andriy Mnih. 2007. Probabilistic Matrix Factorization. In Proceedings of the 20th International Conference on Neural Information Processing Systems (NIPS’07). Curran Associates Inc., USA, 1257–1264. h p://dl.acm.org/citation.cfm?id=2981562.2981720 [34] Sungyong Seo, Jing Huang, Hao Yang, and Yan Liu. 2017. Representation Learning of Users and Items for Review Rating Prediction Using A ention-based Convolutional Neural Network. In 3rd International Workshop on Machine Learning Methods for Recommender Systems (MLRec) (SDM ’17).

[35] Richard Socher, Alex Perelygin, Jean Wu, Jason Chuang, Christopher D. Manning, Andrew Y. Ng, and Christopher Po s. 2013. Recursive Deep Models for Semantic Compositionality Over a Sentiment Treebank. In Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing. Association for Computational Linguistics, 1631–1642.
[36] Nitish Srivastava, Geo rey Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdinov. 2014. Dropout: A Simple Way to Prevent Neural Networks from Over ing. J. Mach. Learn. Res. 15, 1 (2014), 1929–1958.
[37] Yunzhi Tan, Min Zhang, Yiqun Liu, and Shaoping Ma. 2016. Rating-boosted Latent Topics: Understanding Users and Items with Ratings and Reviews. In Pro-
ceedings of the Twenty-Fi h International Joint Conference on Arti cial Intelligence (IJCAI’16). 2640–2646. [38] Pascal Vincent, Hugo Larochelle, Isabelle Lajoie, Yoshua Bengio, and PierreAntoine Manzagol. 2010. Stacked Denoising Autoencoders: Learning Useful Representations in a Deep Network with a Local Denoising Criterion. J. Mach. Learn. Res. 11 (Dec. 2010), 3371–3408. [39] Chong Wang and David M. Blei. 2011. Collaborative Topic Modeling for Recommending Scienti c Articles. In Proceedings of the 17th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD ’11). 448–456. [40] Hao Wang, Naiyan Wang, and Dit-Yan Yeung. 2015. Collaborative Deep Learning for Recommender Systems. In Proceedings of the 21th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD ’15). 1235–1244. [41] Yao Wu, Christopher DuBois, Alice X. Zheng, and Martin Ester. 2016. Collaborative Denoising Auto-Encoders for Top-N Recommender Systems. In Proceedings
of the Ninth ACM International Conference on Web Search and Data Mining (WSDM ’16). 153–162. [42] Xing Yi, Liangjie Hong, Erheng Zhong, Nanthan Nan Liu, and Suju Rajan. 2014. Beyond Clicks: Dwell Time for Personalization. In Proceedings of the 8th ACM Conference on Recommender Systems (RecSys ’14). 113–120. [43] Yongfeng Zhang, Guokun Lai, Min Zhang, Yi Zhang, Yiqun Liu, and Shaoping Ma. 2014. Explicit Factor Models for Explainable Recommendation Based on Phrase-level Sentiment Analysis. In Proceedings of the 37th International ACM SIGIR Conference on Research & Development in Information Retrieval (SIGIR ’14). 83–92. [44] Lei Zheng, Vahid Noroozi, and Philip S. Yu. 2017. Joint Deep Modeling of Users and Items Using Reviews for Recommendation. In Proceedings of the Tenth ACM International Conference on Web Search and Data Mining (WSDM ’17). 425–434.

10

