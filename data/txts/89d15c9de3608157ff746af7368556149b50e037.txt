Language Modeling with Sparse Product of Sememe Experts
Yihong Gu1,2,‚àó Jun Yan1,3,‚àó Hao Zhu1,2,‚àó Zhiyuan Liu1,2,‚Ä† Ruobing Xie4 Maosong Sun1,2 Fen Lin4 Leyu Lin4 1Institute for ArtiÔ¨Åcial Intelligence State Key Lab on Intelligent Technology and Systems
2Department of CST, 3Department of EE, Tsinghua University, Beijing, China 4Search Product Center, WeChat Search Application Department, Tencent {gyh15,j-yan15,zhuhao15}@mails.tsinghua.edu.cn, {lzy,sms}@tsinghua.edu.cn, xrbsnowing@163.com, {felicialin,goshawklin}@tencent.com

arXiv:1810.12387v1 [cs.CL] 29 Oct 2018

Abstract
Most language modeling methods rely on large-scale data to statistically learn the sequential patterns of words. In this paper, we argue that words are atomic language units but not necessarily atomic semantic units. Inspired by HowNet, we use sememes, the minimum semantic units in human languages, to represent the implicit semantics behind words for language modeling, named Sememe-Driven Language Model (SDLM). More speciÔ¨Åcally, to predict the next word, SDLM Ô¨Årst estimates the sememe distribution given textual context. Afterwards, it regards each sememe as a distinct semantic expert, and these experts jointly identify the most probable senses and the corresponding word. In this way, SDLM enables language models to work beyond word-level manipulation to Ô¨Åne-grained sememe-level semantics, and offers us more powerful tools to Ô¨Åne-tune language models and improve the interpretability as well as the robustness of language models. Experiments on language modeling and the downstream application of headline generation demonstrate the signiÔ¨Åcant effectiveness of SDLM. Source code and data used in the experiments can be accessed at https:// github.com/thunlp/SDLM-pytorch.
1 Introduction
Language Modeling (LM) aims to measure the probability of a word sequence, reÔ¨Çecting its Ô¨Çuency and likelihood as a feasible sentence in a human language. Language Modeling is an essential component in a wide range of natural language processing (NLP) tasks, such as Machine Translation (Brown et al., 1990; Brants et al., 2007), Speech Recognition (Katz, 1987), Information Retrieval (Berger and Lafferty, 1999; Ponte
‚àó Equal contribution. ‚Ä† Correspondence author.

context vector (a)
context vector (b)

Conventional Decoder

word distribution

Sememe Predictor

Sememe-Driven Decoder

sememe distribution

Sense Predictor

sense distribution

Word Predictor

word distribution

Figure 1: Decoder of (a) Conventional Language Model, (b) Sememe-Driven Language Model.

and Croft, 1998; Miller et al., 1999; Hiemstra, 1998) and Document Summarization (Rush et al., 2015; Banko et al., 2000).
A probabilistic language model calculates the conditional probability of the next word given their contextual words, which are typically learned from large-scale text corpora. Taking the simplest language model for example, N-Gram estimates the conditional probabilities according to maximum likelihood over text corpora (Jurafsky, 2000). Recent years have also witnessed the advances of Recurrent Neural Networks (RNNs) as the state-of-the-art approach for language modeling (Mikolov et al., 2010), in which the context is represented as a low-dimensional hidden state to predict the next word.
Those conventional language models including neural models typically assume words as atomic symbols and model sequential patterns at word level. However, this assumption does not necessarily hold to some extent. Let us consider the following example sentence for which people want to predict the next word in the blank,

The U.S. trade deÔ¨Åcit last year is initially

estimated to be 40 billion

.

People may Ô¨Årst realize a unit should be Ô¨Ålled in, then realize it should be a currency unit. Based on the country this sentence is talking about, the U.S., one may conÔ¨Årm it should be an American cur-

rency unit and predict the word dollars. Here, the unit, currency, and American can be regarded as basic semantic units of the word dollars. This process, however, has not been explicitly taken into consideration by conventional language models. That is, although in most cases words are atomic language units, words are not necessarily atomic semantic units for language modeling. We argue that explicitly modeling these atomic semantic units could improve both the performance and the interpretability of language models.
Linguists assume that there is a limited close set of atomic semantic units composing the semantic meanings of an open set of concepts (i.e. word senses). These atomic semantic units are named sememes (Dong and Dong, 2006).i Since sememes are naturally implicit in human languages, linguists have devoted much effort to explicitly annotate lexical sememes for words and build linguistic common-sense knowledge bases. HowNet (Dong and Dong, 2006) is one of the representative sememe knowledge bases, which annotates each Chinese word sense with its sememes. The philosophy of HowNet regards the parts and attributes of a concept can be well represented by sememes. HowNet has been widely utilized in many NLP tasks such as word similarity computation (Liu, 2002) and sentiment analysis (Fu et al., 2013). However, less effort has been devoted to exploring its effectiveness in language models, especially neural language models.
It is non-trivial for neural language models to incorporate discrete sememe knowledge, as it is not compatible with continuous representations in neural models. In this paper, we propose a Sememe-Driven Language Model (SDLM) to leverage lexical sememe knowledge. In order to predict the next word, we design a novel sememesense-word generation process: (1) We Ô¨Årst estimate sememes‚Äô distribution according to the context. (2) Regarding these sememes as experts, we propose a sparse product of experts method to select the most probable senses. (3) Finally, the distribution of words could be easily calculated by marginalizing out the distribution of senses.
We evaluate the performance of SDLM on the language modeling task using a Chinese news-
i Note that although sememes are deÔ¨Åned as the minimum semantic units, there still exist several sememes for capturing syntactic information. For example, the word Âíå ‚Äúwith‚Äù corresponds to one speciÔ¨Åc sememe ÂäüËÉΩËØç ‚ÄúFunctWord‚Äù.

paper corpus People‚Äôs Daily ii (Renmin Ribao), and also on the headline generation task using the Large Scale Chinese Short Text Summarization (LCSTS) dataset (Hu et al., 2015). Experimental results show that SDLM outperforms all those data-driven baseline models. We also conduct case studies to show that our model can effectively predict relevant sememes given context, which can improve the interpretability and robustness of language models.

2 Background

Language models target at learning the

joint probability of a sequence of words

P (w1, w2, ¬∑ ¬∑ ¬∑ , wn), which is usually factor-

ized as P (w1, w2, ¬∑ ¬∑ ¬∑ , wn) =

n t=1

P

(wt

|w<t

).

Bengio et al. (2003) propose the Ô¨Årst Neural Lan-

guage Model as a feed-forward neural network.

Mikolov et al. (2010) use RNN and a softmax

layer to model the conditional probability. To be

speciÔ¨Åc, it can be divided into two parts in series. First, a context vector gt is derived from a deep

recurrent neural network. Then, the probability P (wt+1|w‚â§t) = P (wt+1; gt) is derived from a

linear layer followed by a softmax layer based on gt. Let RNN(¬∑, ¬∑; Œ∏NN) denote the deep

recurrent neural network, where Œ∏NN denotes the

parameters. The Ô¨Årst part can be formulated as

gt = RNN(xwt , {htl‚àí1}Ll=1; Œ∏NN). (1)

Here we use subscripts to denote layers and superscripts to denote timesteps. Thus htl represents the hidden state of the L-th layer at timestep t. xwt ‚àà RH0 is the input embedding of word wt where H0 is the input embedding size. We also have gt ‚àà RH1, where H1 is the dimension of the context vector.
Supposing that there are N words in the lan-
guage we want to model, the second part can be
written as

t+1 t

exp(gtTwwt+1 )

P (w ; g ) =

exp(gtTw

, )

(2)

w

w

where ww is the output embedding of word w and w1, w2, ¬∑ ¬∑ ¬∑ wN ‚àà RH2. Here H2 is the output embedding size. For a conventional neural lan-
guage model, H2 always equals to H1.

ii http://paper.people.com.cn/rmrb/

P(word) ‚Ä¶

Ê¢®‚º¶ ‚Äúpear‚Äù

ËãπÊûú ‚Äúapple‚Äù

P(sense) ‚Ä¶

Ê¢®‚º¶(‚ΩîÊûú) ‚Äúpear(fruit)‚Äù

ËãπÊûú(‚ΩîÊûú) ‚Äúapple(fruit)‚Äù

ËãπÊûú(ÁîµËÑë) ‚Äúapple(computer)‚Äù

sememe experts
context vector

√ó

0.9

‚Ä¶

x

‚Ä¶

√ó
0.1 x

√ó
0.2 x

√ó
0.1 x

√ó
0.3 x

√ó
0.2 x

‚ΩîÊûú ‚Äúfruit‚Äù

Ê†∑ÂºèÂÄº Êê∫Â∏¶ ‚ÄúPatternVal‚Äù ‚Äúbring‚Äù

ÁîµËÑë

ÁâπÂÆöÁâå‚º¶ ËÉΩ

‚Äúcomputer‚Äù ‚ÄúSpeBrand‚Äù ‚Äúable‚Äù

LSTM
Êàë ‚ÄúI‚Äù

LSTM
Âú® ‚Äúin‚Äù

LSTM
ÊûúÂõ≠ ‚Äúorchard‚Äù

LSTM
Êëò ‚Äúpick‚Äù

word
 ‚Äúapple‚Äù



‚Äúcomputer‚Äù

modifier

modifier

   

 

‚ÄúPatternVal‚Äù ‚Äúbring‚Äù ‚Äúable‚Äù ‚ÄúSpeBrand‚Äù

Sense #1: ()
‚Äúapple(computer)‚Äù

 ‚Äúfruit‚Äù
Sense #2: () ‚Äúapple(fruit)‚Äù

Figure 3: An example of the word-sense-sememe hierarchy.

Figure 2: An example of the architecture of our model.

Given the corpus {wt}nt=1, the loss function is deÔ¨Åned by the negative log-likelihood:

L(Œ∏) = ‚àí 1 n log P (wt|w<t; Œ∏), (3) n
t=1

where

Œ∏

=

{{

x

i

}

N i=1

,

{

wi

}

N i=1

,

Œ∏

NN

}

is

the

set

of

parameters that are needed to be trained.

3 Methodology

In this section, we present our SDLM which uti-
lizes sememe information to predict the probabil-
ity of the next word. SDLM is composed of three
modules in series: Sememe Predictor, Sense Pre-
dictor and Word Predictor. The Sememe Predictor
Ô¨Årst takes the context vector as input and assigns a
weight to each sememe. Then each sememe is re-
garded as an expert and makes predictions about
the probability distribution over a set of senses
in the Sense Predictor. Finally, the probability of
each word is obtained in the Word Predictor.
Here we use an example shown in Figure 2 to illustrate our architecture. Given context ÊàëÂú®Êûú Âõ≠Êëò ‚ÄúIn the orchard, I pick‚Äù, the actual next word could be ËãπÊûú ‚Äúapples‚Äù. From the context, especially the word ÊûúÂõ≠ ‚Äúorchard‚Äù and Êëò ‚Äúpick‚Äù, we
can infer that the next word probably represents
a kind of fruit. So the Sememe Predictor assigns a higher weight to the sememe Ê∞¥Êûú ‚Äúfruit‚Äù (0.9) and lower weights to irrelevant sememes like Áîµ ËÑë ‚Äúcomputer‚Äù (0.1). Therefore in the Sense Predictor, the sense ËãπÊûú (Ê∞¥Êûú) ‚Äúapple (fruit)‚Äù is assigned a much higher probability than the sense Ëãπ Êûú (ÁîµËÑë) ‚Äúapple (computer)‚Äù. Finally, the probability of the word ËãπÊûú ‚Äúapple‚Äù is calculated as the sum of the probabilities of its senses ËãπÊûú (Ê∞¥

Êûú) ‚Äúapple(fruit)‚Äù and ËãπÊûú (ÁîµËÑë) ‚Äúapple (computer)‚Äù.
In the following subsections, we Ô¨Årst introduce the word-sense-sememe hierarchy in HowNet, and then give details about our SDLM.
3.1 Word-Sense-Sememe Hierarchy
We also use the example of ‚Äúapple‚Äù to illustrate the word-sense-sememe hierarchy. As shown in Figure 3, the word ËãπÊûú ‚Äúapple‚Äù has two senses, one is the Apple brand, the other is a kind of fruit. Each sense is annotated with several sememes organized in a hierarchical structure. More speciÔ¨Åcally, in HowNet, sememes ‚ÄúPatternVal‚Äù, ‚Äúbring‚Äù, ‚ÄúSpeBrand‚Äù, ‚Äúcomputer‚Äù and ‚Äúable‚Äù are annotated with the word ‚Äúapple‚Äù and organized in a tree structure. In this paper, we ignore the structural relationship between sememes. For each word, we group all its sememes as an unordered set.
We present the notations that we use in the following subsections as follows. We deÔ¨Åne the overall sememe, sense, and word set as E, S and W. And we suppose the corpus contains K = |E| sememes, M = |S| senses and N = |W| words. For word w ‚àà W, we denote its corresponding sense set as S(w). For sense s ‚àà S(w), we denote its corresponding sememes as an unordered set E (s) = {en1 , en2 , ¬∑ ¬∑ ¬∑ , enk } ‚äÇ E = {ek}Kk=1.
3.2 Sememe Predictor
The Sememe Predictor takes the context vector g ‚àà RH1 as input and assigns a weight to each sememe. We assume that given the context w1, w2, ¬∑ ¬∑ ¬∑ , wt‚àí1, the events that word wt contains sememe ek (k ‚àà {1, 2, ¬∑ ¬∑ ¬∑ , K}) are independent, since the sememe is the minimum semantic unit and there is no semantic overlap between any two different sememes. For simplicity, we ignore

the superscript t. We design the Sememe Predictor as a linear decoder with the sigmoid activation function. Therefore, qk, the probability that the next word contains sememe ek, is formulated as

qk = P (ek|g) = œÉ(gTvk + bk),

(4)

where vk ‚àà RH1, bk ‚àà R are trainable parameters, and œÉ(¬∑) denotes the sigmoid activation function.

3.3 Sense Predictor and Word Predictor
The architecture of the Sense Predictor is moti-
vated by Product of Experts (PoE) (Hinton, 1999).
We regard each sememe as an expert that only
makes predictions on the senses connected with it. Let D(ek) denote the set of senses that contain sememe ek, the k-th expert. Different from conventional neural language models, which directly use the inner product of the context vector g ‚àà RH1 and the output embedding ww ‚àà RH2 for word w to generate the score for each word, we use œÜ(k)(g, w) to calculate the score given by expert ek. And we choose a bilinear function parameterized with a matrix Uk ‚àà RH1√óH2 as a straight implementation of œÜ(k)(¬∑, ¬∑):

œÜ(k)(g, w) = gTUkw.

(5)

Let ws denote the output embedding of sense
s. The score of sense s provided by sememe expert ek can be written as œÜ(k)(g, ws). Therefore, P (ek)(s|g), the probability of sense s given by ex-
pert ek, is formulated as

P (ek)(s|g) =

exp(qkCk,sœÜ(k)(g, ws))

, (6)

s ‚ààD(ek) exp(qkCk,s œÜ(k)(g, ws ))

where Ck,s is a normalization constant because sense s is not connected to all experts (the connections are sparse with approximately ŒªN edges, Œª < 5). Here we can choose either Ck,s = 1/|E(s)| (left normalization) or Ck,s = 1/ |E(s)||D(ek)| (symmetric normalization).
In the Sense Predictor, qk can be viewed as a gate which controls the magnitude of the term Ck,sœÜ(k)(g, wws), thus control the Ô¨Çatness of the sense distribution provided by sememe expert ek. Consider the extreme case when qk ‚Üí 0, the prediction will converge to the discrete uniform dis-
tribution. Intuitively, it means that the sememe ex-
pert will refuse to provide any useful information
when it is not likely to be related to the next word.
Finally, we summarize the predictions on sense s by taking the product of the probabilities given

by relevant experts and then normalize the result; that is to say, P (s|g), the probability of sense s, satisÔ¨Åes

P (s|g) ‚àù

P (ek)(s|g).

(7)

ek ‚ààE(s)

Using Equation 5 and 6, we can formulate P (s|g) as

P (s|g) =

exp( ek‚ààE(s) qkCk,sgTUkws) . (8) s exp( ek‚ààE(s ) qkCk,s gTUkws )

It should be emphasized that all the supervision information provided by HowNet is embodied in the connections between the sememe experts and the senses. If the model wants to assign a high probability to sense s, it must assign a high probability to some of its relevant sememes. If the model wants to assign a low probability to sense s, it can assign a low probability to its relevant sememes. Moreover, the prediction made by sememe expert ek has its own tendency because of its own œÜ(k)(¬∑, ¬∑). Besides, the sparsity of connections between experts and senses is also determined by HowNet itself. For our dataset, on average, a word is connected with 3.4 sememe experts and each sememe expert will make predictions about 22 senses.
As illustrated in Figure 2, in the Word Predictor, we get P (w|g), the probability of word w, by summing up probabilities of corresponding s given by the Sense Predictor, that is

P (w|g) =

P (s|g).

(9)

s‚ààS (w)

3.4 Implementation Details
Basis Matrix Actually, HowNet contains K ‚âà 2000 sememes. In practice, we cannot directly introduce K √ó H1 √ó H2 parameters, which might be computationally infeasible and lead to overÔ¨Åtting. To address this problem, we apply a weightsharing trick called the basis matrix. We use R basis matrices and their weighted sum to estimate Uk :

R

Uk = Œ±k,rQr,

(10)

r=1

where Qr ‚àà RH1√óH2, Œ±k,r > 0 are trainable pa-

rameters, and

R r=1

Œ±k,r

=

1.

Weight Tying To incorporate the weight tying

strategy (Inan et al., 2017; Press and Wolf, 2017),

we use the same output embedding for multiple

senses of a word. To be speciÔ¨Åc, the sense output embedding ws for each s ‚àà S(w) is the same as the word input embedding xw.
4 Experiments
We evaluate our SDLM on a Chinese language modeling dataset, namely People‚Äôs Daily based on perplexity.iii Furthermore, to show that our SDLM structure can be a generic Chinese word-level decoder for sequence-to-sequence learning, we conduct a Chinese headline generation experiment on the LCSTS dataset. Finally, we explore the interpretability of our model with cases, showing the effectiveness of utilizing sememe knowledge.
4.1 Language Modeling
Dataset
We choose the People‚Äôs Daily Corpus, which is widely used for Chinese NLP tasks, as the resource. It contains one month‚Äôs news text from People‚Äôs Daily (Renmin Ribao). Taking Penn Treebank (PTB) (Marcus et al., 1993) as a reference, we build a dataset for Chinese language modeling based on the People‚Äôs Daily Corpus with 734k, 10k and 19k words in the training, validation and test set. After the preprocessing similar to (Mikolov et al., 2010) (see Appendix A), we get our dataset and the Ô¨Ånal vocabulary size is 13,476.
Baseline
As for baselines, we consider three kinds of neural language modeling architectures with LSTM cells: simple LSTM, Tied LSTM and AWD-LSTM. LSTM and Tied LSTM Zaremba et al. (2014) use the dropout strategy to prevent overÔ¨Åtting for neural language models and adopt it to two-layer LSTMs with different embedding and hidden size: 650 for medium LSTM, and 1500 for large LSTM. Employing the weight tying strategy, we get Tied LSTM with better performance. We set LSTM and Tied LSTM of medium and large size as our baseline models and use the code from PyTorch examplesiv as their implementations. AWD-LSTM Based on several strategies for regularizing and optimizing LSTM-based language models, Merity et al. (2018) propose AWD-LSTM
iii Although we only conduct experiments on Chinese corpora, we argue that this model has the potential to be applied to other languages in the light of works on construction sememe knowledge bases for other languages, such as (Qi et al., 2018).
iv https://github.com/pytorch/examples/ tree/master/word_language_model

as a three-layer neural network, which serves as a very strong baseline for word-level language modeling. We build it with the code released by the authorsv. Variants of Softmax Meanwhile, to compare our SDLM with other language modeling decoders, we set cHSM (Class-based Hierarchical Softmax) (Goodman, 2001), tHSM (Tree-based Hierarchical Softmax) (Mikolov et al., 2013) and MoS (Mixture of Softmaxes) (Yang et al., 2018) as the baseline add-on structures to the architectures above.
Experimental Settings
We apply our SDLM and other variants of softmax structures to the architectures mentioned above: LSTM (medium / large), Tied LSTM (medium / large) and AWD-LSTM. MoS and SDLM are only applied on the models that incorporate weight tying, while tHSM is only applied on the models without weight tying, since it is not compatible with this strategy.
For a fair comparison, we train these models with same experimental settings and conduct a hyper-parameter search for baselines as well as our models (the search setting and the optimal hyper-parameters can be found in Appendix C.1). We keep using these hyper-parameters in our SDLM for all architectures. It should be emphasized that we use the SGD optimizer for all architectures, and we decrease the learning rate by a factor of 2 if no improvement is observed on the validation set. We uniformly initialize the word embeddings, the class embeddings for cHSM and the non-leaf embeddings for tHSM in [‚àí0.1, 0.1]. In addition, we set R, the number of basis matrices, to 5 in Tied LSTM architecture and to 10 in AWD-LSTM architecture. We choose the left normalization strategy because it performs better.
Experimental Results
Table 1 shows the perplexity on the validation and test set of our models and the baseline models. From Table 1, 2, and 3, we can observe that: 1. Our models outperform the corresponding baseline models of all structures, which indicates the effectiveness of our SDLM. Moreover, our SDLM not only consistently outperforms state-of-the-art MoS model, but also offers much better interpretability (as described in Sect. 4.3), which
v https://github.com/salesforce/ awd-lstm-lm

Model LSTM (medium)
+ cHSM + tHSM Tied LSTM (medium) + cHSM + MoS + SDLM LSTM (large) + cHSM + tHSM Tied LSTM (large) + cHSM + MoS + SDLM AWD-LSTMiv + MoS + SDLM

#Paras 24M 24M 24M 15M 15M 17M 17M 76M 76M 76M 56M 56M 67M 67M
26M 26M 27M

Validation 116.46 129.12 151.00 105.35 116.78 98.47 97.75 112.39 120.07 140.41 101.46 108.28 94.91 94.24
89.35 92.98 88.16

Test 115.51 128.12 150.87 104.67 115.66
98.12 97.32 111.66 119.45 139.61 100.71 107.52 94.40 93.60
88.86 92.76 87.66

Table 1: Single model perplexity on validation and test sets on the People‚Äôs Daily dataset.

makes it possible to interpret the prediction process of the language model. Note that under a fair comparison, we do not see MoS‚Äôs improvement over AWD-LSTM while our SDLM outperforms it by 1.20 with respect to perplexity on the test set. 2. To further locate the performance improvement of our SDLM, we study the perplexity of the single-sense words and multi-sense words separately on Tied LSTM (medium) and Tied LSTM (medium) + SDLM. Improvements with respect to perplexity are presented in Table 2. The performance on both single-sense words and multi-sense words gets improved while multi-sense words beneÔ¨Åt more from SDLM structure because they have richer sememe information. 3. In Table 3 we study the perplexity of words with different mean number of sememes. We can see that our model outperforms baselines in all cases and is expected to beneÔ¨Åt more as the mean number of sememes increases. 1. Our models outperform the corresponding baseline models of all structures, which indicates the effectiveness of our SDLM. Moreover, our SDLM not only consistently outperforms state-of-the-art MoS model, but also offers much better interpretability (as described in Sect. 4.3), which makes it possible to interpret the prediction process of the language model. Note that under a fair comparison, we do not see MoS‚Äôs improvement over AWD-LSTM while our SDLM outperforms it by 1.20 with respect to perplexity on the test set. 2. To further locate the performance improve-
iv We Ô¨Ånd that multi-layer AWD-LSTM has problems converging when adopting cHSM, so we skip that result.

Baseline ppl SDLM ppl ‚àÜppl ‚àÜppl/Baseline ppl

#senses = 1 93.21 87.22 5.99 6.4%

#senses > 1 121.18 111.88 9.29 7.8%

Table 2: Perplexity of words with different number of senses on the test set.

Baseline ppl SDLM ppl ‚àÜppl ‚àÜppl/Baseline ppl

[1, 2) 71.56 68.47 3.09 4.3%

[2, 4) 161.32 114.95
16.36 10.1%

[4, 7) 557.26 465.29
91.98 16.5%

[7, 14) 623.71 476.45 147.25 23.61%

Table 3: Perplexity of words with different mean number of sememes on the test set.

ment of our SDLM, we study the perplexity of the single-sense words and multi-sense words separately on Tied LSTM (medium) and Tied LSTM (medium) + SDLM. Improvements with respect to perplexity are presented in Table 2. The performance on both single-sense words and multi-sense words gets improved while multi-sense words beneÔ¨Åt more from SDLM structure because they have richer sememe information. 3. In Table 3 we study the perplexity of words with different mean number of sememes. We can see that our model outperforms baselines in all cases and is expected to beneÔ¨Åt more as the mean number of sememes increases.
We also test the robustness of our model by randomly removing 10% sememe-sense connections in HowNet. The test perplexity for Tied LSTM (medium) + SDLM slightly goes up to 97.67, compared to 97.32 with a complete HowNet, which shows that our model is robust to tiny incompleteness of annotations. However, the performance of out model is still largely dependent upon the accuracy of sememe annotations. As HowNet is continuously updated, we expect our model to perform better with sememe knowledge of higher quality.
4.2 Headline Generation
Dataset
We use the LCSTS dataset to evaluate our SDLM structure as the decoder of the sequence-tosequence model. As its author suggests, we divide the dataset into the training set, the validation set and the test set, whose sizes are 2.4M, 8.7k and 725 respectively. Details can be found in Appendix B.

Models
For this task, we consider two models for comparison.
RNN-context As described in (Bahdanau et al., 2015), RNN-context is a basic sequence-tosequence model with a bi-LSTM encoder, an LSTM decoder and attention mechanism adopted. The context vector is concatenated with the word embedding at each timestep when decoding. It‚Äôs widely used for sequence-to-sequence learning, so we set it as the baseline model.
RNN-context-SDLM Based on RNN-context, we substitute the decoder with our proposed SDLM and name it RNN-context-SDLM.
Experimental Settings
We implement our models with PyTorch, on top of the OpenNMT librariesv. For both models, we set the word embedding size to 250, the hidden unit size to 250, the vocabulary size to 40000, and the beam size of the decoder to 5. For RNN-contextSDLM, we set the number of basis matrices to 3. We conduct a hyper-parameter search for both models (see Appendix C.2 for settings and optimal hyper-parameters).
Experimental Results
Following previous works, we report the F1-score of ROUGE-1, ROUGE-2, and ROUGE-L on the test set. Table 4 shows that our model outperforms the baseline model on all metrics. We attribute the improvement to the use of SDLM structure.
Words in headlines do not always appear in the corresponding articles. However, words with the same sememes have a high probability to appear in the articles intuitively. Therefore, a probable reason for the improvement is that our model could predict sememes highly relevant to the article, thus generate more accurate headlines. This could be corroborated by our case study.

Model RNN-context RNN-context-SDLM

Rouge-1 38.2 38.8

Rouge-2 25.7 26.2

Rouge-L 35.4 36.1

Table 4: ROUGE scores of both models on the LCSTS test set.

4.3 Case Study The above experiments demonstrate the effectiveness of our SDLM. Here we present some samples
v http://opennmt.net

from the test set of the People‚Äôs Daily Corpus in Table 5 as well as the LCSTS dataset in Table 6 and conduct further analysis.
For each example of language modeling, given the context of previous words, we list the Top 5 words and Top 5 sememes predicted by our SDLM. The target words and the sememes annotated with them in HowNet are blackened. Note that if the target word is an out-of-vocabulary (OOV) word, helpful sememes that are related to the target meaning are blackened.
Sememes annotated with the corresponding sense of the target word ÁæéÂÖÉ ‚Äúdollar‚Äù are Âçï‰Ωç ‚Äúunit‚Äù, ÂïÜ‰∏ö ‚Äúcommerce‚Äù, ÈáëËûç ‚ÄúÔ¨Ånance‚Äù, Ë¥ßÂ∏Å ‚Äúmoney‚Äù and ÁæéÂõΩ ‚ÄúUS‚Äù. In Example (1), the target word ‚Äúdollar‚Äù is predicted correctly and most of its sememes are activated in the predicting process. It indicates that our SDLM has learned the word-sense-sememe hierarchy and used sememe knowledge to improve language modeling.
Example (2) shows that our SDLM can provide interpretable results on OOV word prediction with sememe information associated with it. The target word here should be the name of the Albanian prime minister, which is out of vocabulary. But with our model, one can still conclude that this word is probably relevant to the sememe ‚Äúpolitics‚Äù, ‚Äúperson‚Äù, ‚ÄúÔ¨Çowers‚Äù, ‚Äúundertake‚Äù and ‚Äúwaters‚Äù, most of which characterize the meaning of this OOV word ‚Äì the name of a politician. This feature can be helpful when the vocabulary size is limited or there are many terminologies and names in the corpus.
For the example of headline generation, given the article and previous words, when generating the word Áîü ‚Äústudent‚Äù, except the sememe È¢ÑÊñô

Example (1)

ÂéªÂπ¥ ÁæéÂõΩ Ë¥∏ÊòìÈÄÜÂ∑Æ ÂàùÊ≠• ‰º∞ËÆ° ‰∏∫ <N>

„ÄÇ

The U.S. trade deÔ¨Åcit last year is initially estimated to be <N>

.

ÁæéÂÖÉ ‚Äúdollar‚Äù Êó•ÂÖÉ ‚Äúyen‚Äù
ÂïÜ‰∏ö ‚Äúcommerce‚Äù Â§öÂ∞ë ‚Äúamount‚Äù

Top 5 word prediction

Ôºå ‚Äú,‚Äù

„ÄÇ ‚Äú.‚Äù

Âíå ‚Äúand‚Äù

Top 5 sememe prediction

ÈáëËûç ‚ÄúÔ¨Ånance‚Äù Âçï‰Ωç ‚Äúunit‚Äù

‰∏ì ‚Äúproper name‚Äù

Example (2)

Èòø ÊÄªÁêÜ

Â∑≤ Á≠æÁΩ≤ ‰∫Ü ‰∏Ä È°π ÂëΩ‰ª§ „ÄÇ

Albanian Prime Minister

has signed an order.

ÂÜÖ ‚Äúinside‚Äù Â°î ‚Äútower‚Äù
Êîø ‚Äúpolitics‚Äù ÊãÖ‰ªª ‚Äúundertake‚Äù

Top 5 word prediction

<unk>

Âú® ‚Äúat‚Äù

Âíå ‚Äúand‚Äù

Top 5 sememe prediction

‰∫∫ ‚Äúperson‚Äù

Ëä±Ëçâ ‚ÄúÔ¨Çowers‚Äù

Ê∞¥Âüü ‚Äúwaters‚Äù

Table 5: Some examples of word and sememe predictions on the test set of the People‚Äôs Daily Corpus.

Article 8 Êó• Ôºå Èòú Êñ∞ ‰∏Ä ÂºÄ ÂÆùÈ©¨ ËΩøËΩ¶ ÂèÇÂä† È´òËÄÉ ÁöÑ Áî∑ ËÄÉÁîü ËÄÉÂú∫ ‰ΩúÂºä Ë¢´ Êäì Ôºå Âõ† ‰∏çÊª° ÁõëËÄÉ ËÄÅÂ∏à Ê≤°Êî∂ ‰ΩúÂºä Êâã Êú∫ Ôºå ‰ªé ËÉåÂêé ‰∏Ä ËÑö Â∞Ü Â•≥ ÁõëËÄÉ ËÄÅÂ∏à ‰ªé ÊúÄÂêé ‰∏Ä Êéí Ë∏π Âà∞ ËÆ≤Âè∞ „ÄÇ Âπ∂ Âè£ Âá∫ ÁãÇ Ë®Ä Ôºö ‚Äú ‰Ω† Áü•ÈÅì Êàë Áà∏ ÊòØ Ë∞Å Âïä Ôºå ‰Ω† Â∞± Êü• Êàë Ôºü ‚Äù ÁõÆÂâç Ôºå Êâì‰∫∫ ËÄÉÁîü Â∑≤ Ë¢´ÊãòÁïô „ÄÇ On the 8th in Fuxin, a male student drove a BMW to take the college entrance exam and was caught cheating. Because the teacher conÔ¨Åscated his mobile phone, he kicked the teacher from the last row to the podium and shouted: ‚ÄùDo you know who my dad is? How dare you catch me!‚Äù Currently, this student has been detained.
Gold Áî∑Áîü È´òËÄÉ ‰ΩúÂºä ËøΩÊâì ÁõëËÄÉ ËÄÅÂ∏à Ôºö‰Ω† Áü•ÈÅì Êàë Áà∏ ÊòØ Ë∞ÅÔºü In the college entrance exam, a male student caught cheating hit the teacher: Do you know who my dad is?
RNN-context-SDLM È´òËÄÉ Áîü ‰ΩúÂºä Ë¢´ Êäì Ôºö‰Ω† Áü•ÈÅì Êàë Áà∏ ÊòØ Ë∞Å Âïä Ôºü In the college entrance exam, a student was caught cheating: Do you know who my dad is?
Top 5 sememe prediction ËÄÉËØï ‚Äúexam‚Äù Â≠¶‰π† ‚Äústudy‚Äù ÁâπÂÆöÁâåÂ≠ê ‚Äúbrand‚Äù È¢ÑÊñô ‚Äúpredict‚Äù È´òÁ≠â ‚Äúhigher‚Äù
Table 6: An example of generated headlines on the LCSTS test set.
‚Äúpredict‚Äù, all other Top 5 predicted sememes have high relevance to either the predicted word or the context. To be speciÔ¨Åc, the sememe Â≠¶‰π† ‚Äústudy‚Äù is annotated with Áîü ‚Äústudent‚Äù in HowNet. ËÄÉ ËØï ‚Äúexam‚Äù indicates ‚Äúcollege entrance exam‚Äù. Áâπ ÂÆö Áâå Â≠ê ‚Äúbrand‚Äù indicates ‚ÄúBMW‚Äù. And È´ò Á≠â ‚Äúhigher‚Äù indicates ‚Äúhigher education‚Äù, which is the next step after this exam. We can conclude that with sememe knowledge, our SDLM structure can extract critical information from both the given article and generated words explicitly and produce better summarization based on it.
5 Related Work
Neural Language Modeling. RNNs have achieved state-of-the-art performance in the language modeling task since Mikolov et al. (2010) Ô¨Årst apply RNNs for language modeling. Much work has been done to improve RNN-based language modeling. For example, a variety of work (Zaremba et al., 2014; Gal and Ghahramani, 2016; Merity et al., 2017, 2018) introduces many regularization and optimization methods for RNNs. Based on the observation that the word appearing in the previous context is more likely to appear again, some work (Grave et al., 2017a,b) proposes to use cache for improvements. In this paper, we mainly focus on the output decoder, the module between the context vector and the

predicted probability distribution. Similar to our SDLM, Yang et al. (2018) propose a high-rank model which adopts a Mixture of Softmaxes structure for the output decoder. However, our model is sememe-driven with each expert corresponding to an interpretable sememe.
Hierarchical Decoder Since softmax computation on large vocabulary is time-consuming, therefore being a dominant part of the model‚Äôs complexity, various hierarchical softmax models have been proposed to address this issue. These models can be categorized to class-based models and tree-based models according to their hierarchical structure. Goodman (2001) Ô¨Årst proposes the class-based model which divides the whole vocabulary into different classes and uses a hierarchical softmax decoder to model the probability as P(word) = P(word|class)P(class), which is similar to our model. For the tree-based models, all words are organized in a tree structure and the word probability is calculated as the probability of always choosing the correct child along the path from the root node to the word node. While Morin and Bengio (2005) utilize knowledge from WordNet to build the tree, Mnih and Hinton (2008) build it in a bootstrapping way and Mikolov et al. (2013) construct a Huffman Tree based on word frequencies. Recently, Jiang et al. (2017) reform the tree-based structure to make it more efÔ¨Åcient on GPUs. The major differences between our model and theirs are the purpose and the motivation. Our model targets at improving the performance and interpretability of language modeling using external knowledge in HowNet. Therefore, we take its philosophy of the word-sensesememe hierarchy to design our hierarchical decoder. Meanwhile, the class-based and tree-based models are mainly designed to speed up the softmax computation in the training process.
Sememe. Recently, there are a lot of works concentrating on utilizing sememe knowledge in traditional natural language processing tasks. For example, Niu et al. (2017) use sememe knowledge to improve the quality of word embeddings and cope with the problem of word sense disambiguation. Xie et al. (2017) apply matrix factorization to predict sememes for words. Jin et al. (2018) improve their work by incorporating character-level information. Our work extends the previous works and tries to combine word-sense-sememe hierar-

chy with the sequential model. To be speciÔ¨Åc, this is the Ô¨Årst work to improve the performance and interpretability of Neural Language Modeling with sememe knowledge.
Product of Experts. As Hinton (1999, 2002) propose, the Ô¨Ånal probability can be calculated as the product of probabilities given by experts.Gales and Airey (2006) apply PoE to the speech recognition where each expert is a Gaussian mixture model. Unlike their work, in our SDLM, each expert is mapped to a sememe with better interpretability. Moreover, as the Ô¨Ånal distribution is a categorical distribution, each expert is only responsible for making predictions on a subset of the categories (usually less than 10), so we call it Sparse Product of Experts.
Headline Generation. Headline generation is a kind of text summarization tasks. In recent years, with the advances of RNNs, a lot of works have been done in this domain. The encoderdecoder models (Sutskever et al., 2014; Cho et al., 2014) have achieved great success in sequenceto-sequence learning. Rush et al. (2015) propose a local attention-based model for abstractive sentence summarization. Gu et al. (2016) introduce the copying mechanism which is close to the rote memorization of the human being. Ayana et al. (2016) employ the minimum risk training strategy to optimize model parameters. Different from these works, we focus on the decoder of the sequence-to-sequence model, and adopt SDLM to utilize sememe knowledge for sentence generation.
6 Conclusion and Further Work
In this paper, we propose an interpretable Sememe-Driven Language Model with a hierarchical sememe-sense-word decoder. Besides interpretability, our model also achieves stateof-the-art performance in the Chinese Language Modeling task and shows improvement in the Headline Generation task. These results indicate that SDLM can successfully take advantages of sememe knowledge.
As for future work, we plan the following research directions: (1) In language modeling, given a sequence of words, a sequence of corresponding sememes can also be obtained. We will utilize the context sememe information for better sememe and word prediction. (2) Structural infor-

mation about sememes in HowNet is ignored in our work. We will extend our model with the hierarchical sememe tree for more accurate relations between words and their sememes. (3) It is imaginable that the performance of SDLM will be signiÔ¨Åcantly inÔ¨Çuenced by the annotation quality of sememe knowledge. We will also devote to further enrich the sememe knowledge for new words and phrases, and investigate its effect on SDLM.
Acknowledgement
This work is supported by the 973 Program (No. 2014CB340501), the National Natural Science Foundation of China (NSFC No. 61572273) and the research fund of Tsinghua UniversityTencent Joint Laboratory for Internet Innovation Technology. This work is also funded by China Association for Science and Technology (2016QNRC001). Hao Zhu and Jun Yan are supported by Tsinghua University Initiative ScientiÔ¨Åc Research Program. We thank all members of Tsinghua NLP lab. We also thank anonymous reviewers for their careful reading and their insightful comments.
References
Shiqi Shen Ayana, Zhiyuan Liu, and Maosong Sun. 2016. Neural headline generation with minimum risk training. arXiv preprint arXiv:1604.01904.
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. 2015. Neural machine translation by jointly learning to align and translate. In Proceedings of ICLR.
Michele Banko, Vibhu O Mittal, and Michael J Witbrock. 2000. Headline generation based on statistical translation. In Proceedings of ACL, pages 318‚Äì 325. Association for Computational Linguistics.
Yoshua Bengio, Rejean Ducharme, Pascal Vincent, and Christian Jauvin. 2003. A neural probabilistic language model. Journal of Machine Learning Research, 3:1137‚Äì1155.
Adam Berger and John Lafferty. 1999. Information retrieval as statistical translation. In Proceedings of SIGIR, pages 222‚Äì229. ACM.
Thorsten Brants, Ashok C Popat, Peng Xu, Franz J Och, and Jeffrey Dean. 2007. Large language models in machine translation. In Proceedings of EMNLP.
Peter F Brown, John Cocke, Stephen A Della Pietra, Vincent J Della Pietra, Fredrick Jelinek, John D Lafferty, Robert L Mercer, and Paul S Roossin. 1990. A

statistical approach to machine translation. Computational linguistics, 16(2):79‚Äì85.
Kyunghyun Cho, Bart Van Merrie¬®nboer, Caglar Gulcehre, Dzmitry Bahdanau, Fethi Bougares, Holger Schwenk, and Yoshua Bengio. 2014. Learning phrase representations using rnn encoder-decoder for statistical machine translation. In Proceedings of EMNLP.
Zhendong Dong and Qiang Dong. 2006. Hownet and the computation of meaning (with Cd-rom). World ScientiÔ¨Åc.
Xianghua Fu, Guo Liu, Yanyan Guo, and Zhiqiang Wang. 2013. Multi-aspect sentiment analysis for chinese online social reviews based on topic modeling and hownet lexicon. Knowledge-Based Systems, 37:186‚Äì195.
Yarin Gal and Zoubin Ghahramani. 2016. A theoretically grounded application of dropout in recurrent neural networks. In Proceedings of NIPS.
M. J. F. Gales and S. S. Airey. 2006. Product of gaussians for speech recognition. Computer Speech and Language, 20(1):22‚Äì40.
J Goodman. 2001. Classes for fast maximum entropy training. In Proceedings of ICASSP, pages 561‚Äì564 vol.1.
Edouard Grave, Moustapha Cisse, and Armand Joulin. 2017a. Unbounded cache model for online language modeling with open vocabulary. In Proceedings of NIPS.
Edouard Grave, Armand Joulin, and Nicolas Usunier. 2017b. Improving neural language models with a continuous cache. In Proceedings of ICLR.
Jiatao Gu, Zhengdong Lu, Hang Li, and Victor OK Li. 2016. Incorporating copying mechanism in sequence-to-sequence learning. In Proceedings of ACL, pages 1631‚Äì1640.
Djoerd Hiemstra. 1998. A linguistically motivated probabilistic model of information retrieval. In Proceedings of TPDL, pages 569‚Äì584. Springer.
G. E Hinton. 1999. Products of experts. In ArtiÔ¨Åcial Neural Networks, 1999. ICANN 99. Ninth International Conference on, pages 1‚Äì6 vol.1.
G. E. Hinton. 2002. Training products of experts by minimizing contrastive divergence. MIT Press.
Baotian Hu, Qingcai Chen, and Fangze Zhu. 2015. Lcsts: A large scale chinese short text summarization dataset. In Proceedings of EMNLP.
Hakan Inan, Khashayar Khosravi, and Richard Socher. 2017. Tying word vectors and word classiÔ¨Åers: A loss framework for language modeling. In Proceedings of ICLR.

Nan Jiang, Wenge Rong, Min Gao, Yikang Shen, Zhang Xiong, Nan Jiang, Wenge Rong, Min Gao, Yikang Shen, and Zhang Xiong. 2017. Exploration of tree-based hierarchical softmax for recurrent language models. In Proceedings of IJCAI.
Huiming Jin, Hao Zhu, Zhiyuan Liu, Ruobing Xie, Maosong Sun, Fen Lin, and Leyu Lin. 2018. Incorporating chinese characters of words for lexical sememe prediction. In Proceedings of ACL, pages 2439‚Äì2449. Association for Computational Linguistics.
Dan Jurafsky. 2000. Speech & language processing. chapter 4. Pearson Education India.
Slava Katz. 1987. Estimation of probabilities from sparse data for the language model component of a speech recognizer. IEEE transactions on acoustics, speech, and signal processing, 35(3):400‚Äì401.
Qun Liu. 2002. Word similarity computing based on hownet. Computational linguistics and Chinese language processing, 7(2):59‚Äì76.
Mitchell P. Marcus, Beatrice Santorini, and Ann Marcinkiewicz, Mary. 1993. Building a large annotated corpus of English: The Penn Treebank. Computational Linguistics, 19:313‚Äì330.
Stephen Merity, Nitish Shirish Keskar, and Richard Socher. 2018. Regularizing and optimizing LSTM language models. In Proceedings of ICLR.
Stephen Merity, Bryan Mccann, and Richard Socher. 2017. Revisiting activation regularization for language rnns. arXiv preprint arXiv:1708.01009.
Toma¬¥sÀá Mikolov, Martin KaraÔ¨Åa¬¥t, Luka¬¥sÀá Burget, Jan CÀá ernocky`, and Sanjeev Khudanpur. 2010. Recurrent neural network based language model. In Proceedings of INTERSPEECH.
Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg Corrado, and Jeffrey Dean. 2013. Distributed representations of words and phrases and their compositionality. In Proceedings of NIPS, pages 3111‚Äì3119.
David RH Miller, Tim Leek, and Richard M Schwartz. 1999. A hidden markov model information retrieval system. In Proceedings of SIGIR, pages 214‚Äì221. ACM.
Andriy Mnih and Geoffrey Hinton. 2008. A scalable hierarchical distributed language model. In Proceedings of NIPS, pages 1081‚Äì1088.
Frederic Morin and Yoshua Bengio. 2005. Hierarchical probabilistic neural network language model. In Proceedings of AISTATS.
Yilin Niu, Ruobing Xie, Zhiyuan Liu, and Maosong Sun. 2017. Improved word representation learning with sememes. In Proceedings of ACL, volume 1, pages 2049‚Äì2058.

Jay M Ponte and W Bruce Croft. 1998. A language modeling approach to information retrieval. In Proceedings of SIGIR, pages 275‚Äì281. ACM.
OÔ¨År Press and Lior Wolf. 2017. Using the output embedding to improve language models. In Proceedings of EACL.
Fanchao Qi, Yankai Lin, Maosong Sun, Hao Zhu, Ruobing Xie, and Zhiyuan Liu. 2018. Crosslingual lexical sememe prediction. In Proceedings of EMNLP.
Alexander M Rush, Sumit Chopra, and Jason Weston. 2015. A neural attention model for abstractive sentence summarization. In Proceedings of EMNLP.
Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014. Sequence to sequence learning with neural networks. In Proceedings of NIPS, pages 3104‚Äì3112.
Ruobing Xie, Xingchi Yuan, Zhiyuan Liu, and Maosong Sun. 2017. Lexical sememe prediction via word embeddings and matrix factorization. In Proceedings of IJCAI, pages 4200‚Äì4206. AAAI Press.
Zhilin Yang, Zihang Dai, Ruslan Salakhutdinov, and William W. Cohen. 2018. Breaking the softmax bottleneck: A high-rank rnn language model. In Proceedings of ICLR.
Wojciech Zaremba, Ilya. Sutskever, and Oriol. Vinyals. 2014. Recurrent neural network regularization. arXiv preprint arXiv:1409.2329.

A Details about Preprocessing of the People‚Äôs Daily Dataset
In this section, we describe the details about preprocessing of the People‚Äôs Daily dataset.
Firstly, we treat sentence, which is segmented by particular punctuations, as the minimum unit and then shufÔ¨Çe the corpus. We split the corpus into the training set, the validation set and the test set, which contain 734k, 10k, 19k words respectively. Similar to the preprocessing performed in (Mikolov et al., 2010), we replace the number with <N>, the speciÔ¨Åc date with <date>, the year with <year>, and the time with <time>. Different from the preprocessing of the English language modeling dataset, we keep the punctuations and therefore do not append <eos> at the end of each sentence. Those words that occur less than 5 times are replaced with <unk>.
Since our model requires that every word should be included in the dictionary of HowNet, we segment each non-annotated word into annotated words with the forward maximum matching algorithm.
B Details about Preprocessing of the LCSTS Dataset
In this section, we describe the details about preprocessing of the LCSTS dataset.
The dataset consists of over 2 million articleheadline pairs collected from Sina Weibo, the most popular social media network in China. It‚Äôs composed of three parts. Each pair from PARTII and PART-III is labeled with a score which indicates the relevance between the article and its headline. As its author suggests, we take pairs from a subset of PART-II as the validation set and a subset of PART-III as the test set. Only pairs with score 3, 4 and 5, which means high relevance, are taken into account. We take pairs from PART-I that do not occur in the validation set as the training set.
Similar to what we do for preprocessing the People‚Äôs Daily dataset, the word segmentation is carried out with jiebavi based on the dictionary of HowNet to alleviate the OOV problems.
C Details about Experiments Setting
In this section we describe the strategy we adopt to choose hyper-parameters and the optimal hyper-
vi https://pypi.python.org/pypi/jieba

Hyper-parameter Learning rate Batch size Embedding size RNN hidden size Word-level V-dropout Embedding V-dropout Hidden state V-dropout Recurrent weight dropout Context vector dropout

Baseline 30 15 400 [1150, 1150, 400] 0.1 0.5 0.2 0.5 0.4

Table 7: Hyper-parameters used for AWD-LSTM and its variants

parameters used in the experiment.
C.1 Language Modeling
The hyper-parameters are chosen according to the performance on the validation set. For medium (Tied) LSTM and its cHSM, tHSM variants, we search the dropout rate from {0.45, 0.5, 0.55, 0.6, 0.65, 0.7}. For large (Tied) LSTM and its cHSM, tHSM variants, we search the dropout rate from {0.6, 0.65, 0.7, 0.75, 0.8}. For AWD-LSTM and its variants, we follow most of the hyper-parameters described in (Merity et al., 2018) and only search the dropout rates (embedding V-dropout from {0.35, 0.4, 0.45, 0.5}, hidden state V-dropout from {0.2, 0.25, 0.3}, word level V-dropout from {0.05, 0.1, 0.15} and context vector dropout from {0.4, 0.5}). For our SDLM and MoS, we Ô¨Åx all other hyper-parameters and only search the dropout rates of the last two layers respectively from {0.35, 0.4, 0.45} and {0.25, 0.3}. The initial learning rate for MoS on the top of AWD-LSTM is set to 20 to avoid diverging.
For (Tied) LSTM, we set the hidden unit and word embedding size to 650 (medium) / 1500 (large), batch size to 20, bptt to 35, dropout rate to 0.6 (medium) / 0.7 (large) and initial learning rate to 20. The optimal dropout rates for cHSM and tHSM are 0.55 (cHSM, medium), 0.5 (cHSM, medium, tied), 0.7 (cHSM, large), 0.65 (cHSM, large, tied), 0.55 (tHSM, medium) and 0.7 (tHSM, large). For AWD-LSTM and its variants, the hyper-parameters for the baseline are summarized in Table 7.
C.2 Headline Generation
The hyper-parameters are chosen according to the performance on the validation set. For RNN-context, we search the dropout rate from {0.1, 0.15, 0.2, 0.25, 0.3, 0.35}, the batch size from {32, 64} and try SGD and Adam optimizers. For RNN-context-SDLM, we search the dropout

rate from {0.15, 0.2, 0.25}, the batch size from {32, 64} and try SGD and Adam optimizers.
For RNN-context, we use Adam optimizer with starting learning rate 0.001. The batch size is 32 and the dropout rate is 0.15. For RNN-contextSDLM, we use Adam optimizer with starting learning rate 0.001. The batch size is 64 and the dropout rate is 0.2.

