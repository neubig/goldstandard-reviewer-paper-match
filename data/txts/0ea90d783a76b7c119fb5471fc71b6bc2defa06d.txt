On Minimizing Data-Read and Download for Storage-Node Recovery
Nihar B. Shah

arXiv:1212.6952v2 [cs.IT] 2 Apr 2013

Abstract—We consider the problem of efﬁcient recovery of the data stored in any individual node of a distributed storage system, from the rest of the nodes. Applications include handling failures and degraded reads. We measure efﬁciency in terms of the amount of data-read and the download required. To minimize the download, we focus on the minimum bandwidth setting of the ‘regenerating codes’ model for distributed storage. Under this model, the system has a total of n nodes, and the data stored in any node must be (efﬁciently) recoverable from any d of the other (n − 1) nodes. Lower bounds on the two metrics under this model were derived previously; it has also been shown that these bounds are achievable for the amount of data-read and download when d = n − 1, and for the amount of download alone when d = n − 1.
In this paper, we complete this picture by proving the converse result, that when d = n − 1, these lower bounds are strictly loose with respect to the amount of read required. The proof is information-theoretic, and hence applies to non-linear codes as well. We also show that under two (practical) relaxations of the problem setting, these lower bounds can be met for both read and download simultaneously.

I. INTRODUCTION
Consider a distributed storage system with n storage nodes, each of which has a storage capacity of α bits. Data of size B bits is to be stored across these nodes in a manner that the entire data can be recovered from any k of the n nodes. A problem that has received considerable attention in the recent past is that of efﬁcient recovery of the data stored in an individual node, from the data stored in the remaining nodes in the system. This arises during handling of failures in distributed storage systems: upon failure of a node, it is replaced by a new node that must (efﬁciently) recover the data stored previously in the failed node from the remaining nodes in the system. A second application is that of degraded reads: if a node is busy or temporarily unavailable, then any request for the data stored in that node must be served (quickly) by downloading data from the remaining nodes.
We measure the efﬁciency of this process in terms of two metrics: the amount of data that must be read at the other nodes, and the amount of data downloaded from them. To optimize the amount of download, we consider the minimum bandwidth (MBR) setting of the regenerating codes model [1] for distributed storage. Under this model, recovery of the data stored in any individual node must be accomplished by connecting to any d (k ≤ d < n) other nodes and downloading βD bits of data from each of them. Furthermore, under this model, these parameters must satisfy the condition

dβD = α .

(1)

The author is with the department of Electrical Engineering and Computer Sciences, University of California, Berkeley. E-mail: nihar@eecs.berkeley.edu

An intuitive explanation of (1) is that recovery of the data

stored in a node should entail only as much download as the

amount stored. We shall assume throughout this paper that (1)

is satisﬁed.

Under the MBR setting described above, a lower bound on

the

amount

of

download

was

derived

in

[1]

as

βD

≥

k

d

B
−(

k

)

.

2

It is easy to see that the amount of data that is read at a node

is at least as much as the amount of data downloaded from

that node. 1 It follows that the total amount of read βR at any

of the d nodes helping in the recovery must obey βR ≥ βD,

and

hence

is

also

lower

bounded

as

βR

≥

k

d

B
−(k

)

.

2

In this paper, we investigate the existence of codes that

satisfy the aforementioned lower bounds with equality, i.e.,

satisfy

B

βD = kd − k ,

(2)

2

B

βR = kd − k

(3)

2

for the recovery of the data of any of the n nodes from any d other nodes in the system. It was shown previously in [2], [3] that when d = n − 1, the amount of download and read can simultaneously achieve (2) and (3) respectively for the recovery of the data of any individual node. Also, explicit codes with a download equalling (2) for all values of the parameters were constructed previously in [4]. However, it remained unknown whether or not the lower bound on the read (3) can also be matched along with that on the download (2) when d = n − 1.
We complete this picture by showing that under the MBR setting described above, when d = n − 1, it is impossible to construct codes that simultaneously satisfy (2) and (3) for the download and read respectively. The proof is informationtheoretic, and allows us to conclude that these bounds cannot be met even with non-linear codes.
We also consider two (practical) relaxations of the problem setting, under which we provide explicit codes that can simultaneously achieve both (2) and (3) for all values of the system parameters. Under the setting described above, the data of any individual node must be recoverable from any d other nodes, with the download and read satisfying (2) and (3) respectively. The two relaxations respectively weaken the two “any” criteria with respect to the read. Under the ﬁrst relaxation, we require the read to achieve (3) for only the recovery of the data stored in the systematic nodes (recovery of the data of the remaining nodes are allowed to have a larger read). This relaxed setting

1The download may be smaller than the amount of read, since the data passed may be a (non-injective) function of the data that is read.

2

is relevant to the problem of degraded reads, where typically, the data stored in (only) the systematic nodes is of interest. Under the second relaxation, for the recovery of the data of any node, we require that (3) be achieved for the read from at least one set of d other nodes. The codes presented for both these relaxations are obtained by modifying the ‘productmatrix’ codes of [4].
We now take a brief digression to discuss a related notion, that of ‘repair-by-transfer’, which shall be called upon frequently in the paper. Observe that when (2) and (3) are satisﬁed, the amount of download βD is equal to the amount of read βR. As a result, whenever (2) and (3) are met, each of the d nodes helping in the recovery must simply pass a part of the data that it stores, without performing any computations. This is termed repair-by-transfer [3]. It follows that a repairby-transfer code that satisﬁes (2) for the amount of download automatically achieves (3) for the read as well. Thus the problem considered in this paper can equivalently be stated as follows: for the MBR setting described above, under what conditions is it possible to design a code that can perform repair-by-transfer with a download satisfying (2)?
The rest of the paper is organized as follows. Section II describes related literature. Section III presents an informationtheoretic proof showing the impossibility of achieving the previously derived lower bounds. Section IV considers (practical) relaxations of this setting, and provides explicit codes operating under these relaxations. Section V presents conclusions.
II. RELATED LITERATURE
As described previously, explicit codes meeting (2) and (3) for recovery of the data of any node are presented in [2], [3] for the MBR setting when d = n − 1. The notion of ‘repair-by-transfer’ is also introduced therein. The repair-bytransfer codes of [2], [3] were subsequently extended to a more general but relaxed setting in [5]. In [5], the condition of efﬁciently recovering the data of an individual node from any d nodes is relaxed to doing so from speciﬁc subsets d nodes (termed ‘table-based’ repair), with respect to both the amount of read and the amount of download. In contrast, the relaxations presented subsequently in this paper make such relaxations only for the amount of read, and the amount of download continues to achieve (2) for every set of d nodes.
In addition to the MBR setting discussed above, the regenerating codes model of [1] has another setting associated to it: the minimum storage regeneration (MSR) setting. Under the MSR setting, the storage is required to be at an absolute minimum, and for this value of storage, the amount of download is optimized. The problem of minimizing read in the MSR setting is studied in [6]–[9]. In particular, MSR codes performing repair-by-transfer with a minimum download for the systematic nodes are constructed in [6]–[8]. A somewhat different setting called ‘functional’ repair is considered in [9] for the application of repair of failed nodes. In this setting, the node replacing a failed node may recover data that is different from what was stored in the failed node, but which retains certain desired properties. MSR codes performing functional repair-by-transfer with minimum download for all nodes are constructed in [9].

III. IMPOSSIBILITY OF REPAIR-BY-TRANSFER IN MBR WHEN d = n − 1

It was shown previously in [2], [3] that when d = n − 1, both (2) and (3) can be achieved simultaneously. In this section, we present the converse to this result: we show that when d = n − 1, there cannot exist any code under which the data stored in any node can be recovered from any d other

nodes while satisfying (2) and (3). This result encompasses

both linear and non-linear codes. The proof may be skipped

without any loss in continuity. Theorem 1: Under the MBR setting, when d = n − 1, there
cannot exist any code that performs repair-by-transfer of any node from any d other nodes with a download satisfying (2).
Proof: The proof proceeds via a contradiction. Let us

suppose there exists such a code for some system parameters with d = n − 1. The proof is divided into three parts. First, it is shown that there exist (at least) three nodes that store

(at least) one bit of data in common. Next, it is shown that

for recovery of the data of any one of these nodes, the other

two nodes must pass this bit. Finally, we show that under this

condition, such an attempt of recovery must necessarily fail. For i ∈ {1, . . . , n}, let Wi be a random variable corre-
sponding to the data stored in node i. For recovering the data of node i from a set D of d nodes, let DSji denote the random variable corresponding to the data passed by node j ∈ D to node i. Let H(·) denote Shannon entropy and I(·; ·) the mutual information. Let βD = βR = β. In the proof, we shall employ
the following four properties, established in [3], that any such

code must satisfy.

[3, Property 1] H(Wi) = α

[3, Property 2] I(Wi; Wj ) = β

[3, Property 3] H(DSji) = β

[3, Lemma 3] H(Wi|DSji) ≤ (d − 1)β ,

H

(Wi

|

DS

i j

,

DS

i ℓ

)

≤

(d − 2)β

.

Consider recovery of the data stored in nodes {1, . . . , d +

1} (one at a time), from node n and (d − 1) other arbitrary

nodes. In each case, node n passes a subset of β bits out

of the α (= dβ) bits that it stores. We emphasize that due

to the requirement of repair-by-transfer, the bits passed are

simply subsets of those it stores (and do not arise from any computations on the stored bits). Node n thus passes a total of (d + 1)β bits. It follows from the pigeonhole principle that there exists at least one bit that occurs at least twice in this set of (d + 1)β bits. Moreover, [3, Property 3] implies that the β bits passed by a node, for recovery of the data of any

other node, must all be distinct. Thus there must exist at least two nodes out of {1, . . . , d + 1} for which node n passes the same bit. Let us assume that these two nodes are nodes 1 and 2, and let b denote this common bit.
Since the data of any node i must be completely recovered,
the quantity Wi is deterministic given the data passed by the d nodes in the recovery process. It follows from [3, Property 1] that the entropy of the dβ (= α) bits passed by the d nodes is α. As a special case, it follows that H(b) = 1. From the description above, one can also see that that H(b|W1) = 0 and H(b|W2) = 0. Moreover, since bit b was originally stored in node n, H(b|Wn) = 0. Thus, the bit b is stored in nodes 1, 2 and n, and H(b) = 1.

3

Now consider recovering the data of node n from nodes
{1, . . . , d}. We shall now show that nodes 1 and 2 must both
pass bit b. Abbreviating our earlier notation, we let S1 and S2 be random variables corresponding to data passed by nodes 1 and 2 respectively. Thus, by deﬁnition, we have H(S1|W1) = H(S2|W2) = 0. From the properties discussed above, we get

2β = I(Wn; W1) + I(Wn; W2) ≥ I(Wn; b, S1) + I(Wn; b, S2) = I(Wn; S1) + H(b|S1) − H(b|Wn, S1) +I(Wn; S2) + H(b|S2) − H(b|Wn, S2) = I(Wn; S1) +H(b|S1) +I(Wn; S2) +H(b|S2) = 2H(Wn)−H(Wn|S1)+H(b|S1)−H(Wn|S2)+H(b|S2) = 2dβ −H(Wn|S1)+H(b|S1)−H(Wn|S2)+H(b|S2) ≥ 2dβ − (d − 1)β + H(b|S1) − (d − 1)β + H(b|S2) = 2β + H(b|S1) + H(b|S2) .

Thus, H(b|S1) = H(b|S2) = 0. It follows that

2β = H(Wn) − (d − 2)β

≤ H(Wn) − H(Wn|S1, S2)

= I(Wn; S1, S2)

≤ H(S1, S2)

≤ H(S1, S2, b)

= H(S2) + H(b|S2) + H(S1|S2, b)

≤ β + 0 + H(S1|b)

= β + H(b|S1) + H(S1) − H(b)

= 2β − 1 .

(4)

Clearly, (4) yields a contradiction.

IV. EXPLICIT CODES FOR TWO RELAXATIONS
Repair-by-transfer under the regenerating codes setting described above amounts to (efﬁciently) recovering the contents of any failed node from any of the d nodes. We saw in the previous section that the bounds of (2) and (3) cannot be achieved simultaneously when d = n − 1. Thus in this section, we consider two relaxations to this setup, which shall allow us to achieve these bounds. The two relaxations are obtained by slackening the two instances of the quantiﬁer “any” for the amount of read. Note that under both relaxations, we shall continue to impose the requirements of the MBR setting, i.e., of recovering the entire data from any k nodes, and satisfying (1) and (2) on the amount of download for recovery of the data of any node from any d nodes.

A. Optimal recovery for systematic nodes
A systematic code is deﬁned as one under which some k out of the n nodes store data in a raw (uncoded) form. These k nodes are called the systematic nodes, while the other (n − k) nodes are termed parity nodes. For many applications such as degraded reads, efﬁcient recovery of the data in a systematic node is of greater importance than that of a parity node. Keeping this in mind, we relax the setting described above to the following requirements:

• one should be able to recover the data stored in any node from any d other nodes with a download equal to (2)
• one should be able to recover the data stored in any systematic node, from any d other nodes, with the read and download equal to (3) and (2) respectively.
In other words, the requirement of repair-by-transfer is relaxed to hold only when recovering the data of a systematic node.
We now present an explicit code that achieves the conditions listed above. This code is a modiﬁcation of the ‘productmatrix’ MBR code of [4]. 2 The code is linear, and operates over any ﬁnite ﬁeld Fq of size q (≥ n). As in [4], we present constructions for the case when βD = 1 symbol over Fq; codes for a general βD can be obtained via multiple concatenations of this code (see [4, Section I-C]). When βD = 1 symbol over Fq, (1) reduces to having α = d symbols over Fq.
We ﬁrst present a brief overview of the construction of a product-matrix MBR code as in [4]. Denote this code as C. The product-matrix MBR code is designed to satisfy (2), i.e., when βD = 1 symbol over Fq, it operates on a data of size

B = kd − k (5) 2

symbols over Fq. Under the encoding mechanism of [4], this

data is arranged as the entries of a (d × d) symmetric matrix

M of the form

M = RST R0

where S is a (k × k) symmetric matrix and R is a (k × (d −

k)) matrix. RT denotes the transpose of R, and 0 is a ((d −

k) × (d − k)) zero matrix. Observe that the total number of

independent

entries

in

S

is

k(k+1) 2

and

that

in

R

is

k(d − k),

and these two quantities add up to (5).

Each node i ∈ {1, . . . , n} in the product-matrix MBR code

is associated to a d-length vector ψi. The vectors {ψi}ni=1 are chosen to satisfy two conditions: (a) any d of these n vectors

are linearly independent, and (b) when restricted to the ﬁrst k

components, any k of these n vectors are linearly independent.

Every node i ∈ {1, . . . , n} stores the α (= d) symbols

ψ

T i

M

.

In this section, we shall assume that the code is systematic [4, Theorem 1], [4, Section IV-B] with nodes {1, . . . , k} being
the systematic nodes.
It is shown in [4, Theorem 3], by means of an explicit
decoding algorithm, that the entire data can be recovered from
the data of any k of the n nodes. This exploits the property of linear independence of the ﬁrst k components of {ψi}ni=1.
Let us now look at recovering the data stored in an individual node i ∈ {1, . . . , n} from some d nodes {j1, . . . , jd}. Under the protocol proposed in [4], each of these d nodes
computes the inner product of the d symbols stored in it
with the d-length vector ψi, and passes the result. Thus, the aggregate data obtained is {ψTj1 M ψi, . . . , ψTjd M ψi}. The linear independence of the d vectors {ψj1 , . . . , ψjd } and the symmetry of matrix M allows for recovery of the desired data

2While we discuss only the MBR case here, the ideas presented are also applicable to the product-matrix MSR codes of [4].

4

ψ

T i

M

.

Observe

that

the

amount

of

download

is

equal

to

d

symbols over Fq, and hence the code achieves (2).

We shall now modify the code C described above to obtain

a new code C1 that, in addition, also minimizes the read during

recovery of the data stored in any systematic node. Deﬁne a

(d × d) matrix

Ψ0 = [ψ1 ψ2 . . . ψd] .

(6)

Under C1, each node i ∈ {1, . . . , n} stores the α (= d) symbols

ψ

T i

M

Ψ

0

(as

opposed

to

storing

ψ

T i

M

under

C).

Let us now verify that code C1 meets all the requirements.

First, observe that the (d×d) matrix Ψ0 is invertible. Thus, the

data stored in any node under C1 is equivalent [4, Appendix

B] to that stored under C. This results in the fulﬁlment of the

conditions of recovery of the entire data from any k nodes,

and recovery of the data stored in any node from any d nodes

with a download equalling (2).

Now consider recovering the data stored in any systematic

node i ∈ {1, . . . , k} from any d nodes {j1, . . . , jd}. Under

C1, every node ℓ ∈ {j1, . . . , jd} simply reads and passes

the

ith

symbol

it

stores,

which

from

(6),

equals

ψ

T ℓ

M

ψ

i

.

The data thus obtained is identical to that obtained under C,

thereby ensuring successful recovery. The amount of read and

download is exactly d, thus meeting (3) and (2). 3

B. Optimal recovery from d speciﬁc nodes

In certain applications, the ﬂexibility of minimizing the read from any set of d nodes may be an overkill. This motivates the next relaxation, that mandates the following requirements:
• one should be able to recover the data stored in any node from any d other nodes with a download equal to (2)
• for any node, there must exist at least one set of d other nodes such that recovery from these d nodes entails a read and download equal to (3) and (2) respectively.
In other words, for recovery of the data stored in any node, the requirement of repair-by-transfer is relaxed to hold only for any one subset of d nodes.
We now modify the product-matrix MBR code C described above to obtain a code C2 that satisﬁes these conditions. To simplify notation, deﬁne an operator ⊕ : {1, . . . , n} × {1, . . . , n} → {1, . . . , n} that computes a sum that cycles in the set {1, . . . , n}, i.e., for any x, y ∈ {1, . . . , n}, x ⊕ y := 1 + ((x − 1 + y) mod n). Let ⊖ be an analogous subtraction operator, with x ⊖ y := 1 + ((x − 1 − y) mod n). Under C2, each node i ∈ {1, . . . , n} stores the α symbols

ψ

T i

M

ψi⊕1 ψi⊕2

· · · ψi⊕d

.

Let us now verify that code C2 meets all the requirements.
Since any d vectors from the set {ψ1, . . . , ψn} are linearly independent, the matrix ψi⊕1 ψi⊕2 · · · ψi⊕d is invertible for every i. Thus the data stored by a node under C2 is
equivalent [4, Appendix B] to that stored under C. This results

3We note that this property, in fact, is applicable to the repair of any of the ﬁrst d (≥ k) nodes.

in the fulﬁlment of the properties of recovery of the entire data from any k nodes and recovery of data of any individual node from any d nodes with a minimum download.
Under C2, in order to recover the data stored in any node i with a read and download equal to (3) and (2), the d nodes (i⊖d), . . . , (i⊖1) are queried. Each node ℓ ∈ {(i⊖d), . . . , (i⊖ 1)} simply reads and transfers the symbol ψTℓ M ψi that it has stored. The data thus obtained is identical to that obtained under C, allowing for successful recovery of the desired data. This meets the bounds (3) and (2) on the read and download.
V. CONCLUSIONS
We consider the problem of constructing codes for distributed storage under which the data stored in any individual node can be efﬁciently recovered from the remaining nodes. In particular, we wish to achieve the previously derived [1] lower bounds on the amount of download and read. Achieving these bounds is equivalent to performing repair-by-transfer [2], [3] while meeting the bound on the download. Explicit codes with these properties were constructed previously [2], [3] for d = n − 1, and in this paper, we complete the picture by providing the converse to this result. In particular, we provide an information-theoretic impossibility result to show that the bound is not achievable when d = n − 1 (even with non-linear codes). Obtaining tighter lower and upper bounds on the read under this setting are interesting directions for future research.
We also construct explicit codes for the two following (practical) relaxations, meeting the aforementioned bounds: (a) the read and download is simultaneously optimized for recovery of data of only systematic nodes, only the download is optimized for other nodes, and (b) for recovery of the data of any node, there is at least one set of d nodes from which the read and download are simultaneously optimized, only the download is optimized for recovery from any other set of d nodes. These codes are obtained by modifying the productmatrix codes of [4].
REFERENCES
[1] A. G. Dimakis, P. B. Godfrey, Y. Wu, M. Wainwright, and K. Ramchandran, “Network coding for distributed storage systems,” IEEE Trans. Inf. Theory, vol. 56, no. 9, pp. 4539–4551, 2010.
[2] K. V. Rashmi, N. B. Shah, P. V. Kumar, and K. Ramchandran, “Explicit construction of optimal exact regenerating codes for distributed storage,” in Proc. Allerton Conf., Urbana-Champaign, Sep. 2009.
[3] N. B. Shah, K. V. Rashmi, P. V. Kumar, and K. Ramchandran, “Distributed storage codes with repair-by-transfer and non-achievability of interior points on the storage-bandwidth tradeoff,” IEEE Trans. Inf. Theory, vol. 58, no. 3, pp. 1837–1852, Mar. 2012.
[4] K. V. Rashmi, N. B. Shah, and P. V. Kumar, “Optimal exact-regenerating codes for the MSR and MBR points via a product-matrix construction,” IEEE Trans. Inf. Theory, vol. 57, no. 8, pp. 5227–5239, Aug. 2011.
[5] S. El Rouayheb and K. Ramchandran, “Fractional repetition codes for repair in distributed storage systems,” in Proc. Allerton Conf., Sep. 2010.
[6] N. B. Shah, K. V. Rashmi, P. V. Kumar, and K. Ramchandran, “Interference alignment in regenerating codes for distributed storage: Necessity and code constructions,” IEEE Trans. Inf. Th., vol. 58, no. 4, 2012.
[7] V. Cadambe, C. Huang, and J. Li, “Permutation code: optimal exact-repair of a single failed node in MDS code based distributed storage systems,” in IEEE ISIT, 2011.
[8] I. Tamo, Z. Wang, and J. Bruck, “MDS array codes with optimal rebuilding,” in Proc. IEEE ISIT, St. Petersburg, Jul. 2011.
[9] K. Shum and Y. Hu, “Functional-repair-by-transfer regenerating codes,” in IEEE ISIT, Jul. 2012.

