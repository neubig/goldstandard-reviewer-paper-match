Practical Obstacles to Deploying Active Learning

David Lowell Northeastern University lowell.d@husky.neu.edu

Zachary C. Lipton Carnegie Mellon University
zlipton@cmu.edu

Byron C. Wallace Northeastern University b.wallace@northeastern.edu

arXiv:1807.04801v3 [cs.LG] 1 Nov 2019

Abstract
Active learning (AL) is a widely-used training strategy for maximizing predictive performance subject to a ﬁxed annotation budget. In AL one iteratively selects training examples for annotation, often those for which the current model is most uncertain (by some measure). The hope is that active sampling leads to better performance than would be achieved under independent and identically distributed (i.i.d.) random samples. While AL has shown promise in retrospective evaluations, these studies often ignore practical obstacles to its use. In this paper we show that while AL may provide beneﬁts when used with speciﬁc models and for particular domains, the beneﬁts of current approaches do not generalize reliably across models and tasks. This is problematic because in practice one does not have the opportunity to explore and compare alternative AL strategies. Moreover, AL couples the training dataset with the model used to guide its acquisition. We ﬁnd that subsequently training a successor model with an actively-acquired dataset does not consistently outperform training on i.i.d. sampled data. Our ﬁndings raise the question of whether the downsides inherent to AL are worth the modest and inconsistent performance gains it tends to afford.
1 Introduction
Although deep learning now achieves state-ofthe-art results on a number of supervised learning tasks (Johnson and Zhang, 2016; Ghaddar and Langlais, 2018), realizing these gains requires large annotated datasets (Shen et al., 2018). This data dependence is problematic because labels are expensive. Several lines of research seek to reduce

the amount of supervision required to achieve acceptable predictive performance, including semisupervised (Chapelle et al., 2009), transfer (Pan and Yang, 2010), and active learning (AL) (Cohn et al., 1996; Settles, 2012).
In AL, rather than training on a set of labeled data sampled at i.i.d. random from some larger population, the learner engages the annotator in a cycle of learning, iteratively selecting training data for annotation and updating its model. Poolbased AL (the variant we consider) proceeds in rounds. In each, the learner applies a heuristic to score unlabeled instances, selecting the highest scoring instances for annotation.1 Intuitively, by selecting training data cleverly, an active learner might achieve greater predictive performance than it would by choosing examples at random.
The more informative samples come at the cost of violating the standard i.i.d. assumption upon which supervised machine learning typically relies. In other words, the training and test data no longer reﬂect the same underlying data distribution. Empirically, AL has been found to work well with a variety of tasks and models (Settles, 2012; Ramirez-Loaiza et al., 2017; Gal et al., 2017a; Zhang et al., 2017; Shen et al., 2018). However, academic investigations of AL typically omit key real-world considerations that might overestimate its utility. For example, once a dataset is actively acquired with one model, it is seldom investigated whether this training sample will confer beneﬁts if used to train a second model (vs i.i.d. data). Given that datasets often outlive learning algorithms, this is an important practical consideration.
1This may be done either deterministically, by selecting the top-k instances, or stochastically, selecting instances with probabilities proportional to heuristic scores.

(accuracy) accuracy

0.02

0.01

0.00

0.01

0.02

Movie reviews Subjectivity

TREC

Customer reviews

5

10

15

20

25

training set size (percentage of pool)

(a) Performance of AL relative to i.i.d. across corpora.

0.88

0.86

0.84

0.82

0.80

0.78

0.76

BiLSTM acquisition model

0.74

CNN acquisition model SVM acquisition model

0.72

i.i.d.

5

10

15

20

25

training set size (percentage of pool)

(b) Transferring actively acquired training sets.

Figure 1: We highlight practical issues in the use of AL. (a) AL yields inconsistent gains, relative to a baseline of i.i.d. sampling, across corpora. (b) Training a BiLSTM with training sets actively acquired based on the uncertainty of other models tends to result in worse performance than training on i.i.d. samples.

In contrast to experimental (retrospective) studies, in a real-world setting, an AL practitioner is not afforded the opportunity to retrospectively analyze or alter their scoring function. One would instead need to expend signiﬁcant resources to validate that a given scoring function performs as intended for a particular model and task. This would require i.i.d. sampled data to evaluate the comparative effectiveness of different AL strategies. However, collection of such additional data would defeat the purpose of AL, i.e., obviating the need for a large amount of supervision. To conﬁdently use AL in practice, one must have a reasonable belief that a given AL scoring (or acquisition) function will produce the desired results before they deploy it (Attenberg and Provost, 2011).
Most AL research does not explicitly characterize the circumstances under which AL may be expected to perform well. Practitioners must therefore make the implicit assumption that a given active acquisition strategy is likely to perform well under any circumstances. Our empirical ﬁndings suggest that this assumption is not well founded and, in fact, common AL algorithms behave inconsistently across model types and datasets, often performing no better than random (i.i.d.) sampling (1a). Further, while there is typically some AL strategy which outperforms i.i.d. random samples for a given dataset, which heuristic varies.
Contributions. We highlight important but often overlooked issues in the use of AL in practice. We report an extensive set of experimental results on classiﬁcation and sequence tagging tasks that

suggest AL typically affords only marginal performance gains at the somewhat high cost of noni.i.d. training samples, which do not consistently transfer well to subsequent models.
2 The (Potential) Trouble with AL
We illustrate inconsistent comparative performance using AL. Consider Figure 1a, in which we plot the relative gains (∆) achieved by a BiLSTM model using a maximum-entropy active sampling strategy, as compared to the same model trained with randomly sampled data. Positive values on the y-axis correspond to cases in which AL achieves better performance than random sampling, 0 (dotted line) indicates no difference between the two, and negative values correspond to cases in which random sampling performs better than AL. Across the four datasets shown, results are decidedly mixed.
And yet realizing these equivocal gains using AL brings inherent drawbacks. For example, acquisition functions generally depend on the underlying model being trained (Settles, 2009, 2012), which we will refer to as the acquisition model. Consequently, the collected training data and the acquisition model are coupled. This coupling is problematic because manually labeled data tends to have a longer shelf life than models, largely because it is expensive to acquire. However, progress in machine learning is fast. Consequently, in many settings, an actively acquired dataset may remain in use (much) longer than the source model used to acquire it. In these cases, a few natural ques-

tions arise: How does a successor model S fare, when trained on data collected via an acquisition model A? How does this compare to training S on natively acquired data? How does it compare to training S on i.i.d. data?
For example, if we use uncertainty sampling under a support vector machine (SVM) to acquire a training set D, and subsequently train a Convolutional Neural Network (CNN) using D, will the CNN perform better than it would have if trained on a dataset acquired via i.i.d. random sampling? And how does it perform compared to using a training corpus actively acquired using the CNN?
Figure 1b shows results for a text classiﬁcation example using the Subjectivity corpus (Pang and Lee, 2004). We consider three models: a Bidirectional Long Short-Term Memory Network (BiLSTM) (Hochreiter and Schmidhuber, 1997), a Convolutional Neural Network (CNN) (Kim, 2014; Zhang and Wallace, 2015), and a Support Vector Machine (SVM) (Joachims, 1998). Training the LSTM with a dataset actively acquired using either of the other models yields predictive performance that is worse than that achieved under i.i.d. sampling. Given that datasets tend to outlast models, these results raise questions regarding the beneﬁts of using AL in practice.
We note that in prior work, Tomanek and Morik (2011) also explored the transferability of actively acquired datasets, although their work did not consider modern deep learning models or share our broader focus on practical issues in AL.
3 Experimental Questions and Setup
We seek to answer two questions empirically: (1) How reliably does AL yield gains over sampling i.i.d.? And, (2) What happens when we use a dataset actively acquired using one model to train a different (successor) model? To answer these questions, we consider two tasks for which AL has previously been shown to confer considerable beneﬁts: text classiﬁcation and sequence tagging (speciﬁcally NER).2
To build intuition, our experiments address both linear models and deep networks more representative of the current state-of-the-art for these tasks. We investigate the standard strategy of acquiring data and training using a single model, and also
2Recent works have shown that AL is effective for these tasks even when using modern, neural architectures (Zhang et al., 2017; Shen et al., 2018), but do not address our primary concerns regarding replicability and transferability.

the case of acquiring data using one model and subsequently using it to train a second model. Our experiments consider all possible (acquisition, successor) pairs among the considered models, such that the standard AL scheme corresponds to the setting in which the acquisition and successor models are same. For each pair (A, S), we ﬁrst simulate iterative active data acquisition with model A to label a training dataset DA. We then train the successor model S using DA.
In our evaluation, we compare the relative performance (accuracy or F1, as appropriate for the task) of the successor model trained with corpus DA to the scores achieved by training on comparable amounts of native and i.i.d. sampled data. We simulate pool-based AL using labeled benchmark datasets by withholding document labels from the models. This induces a pool of unlabeled data U. In AL, it is common to warm-start the acquisition model, training on some modest amount of i.i.d. labeled data Dw before using the model to score candidates in U (Settles, 2009) and commencing the AL process. We follow this convention throughout.
Once we have trained the acquisition model on the warm-start data, we begin the simulated AL loop, iteratively selecting instances for labeling and adding them to the dataset. We denote the dataset acquired by model A at iteration t by DAt ; DA0 is initialized to Dw for all models (i.e., all values of A). At each iteration, the acquisition model is trained with DAt . It then scores the remaining unlabeled documents in U \ DAt according to a standard uncertainty AL heuristic. The top n candidates CAt are selected for (simulated) annotation. Their labels are revealed and they are added to the training set: DAt+1 ← DAt ∪ CAt . At the experiment’s conclusion (time step T ), each acquisition model A will have selected a (typically distinct) subset of U for training.
Once we have acquired datasets from each acquisition model DA, we evaluate the performance of each possible successor model when trained on DA. Speciﬁcally, we train each successor model S on the acquired data DAt for all t in the range [0, T ], evaluating its performance on a held-out test set (distinct from U). We compare the performance achieved in this case to that obtained using an i.i.d. training set of the same size.
We run this experiment ten times, averaging results to create summary learning curves, as shown

in Figure 1. All reported results, including i.i.d. baselines, are averages of ten experiments, each conducted with a distinct Dw. These learning curves quantify the comparative performance of a particular model achieved using the same amount of supervision, but elicited under different acquisition models. For each model, we compare the learning curves of each acquisition strategy, including active acquisition using a foreign model and subsequent transfer, active acquisition without changing models (i.e., typical AL), and the baseline strategy of i.i.d. sampling.
4 Tasks
We now brieﬂy describe the models, datasets, acquisition functions, and implementation details for the experiments we conduct with active learners for text classiﬁcation (4.1) and NER (4.2).
4.1 Text Classiﬁcation
Models We consider three standard models for text classiﬁcation: Support Vector Machines (SVMs), Convolutional Neural Networks (CNNs) (Kim, 2014; Zhang and Wallace, 2015), and Bidirectional Long Short-Term Memory (BiLSTM) networks (Hochreiter and Schmidhuber, 1997). For SVM, we represent texts via sparse, TF-IDF bag-of-words (BoW) vectors. For neural models (CNN and BiLSTM), we represent each document as a sequence of word embeddings, stacked into an l × d matrix where l is the length of the sentence and d is the dimensionality of the word embeddings. We initialize all word embeddings with pretrained GloVe vectors (Pennington et al., 2014).
We initialize vector representations for all words for which we do not have pre-trained embeddings uniformly at random. For the CNN, we impose a maximum sentence length of 120 words, truncating sentences exceeding this length and padding shorter sentences. We used ﬁlter sizes of 3, 4, and 5, with 128 ﬁlters per size. For BiLSTMs, we selected the maximum sentence length such that 90% of sentences in Dt would be of equal or lesser length.3 We trained all neural models using the Adam optimizer (Kingma and Ba, 2014), with a learning rate of 0.001, β1 = 0.9, β1 = 0.999, and = 10−8.
Datasets We perform text classiﬁcation experiments using four benchmark datasets. We reserve
3Passing longer sentences to the BiLSTM degraded performance in preliminary experiments.

20% of each dataset (sampled at i.i.d. random) as test data, and use the remaining 80% as the pool of unlabeled data U. We sample 2.5% of the remaining documents randomly from U for each Dw. All models receive the same Dw for any given experiment.
• Movie Reviews: This corpus consists of sentences drawn from movie reviews. The task is to classify sentences as expressing positive or negative sentiment (Pang and Lee, 2005).
• Subjectivity: This dataset consists of statements labeled as either objective or subjective (Pang and Lee, 2004).
• TREC: This task entails categorizing questions into 1 of 6 categories based on the subject of the question (e.g., questions about people, locations, and so on) (Li and Roth, 2002). The TREC dataset deﬁnes standard train/test splits, but we generate our own for consistency in train/validation/test proportions across corpora.
• Customer Reviews: This dataset is composed of product reviews. The task is to categorize them as positive or negative (Hu and Liu, 2004).
4.2 Named Entity Recognition
Models We consider transfer between two NER models: Conditional Random Fields (CRF) (Lafferty et al., 2001) and Bidirectional LSTM-CNNs (BiLSTM-CNNs) (Chiu and Nichols, 2015).
For the CRF model we use a set of features including word-level and character-based embeddings, word sufﬁx, capitalization, digit contents, and part-of-speech tags. The BiLSTMCNN model4 initializes word vectors to pretrained GloVe vector embeddings (Pennington et al., 2014). We learn all word and character level features from scratch, initializing with random embeddings.
Datasets We perform NER experiments on the CoNLL-2003 and OntoNotes-5.0 English datasets. We used the standard test sets for both corpora, but merged training and validation sets to form U . We initialize each Dw to 2.5% of U .
• CoNLL-2003: Sentences from Reuters news with words tagged as person, location, organization, or miscellaneous entities using an IOB
4Implementation of BiLSTM-CNN is based on https: //github.com/asiddhant/Active-NLP.

accuracy F1
accuracy F1
accuracy

0.70

0.68

0.66

0.64

0.62

BiLSTM acquisition model

0.60

CNN acquisition model SVM acquisition model

i.i.d.

5

10

15

20

25

training set size (percentage of pool)

(a) SVM on Movies dataset

0.70

0.68

0.66

0.64

0.62

0.60

0.58

5

10

15

20

25

training set size (percentage of pool)

(b) CNN on Movies dataset

0.68

0.66

0.64

0.62

0.60

0.58

0.56

5

10

15

20

25

training set size (percentage of pool)

(c) LSTM on Movies dataset

80.0

77.5

75.0

72.5

70.0

67.5

65.0

BiLSTM-CNN acquisition model CRF acquisition model

62.5

i.i.d.

5

10

15

20

25

training set size (percentage of pool)

(d) CRF on OntoNotes dataset

86

84

82

80

78

76

5

10

15

20

25

training set size (percentage of pool)

(e) BiLSTM-CNN on OntoNotes dataset

Figure 2: Sample learning curves for the text classiﬁcation task on the Movie Reviews dataset and the NER task on the OntoNotes dataset using the maximum entropy acquisition function (we report learning curves for all models and datasets in the Appendix). Individual plots correspond to successor models. Each line corresponds to an acquisition model, with the blue line representing an i.i.d. baseline.

scheme (Tjong Kim Sang and De Meulder, 2003). The corpus contains 301,418 words.

• OntoNotes-5.0: A corpus of sentences drawn from a variety of sources including newswire, broadcast news, broadcast conversation, and web data. Words are categorized using eighteen entity categories annotated using the IOB scheme (Weischedel et al., 2013). The corpus contains 2,053,446 words.

4.3 Acquisition Functions
We evaluate these models using three common active learning acquisition functions: classical uncertainty sampling, query by committee (QBC), and Bayesian active learning by disagreement (BALD).

Uncertainty Sampling For text classiﬁcation we use the entropy variant of uncertainty sampling, which is perhaps the most widely used AL heuristic (Settles, 2009). Documents are selected for annotation according to the function

argmax − P (yj|x) log P (yj|x),

x∈U

j

where x are instances in the pool U, j indexes potential labels of these (we have elided the in-

stance index here) and P (yj|x) is the predicted probability that x belongs to class yj (this estimate is implicitly conditioned on a model that can provide such estimates). For SVM, the equivalent form of this is to choose documents closest to the decision boundary.
For the NER task we use maximized normalized log-probability (MNLP) (Shen et al., 2018) as our AL heuristic, which adapts the least conﬁdence heuristics to sequences by normalizing the log probabilities of predicted tag sequence by the sequence length. This avoids favoring selecting longer sentences (owing to the lower probability of getting the entire tag sequence right).
Documents are sorted in ascending order according to the function

1n

max y1,...,yn n

log P (yi|y1, ..., yn−1, x)

i=1

Where the max over y assignments denotes the most likely set of tags for instance x and n is the sequence length. Because explicitly calculating the most likely tag sequence is computationally expensive, we follow (Shen et al., 2018) in using a greedy decoding (i.e., beam search with width 1) to determine the model’s prediction.

Text classiﬁcation

Acquisition model

10% of pool

20% of pool

Successor i.i.d. SVM CNN LSTM i.i.d. SVM CNN LSTM

Movie reviews

SVM CNN LSTM

65.3 65.3 65.8 65.7 68.2 69.0 69.4 68.9 65.0 65.3 65.5 65.4 69.4 69.1 69.5 69.5 63.0 62.0 62.5 63.1 67.2 65.1 65.8 67.0

Subjectivity

SVM CNN LSTM

85.2 85.6 85.3 85.5 87.5 87.6 87.4 87.6 85.3 85.2 86.3 86.0 87.9 87.6 88.4 88.6 82.9 82.7 82.7 84.1 86.7 86.3 85.8 87.6

TREC

SVM CNN LSTM

68.5 68.3 66.8 68.5 74.1 74.7 73.2 74.3 70.9 70.5 69.0 70.0 76.1 77.7 77.3 78.0 65.2 64.5 63.6 63.8 71.5 72.7 71.0 73.3

Customer reviews

SVM CNN LSTM

68.8 70.5 70.3 68.5 73.6 74.2 72.9 71.1 70.6 70.9 71.7 68.2 74.1 74.5 74.8 71.5 66.1 67.2 65.1 65.9 68.0 66.6 66.5 66.3

Table 1: Text classiﬁcation accuracy, evaluated for each combination of acquisition and successor models using uncertainty sampling. Accuracies are reported for training sets composed of 10% and 20% of the document pool. Colors indicate performance relative to i.i.d. baselines: Blue indicates that a model fared better, red that it performed worse, and black that it performed the same.

Named Entity Recognition

Successor

Acquisition Model

10% of pool

20% of pool

i.i.d. CRF BiLSTM-CNN i.i.d. CRF BiLSTM-CNN

CoNLL

CRF

69.2 70.5

70.2

73.6 74.4

74.0

BiLSTM-CNN 87.4 87.4

87.8

89.1 89.6

89.6

OntoNotes

CRF

73.8 75.5

75.4

77.6 79.1

78.7

BiLSTM-CNN 82.6 83.1

83.1

84.6 85.2

84.9

Table 2: F1 measurements for the NER task, with training sets comprising 10% and 20% of the training pool.

Query by Committee For our QBC experiments, we use the bagging variant of QBC (Mamitsuka et al., 1998), in which a committee of n models is assembled by sampling with replacement n sets of m documents from the training data (Dt at each t). Each model is then trained using a distinct resulting set, and the pool documents that

maximize their disagreement are selected. We use 10 as our committee size, and set m as equal to the number of documents in Dt.
For the text classiﬁcation task, we compute disagreement using Kullback-Leibler divergence (McCallum and Nigamy, 1998), selecting docu-

Dataset
Movie Reviews Subjectivity TREC Customer Reviews

# Classes
2 2 6 2

# Documents
10662 10000 5952 3775

Examples per Class
5331, 5331 5000, 5000 1300, 916, 95, 1288, 1344, 1009 1368, 2407

Table 3: Text classiﬁcation dataset statistics.

ments for annotation according to the function

1C

Pc (yj |x)

argmax x∈U C

Pc(yj|x) log PC (yj|x)

c=1 j

where x are instances in the pool U, j in-

dexes potential labels of these instances, and C

is the committee size. Pc(yj|x) is the proba-

bility that x belongs to class yj as predicted by

committee member c. PC(yj|x) represents the

consensus probability that x belongs to class yj,

1 C

C c=1

Pc

(yj

|x).

For NER, we compute disagreement using the

average per word vote-entropy (Dagan and En-

gelson, 1995), selecting sequences for annotation

which maximize the function

1n

V (yi, m) V (yi, m)

−

log

n i=1 m C C

where n is the sequence length, C is the committee size, and V (yi, m) is the number of committee members who assign tag m to word i in their most likely tag sequence. We do not apply the QBC acquisition function to the OntoNotes dataset, as training the committee for this larger dataset becomes impractical.

Bayesian AL by Disagreement We use the Monte Carlo variant of BALD, which exploits an interpretation of dropout regularization as a Bayesian approximation to a Gaussian process (Gal et al., 2017b; Siddhant and Lipton, 2018). This technique entails applying dropout at test time, and then estimating uncertainty as the disagreement between outputs realized via multiple passes through the model. We use the acquisition function proposed in (Siddhant and Lipton, 2018), which selects for annotation those instances that maximize the number of passes through the model that disagree with the most popular choice:

argmax(1 − count(mode(yx1, ..., yxT )) )

x∈U

T

where x are instances in the pool U , yxi is the class prediction of the ith model pass on instance x, and T is the number of passes taken through the model. Any ties are resolved using uncertainty sampling over the mean predicted probabilities of all T passes.
In the NER task, agreement is measured across the entire sequence. Because this acquisition function relies on dropout, we do not consider it for non-neural models (SVM and CRF).
5 Results
We compare transfer between all possible (acquisition, successor) model pairs for each task. We report the performance of each model under all acquisition functions both in tables compiling results (Table 1 and Table 2 for classiﬁcation and NER, respectively) and graphically via learning curves that plot predictive performance as a function of train set size (Figure 2).
We report additional results, including all learning curves (for all model pairs and for all tasks), and tabular results (for all acquisition functions) in the Appendix. We also provide in the Appendix plots resembling 1a for all (model, acquisition function) pairs that report the difference between performance under standard AL (in which acquisition and successor model are the same) and that under commensurate i.i.d. data, which affords further analysis of the gains offered by standard AL. For text classiﬁcation tasks, we report accuracies; for NER tasks, we report F1.
To compare the learning curves, we select incremental points along the x-axis and report the performance at these points. Speciﬁcally, we report results with training sets containing 10% and 20% of the training pool.
6 Discussion
Results in Tables 1 and 2 demonstrate that standard AL — where the acquisition and successor models are one and the same — performs incon-

Acquisition Model
CNN LSTM SVM

Movie Reiews CNN LSTM

– 0.989 0.991

0.961 –
0.961

Successor

Subjectivity

TREC

CNN LSTM CNN LSTM

– 0.996 0.997

0.968 –
0.970

– 0.992 0.990

0.988 –
0.987

Customer Reviews CNN LSTM

– 0.980 0.991

0.973 –
0.974

Table 4: Average Spearman’s rank correlation coefﬁcients (over ﬁve runs) of cosine distances between test set representations learned with native active learning and distances between those learned with transferred actively acquired datasets, at the end of the AL process. Uncertainty is used as the acquisition function in all cases.

sistently across text classiﬁcation datasets. In 75% of all combinations of model, dataset, and training set size, there exists some acquisition function that outperforms i.i.d. data. This is consistent with the prior literature indicating the effectiveness of AL. However, when implementing AL in a real, live setting, a practitioner would choose a single acquisition function ahead of time. To accurately reﬂect this scenario, we must consider the performance of individual acquisition functions across multiple datasets. Results for individual AL strategies are more equivocal. In our reported classiﬁcation datapoints, standard AL outperforms i.i.d. sampling in only a slight majority (60.9%) of cases.
AL thus seems to yield modest (though inconsistent) improvements over i.i.d. random sampling, but our results further suggest that this comes at an additional cost: the acquired dataset may not generalize well to new learners. Speciﬁcally, models trained on foreign actively acquired datasets tend to underperform those trained on i.i.d. datasets. We observe this most clearly in the classiﬁcation task, where only a handful of (acquisition, successor, acquisition function) combinations lead to performance greater than that achieved using i.i.d. data. Speciﬁcally, only 37.5% of the tabulated data points representing dataset transfer (in which acquisition and successor models differ) outperform the i.i.d. baseline.
Results for NER are more favorable for AL. For this task we observe consistent improved performance versus the i.i.d. baseline in both standard AL data points and transfer data points. These results are consistent with previous ﬁndings on transferring actively acquired datasets for NER (Tomanek and Morik, 2011).
In standard AL for text classiﬁcation, the only (model, acquisition function) pairs that we observe to produce better than i.i.d. results with any regularity are uncertainty with SVM or CNN, and

BALD with CNN. When transferring actively acquired datasets, we do not observe consistently better than i.i.d. results with any combination of acquisition model, successor model, and acquisition function. The success of AL appears to depend very much on the dataset. For example, AL methods – both in the standard and acquisition/successor settings – perform much more reliably on the Subjectivity dataset than any other. In contrast, AL performs consistently poorly on the TREC dataset.
Our ﬁndings suggest that AL is brittle. During experimentation, we also found that performance often depends on factors that one may think are minor design decisions. For example, our setup largely resembles that of Siddhant and Lipton (2018), yet initially we observed large discrepancies in results. Digging into this revealed that much of the difference was due to our use of word2vec (Mikolov et al., 2013) rather than GloVe (Pennington et al., 2014) for word embedding initializations. That small decisions like this can result in relatively pronounced performance differences for AL strategies is disconcerting.
A key advantage afforded by neural models is representation learning. A natural question here is therefore whether the representations induced by the neural models differs as a function of the acquisition strategy. To investigate this, we measure pairwise distances between instances in the learned feature space after training. Speciﬁcally, for each test instance we calculate its cosine similarity to all other test instances, inducing a ranking. We do this in the three different feature spaces learned by the CNN and LSTM models, respectively, after sampling under the three acquisition models.
We quantify dissimilarities between the rankings induced under different representations via Spearman’s rank correlation coefﬁcients. We re-

peat this for all instances in the test set, and average over these coefﬁcients to derive an overall similarity measure, which may be viewed as quantifying the similarity between learned feature spaces via average pairwise similarities within them. As reported in Table 4, despite the aforementioned differences in predictive performance, the learned representations seem to be similar. In other words, sampling under foreign acquisition models does not lead to notably different representations.
7 Conclusions
We extensively evaluated standard AL methods under varying model, domain, and acquisition function combinations for two standard NLP tasks (text classiﬁcation and sequence tagging). We also assessed performance achieved when transferring an actively sampled training dataset from an acquisition model to a distinct successor model. Given the longevity and value of training sets and the frequency at which new ML models advance the state-of-the-art, this should be an anticipated scenario: Annotated data often outlives models.
Our ﬁndings indicate that AL performs unreliably. While a speciﬁc acquisition function and model applied to a particular task and domain may be quite effective, it is not clear that this can be predicted ahead of time. Indeed, there is no way to retrospectively determine the relative success of AL without collecting a relatively large quantity of i.i.d. sampled data, and this would undermine the purpose of AL in the ﬁrst place. Further, even if such an i.i.d. sample were taken as a diagnostic tool early in the active learning cycle, relative success early in the AL cycle is not necessarily indicative of relative success later in the cycle, as illustrated by Figure 1a.
Problematically, even in successful cases, an actively sampled training set is linked to the model used to acquire it. We have found that training successor models with this set will often result in performance worse than that attained using an equivalently sized i.i.d. sample. Results are more favorable to AL for NER, as compared to text classiﬁcation, which is consistent with prior work (Tomanek and Morik, 2011).
In short, the relative performance of individual active acquisition functions varies considerably over datasets and domains. While AL often does yield gains over i.i.d. sampling, these tend to be marginal and inconsistent. Moreover,

this comes at a relatively steep cost: The acquired dataset may be disadvantageous for training subsequent models. Together these ﬁndings raise serious concerns regarding the efﬁcacy of active learning in practice.
8 Acknowledgements
This work was supported in part by the Army Research Ofﬁce (ARO), award W911NF1810328.
References
Josh Attenberg and Foster Provost. 2011. Inactive learning?: difﬁculties employing active learning in practice. ACM SIGKDD Explorations Newsletter, 12(2):36–41.
Olivier Chapelle, Bernhard Scholkopf, and Alexander Zien. 2009. Semi-supervised learning (chapelle, o. et al., eds.; 2006)[book reviews]. IEEE Transactions on Neural Networks, 20(3):542–542.
Jason PC Chiu and Eric Nichols. 2015. Named entity recognition with bidirectional lstm-cnns. arXiv preprint arXiv:1511.08308.
David A Cohn, Zoubin Ghahramani, and Michael I Jordan. 1996. Active learning with statistical models. Journal of artiﬁcial intelligence research, 4:129– 145.
Ido Dagan and Sean P Engelson. 1995. Committeebased sampling for training probabilistic classiﬁers. In Machine Learning Proceedings 1995, pages 150– 157. Elsevier.
Yarin Gal, Riashat Islam, and Zoubin Ghahramani. 2017a. Deep bayesian active learning with image data. In International Conference on Machine Learning, pages 1183–1192.
Yarin Gal, Riashat Islam, and Zoubin Ghahramani. 2017b. Deep bayesian active learning with image data. CoRR, abs/1703.02910.
Abbas Ghaddar and Phillippe Langlais. 2018. Robust lexical features for improved neural network namedentity recognition. In Proceedings of the 27th International Conference on Computational Linguistics, pages 1896–1907. Association for Computational Linguistics.
Sepp Hochreiter and Ju¨rgen Schmidhuber. 1997. Long short-term memory. Neural computation, 9(8):1735–1780.
Minqing Hu and Bing Liu. 2004. Mining and summarizing customer reviews. In Proceedings of the tenth ACM SIGKDD international conference on Knowledge discovery and data mining, pages 168–177. ACM.

Thorsten Joachims. 1998. Text categorization with support vector machines: Learning with many relevant features. In European conference on machine learning, pages 137–142. Springer.
Rie Johnson and Tong Zhang. 2016. Supervised and semi-supervised text categorization using lstm for region embeddings. In Proceedings of the 33rd International Conference on International Conference on Machine Learning - Volume 48, ICML’16, pages 526–534. JMLR.org.
Yoon Kim. 2014. Convolutional neural networks for sentence classiﬁcation. arXiv preprint arXiv:1408.5882.
Diederik P Kingma and Jimmy Ba. 2014. Adam: A method for stochastic optimization. arXiv preprint arXiv:1412.6980.
John D. Lafferty, Andrew McCallum, and Fernando C. N. Pereira. 2001. Conditional random ﬁelds: Probabilistic models for segmenting and labeling sequence data. In Proceedings of the Eighteenth International Conference on Machine Learning, ICML ’01, pages 282–289, San Francisco, CA, USA. Morgan Kaufmann Publishers Inc.
Xin Li and Dan Roth. 2002. Learning question classiﬁers. In Proceedings of the 19th international conference on Computational linguistics-Volume 1, pages 1–7. Association for Computational Linguistics.
Naoki Abe Hiroshi Mamitsuka et al. 1998. Query learning strategies using boosting and bagging. In Machine learning: proceedings of the ﬁfteenth international conference (ICML98), volume 1. Morgan Kaufmann Pub.
Andrew Kachites McCallum and Kamal Nigamy. 1998. Employing em and pool-based active learning for text classiﬁcation. In Proc. International Conference on Machine Learning (ICML), pages 359–367. Citeseer.
Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey Dean. 2013. Efﬁcient estimation of word representations in vector space.
Sinno Jialin Pan and Qiang Yang. 2010. A survey on transfer learning. IEEE Transactions on knowledge and data engineering, 22(10):1345–1359.
Bo Pang and Lillian Lee. 2004. A sentimental education: Sentiment analysis using subjectivity summarization based on minimum cuts. In Proceedings of the ACL.
Bo Pang and Lillian Lee. 2005. Seeing stars: Exploiting class relationships for sentiment categorization with respect to rating scales. In Proceedings of the ACL.

Jeffrey Pennington, Richard Socher, and Christopher D. Manning. 2014. Glove: Global vectors for word representation. In Empirical Methods in Natural Language Processing (EMNLP), pages 1532– 1543.
Maria E. Ramirez-Loaiza, Manali Sharma, Geet Kumar, and Mustafa Bilgic. 2017. Active learning: an empirical study of common baselines. Data Mining and Knowledge Discovery, 31(2):287–313.
B. Settles. 2009. Active learning literature survey. Computer Sciences Technical Report 1648, University of Wisconsin–Madison.
Burr Settles. 2012. Active learning. Synthesis Lectures on Artiﬁcial Intelligence and Machine Learning, 6(1):1–114.
Yanyao Shen, Hyokun Yun, Zachary C. Lipton, Yakov Kronrod, and Animashree Anandkumar. 2018. Deep active learning for named entity recognition. In International Conference on Learning Representations.
Aditya Siddhant and Zachary C Lipton. 2018. Deep bayesian active learning for natural language processing: Results of a large-scale empirical study. arXiv preprint arXiv:1808.05697.
Erik F. Tjong Kim Sang and Fien De Meulder. 2003. Introduction to the conll-2003 shared task: Language-independent named entity recognition. In Proceedings of CoNLL-2003, pages 142–147. Edmonton, Canada.
Katrin Tomanek and Katharina Morik. 2011. Inspecting sample reusability for active learning. In Active Learning and Experimental Design workshop In conjunction with AISTATS 2010, pages 169–181.
Ralph Weischedel, Martha Palmer, Mitchell Marcus, Eduard Hovy, Sameer Pradhan, Lance Ramshaw, Nianwen Xue, Ann Taylor, Jeff Kaufman, Michelle Franchini, et al. 2013. Ontonotes release 5.0 ldc2013t19. Linguistic Data Consortium, Philadelphia, PA.
Ye Zhang, Matthew Lease, and Byron C Wallace. 2017. Active discriminative text representation learning. In AAAI.
Ye Zhang and Byron Wallace. 2015. A sensitivity analysis of (and practitioners’ guide to) convolutional neural networks for sentence classiﬁcation. arXiv preprint arXiv:1510.03820.

Appendices
A Experimental Results
Below, we present full results for all our experiments in the form of tabular results and learning curves. Tables 5 and 6 enumerate performance metrics for all source, successor, acquisition function combinations after acquiring 10% and 20% of the pool. Figure 3 shows the learning curves for all combinations. We report all average Spearman’s rank correlation coefﬁcients in Table 7.

Text classiﬁcation

Acquisition model

Uncertainty

QBC

BALD

Successor pool % i.i.d. SVM CNN LSTM SVM CNN LSTM CNN LSTM

Movie reviews

SVM CNN LSTM

10 65.3 65.3 65.8 65.7 64.9 64.9 65.1 64.9 65.2 20 68.2 69.0 69.4 68.9 68.1 68.4 68.7 68.5 69.0 10 65.0 65.3 65.5 65.4 64.8 65.1 64.7 65.1 64.9 20 69.4 69.1 69.5 69.5 68.5 69.1 69.1 68.3 69.1 10 63.0 62.0 62.5 63.1 61.9 61.9 62.6 61.7 62.2 20 67.2 65.1 65.8 67.0 65.4 65.7 66.8 65.6 67.1

Subjectivity

SVM CNN LSTM

10 85.2 85.6 85.3 85.5 85.4 85.0 85.4 85.8 85.4 20 87.5 87.6 87.4 87.6 87.7 87.0 87.5 87.0 87.6 10 85.3 85.2 86.3 86.0 85.3 86.0 85.7 86.2 85.7 20 87.9 87.6 88.4 88.6 88.4 88.5 88.6 88.6 88.3 10 82.9 82.7 82.7 84.1 83.3 83.7 84.8 83.1 84.2 20 86.7 86.3 85.8 87.6 86.9 87.0 87.7 84.7 87.0

TREC

SVM CNN LSTM

10 68.5 68.3 66.8 68.5 68.1 63.1 64.9 68.2 68.3 20 74.1 74.7 73.2 74.3 73.7 71.6 71.2 74.1 74.1 10 70.9 70.5 69.0 70.0 67.4 62.8 69.5 71.0 70.5 20 76.1 77.7 77.3 78.0 76.5 73.7 76.3 79.8 77.7 10 65.2 64.5 63.6 63.8 61.7 60.1 64.6 64.1 64.5 20 71.5 72.7 71.0 73.3 71.4 69.9 71.8 72.9 72.6

Customer reviews

SVM CNN LSTM

10 68.8 70.5 70.3 68.5 70.5 69.5 64.6 70.0 69.2 20 73.6 74.2 72.9 71.1 73.8 72.6 65.7 73.5 71.7 10 70.6 70.9 71.7 68.2 71.5 71.4 63.8 72.2 68.4 20 74.1 74.5 74.8 71.5 74.9 74.9 65.2 75.3 71.3 10 66.1 67.2 65.1 65.9 65.0 64.8 64.0 65.2 65.4 20 68.0 66.6 66.5 66.3 66.3 66.4 65.4 68.3 68.0

Table 5: Text classiﬁcation accuracy, evaluated for each combination of acquisition and successor models using uncertainty sampling, QBC, and BALD. Accuracies are reported for training sets composed of 10% and 20% of the document pool. Colors indicate performance relative to i.i.d. baselines: Blue implies that a model fared better, red that it performed worse, and black that it performed the same.

Successor

Named Entity Recognition

Acquisition Model

Uncertainty

BALD

QBC

pool % i.i.d. CRF BiLSTM-CNN BiLSTM-CNN CRF BiLSTM-CNN

CoNLL

CRF 10 69.2 70.5 70.2

20 73.6 74.4

74.0

BiLSTM-CNN 10 87.4 87.4 87.8

20 89.1 89.6

89.6

70.3

70.3

70.0

74.1

74.5

74.1

88.0

87.5

87.7

89.8

89.2

89.5

Successor

Acquisition Model

Uncertainty

BALD

pool % i.i.d. CRF BiLSTM-CNN BiLSTM-CNN

OntoNotes

CRF 10 73.8 75.5 75.4 75.3

20 77.6 79.1

78.7

78.7

BiLSTM-CNN 10 82.6 83.1 83.1 83.2

20 84.6 85.2

84.9

85.1

Table 6: F1 measurements for the NER task, with training sets comprising 10% and 20% of the training pool.

Acquisition Model
CNN LSTM SVM
CNN LSTM SVM
CNN LSTM

Movie Reiews CNN LSTM

– 0.989 0.991

0.961 –
0.961

– 0.989 0.995

0.956 –
0.962

– 0.963 0.991 –

Successor

Subjectivity

TREC

CNN LSTM CNN LSTM

Uncertainty Sampling

– 0.996 0.997

0.968 –
0.970

– 0.992 0.990

0.988 –
0.987

QBC

– 0.996 0.997

0.970 –
0.970

– 0.990 0.985

0.985 –
0.986

BALD

– 0.969 – 0.988 0.995 – 0.991 –

Customer Reviews CNN LSTM

– 0.980 0.991

0.973 –
0.974

– 0.988 0.993

0.972 –
0.974

– 0.982

0.974 –

Table 7: Average Spearman’s rank correlation coefﬁcients of cosine distances between test set representations learned with native active learning and distances between those learned with transferred actively acquired datasets.

Figure 3: This appendix contains the full set of collected learning curves for the text classiﬁcation and NER. Error bars represent one standard deviation.

accuracy

accuracy

0.72

0.72

0.70

0.70

0.68

0.68

0.66

0.66

accuracy

0.64

0.64

0.62

0.62

0.60

0.60

BiLSTM acquisition model CNN acquisition model

0.58

BiLSTM acquisition model CNN acquisition model

0.58

SVM acquisition model

i.i.d.

0.56

SVM acquisition model i.i.d.

5

10

15

20

25

training set size (percentage of pool)

5

10

15

20

25

training set size (percentage of pool)

(1) SVM on Movie Reviews dataset using max entropy (2) CNN on Movie Reviews dataset using max entropy

0.70

0.68

0.66

0.64

0.62

0.60

0.58

BiLSTM acquisition model

0.56

CNN acquisition model

SVM acquisition model

0.54

i.i.d.

5

10

15

20

25

training set size (percentage of pool)

(3) BiLSTM on Movie Reviews dataset using max entropy

0.70

0.68

0.66

0.64

0.62

0.60

0.58

BiLSTM acquisition model CNN acquisition model

0.56

SVM acquisition model i.i.d.

5

10

15

20

25

training set size (percentage of pool)

accuracy

accuracy

0.70

0.68

0.66

0.64

0.62

0.60

BiLSTM acquisition model

CNN acquisition model

0.58

SVM acquisition model i.i.d.

5

10

15

20

25

training set size (percentage of pool)

(4) SVM on Movie Reviews dataset using QBC

0.70

0.68

0.66

0.64

0.62

0.60

0.58

BiLSTM acquisition model

0.56

CNN acquisition model

SVM acquisition model

0.54

i.i.d.

5

10

15

20

25

training set size (percentage of pool)

(5) CNN on Movie Reviews dataset using QBC

(6) BiLSTM on Movie Reviews dataset using QBC

accuracy

accuracy

0.70

0.70

0.68

0.68

0.66

0.66

accuracy

0.64

0.64

0.62

0.62

0.60

0.60

BiLSTM acquisition model

0.58

BiLSTM acquisition model

0.58

CNN acquisition model

i.i.d.

0.56

CNN acquisition model i.i.d.

5

10

15

20

25

training set size (percentage of pool)

5

10

15

20

25

training set size (percentage of pool)

accuracy

(7) SVM on Movie Reviews dataset using BALD
0.70

0.68

0.66

0.64

0.62

0.60

0.58

0.56

BiLSTM acquisition model

CNN acquisition model

0.54

i.i.d.

5

10

15

20

25

training set size (percentage of pool)

accuracy

(8) CNN on Movie Reviews dataset using BALD

0.88

0.86

0.84

0.82

BiLSTM acquisition model

0.80

CNN acquisition model

SVM acquisition model

i.i.d.

0.78

5

10

15

20

25

training set size (percentage of pool)

accuracy

(9) BiLSTM on Movie Reviews dataset using BALD

0.90

0.88

0.86

0.84

0.82

0.80

0.78

BiLSTM acquisition model

CNN acquisition model

0.76

SVM acquisition model i.i.d.

5

10

15

20

25

training set size (percentage of pool)

accuracy

(10) SVM on Subjectivity dataset using max entropy

0.900

0.875

0.850

0.825

0.800

0.775

0.750

0.725

BiLSTM acquisition model CNN acquisition model

0.700

SVM acquisition model i.i.d.

5

10

15

20

25

training set size (percentage of pool)

accuracy

(11) CNN on Subjectivity dataset using max entropy

0.88

0.86

0.84

0.82

0.80

BiLSTM acquisition model

CNN acquisition model

SVM acquisition model

0.78

i.i.d.

5

10

15

20

25

training set size (percentage of pool)

accuracy

(12) BiLSTM on Subjectivity dataset using max entropy

0.90

0.88

0.86

0.84

0.82

0.80

0.78

BiLSTM acquisition model

CNN acquisition model

0.76

SVM acquisition model

i.i.d.

5

10

15

20

25

training set size (percentage of pool)

(13) SVM on Subjectivity dataset using QBC

(14) CNN on Subjectivity dataset using QBC

accuracy

accuracy

accuracy

accuracy

0.875

0.850

0.825

0.800

0.775

0.750

BiLSTM acquisition model

CNN acquisition model

0.725

SVM acquisition model

i.i.d.

5

10

15

20

25

training set size (percentage of pool)

(15) BiLSTM on Subjectivity dataset using QBC

0.90

0.88

0.86

0.84

0.82

0.80

0.78

BiLSTM acquisition model

0.76

CNN acquisition model

i.i.d.

5

10

15

20

25

training set size (percentage of pool)

(17) CNN on Subjectivity dataset using BALD

0.75

0.70

0.65

0.60

BiLSTM acquisition model

CNN acquisition model

0.55

SVM acquisition model

i.i.d.

5

10

15

20

25

training set size (percentage of pool)

(19) SVM on TREC dataset using max entropy

0.75

0.70

0.65

0.60

0.55

0.50

BiLSTM acquisition model

CNN acquisition model

0.45

SVM acquisition model i.i.d.

5

10

15

20

25

training set size (percentage of pool)

(21) BiLSTM on TREC dataset using max entropy

accuracy

accuracy

accuracy

accuracy

0.88

0.86

0.84

0.82

0.80

BiLSTM acquisition model

CNN acquisition model

i.i.d.

5

10

15

20

25

training set size (percentage of pool)

(16) SVM on Subjectivity dataset using BALD

0.900

0.875

0.850

0.825

0.800

0.775

0.750

BiLSTM acquisition model

0.725

CNN acquisition model i.i.d.

5

10

15

20

25

training set size (percentage of pool)

(18) BiLSTM on Subjectivity dataset using BALD

0.80

0.75

0.70

0.65

0.60

BiLSTM acquisition model

0.55

CNN acquisition model

SVM acquisition model

i.i.d.

0.50

5

10

15

20

25

training set size (percentage of pool)

(20) CNN on TREC dataset using max entropy

0.75

0.70

0.65

0.60

BiLSTM acquisition model

0.55

CNN acquisition model

SVM acquisition model

i.i.d.

5

10

15

20

25

training set size (percentage of pool)

(22) SVM on TREC dataset using QBC

accuracy

0.80

0.75

0.70

0.65

0.60

BiLSTM acquisition model

0.55

CNN acquisition model

SVM acquisition model

i.i.d.

0.50

5

10

15

20

25

training set size (percentage of pool)

(23) CNN on TREC dataset using QBC

accuracy

0.75

0.70

0.65

0.60

0.55

0.50

BiLSTM acquisition model CNN acquisition model

SVM acquisition model

0.45

i.i.d.

5

10

15

20

25

training set size (percentage of pool)

(24) BiLSTM on TREC dataset using QBC

accuracy

accuracy

0.75

0.80

0.75 0.70
0.70

accuracy

0.65

0.65

0.60

0.60

BiLSTM acquisition model CNN acquisition model

0.55

BiLSTM acquisition model CNN acquisition model

0.55

i.i.d.

i.i.d.

5

10

15

20

25

0.50

5

10

15

20

25

training set size (percentage of pool)

training set size (percentage of pool)

(25) SVM on TREC dataset using BALD

0.75

0.70

0.65

0.60

0.55

0.50

BiLSTM acquisition model

0.45

CNN acquisition model i.i.d.

5

10

15

20

25

training set size (percentage of pool)

accuracy

(26) CNN on TREC dataset using BALD

0.76

0.74

0.72

0.70

0.68

0.66

0.64

BiLSTM acquisition model CNN acquisition model

0.62

SVM acquisition model i.i.d.

5

10

15

20

25

training set size (percentage of pool)

(27) BiLSTM on TREC dataset using BALD

0.76

0.74

0.72

0.70

0.68

0.66 BiLSTM acquisition model

0.64

CNN acquisition model SVM acquisition model

0.62

i.i.d.

5

10

15

20

25

training set size (percentage of pool)

accuracy

(28) SVM on Customer Review dataset using max entropy
0.74

0.72

0.70

0.68

0.66

0.64

0.62

0.60

BiLSTM acquisition model CNN acquisition model

0.58

SVM acquisition model i.i.d.

5

10

15

20

25

training set size (percentage of pool)

(29) CNN on Customer Review dataset using max en- (30) BiLSTM on Customer Review dataset using max

tropy

entropy

accuracy

accuracy

0.76

0.74

0.76

0.72

0.74

0.70

0.72

accuracy

0.68

0.70

0.66 0.68

0.64 BiLSTM acquisition model 0.66 BiLSTM acquisition model

0.62

CNN acquisition model SVM acquisition model

0.64

CNN acquisition model SVM acquisition model

i.i.d.

0.62

i.i.d.

5

10

15

20

25

5

10

15

20

25

training set size (percentage of pool)

training set size (percentage of pool)

(31) SVM on Customer Review dataset using QBC
0.74

0.72

0.70

0.68

0.66

0.64

0.62

0.60

BiLSTM acquisition model CNN acquisition model

0.58

SVM acquisition model i.i.d.

5

10

15

20

25

training set size (percentage of pool)

accuracy

(32) CNN on Customer Review dataset using QBC
0.76

0.74

0.72

0.70

0.68

0.66

0.64 BiLSTM acquisition model

0.62

CNN acquisition model i.i.d.

5

10

15

20

25

training set size (percentage of pool)

(33) BiLSTM on Customer Review dataset using QBC (34) SVM on Customer Review dataset using BALD

accuracy

accuracy

0.76

0.725

0.74

0.700

0.72

0.675

accuracy

0.70

0.650

0.68

0.625

0.66

0.600

0.64

BiLSTM acquisition model CNN acquisition model

0.575

BiLSTM acquisition model CNN acquisition model

i.i.d.

i.i.d.

5

10

15

20

25

training set size (percentage of pool)

5

10

15

20

25

training set size (percentage of pool)

(35) CNN on Customer Review dataset using BALD

80.0

77.5

75.0

72.5

70.0

67.5

65.0

BiLSTM-CNN acquisition model

CRF acquisition model

62.5

i.i.d.

5

10

15

20

25

training set size (percentage of pool)

F1

(36) BiLSTM on Customer Review dataset using BALD
86

84

82

80

78

76

BiLSTM-CNN acquisition model CRF acquisition model

i.i.d.

5

10

15

20

25

training set size (percentage of pool)

(37) CRF on OntoNotes dataset using max entropy (38) BiLSTM-CNN on OntoNotes dataset using max entropy

F1

F1

F1

F1

F1

80.0

77.5

75.0

72.5

70.0

67.5

65.0

BiLSTM-CNN acquisition model

62.5

i.i.d.

5

10

15

20

25

training set size (percentage of pool)

(39) CRF on OntoNotes dataset using BALD

75.0

72.5

70.0

67.5

65.0

62.5

60.0

BiLSTM-CNN acquisition model CRF acquisition model

i.i.d.

5

10

15

20

25

training set size (percentage of pool)

(41) CRF on CoNLL dataset using max entropy

75.0

72.5

70.0

67.5

65.0

62.5

60.0

BiLSTM-CNN acquisition model CRF acquisition model

i.i.d.

5

10

15

20

25

training set size (percentage of pool)

(43) CRF on CoNLL dataset using QBC

75.0

72.5

70.0

67.5

65.0

62.5

60.0

BiLSTM-CNN acquisition model

i.i.d.

5

10

15

20

25

training set size (percentage of pool)

(45) CRF on CoNLL dataset using BALD

F1

F1

F1

F1

86

84

82

80

78

76

BiLSTM-CNN acquisition model

i.i.d.

5

10

15

20

25

training set size (percentage of pool)

(40) BiLSTM-CNN on OntoNotes dataset using BALD

90

88

86

84

82

80

BiLSTM-CNN acquisition model CRF acquisition model

i.i.d.

5

10

15

20

25

training set size (percentage of pool)

(42) BiLSTM-CNN on CoNLL dataset using max entropy

90

88

86

84

82

80

BiLSTM-CNN acquisition model

CRF acquisition model

78

i.i.d.

5

10

15

20

25

training set size (percentage of pool)

(44) BiLSTM-CNN on CoNLL dataset using QBC

90

88

86

84

82

80

BiLSTM-CNN acquisition model

i.i.d.

5

10

15

20

25

training set size (percentage of pool)

(46) BiLSTM-CNN on CoNLL dataset using BALD

(accuracy)

(accuracy)

(accuracy)

(accuracy)

0.015

0.010

0.005

0.000

0.005

0.010

Movie reviews

Subjectivity

0.015

TREC Customer reviews

5

10

15

20

25

training set size (percentage of pool)

(47) ∆ for SVM using max entropy
0.02

0.01

0.00

0.01

0.02

Movie reviews Subjectivity

TREC

Customer reviews

5

10

15

20

25

training set size (percentage of pool)

(49) ∆ for BiLSTM using max entropy

0.00

0.02

0.04

0.06

Movie reviews

Subjectivity

0.08

TREC Customer reviews

5

10

15

20

25

training set size (percentage of pool)

(51) ∆ for CNN using QBC

0.05

Movie reviews

Subjectivity

0.04

TREC

Customer reviews

0.03

0.02

0.01

0.00

0.01

5

10

15

20

25

training set size (percentage of pool)

(53) ∆ for CNN using BALD

(accuracy)

(accuracy)

(accuracy)

(accuracy)

0.01

0.00

0.01

0.02

Movie reviews

Subjectivity

0.03

TREC Customer reviews

5

10

15

20

25

training set size (percentage of pool)

(48) ∆ for CNN using max entropy
0.02

0.01

0.00

0.01

0.02

0.03

Movie reviews Subjectivity

TREC

0.04

Customer reviews

5

10

15

20

25

training set size (percentage of pool)

(50) ∆ for SVM using QBC
0.02

0.01

0.00

0.01

0.02

0.03

Movie reviews Subjectivity

TREC

0.04

Customer reviews

5

10

15

20

25

training set size (percentage of pool)

(52) ∆ for BiLSTM using QBC

0.015

Movie reviews

Subjectivity

TREC

0.010

Customer reviews

0.005

0.000

0.005

0.010

5

10

15

20

25

training set size (percentage of pool)

(54) ∆ for BiLSTM using BALD

(F1)

CoNLL

1.75

OntoNotes

1.50

1.25

1.00

0.75

0.50

0.25

0.00

5

10

15

20

25

training set size (percentage of pool)

(55) ∆ for CRF using max entropy

1.2

CoNLL

1.0

0.8

0.6

0.4

0.2

0.0

5

10

15

20

25

training set size (percentage of pool)

(57) ∆ for CRF using QBC

(F1)

0.6 0.4 0.2 0.0

(F1)

(F1)

0.6

CoNLL

OntoNotes

0.4

0.2

0.0

0.2

5

10

15

20

25

training set size (percentage of pool)

(56) ∆ for BiLSTM-CNN using max entropy

0.4

CoNLL

0.2

0.0

0.2

0.4

0.6 5 10 15 20 25 training set size (percentage of pool)
(58) ∆ for BiLSTM-CNN using QBC
CoNLL OntoNotes

(F1)

5

10

15

20

25

training set size (percentage of pool)

(59) ∆ for BiLSTM-CNN using BALD

