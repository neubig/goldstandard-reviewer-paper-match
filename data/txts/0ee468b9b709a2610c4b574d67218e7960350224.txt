SwitchOut: an Efﬁcient Data Augmentation Algorithm for Neural Machine Translation
Xinyi Wang*,1, Hieu Pham*,1,2, Zihang Dai1, Graham Neubig1
{xinyiw1,hyhieu,dzihang,gneubig}@cs.cmu.edu 1Language Technology Institute, Carnegie Mellon University, Pittsburgh, PA 15213
2Google Brain, Mountain View, CA 94043

arXiv:1808.07512v2 [cs.CL] 28 Aug 2018

Abstract
In this work, we examine methods for data augmentation for text-based tasks such as neural machine translation (NMT). We formulate the design of a data augmentation policy with desirable properties as an optimization problem, and derive a generic analytic solution. This solution not only subsumes some existing augmentation schemes, but also leads to an extremely simple data augmentation strategy for NMT: randomly replacing words in both the source sentence and the target sentence with other random words from their corresponding vocabularies. We name this method SwitchOut. Experiments on three translation datasets of different scales show that SwitchOut yields consistent improvements of about 0.5 BLEU, achieving better or comparable performances to strong alternatives such as word dropout (Sennrich et al., 2016a). Code to implement this method is included in the appendix.
1 Introduction and Related Work
Data augmentation algorithms generate extra data points from the empirically observed training set to train subsequent machine learning algorithms. While these extra data points may be of lower quality than those in the training set, their quantity and diversity have proven to beneﬁt various learning algorithms (DeVries and Taylor, 2017; Amodei et al., 2016). In image processing, simple augmentation techniques such as ﬂipping, cropping, or increasing and decreasing the contrast of the image are both widely utilized and highly effective (Huang et al., 2016; Zagoruyko and Komodakis, 2016).
However, it is nontrivial to ﬁnd simple equivalences for NLP tasks like machine translation, because even slight modiﬁcations of sentences can
*: Equal contributions.

result in signiﬁcant changes in their semantics, or require corresponding changes in the translations in order to keep the data consistent. In fact, indiscriminate modiﬁcations of data in NMT can introduce noise that makes NMT systems brittle (Belinkov and Bisk, 2018).
Due to such difﬁculties, the literature in data augmentation for NMT is relatively scarce. To our knowledge, data augmentation techniques for NMT fall into two categories. The ﬁrst category is based on back-translation (Sennrich et al., 2016b; Poncelas et al., 2018), which utilizes monolingual data to augment a parallel training corpus. While effective, back-translation is often vulnerable to errors in initial models, a common problem of selftraining algorithms (Chapelle et al., 2009). The second category is based on word replacements. For instance, Fadaee et al. (2017) propose to replace words in the target sentences with rare words in the target vocabulary according to a language model, and then modify the aligned source words accordingly. While this method generates augmented data with relatively high quality, it requires several complicated preprocessing steps, and is only shown to be effective for lowresource datasets. Other generic word replacement methods include word dropout (Sennrich et al., 2016a; Gal and Ghahramani, 2016), which uniformly set some word embeddings to 0 at random, and Reward Augmented Maximum Likelihood (RAML; Norouzi et al. (2016)), whose implementation essentially replaces some words in the target sentences with other words from the target vocabulary.
In this paper, we derive an extremely simple and efﬁcient data augmentation technique for NMT. First, we formulate the design of a data augmentation algorithm as an optimization problem, where we seek the data augmentation policy that maximizes an objective that encourages two desired

properties: smoothness and diversity. This optimization problem has a tractable analytic solution, which describes a generic framework of which both word dropout and RAML are instances. Second, we interpret the aforementioned solution and propose a novel method: independently replacing words in both the source sentence and the target sentence by other words uniformly sampled from the source and the target vocabularies, respectively. Experiments show that this method, which we name SwitchOut, consistently improves over strong baselines on datasets of different scales, including the large-scale WMT 15 English-German dataset, and two medium-scale datasets: IWSLT 2016 German-English and IWSLT 2015 EnglishVietnamese.
2 Method
2.1 Notations
We use uppercase letters, such as X, Y , etc., to denote random variables and lowercase letters such as x, y, etc., to denote the corresponding actual values. Additionally, since we will discuss a data augmentation algorithm, we will use a hat to denote augmented variables and their values, e.g. X, Y , x, y, etc. We will also use boldfaced characters, such as p, q, etc., to denote probability distributions.
2.2 Data Augmentation
We facilitate our discussion with a probabilistic framework that motivates data augmentation algorithms. With X, Y being the sequences of words in the source and target languages (e.g. in machine translation), the canonical MLE framework maximizes the objective
JMLE(θ) = Ex,y∼p(X,Y ) [log pθ(y|x)] .
Here p(X, Y ) is the empirical distribution over all training data pairs (x, y) and pθ(y|x) is a parameterized distribution that we aim to learn, e.g. a neural network. A potential weakness of MLE is the mismatch between p(X, Y ) and the true data distribution p(X, Y ). Speciﬁcally, p(X, Y ) is usually a bootstrap distribution deﬁned only on the observed training pairs, while p(X, Y ) has a much larger support, i.e. the entire space of valid pairs. This issue can be dramatic when the empirical observations are insufﬁcient to cover the data space.
In practice, data augmentation is often used to remedy this support discrepancy by supplying

additional training pairs. Formally, let q(X, Y ) be the augmented distribution deﬁned on a larger support than the empirical distribution p(X, Y ). Then, MLE training with data augmentation maximizes
JAUG(θ) = Ex,y∼q(X,Y ) [log pθ(y|x)] .
In this work, we focus on a speciﬁc family of q, which depends on the empirical observations by
q(X, Y ) = Ex,y∼p(x,y) q(X, Y |x, y) .
This particular choice follows the intuition that an augmented pair (x, y) that diverges too far from any observed data is more likely to be invalid and thus harmful for training. The reason will be more evident later.
2.3 Diverse and Smooth Augmentation
Certainly, not all q are equally good, and the more similar q is to p, the more desirable q will be. Unfortunately, we only have access to limited observations captured by p. Hence, in order to use q to bridge the gap between p and p, it is necessary to utilize some assumptions about p. Here, we exploit two highly generic assumptions, namely:
• Diversity: p(X, Y ) has a wider support set, which includes samples that are more diverse than those in the empirical observation set.
• Smoothness: p(X, Y ) is smooth, and similar (x, y) pairs will have similar probabilities.
To formalize both assumptions, let s(x, y; x, y) be a similarity function that measures how similar an augmented pair (x, y) is to an observed data pair (x, y). Then, an ideal augmentation policy q(X, Y |x, y) should have two properties. First, based on the smoothness assumption, if an augmented pair (x, y) is more similar to an empirical pair (x, y), it is more likely that (x, y) is sampled under the true data distribution p(X, Y ), and thus q(X, Y |x, y) should assign a signiﬁcant amount of probability mass to (x, y). Second, to quantify the diversity assumption, we propose that the entropy H[q(X, Y |x, y)] should be large, so that the support of q(X, Y ) is larger than the support of p and thus is closer to the support p(X, Y ). Combining these assumptions implies that q(X, Y |x, y) should maximize the objective
J (q; x, y) = Ex,y∼q(X,Y |x,y) s(x, y; x, y) (1)
+ τ H(q(X, Y |x, y)),

where τ controls the strength of the diversity objective. The ﬁrst term in (1) instantiates the smoothness assumption, which encourages q to draw samples that are similar to (x, y). Meanwhile, the second term in (1) encourages more diverse samples from q. Together, the objective J(q; x, y) extends the information in the “pivotal” empirical sample (x, y) to a diverse set of similar cases. This echoes our particular parameterization of q in Section 2.2.
The objective J(q; x, y) in (1) is the canonical maximum entropy problem that one often encounters in deriving a max-ent model (Berger et al., 1996), which has the analytic solution:

q∗(x, y|x, y) =

exp {s(x, y; x, y)/τ }
x′,y′ exp {s(x′, y′; x, y)/τ } (2)

Note that (2) is a fairly generic solution which is

agnostic to the choice of the similarity measure s.

Obviously, not all similarity measures are equally

good. Next, we will show that some existing algo-

rithms can be seen as speciﬁc instantiations under

our framework. Moreover, this leads us to propose

a novel and effective data augmentation algorithm.

2.4 Existing and New Algorithms
Word Dropout. In the context of machine translation, Sennrich et al. (2016a) propose to randomly choose some words in the source and/or target sentence, and set their embeddings to 0 vectors. Intuitively, it regards every new data pair generated by this procedure as similar enough and then includes them in the augmented training set. Formally, word dropout can be seen as an instantiation of our framework with a particular similarity function s(xˆ, yˆ; x, y) (see Appendix A.1).

RAML. From the perspective of reinforcement learning, Norouzi et al. (2016) propose to train the model distribution to match a target distribution proportional to an exponentiated reward. Despite the difference in motivation, it can be shown (c.f. Appendix A.2) that RAML can be viewed as an instantiation of our generic framework, where the similarity measure is s(x, y; x, y) = r(y; y) if x = x and −∞ otherwise. Here, r is a taskspeciﬁc reward function which measures the similarity between y and y. Intuitively, this means that RAML only exploits the smoothness property on the target side while keeping the source side intact.

SwitchOut. After reviewing the two existing augmentation schemes, there are two immediate

insights. Firstly, augmentation should not be restricted to only the source side or the target side. Secondly, being able to incorporate prior knowledge, such as the task-speciﬁc reward function r in RAML, can lead to a better similarity measure.
Motivated by these observations, we propose to perform augmentation in both source and target domains. For simplicity, we separately measure the similarity between the pair (x, x) and the pair (y, y) and then sum them together, i.e.

s(x, y; x, y)/τ ≈ rx(x, x)/τx + ry(y, y)/τy, (3)

where rx and ry are domain speciﬁc similarity functions and τx, τy are hyper-parameters that absorb the temperature parameter τ . This allows us to factor q∗(x, y|x, y) into:

q∗(x, y|x, y) = exp {rx(x, x)/τx}

x′ exp {rx(x′, x)/τx}

exp {ry(y, y)/τy}

(4)

× y′ exp {ry(y′, y)/τy}

In addition, notice that this factored formulation allows x and y to be sampled independently.
Sampling Procedure. To complete our method, we still need to deﬁne rx and ry, and then design a practical sampling scheme from each factor in (4). Though non-trivial, both problems have been (partially) encountered in RAML (Norouzi et al., 2016; Ma et al., 2017). For simplicity, we follow previous work to use the negative Hamming distance for both rx and ry. For a more parallelized implementation, we sample an augmented sentence s from a true sentence s as follows:
1. Sample n ∈ {0, 1, ..., |s|} by p(n) ∝ e−n/τ .

2. For each i ∈ {1, 2, ..., |s|}, with probability n/ |s|, we can replace si by a uniform si = si.
This procedure guarantees that any two sentences s1 and s2 with the same Hamming distance to s have the same probability, but slightly changes the relative odds of sentences with different Hamming distances to s from the true distribution by negative Hamming distance, and thus is an approximation of the actual distribution. However, this efﬁcient sampling procedure is much easier to implement while achieving good performance.
Algorithm 1 illustrates this sampling procedure, which can be applied independently and in parallel

for each batch of source sentences and target sentences. Additionally, we open source our implementation in TensorFlow and in PyTorch (respectively in Appendix A.5 and A.6).

Algorithm 1: Sampling with SwitchOut.

Input : s: a sentence represented by vocab integral

ids, τ : the temperature, V : the vocabulary

Output : s: a sentence with words replaced

1 Function HammingDistanceSample(s, τ , |V |):

2

Let Z(τ ) ←

|s| n=0

e−n/τ

be

the

partition

function.

3

Let p(n) ← e−n/τ /Z(τ ) for n = 0, 1, ..., |s|.

4

Sample n ∼ p(n).

5

In parallel, do:

6

Sample ai ∼ Bernoulli(n/ |s|).

7

if ai = 1 then

8

si ← Uniform(V \{si}).

9

else

10

si ← si.

11

end

12

return s

3 Experiments
Datasets. We benchmark SwitchOut on three translation tasks of different scales: 1) IWSLT 2015 English-Vietnamese (en-vi); 2) IWSLT 2016 German-English (de-en); and 3) WMT 2015 English-German (en-de). All translations are word-based. These tasks and pre-processing steps are standard, used in several previous works. Detailed statistics and pre-processing schemes are in Appendix A.3.
Models and Experimental Procedures. Our translation model, i.e. pθ(y|x), is a Transformer network (Vaswani et al., 2017). For each dataset, we ﬁrst train a standard Transformer model without SwitchOut and tune the hyperparameters on the dev set to achieve competitive results. (w.r.t. Luong and Manning (2015); Gu et al. (2018); Vaswani et al. (2017)). Then, ﬁxing all hyper-parameters, and ﬁxing τy = 0, we tune the τx rate, which controls how far we are willing to let x deviate from x. Our hyperparameters are listed in Appendix A.4.
Baselines. While the Transformer network without SwitchOut is already a strong baseline, we also compare SwitchOut against two other baselines that further use existing varieties of data augmentation: 1) word dropout on the source side with the dropping probability of λword = 0.1; and 2) RAML on the target side, as in Section 2.4. Additionally, on the

Method
Transformer +WordDropout +SwitchOut
+RAML +RAML +WordDropout +RAML +SwitchOut

en-de
21.73 20.63 22.78†
22.83 20.69 23.13†

de-en
29.81 29.97 29.94
30.66 30.79 30.98†

en-vi
27.97 28.56 28.67†
28.88 28.86 29.09

Table 1: Test BLEU scores of SwitchOut and other baselines (median of multiple runs). Results marked with † are statistically signiﬁcant compared to the best result without SwitchOut. For example, for en-de results in the ﬁrst column, +SwitchOut has signiﬁcant gain over Transformer; +RAML +SwitchOut has signiﬁcant gain over +RAML.

en-de task, we compare SwitchOut against backtranslation (Sennrich et al., 2016b).
SwitchOut vs. Word Dropout and RAML. We report the BLEU scores of SwitchOut, word dropout, and RAML on the test sets of the tasks in Table 1. To account for variance, we run each experiment multiple times and report the median BLEU. Speciﬁcally, each experiment without SwitchOut is run for 4 times, while each experiment with SwitchOut is run for 9 times due to its inherently higher variance. We also conduct pairwise statistical signiﬁcance tests using paired bootstrap (Clark et al., 2011), and record the results in Table 1. For 4 of the 6 settings, SwitchOut delivers signiﬁcant improvements over the best baseline without SwitchOut. For the remaining two settings, the differences are not statistically signiﬁcant. The gains in BLEU with SwitchOut over the best baseline on WMT 15 en-de are all signiﬁcant (p < 0.0002). Notably, SwitchOut on the source demonstrates as large gains as these obtained by RAML on the target side, and SwitchOut delivers further improvements when combined with RAML.
SwitchOut vs. Back Translation. Traditionally, data-augmentation is viewed as a method to enlarge the training datasets (Krizhevsky et al., 2012; Szegedy et al., 2014). In the context of neural MT, Sennrich et al. (2016b) propose to use artiﬁcial data generated from a weak back-translation model, effectively utilizing monolingual data to enlarge the bilingual training datasets. In connection, we compare SwitchOut against back translation. We only compare SwitchOut against back translation on the en-de task, where the amount of bilingual training data is already sufﬁciently

Method
Transformer +SwitchOut
+BT +BT +RAML +BT +SwitchOut +BT +RAML +SwitchOut

en-de
21.73 22.78
21.82 21.53 22.93 23.76

Table 2: Test BLEU scores of back translation (BT) compared to and combined with SwitchOut (median of 4 runs).

large2. The BLEU scores with back-translation are reported in Table 2. These results provide two insights. First, the gain delivered by back translation is less signiﬁcant than the gain delivered by SwitchOut. Second, SwitchOut and back translation are not mutually exclusive, as one can additionally apply SwitchOut on the additional data obtained from back translation to further improve BLEU scores.

test this hypothesis, for each test sentence we ﬁnd its most similar training sample (i.e. nearest neighbor), then bucket the instances by the distance to their nearest neighbor and measure the gain in BLEU afforded by SwitchOut for each bucket. Speciﬁcally, we use (negative) word error rate (WER) as the similarity measure, and plot the bucket-by-bucket performance gain for each group in Figure 2. As we can see, SwitchOut improves increasingly more as the WER increases, indicating that SwitchOut is indeed helping on examples that are far from the sentences that the model sees during training. This is the desirable effect of data augmentation techniques.

Gain in BLEU Gain in BLEU

0.75 0.5 0.25
0 -0.25
1350 2700 4050 5400 Top K sentences

1 0.5
0 -0.5
-1 253 506 759 1012 Top K sentences

Effects of τx and τy. We empirically study the effect of these temperature parameters. During the
tuning process, we translate the dev set of the tasks
and report the BLEU scores in Figure 1. We observe that when ﬁxing τy, the best performance is always achieved with a non-zero τx.

τy−1 τy−1
τy−1

0.80 20.40 20.65
0.00 20.41 20.52 0.00 1.00 τx−1

20.60 20.55 20.50 20.45 20.40

33.00
0.95 32.67 32.95 32.97 32.75
32.50
0.90 32.60 33.16 33.03 32.25
32.00 31.75
0.00 31.09 31.39 31.96 31.50
31.25
0.00 0.95 1.00 τx−1

26.0
1.00 25.70 25.67 25.96 25.9
25.8 25.7
0.90 25.70 25.60 26.02 25.6
25.5
0.00 25.20 25.44 25.74 25.4
25.3
0.00 0.90 1.00 τx−1

Figure 1: Dev BLEU scores with different τx and τy. Top left: WMT 15 en-de. Top right: IWSLT 16 de-en. Bottom: IWSLT 15 en-vi.
Where does SwitchOut Help the Most? Intuitively, because SwitchOut is expanding the support of the training distribution, we would expect that it would help the most on test sentences that are far from those in the training set and would thus beneﬁt most from this expanded support. To
2We add the extra monolingual data from http://data.statmt.org/rsennrich/wmt16_backtranslations/en-de/

Figure 2: Gains in BLEU of RAML+SwitchOut over RAML. x-axis is ordered by the WER between a test sentence and its nearest neighbor in the training set. Left: IWSLT 16 de-en. Right: IWSLT 15 en-vi.
4 Conclusion
In this paper, we propose a method to design data augmentation algorithms by solving an optimization problem. These solutions subsume a few existing augmentation schemes and inspire a novel augmentation method, SwitchOut. SwitchOut delivers improvements over translation tasks at different scales. Additionally, SwitchOut is efﬁcient and easy to implement, and thus has the potential for wide application.
Acknowledgements
We thank Quoc Le, Minh-Thang Luong, Qizhe Xie, and the anonymous EMNLP reviewers, for their suggestions to improve the paper.
This material is based upon work supported in part by the Defense Advanced Research Projects Agency Information Innovation Ofﬁce (I2O) Low Resource Languages for Emergent Incidents (LORELEI) program under Contract No. HR0011-15-C0114. The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the ofﬁcial policies, either expressed or implied, of the U.S. Government. The U.S. Government is authorized to reproduce and distribute reprints for Gov-

ernment purposes notwithstanding any copyright notation here on.
References
Dario Amodei, Sundaram Ananthanarayanan, Rishita Anubhai, and more authors. 2016. Deep speech 2: End-to-end speech recognition in english and mandarin. In ICML.
Yonatan Belinkov and Yonatan Bisk. 2018. Synthetic and natural noise both break neural machine translation. In ICLR.
Adam L Berger, Vincent J Della Pietra, and Stephen A Della Pietra. 1996. A maximum entropy approach to natural language processing. Computational linguistics, 22(1):39–71.
Olivier Chapelle, Bernhard Scholkopf, and Alexander Zien. 2009. Semi-supervised learning (chapelle, o. et al., eds.; 2006)[book reviews]. IEEE Transactions on Neural Networks, 20(3):542–542.
Jonathan Clark, Chris Dyer, Alon Lavie, and Noah Smith. 2011. Better hypothesis testing for statistical machine translation: Controlling for optimizer instability. In ACL.
Terrance DeVries and Graham W. Taylor. 2017. Improved regularization of convolutional neural networks with cutout. Arxiv, 1708.04552.
Marzieh Fadaee, Arianna Bisazza, and Christof Monz. 2017. Data augmentation for low-resource neural machine translation. In ACL.
Yarin Gal and Zoubin Ghahramani. 2016. A theoretically grounded application of dropout in recurrent neural networks. In NIPS.
Jiatao Gu, James Bradbury, Caiming Xiong, Victor O.K. Li, and Richard Socher. 2018. Nonautoregressive neural machine translation. In ICLR.
Gao Huang, Zhuang Liu, Laurens van der Maaten, and Kilian Q. Weinberger. 2016. Densely connected convolutional networks. In CVPR.
Diederik P. Kingma and Jimmy Lei Ba. 2015. Adam: A method for stochastic optimization. In ICLR.
Alex Krizhevsky, Ilya Sutskever, and Geoffrey E. Hinton. 2012. Imagenet classiﬁcation with deep convolutional neural networks. In NIPS.
Minh-Thang Luong and Christopher D. Manning. 2015. Stanford neural machine translation systems for spoken language domain. In IWLST.
Minh-Thang Luong, Hieu Pham, and Christopher D. Manning. 2015. Effective approaches to attentionbased neural machine translation. In EMNLP.

Xuezhe Ma, Pengcheng Yin, Jingzhou Liu, Graham Neubig, and Eduard Hovy. 2017. Softmax q-distribution estimation for structured prediction: A theoretical interpretation for raml. Arxiv, 1705.07136.
Mohammad Norouzi, Samy Bengio, Zhifeng Chen, Navdeep Jaitly, Mike Schuster, Yonghui Wu, and Dale Schuurmans. 2016. Reward augmented maximum likelihood for neural structured prediction. In NIPS.
Alberto Poncelas, Dimitar Shterionov, Andy Way, Gideon Maillette de Buy Wenniger, and Peyman Passban. 2018. Investigating backtranslation in neural machine translation. Arxiv, 1804.06189.
Marc’Aurelio Ranzato, Sumit Chopra, Michael Auli, and Wojciech Zaremba. 2016. Sequence level training with recurrent neural networks. In ICLR.
Rico Sennrich, Barry Haddow, and Alexandra Birch. 2016a. Edinburgh neural machine translation systems for wmt 16. In WMT.
Rico Sennrich, Barry Haddow, and Alexandra Birch. 2016b. Improving neural machine translation models with monolingual data. In ACL.
Christian Szegedy, Wei Liu, Yangqing Jia, Pierre Sermanet, Scott Reed, Dragomir Anguelov, Dumitru Erhan, Vincent Vanhoucke, and Andrew Rabinovich. 2014. Going deeper with convolutions. In CVPR.
Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser, and Illia Polosukhin. 2017. Attention is all you need. In NIPS.
Sergey Zagoruyko and Nikos Komodakis. 2016. Wide residual networks. In BMVC.

A Appendix

A.1 Word Dropout as a Special Case
Here, we derive word dropout as an instance of our framework. First, let us introduce a new token, null , into both the source vocabulary and the target vocabulary. null has the embedding of a all-0 vector and is never trained. For a sequence x of words in a vocabulary with null , we deﬁne the neighborhood N (x) to be:
N (x) = x′ : x′ = |x| and x′i ∈ {xi, null }
In other words, N (x) consists of x and all the sentences obtained by replacing a few words in x by null . Clearly, all augmented sentences x that are sampled from x using word dropout fall into N (x).
In (4), the augmentation policy q∗(x, y|x, y) was decomposed into two independent terms, one of which samples the augmented source sentence x and the other samples the augmented target sentence y

q∗(x, y|x, y) =

exp {rx(x, x)/τx} × x′ exp {rx(x′, x)/τx}
q(x|x)

exp {ry(y, y)/τy} y′ exp {ry(y′, y)/τy}
q(y|y)

Word dropout is an instance of this decomposition, where ry takes the same form with rx, given by:

rx(x, x) = −HammingDistance(x, x) if x ∈ N (x) , (5)

−∞

otherwise

where HammingDistance(x, x) =

|x| i=1

1[xi

=

xi].

To

see

this

is

indeed

the

case,

let

h

be

the

Hamming

distance for x ∈ N (x) and set λword = exp {−1/τx}, then we have:

exp {rx(x, x)/τx} = exp {−h/τx} = exp −h · log 1 = exp {h · log λword} = λwordh, (6) λword

which is precisely the probability of dropping out h words in x, where each word is dropped with the distribution Bernoulli(λword).
The difference between word dropout and SwitchOut comes in the fact that N (x) is much smaller than the support of x that SwitchOut can sample from, which is V |x| where V is the vocabulary. Word dropout concentrates all augmentation probability mass into N (x) while SwitchOut spreads the mass
into a larger support, leading to a larger entropy. Meanwhile, both word dropout and SwitchOut are exponentially less likely to diverge a way from x, ensuring the smoothness desiderata of a good data
augmentation policy, as we discussed in Section 2.3.

A.2 RAML as a Special Case
Here, we present a detailed description of how RAML is a special case of our proposed framework. For each empirical observation (x, y) ∼ p, RAML deﬁnes a reward aware target distribution pRAML(Y |x, y) for the model distribution pθ(Y | x) to match. Concretely, the target distribution in RAML has the form

pRAML(y|x, y) =

exp {r(y; y)/τ } , y′ exp {r(y′; y)/τ }

where r is the task reward function. With this deﬁnition, RAML amounts to minimizing the expected KL divergence between pRAML and pθ, i.e.

⇐⇒ ⇐⇒

min Ex,y∼p [KL(pRAML(Y |x, y) pθ(Y
θ
max Ex,y∼p Ey∼pRAML(Y |x,y) [log pθ(y
θ
max Ey∼pRAML(Y ) [log pθ(y | x)] ,
θ

| x)] | x)]

where pRAML(Y ) is the marginalized target distribution, i.e. pRAML(Y ) = Ex,y∼p [pRAML(Y |x, y)]. Now, notice that pRAML(Y ) is a member of the augmentation distribution family in consideration
(c.f. Section 2.2). Speciﬁcally, it is equivalent to a data augmentation distribution where

q(x, y | x, y) = 1[x = x] · pRAML(y|x, y)

exp {s(x, y; x, y)/τ }

exp {r(y; y)/τ }

⇐⇒

exp {s(x′, y′; x, y)/τ } = 1[x = x] · ′ exp {r(y′; y)/τ }

x′,y′

y

⇐⇒ s(x, y; x, y) = r(y; y), x = x . (7) −∞, x = x

The last equality reveals an immediate connection between RAML and our proposed framework. In summary, RAML can be seen as a special case of our data augmentation framework, where the similarity function is deﬁned by (7). Practically, this means RAML only consider pairs with source sentences from the empirical set for data augmentation.

A.3 Datasets Descriptions

vocab (K)

#sents

src tgt train dev test

en-vi 17.2 7.7 133.3K 1.6K 1.3K de-en 32.0 22.8 153.3K 7.0K 6.8K en-de 50.0 50.0 4.5M 2.7K 2.2K

Table 3: Statistics of the datasets.

Table 3 summarizes the statistics of the datasets in our experiments. The WMT 15 en-de dataset is one order of magnitude larger than the IWSLT 16 de-en dataset and the IWSLT 15 en-vi dataset. For the en-vi task, we use the data pre-processed by Luong and Manning (2015). For the en-de task, we use the data pre-processed by Luong et al. (2015), with newstest2014 for validation and newstest2015 for testing. For the de-en task, we use the data pre-processed by Ranzato et al. (2016).
A.4 Hyper-parameters

Task nlayers nheads dk, dv dmodel dinner init clip λdrop τx−1 τy−1 λword

en-de 8 de-en 8 en-vi 4

6

64 512 1024 0.04 25.0 0.10 1.00 0.80 0.1

5

64 288 507 0.035 25.0 0.25 0.95 0.90 0.1

4

64 256 384 0.035 20.0 0.15 1.00 0.90 0.1

Table 4: Hyper-parameters for our experiments.

The hyper-parameters used in our experiments are in Table 4. All models are initialized uniformly at random in the range as reported in Table 4. All models are trained with Adam (Kingma and Ba, 2015). Gradients are clipped at the threshold as speciﬁed in Table 4. For the WMT en-de task, we use the legacy learning rate schedule as speciﬁed by Vaswani et al. (2017). For the de-en task and the en-vi task, the learning rate is initially 0.001, and is decreased by a factor of 0.97 for every 1000 steps, starting at step 8000. All models are trained for 100,000 steps, during which one checkpoint is saved for each 2500 steps and the ﬁnal evaluation is performed on the checkpoint with lowest perplexity on the dev set.
Multiple GPUs are used for each experiment. For the de-en and the en-vi experiments, if we use n GPUs, where n ∈ {1, 2, 4}, then we only perform 105/n updates to the models’ parameters. We ﬁnd that this is sufﬁcient to make the models converge.

A.5 Source Code for Sampling in TensorFlow

Hamming distance sampling in TensorFlow

1 import tensorflow as tf

2 def hamming_distance_sample(sents, tau, bos_id, eos_id, pad_id, vocab_size):

3 """Sample a batch of corrupted examples from sents.

4

5 Args:

6

sents: Tensor [batch_size, n_steps]. The input sentences.

7

tau: temperature.

8

vocab_size: to create valid samples.

9

10 Returns:

11

sents: Tensor [batch_size, n_steps]. The corrupted sentences.

12 """

13

14 # mask

15 mask = [

16

tf.equal(sents, bos_id),

17

tf.equal(sents, eos_id),

18

tf.equal(sents, pad_id),

19 ]

20 mask = tf.stack(mask, axis=0)

21 mask = tf.reduce_any(mask, axis=0)

22

23 # first, sample the number of words to corrupt for each sentence

24 batch_size, n_steps = tf.unstack(tf.shape(sents))

25 logits = -tf.range(tf.to_float(n_steps), dtype=tf.float32) * tau

26 logits = tf.expand_dims(logits, axis=0)

27 logits = tf.tile(logits, [batch_size, 1])

28 logits = tf.where(mask,

29

x=tf.fill([batch_size, n_steps], -float("inf")), y=logits)

30

31 # sample the number of words to corrupt at each sentence

32 num_words = tf.multinomial(logits, num_samples=1)

33 num_words = tf.reshape(num_words, [batch_size])

34 num_words = tf.to_float(num_words)

35

36 # <bos> and <eos> should never be replaced!

37 lengths = tf.reduce_sum(1.0 - tf.to_float(mask), axis=1)

38

39 # sample corrupted positions

40 probs = num_words / lengths

41 probs = tf.expand_dims(probs, axis=1)

42 probs = tf.tile(probs, [1, n_steps])

43 probs = tf.where(mask, x=tf.zeros_like(probs), y=probs)

44 bernoulli = tf.distributions.Bernoulli(probs=probs, dtype=tf.int32)

45

46 pos = bernoulli.sample()

47 pos = tf.cast(pos, tf.bool)

48

49 # sample the corrupted values

50 val = tf.random_uniform(

51

[batch_size, n_steps], minval=1, maxval=vocab_size, dtype=tf.int32)

52 val = tf.where(pos, x=val, y=tf.zeros_like(val))

53 sents = tf.mod(sents + val, vocab_size)

54

55 return sents

A.6 Source Code for Sampling in PyTorch

Hamming distance sampling in Pytorch

1 """

2 Sample a batch of corrupted examples from sents.

3

4 Args:

5

sents: Tensor [batch_size, n_steps]. The input sentences.

6

tau: Temperature.

7

vocab_size: to create valid samples.

8 Returns:

9

sampled_sents: Tensor [batch_size, n_steps]. The corrupted sentences.

10 """

11

12 mask = torch.eq(sents, bos_id) | torch.eq(sents, eos_id) | torch.eq(sents, pad_id)

13 lengths = mask.float().sum(dim=1)

14 batch_size, n_steps = sents.size()

15 # first, sample the number of words to corrupt for each sentence

16 logits = torch.arange(n_steps)

17 logits = logits.mul_(-1).unsqueeze(0).expand_as(

18

sents).contiguous().masked_fill_(mask, -float("inf"))

19 logits = Variable(logits)

20 probs = torch.nn.functional.softmax(logits.mul_(tau), dim=1)

21 num_words = torch.distributions.Categorical(probs).sample()

22

23 # sample the corrupted positions.

24 corrupt_pos = num_words.data.float().div_(lengths).unsqueeze(

25

1).expand_as(sents).contiguous().masked_fill_(mask, 0)

26 corrupt_pos = torch.bernoulli(corrupt_pos, out=corrupt_pos).byte()

27 total_words = int(corrupt_pos.sum())

28 # sample the corrupted values, which will be added to sents

29 corrupt_val = torch.LongTensor(total_words)

30 corrupt_val = corrupt_val.random_(1, vocab_size)

31 corrupts = torch.zeros(batch_size, n_steps).long()

32 corrupts = corrupts.masked_scatter_(corrupt_pos, corrupt_val)

33 sampled_sents = sents.add(Variable(corrupts)).remainder_(vocab_size)

34

35 return sampled_sents

