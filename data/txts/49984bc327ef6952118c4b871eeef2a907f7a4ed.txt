Fast Convergence of Regularized Learning in Games

arXiv:1507.00407v5 [cs.GT] 10 Dec 2015

Vasilis Syrgkanis Microsoft Research
New York, NY vasy@microsoft.com
Haipeng Luo Princeton University
Princeton, NJ haipengl@cs.princeton.edu

Alekh Agarwal Microsoft Research
New York, NY alekha@microsoft.com
Robert E. Schapire Microsoft Research
New York, NY schapire@microsoft.com

Abstract
We show that natural classes of regularized learning algorithms with a form of recency bias achieve faster convergence rates to approximate efﬁciency and to coarse correlated equilibria in multiplayer normal form games. When each player in a game uses an algorithm from our class, their individual regret decays at O(T −3/4), while the sum of utilities converges to an approximate optimum at O(T −1)–an improvement upon the worst case O(T −1/2) rates. We show a blackbox reduction for any algorithm in the class to achieve O˜(T −1/2) rates against an adversary, while maintaining the faster rates against algorithms in the class. Our results extend those of Rakhlin and Shridharan [18] and Daskalakis et al. [4], who only analyzed two-player zero-sum games for speciﬁc algorithms.
1 Introduction
What happens when players in a game interact with one another, all of them acting independently and selﬁshly to maximize their own utilities? If they are smart, we intuitively expect their utilities — both individually and as a group — to grow, perhaps even to approach the best possible. We also expect the dynamics of their behavior to eventually reach some kind of equilibrium. Understanding these dynamics is central to game theory as well as its various application areas, including economics, network routing, auction design, and evolutionary biology.
It is natural in this setting for the players to each make use of a no-regret learning algorithm for making their decisions, an approach known as decentralized no-regret dynamics. No-regret algorithms are a strong match for playing games because their regret bounds hold even in adversarial environments. As a beneﬁt, these bounds ensure that each player’s utility approaches optimality. When played against one another, it can also be shown that the sum of utilities approaches an approximate optimum [2, 19], and the player strategies converge to an equilibrium under appropriate conditions [7, 1, 9], at rates governed by the regret bounds. Well-known families of no-regret algorithms include multiplicative-weights [14, 8], Mirror Descent [15], and Follow the Regularized/Perturbed Leader [13]. (See [3, 21] fo√r excellent overviews.) For all of these, the average regret vanishes at the worst-case rate of O(1/ T ), which is unimprovable in fully adversarial scenarios.
However, the players in our setting are facing other similar, predictable no-regret learning algorithms, a chink that hints at the possibility of improved convergence rates for such dynamics. This was ﬁrst observed and exploited by Daskalakis et al. [4]. For two-player zero-sum games, they developed a decentralized variant of Nesterov’s accelerated saddle point algorithm [16] and showed that each player’s average regret converges at the remarkable rate of O(1/T ). Although the resulting
1

dynamics are somewhat unnatural, in later work, Rakhlin and Sridharan [18] showed surprisingly that the same convergence rate holds for a simple variant of Mirror Descent with the seemingly minor modiﬁcation that the last utility observation is counted twice.
Although major steps forward, both these works are limited to two-player zero-sum games, the very simplest case. As such, they do not cover many practically important settings, such as auctions or routing games, which are decidedly not zero-sum, and which involve many independent actors.
In this paper, we vastly generalize these techniques to the practically important but far more challenging case of arbitrary multi-player normal-form games, giving natural no-regret dynamics whose convergence rates are much faster than previously possible for this general setting.
Contributions. We show that the average welfare of the game, that is, the sum of player utilities, converges to√approximately optimal welfare at the rate O(1/T ), rather than the previously known rate of O(1/ T ). Concretely, we show a natural class of regularized no-regret algorithms with recency bias that achieve welfare at least (λ/(1 + µ))OPT − O(1/T ), where λ and µ are parameters in a smoothness condition on the game introduced by Roughgarden [19]. For the same class of algorithms, we show that each individual player’s average regret converges to zero at the rate O T −3/4 . Thus, our results entail an algorithm for computing coarse correlated equilibria in a decentralized manner with signiﬁcantly faster convergence than existing methods.
We additionally give a black-box√reduction that preserves the fast rates in favorable environments, while robustly maintaining O˜(1/ T ) regret against any opponent in the worst case.
Even for two-person zero-sum games, our results for general games expose a hidden generality and modularity underlying the previous results [4, 18]. First, our analysis identiﬁes stability and recency bias as key structural ingredients of an algorithm with fast rates. This covers the Optimistic Mirror Descent of Rakhlin and Sridharan [18] as an example, but also applies to optimistic variants of Follow the Regularized Leader (FTRL), including dependence on arbitrary weighted windows in the history as opposed to just the utility from the last round. Recency bias is a behavioral pattern commonly observed in game-theoretic environments [10]; as such, our results can be viewed as a partial theoretical justiﬁcation. Second, previous approaches in [4, 1√8] on achieving both faster convergence against similar algorithms while at the same time O˜(1/ T ) regret rates against adversaries were shown via ad-hoc modiﬁcations of speciﬁc algorithms. We give a black-box modiﬁcation which is not algorithm speciﬁc and works for all these optimistic algorithms.
Finally, we simulate a 4-bidder simultaneous auction game, and compare our optimistic algorithms against Hedge [8] in terms of utilities, regrets and convergence to equilibria.

2 Repeated Game Model and Dynamics

Consider a static game G among a set N of n players. Each player i has a strategy space Si and a utility function ui : S1 × . . . × Sn → [0, 1] that maps a strategy proﬁle s = (s1, . . . , sn) to a utility ui(s). We assume that the strategy space of each player is ﬁnite and has cardinality d, i.e. |Si| = d. We denote with w = (w1, . . . , wn) a proﬁle of mixed strategies, where wi ∈ ∆(Si) and wi,x is the probability of strategy x ∈ Si. Finally let Ui(w) = Es∼w[ui(s)], the expected utility of player i.
We consider the setting where the game G is played repeatedly for T time steps. At each time step t each player i picks a mixed strategy wit ∈ ∆(Si). At the end of the iteration each player i observes the expected utility he would have received had he played any possible strategy x ∈ Si. More formally, let uti,x = Es−i∼wt [ui(x, s−i)], where s−i is the set of strategies of all but the ith
−i
player, and let uti = (uti,x)x∈Si . At the end of each iteration each player i observes uti. Observe that the expected utility of a player at iteration t is simply the inner product wit, uti .

No-regret dynamics. We assume that the players each decide their strategy wit based on a vanishing regret algorithm. Formally, for each player i, the regret after T time steps is equal to the
maximum gain he could have achieved by switching to any other ﬁxed strategy:

T

ri(T ) = sup

wi∗ − wit, uti .

wi∗∈∆(Si) t=1

2

The algorithm has vanishing regret if ri(T ) = o(T ).

Approximate Efﬁciency of No-Regret Dynamics. We are interested in analyzing the average welfare of such vanishing regret sequences. For a given strategy proﬁle s the social welfare is deﬁned as the sum of the player utilities: W (s) = i∈N ui(s). We overload notation to denote W (w) = Es∼w[W (s)]. We want to lower bound how far the average welfare of the sequence is, with respect to the optimal welfare of the static game:

OPT = max W (s).
s∈S1 ×...×Sn

This is the optimal welfare achievable in the absence of player incentives and if a central coordinator could dictate each player’s strategy. We next deﬁne a class of games ﬁrst identiﬁed by Roughgarden [19] on which we can approximate the optimal welfare using decoupled no-regret dynamics.
Deﬁnition 1 (Smooth game [19]). A game is (λ, µ)-smooth if there exists a strategy proﬁle s∗ such that for any strategy proﬁle s: i∈N ui(s∗i , s−i) ≥ λOPT − µW (s).

In words, any player using his optimal strategy continues to do well irrespective of other players’ strategies. This condition directly implies near-optimality of no-regret dynamics as we show below.
Proposition 2. In a (λ, µ)-smooth game, if each player i suffers regret at most ri(T ), then:

1 T W (wt) ≥ λ OPT − 1 1

1

11

ri(T ) = OPT −

ri(T ),

T

1+µ

1+µT

ρ

1+µT

t=1

i∈N

i∈N

where the factor ρ = (1 + µ)/λ is called the price of anarchy (POA).

This proposition is essentially a more explicit version of Roughgarden’s result [19]; we provide a proof in the appendix for completeness. The result shows that the convergence to POA is driven by the quantity 1+1µ T1 i∈N ri(T ). There are many algorithms which achieve a regret rate of
ri(T ) = O( log(d)T ), in which case the latter theorem would imply that the average welfare con-
verges to POA at a rate of O(n log(d)/T ). As we will show, for some natural classes of no-regret algorithms the average welfare converges at the much faster rate of O(n2 log(d)/T ).

3 Fast Convergence to Approximate Efﬁciency

In this section, we present our main theoretical results characterizing a class of no-regret dynamics which lead to faster convergence in smooth games. We begin by describing this class.
Deﬁnition 3 (RVU property). We say that a vanishing regret algorithm satisﬁes the Regret bounded by Variation in Utilities (RVU) property with parameters α > 0 and 0 < β ≤ γ and a pair of dual norms ( · , · ∗)1 if its regret on any sequence of utilities u1, u2, . . . , uT is bounded as

T

T

T

w∗ − wt, ut ≤ α + β

ut − ut−1

2 ∗

−

γ

wt − wt−1 2.

(1)

t=1

t=1

t=1

Typical online learning algorithms such as Mirror Descent and FTRL do not satisfy the RVU property

in their vanilla form, as the middle term grows as

T t=1

ut

2 ∗

for

these

methods.

However,

Rakhlin

and Sridharan [17] give a modiﬁcation of Mirror Descent with this property, and we will present a

similar variant of FTRL in the sequel.

We now present two sets of results when each player uses an algorithm with this property. The ﬁrst discusses the convergence of social welfare, while the second governs the convergence of the individual players’ utilities at a fast rate.

1The dual to a norm · is deﬁned as v ∗ = sup u ≤1 u, v .

3

3.1 Fast Convergence of Social Welfare

Given Proposition 2, we only need to understand the evolution of the sum of players’ regrets

T t=1

ri(T )

in

order

to

obtain

convergence

rates

of

the

social

welfare.

Our main result in this

section bounds this sum when each player uses dynamics with the RVU property.

Theorem 4. Suppose that the algorithm of each player i satisﬁes the property RVU with parameters α, β and γ such that β ≤ γ/(n − 1)2 and · = · 1. Then i∈N ri(T ) ≤ αn.

Proof. Since ui(s) ≤ 1, deﬁnitions imply: uti − uti−1 ∗ ≤ s−i j=i wjt,sj − j=i wjt,−sj1 . The latter is the total variation distance of two product distributions. By known properties of total variation (see e.g. [12]), this is bounded by the sum of the total variations of each marginal distribution:

wjt,sj − wjt,−sj1 ≤ wjt − wjt−1 (2)

s−i j=i

j=i

j=i

By Jensen’s inequality,

j=i wjt − wjt−1

2
≤ (n − 1)

j=i wjt − wjt−1 2, so that

uti − uti−1

2 ∗

≤

(n

−

1)

wjt − wjt−1 2 = (n − 1)2

wit − wit−1 2.

i∈N

i∈N j=i

i∈N

The theorem follows by summing up the RVU property (1) for each player i and observing that the summation of the second terms is smaller than that of the third terms and thereby can be dropped.

Remark: The rates from the theorem depend on α, which will be O(1) in the sequel. The above theorem extends to the case where · is any norm equivalent to the 1 norm. The resulting requirement on β in terms of γ can however be more stringent. Also, the theorem does not require that all players use the same no-regret algorithm unlike previous results [4, 18], as long as each player’s algorithm satisﬁes the RVU property with a common bound on the constants.
We now instantiate the result with examples that satisfy the RVU property with different constants.

3.1.1 Optimistic Mirror Descent

The optimistic mirror descent (OMD) algorithm of Rakhlin and Sridharan [17] is parameterized by
an adaptive predictor sequence Mti and a regularizer2 R which is 1-strongly convex3 with respect to a norm · . Let DR denote the Bregman divergence associated with R. Then the update rule is deﬁned as follows: let gi0 = argming∈∆(Si) R(g) and

Φ(u, g) = argmax η · w, u − DR(w, g),
w∈∆(Si )

then:

wit = Φ(Mti, git−1), and git = Φ(uti, git−1)

Then the following proposition can be obtained for this method. Proposition 5. The OMD algorithm using stepsize η and Mti = uti−1satisﬁes the RVU property with constants α = R/η, β = η, γ = 1/(8η), where R = maxi supf DR(f, gi0).

The proposition follows by further crystallizing the arguments of Rakhlin and Sridaran [18], and we provide a proof in the appendix for completeness. The above proposition, along with Theorem 4, immediately yields the following corollary, which had been proved by Rakhlin and Sridharan [18] for two-person zero-sum games, and which we here extend to general games. √ Corollary 6. If each player runs OMD w√ith Mti = uit−1 and stepsize η = 1/( 8(n − 1)), then we have i∈N ri(T ) ≤ nR/η ≤ n(n − 1) 8R = O(1).

The corollary follows by noting that the condition β ≤ γ/(n − 1)2 is met with our choice of η.

2Here and in the sequel, we can use a different regularizer Ri for each player i, without qualitatively

affecting any of the results.

3R is 1-strongly convex if R

u+v

≤ R(u)+R(v) −

u−v

2
, ∀u, v.

2

2

8

4

3.1.2 Optimistic Follow the Regularized Leader

We next consider a different class of algorithms denoted as optimistic follow the regularized leader
(OFTRL). This algorithm is similar but not equivalent to OMD, and is an analogous extension of
standard FTRL [13]. This algorithm takes the same parameters as for OMD and is deﬁned as follows: Let wi0 = argminw∈∆(Si) R(w) and:

wiT = argmax
w∈∆(Si )

T −1
w, uti + MTi
t=1

R(w)

−

.

η

We consider three variants of OFTRL with different choices of the sequence Mti, incorporating the recency bias in different forms.

One-step recency bias: The simplest form of OFTRL uses Mti = uti−1 and obtains the following result, where R = maxi supf∈∆(Si) R(f ) − inff∈∆(Si) R(f ) .
Proposition 7. The OFTRL algorithm using stepsize η and Mti = uti−1 satisﬁes the RVU property with constants α = R/η, β = η and γ = 1/(4η).

Combined with Theorem 4, this yields the following constant bound on the total regret of all players: Corollary 8. If each player runs OFTRL with Mti = uti−1 and η = 1/(2(n − 1)), then we have
i∈N ri(T ) ≤ nR/η ≤ 2n(n − 1)R = O(1).
Rakhlin and Sridharan [17] also analyze an FTRL variant, but require a self-concordant barrier for the constraint set as opposed to an arbitrary strongly convex regularizer, and their bound is missing the crucial negative terms of the RVU property which are essential for obtaining Theorem 4.

H-step recency bias: More generally, given a window size H, one can deﬁne Mti =

t−1 τ =t−H

uτi

/H .

We

have

the

following

proposition.

Proposition 9. The OFTRL algorithm using stepsize η and Mti = RVU property with constants α = R/η, β = ηH2 and γ = 1/(4η).

t−1 τ =t−H

uτi /H

satisﬁes

the

Setting η = 1/(2H(n − 1)), we obtain the analogue of Corollary 8, with an extra factor of H.

Geometrically discounted recency bias: The next proposition considers an alternative form of

recency bias which includes all the previous utilities, but with a geometric discounting.

Proposition 10. The OFTRL algorithm using stepsize η and Mti = tτ−=110 δ−τ the RVU property with constants α = R/η, β = η/(1 − δ)3 and γ = 1/(8η).

t−1 τ =0

δ−τ uτi

satisﬁes

Note that these choices for Mti can also be used in OMD with qualitatively similar results.

3.2 Fast Convergence of Individual Utilities

The previous section shows implications of the RVU property on the social welfare. This section complements these with a similar result for each player’s individual utility.

Theorem 11. Suppose that the players use algorithms satisfying the RVU property with parameters

α > 0, β > 0, γ ≥ 0. If we further have the stability property wit − wit+1 ≤ κ, then for any

player

T t=1

wi∗ − wit, uti

≤ α + βκ2(n − 1)2T.

Similar reasoning as in Theorem 4 yields:

uti − uti−1

2 ∗

≤

(n

−

1)

and summing the terms gives the theorem.

j=i wjt − wjt−1 2 ≤ (n − 1)2κ2,

Noting that OFTRL satisﬁes the RVU property with constants given in Proposition 7 and stability property with κ = 2η (see Lemma 20 in the appendix), we have the following corollary.

Corollary 12. If all players use the OFTRL alg√orithm with Mti = uti−1 and η = (n−1)−1/2T −1/4,

then we have

T t=1

wi∗ − wit, uti

≤ (R + 4)

n − 1 · T 1/4.

5

Similar results hold for the other forms of recency bias, as well as for OMD. Corollary 12 gives a fast convergence rate of the players’ strategies to the set of coar√se correlated equilibria (CCE) of the game. This improves the previously known convergence rate T (e.g. [11]) to CCE using natural, decoupled no-regret dynamics deﬁned in [4].

4 Robustness to Adversarial Opponent

So far we have shown simple dynamics with rapid convergence properties in favorable environments when each player in the game uses an algorithm with the RVU property. It is natural to wonder if this comes at the cost of worst-case guarantees when some players do not use algorithms with this property. Rakhlin and Sridharan [18] address this concern by modifying the OMD algorithm with additional smoothing and ada√ptive step-sizes so as to preserve the fast rates in the favorable case while still guaranteeing O(1/ T ) regret for each player, no matter how the opponents play. It is not so obvious how this modiﬁcation might extend to other procedures, and it seems undesirable to abandon the black-box regret transformations we used to obtain Theorem 4. In this section, we present a generic way of transforming an algorithm which satisﬁes the RVU property so that it √retains the fast convergence in favorable settings, but always guarantees a worst-case regret of O˜(1/ T ).

In order to present our modiﬁcation, we need a parametric form of the RVU property which will also involve a tunable parameter of the algorithm. For most online learning algorithms, this will correspond to the step-size parameter used by the algorithm.
Deﬁnition 13 (RVU(ρ) property). We say that a parametric algorithm A(ρ) satisﬁes the Regret bounded by Variation in Utilities(ρ) (RVU(ρ)) property with parameters α, β, γ > 0 and a pair of dual norms ( · , · ∗) if its regret on any sequence of utilities u1, u2, . . . , uT is bounded as

T

α

T

γT

w∗ − wt, ut ≤ + ρβ

ut − ut−1

2 ∗

−

wt − wt−1 2.

(3)

ρ

ρ

t=1

t=1

t=1

In both OMD and OFTRL algorithms from Section 3, the parameter ρ is precisely the stepsize η. We now show an adaptive choice of ρ according to an epoch-based doubling schedule.

Black-box reduction. Given a parametric algorithm A(ρ) as a black-box we construct a wrapper

A based on the doubling trick: The algorithm of each player proceeds in epochs. At each epoch r

the player i has an upper bound of Br on the quantity η∗ and B1 = 1, and for τ = 1, 2, . . . , T repeat:

T t=1

uti −uit−1

2∗. We start with a parameter

1. Play according to A(ηr) and receive uτi .

2. If

τ t=1

|uti

−

uti−1

2 ∗

≥

Br :

(a) Update r ← r + 1, Br ← 2Br, ηr = min √αBr , η∗ , with α as in Equation (3). (b) Start a new run of A with parameter ηr. Theorem 14. Algorithm A achieves regret at most the minimum of the following two terms:

T
wi∗ − wit, uti ≤ log(T )
t=1

α

T

2 + η∗ + (2 + η∗ · β)

t=1

uti − uti−1

2 ∗

γT

t

t−1 2

− η∗

wi − wi ; (4)

t=1





T

∗

tt

α

T

t

t−1 2

wi − wi, ui ≤ log(T ) 1 + η∗ + (1 + α · β) · 2 ui − ui ∗

(5)

t=1

t=1

√ That is, the algorithm satisﬁes the RVU property, and also has regret that can never exceed O˜( T ).
The theorem thus yields the following corollary, which illustrates the stated robustness of A . √
Corollary 15. Algorithm A , with η∗ = (2+β)(n−γ1)2 log(T ) , achieves regret O˜( T ) against any adversarial sequence, while at the same time satisfying the conditions of Theorem 4. Thereby, if all players use such an algorithm, then: i∈N ri(T ) ≤ n log(T )(α/η∗ + 2) = O˜(1).

6

Cumulative regret Cumulative regret

Sum of regrets
1500 Hedge Optimistic Hedge
1000

500

0

0

2000 4000 6000 8000 10000

Number of rounds

Max of regrets

400

Hedge

350

Optimistic Hedge

300

250

200

150

100

50

0

0

2000 4000 6000 8000 10000

Number of rounds

Figure 1: Maximum and sum of individual regrets over time under the Hedge (blue) and Optimistic Hedge (red) dynamics.

Proof. Observe that for such η∗, we have that: (2 + η∗ · β) log(T ) ≤ (2 + β) log(T ) ≤ η∗(nγ−1)2 . Therefore, algorithm A , satisﬁes the sufﬁcient conditions of Theorem 4.

If A(ρ) is the OFTRL algorithm, then we know by Proposition 7 that the above result applies with

α

=

R

=

maxw R(w), β

=

1, γ

=

1 4

and ρ

=

η. Setting η∗ √

=

γ (2+β)(n−1)2

=

1 12(n−1)2

,

the

resulting algorithm A will have regret at most: O˜(n2 T ) against an arbitrary adversary, while if

all players use algorithm A then i∈N ri(T ) = O(n3 log(T )).

An analogue of Theorem 11 can also be established for this algorithm: Corollary 16. If A satisﬁes the RVU(ρ) property, and also wit −√wit−1 ≤ κρ, then A with η∗ = T −1/4 achieves regret O˜(T 1/4) if played against itself, and O˜( T ) against any opponent.

Once again, OFTRL satisﬁes the above conditions with κ = 2, implying robust convergence.

5 Experimental Evaluation

We analyzed the performance of optimistic follow the regularized leader with the entropy regularizer,

which corresponds to the Hedge algorithm [8] modiﬁed so that the last iteration’s utility for each

strategy is double counted; we refer to it as Optimistic Hedge. More formally, the probability of

player i playing strategy j at iteration T is proportional to exp −η ·

T −2 t=1

utij

+

2uTij−1

, rather

than exp −η ·

T −1 t=1

utij

as is standard for Hedge.

We studied a simple auction where n players are bidding for m items. Each player has a value v for getting at least one item and no extra value for more items. The utility of a player is the value for the allocation he derived minus the payment he has to make. The game is deﬁned as follows: simultaneously each player picks one of the m items and submits a bid on that item (we assume bids to be discretized). For each item, the highest bidder wins and pays his bid. We let players play this game repeatedly with each player invoking either Hedge or optimistic Hedge. This game, and generalizations of it, are known to be (1 − 1/e, 0)-smooth [22], if we also view the auctioneer as a player whose utility is the revenue. The welfare of the game is the value of the resulting allocation, hence not a constant-sum game. The welfare maximization problem corresponds to the unweighted bipartite matching problem. The POA captures how far from the optimal matching is the average allocation of the dynamics. By smoothness we know it converges to at least 1 − 1/e of the optimal.

Fast convergence of individual and average regret. We run the game for n = 4 bidders and m = 4 items and valuation v = 20. The bids are discretized to be any integer in [1, 20]. We ﬁnd that the sum of the regrets and the maximum individual regret of each player are remarkably lower under Optimistic Hedge as opposed to Hedge. In Figure 1 we plot the maximum individual regret as well as the sum of the regrets under the two algorithms, using η = 0.1 for both methods. Thus convergence to the set of coarse correlated equilibria is substantially faster under Optimistic Hedge,

7

Expected bid Utility

Expected bids of a player
3 Hedge
Optimistic Hedge 2.5

2

1.5

1

0.5

0

2000 4000 6000 8000 10000

Number of rounds

Utility of a player

18

Hedge

16

Optimistic Hedge

14

12

10

8

6

4

0

2000 4000 6000 8000 10000

Number of rounds

Figure 2: Expected bid and per-iteration utility of a player on one of the four items over time, under Hedge (blue) and Optimistic Hedge (red) dynamics.

conﬁrming our results in Section 3.2. We also observe similar behavior when each player only has value on a randomly picked player-speciﬁc subset of items, or uses other step sizes.
More stable dynamics. We observe that the behavior under Optimistic Hedge is more stable than under Hedge. In Figure 2, we plot the expected bid of a player on one of the items and his expected utility under the two dynamics. Hedge exhibits the sawtooth behavior that was observed in generalized ﬁrst price auction run by Overture (see [5, p. 21]). In stunning contrast, Optimistic Hedge leads to more stable expected bids over time. This stability property of optimistic Hedge is one of the main intuitive reasons for the fast convergence of its regret.
Welfare. In this class of games, we did not observe any signiﬁcant difference between the average welfare of the methods. The key reason is the following: the proof that no-regret dynamics are approximately efﬁcient (Proposition 2) only relies on the fact that each player does not have regret against the strategy s∗i used in the deﬁnition of a smooth game. In this game, regret against these strategies is experimentally comparable under both algorithms, even though regret against the best ﬁxed strategy is remarkably different. This indicates a possibility for faster rates for Hedge in terms of welfare. In Appendix H, we show fast convergence of the efﬁciency of Hedge for costminimization games, though with a worse POA .
6 Discussion
This work extends and generalizes a growing body of work on decentralized no-regret dynamics in many ways. We demonstrate a class of no-regret algorithms which enjoy rapid convergence when played against each other, while being robust to adversarial opponents. This has implications in computation of correlated equilibria, as well as understanding the behavior of agents in complex multi-player games. There are a number of interesting questions and directions for future research which are suggested by our results, including the following:
Convergence rates for vanilla Hedge: The fast rates of our paper do not apply to algorithms such as Hedge without modiﬁcation. Is this modiﬁcation to satisfy RVU only sufﬁcient or also necessary? If not, are there counterexamples? In the supplement, we include a sketch hinting at such a counterexample, but also showing fast rates to a worse equilibrium than our optimistic algorithms.
Convergence of players’ strategies: The OFTRL algorithm often produces much more stable trajectories empirically, as the players converge to an equilibrium, as opposed to say Hedge. A precise quantiﬁcation of this desirable behavior would be of great interest.
Better rates with partial information: If the players do not observe the expected utility function, but only the moves of the other players at each round, can we still obtain faster rates?
8

References
[1] A. Blum and Y. Mansour. Learning, regret minimization, and equilibria. In Noam Nisan, Tim Roughgarden, E´ va Tardos, and Vijay Vazirani, editors, Algorithmic Game Theory, chapter 4, pages 4–30. Cambridge University Press, 2007.
[2] Avrim Blum, MohammadTaghi Hajiaghayi, Katrina Ligett, and Aaron Roth. Regret minimization and the price of total anarchy. In Proceedings of the Fortieth Annual ACM Symposium on Theory of Computing, STOC ’08, pages 373–382, New York, NY, USA, 2008. ACM.
[3] Nicolo Cesa-Bianchi and Gabor Lugosi. Prediction, Learning, and Games. Cambridge University Press, New York, NY, USA, 2006.
[4] Constantinos Daskalakis, Alan Deckelbaum, and Anthony Kim. Near-optimal no-regret algorithms for zero-sum games. Games and Economic Behavior, 92:327 – 348, 2015.
[5] Benjamin Edelman, Michael Ostrovsky, and Michael Schwarz. Internet advertising and the generalized second price auction: Selling billions of dollars worth of keywords. Working Paper 11765, National Bureau of Economic Research, November 2005.
[6] Eyal Even-dar, Yishay Mansour, and Uri Nadav. On the convergence of regret minimization dynamics in concave games. In Proceedings of the Forty-ﬁrst Annual ACM Symposium on Theory of Computing, STOC ’09, pages 523–532, New York, NY, USA, 2009. ACM.
[7] Dean P. Foster and Rakesh V. Vohra. Calibrated learning and correlated equilibrium. Games and Economic Behavior, 21(12):40 – 55, 1997.
[8] Yoav Freund and Robert E Schapire. A decision-theoretic generalization of on-line learning and an application to boosting. Journal of Computer and System Sciences, 55(1):119 – 139, 1997.
[9] Yoav Freund and Robert E Schapire. Adaptive game playing using multiplicative weights. Games and Economic Behavior, 29(1):79–103, 1999.
[10] Drew Fudenberg and Alexander Peysakhovich. Recency, records and recaps: Learning and nonequilibrium behavior in a simple decision problem. In Proceedings of the Fifteenth ACM Conference on Economics and Computation, EC ’14, pages 971–986, New York, NY, USA, 2014. ACM.
[11] Sergiu Hart and Andreu Mas-Colell. A simple adaptive procedure leading to correlated equilibrium. Econometrica, 68(5):1127–1150, 2000.
[12] Wassily Hoeffding and J. Wolfowitz. Distinguishability of sets of distributions. Ann. Math. Statist., 29(3):700–718, 1958.
[13] Adam Kalai and Santosh Vempala. Efﬁcient algorithms for online decision problems. Journal of Computer and System Sciences, 71(3):291 – 307, 2005. Learning Theory 2003 Learning Theory 2003.
[14] Nick Littlestone and Manfred K Warmuth. The weighted majority algorithm. Information and computation, 108(2):212–261, 1994.
[15] AS Nemirovsky and DB Yudin. Problem complexity and method efﬁciency in optimization. 1983. [16] Yu. Nesterov. Smooth minimization of non-smooth functions. Mathematical Programming, 103(1):127–
152, 2005. [17] Alexander Rakhlin and Karthik Sridharan. Online learning with predictable sequences. In COLT 2013,
pages 993–1019, 2013. [18] Alexander Rakhlin and Karthik Sridharan. Optimization, learning, and games with predictable sequences.
In Advances in Neural Information Processing Systems, pages 3066–3074, 2013. [19] T. Roughgarden. Intrinsic robustness of the price of anarchy. In Proceedings of the 41st annual ACM
symposium on Theory of computing, pages 513–522, New York, NY, USA, 2009. ACM. [20] Tim Roughgarden and Florian Schoppmann. Local smoothness and the price of anarchy in atomic split-
table congestion games. In Proceedings of the Twenty-Second Annual ACM-SIAM Symposium on Discrete Algorithms, SODA ’11, pages 255–267. SIAM, 2011. [21] Shai Shalev-Shwartz. Online learning and online convex optimization. Found. Trends Mach. Learn., 4(2):107–194, February 2012. [22] Vasilis Syrgkanis and E´ va Tardos. Composable and efﬁcient mechanisms. In Proceedings of the Fortyﬁfth Annual ACM Symposium on Theory of Computing, STOC ’13, pages 211–220, New York, NY, USA, 2013. ACM.
9

Supplementary material for “Fast Convergence of Regularized Learning in Games”
A Proof of Proposition 2

Proposition 2. In a (λ, µ)-smooth game, if each player i suffers regret at most ri(T ), then:

1 T W (wt) ≥ λ OPT − 1 1

1

11

ri(T ) = OPT −

ri(T ),

T

1+µ

1+µT

ρ

1+µT

t=1

i∈N

i∈N

where the factor ρ = (1 + µ)/λ is called the price of total anarchy (POA).

Proof. Since each player i has regret ri(T ), we have that:

T

T

wit, uti ≥ uti,s∗ − ri(T )

(6)

i

t=1

t=1

Summing over all players and using the smoothness property:

T
W (wt) =
t=1
=
≥
=

T t=1 i∈N

wit, uti

T

≥

uti,s∗ − ri(T )

i

t=1 i∈N

i∈N

T
Es∼wt
t=1

ui(s∗i , s−i)
i∈N

− ri(T )
i∈N

T

(λOPT − µEs∼wt [W (s)]) − ri(T )

t=1

i∈N

T
λOPT − µW (wt) −

ri(T )

t=1

i∈N

By re-arranging we get the result.

B Proof of Proposition 5

Proposition 5. The OMD algorithm using stepsize η and Mti = uit−1satisﬁes the RVU property with constants α = R/η, β = η, γ = 1/(8η), where R = maxi supf DR(f, gi0).

We will use the following theorem of [18].
Theorem 17 (Raklin and Sridharan [18]). The regret of a player under optimistic mirror descent and with respect to any wi∗ ∈ ∆(Si) is upper bounded by:

T

RT

1T

wi∗ − wit, uti ≤ +

uti − Mti ∗ wit − git −

η

2η

t=1

t=1

t=1

where R = supf DR(f, g0).

wit − git 2 + wit − git−1 2 (7)

We show that if the players use optimistic mirror descent with Mti = uti−1, then the regret of each player satisﬁes the sufﬁcient condition presented in the previous section. Some of the key facts
(Equations (9) and (10)) that we use in the following proof appear in [18]. However, the formulation
of the regret that we present in the following theorem is not immediately clear in their proof, so we
present it here for clarity and completeness.

1

Theorem 18. The regret of a player under optimistic mirror descent with Mti = uit−1 and with respect to any wi∗ ∈ ∆(Si) is upper bounded by:

T ∗ tt R

T

t

t−1 2 1 T

t

t−1 2

wi − wi, ui

≤ +η η

ui − ui ∗ − 8η

wi − wi

(8)

t=1

t=1

t=1

Proof. By Theorem 17, instantiated for Mti = uti−1, we get:

T

∗

tt

R

T

t

t−1

t

t

wi − wi, ui

≤+ η

ui − ui ∗ wi − gi

t=1

t=1

1T −
2η t=1

wit − git 2 +

Using the fact that for any ρ > 0:

uti − Mti ∗ wit − git ≤ ρ2 uti − Mti 2∗ + 21ρ wit − git 2

We get:

wit − git−1

2
(9)

T

∗

tt

R ρ T t t−1 2

wi − wi, ui

≤+ η2

ui−ui ∗−

t=1

t=1

For ρ = 2η, the latter simpliﬁes to:

11 −
2η 2ρ

T

t t2 1 T

t t−1 2

wi −gi

− 2η

wi −gi

t=1

t=1

T ∗ tt R

T t

t−1 2 1 T

t t2 1 T

wi − wi, ui

≤

+η η

ui − ui ∗ − 4η

wi − gi

− 2η

t=1

t=1

t=1

t=1

R

T t

t−1 2 1 T

t t2 1 T

≤ +η η

ui − ui ∗ − 4η

wi − gi

− 4η

t=1

t=1

t=1

Last we use the fact that:

wit − wit−1 2 ≤ 2 wit − git−1 2 + 2 wit−1 − git−1 2

Summing over all timesteps:

wit − git−1 2 wit − git−1 2
(10)

T

T

T

wit − wit−1 2 ≤ 2

wit − git−1 2 + 2

wit−1 − git−1 2

t=1

t=1

t=1

T
≤2
t=1

T
wit − git−1 2 + 2
t=1

wit − git 2

Dividing over by 81η and applying it in the previous upper bound on the regret, we get:

T ∗ tt R

T

t

t−1 2 1 T

t

t−1 2

wi − wi, ui

≤

+η η

ui − ui ∗ − 8η

wi − wi

t=1

t=1

t=1

C Proof of Proposition 7
Proposition 7. The OFTRL algorithm using stepsize η and Mti = uti−1 satisﬁes the RVU property with constants α = R/η, β = η and γ = 1/(4η). We ﬁrst show that these algorithms achieve the same regret bounds as optimistic mirror descent. This result does not appear in previous work in any form.
2

Even though the algorithms do not make use of a secondary sequence, we will still use in the analysis the notation:

giT = argmax
g∈∆(Si )

T
g, uti
t=1

R(g)

−

.

η

These secondary variables are often called be the leader sequence as they can see one step in the future.
Theorem 19. The regret of a player under optimistic FTRL and with respect to any wi∗ ∈ ∆(Si) is upper bounded by:

T

RT

1T

wi∗ − wit, uti ≤ +

uti − Mti ∗ wit − git −

η

2η

t=1

t=1

t=1

where R = supf R(f ) − inff R(f ).

wit − git 2 + wit − git−1 2 (11)

Proof. First observe that:

wi∗ − wit, uti = git − wit, uti − Mti + git − wit, Mti + wi∗ − git, uti

(12)

Without loss of generality we will assume that inff R(f ) = 0. Since git − wit, uti − Mti ≤ git − wit uti − Mti ∗, it sufﬁces to show that for any wi∗ ∈ ∆(Si):

T

t

tt

∗

tt

R(wi∗) 1 T

t

t2

t

t−1 2

gi − wi, Mi + wi − gi, ui ≤

η

− 2η

wi − gi + wi − gi

t=1

t=1

(13)

For shorthand notation let:

IT

=

1 2η

that for all wi∗:

T t=1

wit − git 2 + wit − git−1 2 . By induction assume

T −1 t

tt

tt

T −1 ∗ t R(wi∗)

gi − wi, Mi − gi, ui ≤ −

wi , ui + η − IT −1

t=1

t=1

=−

T −1
wi∗, uti
t=1

+ R(wi∗) − IT −1 η

3

Apply the above for wi∗ = giT −1 and add giT − wiT , MTi − giT , uTi on both sides:

T

t

tt

tt

T −1

T −1

t

R(giT −1)

T

TT

TT

gi − wi, Mi − gi, ui ≤ − gi , ui + η − IT −1 + gi − wi , Mi − gi , ui

t=1

t=1

≤−

T −1

w

T i

,

uti

t=1

R

(w

T i

)

T

TT

TT

+ η − IT −1 + gi − wi , Mi − gi , ui

− 21η wiT − giT −1 2

=−

T −1

w

T i

,

uti + MTi

t=1

R(wiT )

TT

TT

+ η − IT −1 + gi , Mi − gi , ui

− 21η wiT − giT −1 2

≤−

T −1

g

T i

,

uti + MTi

t=1

R(giT )

TT

TT

+ η − IT −1 + gi , Mi − gi , ui

− 21η wiT − giT −1 2 − 21η wiT − giT 2

=−

T

g

T i

,

uti

t=1

+ R(giT ) − IT η

≤−

T
q∗i , uti
t=1

+ R(q∗i ) − IT η

The inequalities follow by the optimality of the corresponding variable that was changed and by
the strong convexity of R(·). The ﬁnal vector q∗i is an arbitrary vector in ∆(Si). The base case of T = 0 follows trivially by R(f ) ≥ 0 for all f . This concludes the inductive proof.

Thus optimistic FTRL achieves the exact same form of regret presented in Theorem 17 for optimistic mirror descent. Hence, the equivalent versions of Theorem 18 and Corollary 6 hold also for the optimistic FTRL algorithm. In fact we are able to show slightly stronger bounds for optimistic FTRL, based on the following lemmas.

Lemma 20 (Stability). For the optimistic FTRL algorithm:

wit − git ≤ η · Mti − uti ∗

(14)

git − wit+1 ≤ η · Mti+1 ∗

(15)

Proof. Let FT (f ) = f ,

T −1 t=1

uti

+

MTi

− η−1R(f ) and GT (f ) =

f,

T t=1

uti

− η−1R(f ).

Observe that: FT (f ) − GT (f ) = f , MTi − uTi and FT +1(f ) − GT (f ) = f , MTi +1 .

Part 1

By the optimality of wiT and giT and the strong convexity of R(·):

FT (wiT ) ≥ GT (giT ) ≥

FT (giT ) + 21η wiT − giT 2 GT (wiT ) + 21η wiT − giT 2

Adding both inequalities and using the previous observations:

η1 wiT − giT 2 ≤ wiT − giT , MTi − uTi ≤ wiT − giT · MTi − uTi ∗

Dividing over by wiT − giT gives the ﬁrst inequality of the lemma.

4

Part 2

By the optimality of giT and wiT +1 and strong convexity:

FT +1(wiT +1) ≥ GT (giT ) ≥

FT +1(giT ) + 21η wiT +1 − giT 2 GT (wiT +1) + 21η wiT +1 − giT 2

Adding the inequalities:

η1 wiT +1 − giT 2 ≤ wiT +1 − giT , MTi +1 ≤ wiT +1 − giT · MTi +1 ∗

Dividing over by wiT +1 − giT , yields second inequality of the lemma.

Given Theorem 19 and Lemma 20, the proposition immediately follows since

T

R

T

1T

wi∗ − wit, uti ≤ + η

uti − Mti

2 ∗

−

η

2η

t=1

t=1

t=1

wit − git 2 + wit − git−1 2 .

Replacing Mti with uti−1 and using Inequality (10), yields the result.

D Proof of Proposition 9

Proposition 9. The OFTRL algorithm using stepsize η and Mti = RVU property with constants α = R/η, β = ηH2 and γ = 1/(4η).

t−1 τ =t−H

uτi /H

satisﬁes

the

The proposition is equivalent to the following lemma, which we will state and prove in this appendix.

Lemma 21.

For the optimistic FTRL algorithm with Mti

=

1 H

bounded by:

t−1 τ =t−H

uτi ,

the

regret

is

upper

T ∗ tt R

T 2

t

t−1 2 1 T

t

t−1 2

wi − wi, ui

≤ + ηH η

ui − ui ∗ − 4η

wi − wi

t=1

t=1

t=1

(16)

where R = supf R(f )−inff R(f ). Thus we get

i ri(T )

≤

nR η

=

2n(n−1)HR for η

=

2H(n1 −1) .

Proof. Similar to Proposition 7, by Theorem 19, Lemma 20 and Inequality (10) we get:

T ∗ tt R

T t

t2 1 T

t

t−1 2

wi − wi, ui

≤

+η η

ui − Mi ∗ − 4η

wi − wi

t=1

t=1

t=1

T

t−1

2

T

R = +η
η

uti − H1

uτi − 41η

wit − wit−1 2

t=1

τ =t−H

∗

t=1

R

T

= +η

η t=1

t−1

2

T

H1 uti − uτi ∗ − 41η wit − wit−1 2

τ =t−H

t=1

By triangle inequality:

1 t−1 t τ

1 t−1 t−1 q+1

q

H

ui − ui ∗ ≤ H

ui − ui
∗

τ =t−H

τ =t−H q=τ

t−1 t − τ =
τ =t−H H

t−1

uτi +1 − uτi ∗ ≤

uτi +1 − uτi ∗

τ =t−H

5

By Cauchy-Schwarz:

t−1 τ =t−H

uτi +1 − uτi ∗

2

t−1

≤H

τ =t−H

uτi +1 − uτi 2∗

Thus we can derive that:

T ∗ tt R

T t−1

τ +1

τ2 1 T

t

t−1 2

wi − wi, ui

≤

+ ηH η

ui − ui ∗ − 4η

wi − wi

t=1

t=1 τ =t−H

t=1

R

T 2

t

t−1 2 1 T

t

t−1 2

≤ + ηH η

ui − ui ∗ − 4η

wi − wi

t=1

t=1

E Proof of Proposition 10

Proposition 10.

The OFTRL algorithm using stepsize η and Mti =

1 tτ−=10 δ−τ

satisﬁes the RVU property with constants α = R/η, β = η/(1 − δ)3 and γ = 1/(8η).

t−1 τ =0

δ−τ

uτi

The proposition is equivalent to the following lemma which we will prove in this appendix.

Lemma 22. For the optimistic FTRL algorithm with Mti = count rate δ ∈ (0, 1), the regret is upper bounded by:

1

t τ =0

δ−τ

t−1 τ =0

δ−τ

uτi

for

some

dis-

T ∗ tt R

η

T t

t−1 2 1 T

t

t−1 2

wi − wi, ui ≤ η + (1 − δ)3

ui − ui ∗ − 8η

wi − wi

(17)

t=1

t=1

t=1

where R = supf R(f ) − inff R(f ). Thus we get η = (1−δ)3/2 .
2(n−1)

i ri(T )

≤

nR η

=

2n(n − 1) (1−δ1)3/2 R for

Proof. We show the theorem for the case of optimistic FTRL. The OMD case follows analogously. Similar to Lemma 21 the regret is upper bounded by:

T ∗ tt R

T t

t2 1 T

t

t−1 2

wi − wi, ui

≤

+η η

ui − Mi ∗ − 4η

wi − wi

t=1

t=1

t=1

R

T

= +η

uti −

η

t=1

1

t−1

δ−τ uτi

tτ−=10 δ−τ τ =0

2 1T

−

4η

∗

t=1

wit − wit−1 2

We will now show that:

T
uti −
t=1

1

t−1

δ−τ uτi

tτ−=10 δ−τ τ =0

2 1T

≤ (1 − δ)3

∗

t=1

uti − uit−1

2 ∗

which will conclude the proof.

6

First observe by triangle inequality:

uti −

1

t−1

δ−τ uτi =

tτ−=10 δ−τ τ =0 ∗

≤

1

t−1

δ−τ uti − uτi ∗

tτ−=10 δ−τ τ =0

1 t−1 δ−τ t−1 tτ−=10 δ−τ τ =0 q=τ

uqi +1 − uqi
∗

1

t−1

q

q+1

q

−τ

= t−1 δ−τ

ui − ui

δ

∗

τ =0

q=0

τ =0

1

t−1 q+1

q −q 1 − δq+1

= t−1 δ−τ

ui − ui δ
∗

1−δ

τ =0

q=0

1 ≤
1−δ

1 t−1 δ−q tτ−=10 δ−τ q=0

uqi +1 − uqi
∗

By Cauchy-Schwarz:

1 1−δ

1 t−1 δ−q tτ−=10 δ−τ q=0

uqi +1 − uqi
∗

2
1 = (1 − δ)2

1 t−1 δ−τ 2
τ =0

t−1

2

δ−q/2 · δ−q/2 uqi +1 − uqi
∗ q=0

1 ≤ (1 − δ)2

1 tτ−=10 δ−τ

t−1

t−1

2 δ−q · δ−q

q=0

q=0

2
uqi +1 − uqi
∗

1 = (1 − δ)2

1 t−1 δ−q tτ−=10 δ−τ q=0

2
uqi +1 − uqi
∗

1 = (1 − δ)2

1 t−1 δt−q tτ−=10 δt−τ q=0

2
uqi +1 − uqi
∗

1

t−1 t−q

q+1

q2

≤ δ(1 − δ)2

δ

ui − ui
∗

q=0

Combining we get:

uti −

1

t−1

δ−τ uτi

tτ−=10 δ−τ τ =0

2

t−1

1 ≤

δt−q

δ(1 − δ)2

∗

q=0

2
uqi +1 − uqi
∗

7

Summing over all t and re-arranging we get:

T
uti −
t=1

t−1

2

T t−1

1 t−1 δ−τ

δ−τ uτi

1 ≤ δ(1 − δ)2

2
δt−q uqi +1 − uqi
∗

τ =0

τ =0

∗

t=1 q=0

1

T −1 −q

q+1

2T

q

t

= δ(1 − δ)2

δ ui − ui
∗

δ

q=0

t=q+1

1

T −1 −q

q+1

q 2 δ(δq − δT )

= δ(1 − δ)2

δ

ui

− ui
∗

1−δ

q=0

1 T −1 q+1

q2

T −q

= (1 − δ)3

ui − ui (1 − δ )
∗

q=0

1 T −1 q+1

q2

≤ (1 − δ)3

ui − ui
∗

q=0

F Proof of Theorem 14

Theorem 14. Algorithm A achieves regret at most the minimum of the following two terms:

T
wi∗ − wit, uti ≤ log(T )
t=1

α

T

2 + η∗ + (2 + η∗ · β)

t=1

uti − uti−1

2 ∗

γT −
η∗ t=1

wit − wit−1 2;



T

∗

tt

α

wi − wi, ui ≤ log(T ) 1 + η∗ + (1 + α · β) ·

t=1

T
2
t=1



uti − uti−1

2
∗

Proof. We break the proof in the two corresponding parts.

First part. Consider a round r and let Tr be its ﬁnal iteration. Also let Ir = First observe that by the deﬁnition of Br:

Tr t=1

uti − uit−1 2∗.

1 2 Ir ≤ Br ≤ 2 · Ir + 1 (18)
By the deﬁnition of η, we know that √
1 ≤ 1 < 1 + Br . (19) η∗ η η∗ α

By the regret guarantee of algorithm A(ηr), we have that:

Tr t=Tr−1 +1

wi∗ − wit, uti

α

Tr

≤ +η·β

η

t=Tr−1 +1

uti − uti−1

2 − γ Tr ∗η
t=Tr−1 +1

wit − wit−1 2

α ≤+
η∗

Tr

t

t−1 2 γ

Tr

t

t−1 2

Br + η∗ · β

ui − ui ∗ − η∗

wi − wi

t=Tr−1 +1

t=Tr−1 +1

α ≤+
η∗

T
Br + η∗ · β
t=1

uti − uti−1

2 − γ Tr ∗ η∗
t=Tr−1 +1

wit − wit−1 2

8

√ Since Br ≤ Br + 1 ≤ 2 · Ir + 2:

Tr ∗ t t α

T

t

t−1 2 γ

Tr

t

t−1 2

wi − wi, ui ≤ η∗ + 2 + (2 + η∗ · β) ui − ui ∗ − η∗

wi − wi

t=Tr−1 +1

t=1

t=Tr−1 +1

Since at each round we are doubling the bound Br and since

T t=1

uti − uti−1

2 ∗

≤

T

,

there

are

at

most log(T ) rounds. Summing up the above inequality for each of the at most log(T ) rounds, yields

the claimed bound in Equation (4).

√
Second part. Again consider any round r. By Equations (18), (19), the fact that η ≤ √αBr ≤ α√Ir2 and by the regret of algorithm A(ηr):

Tr

α

wi∗ − wit, uti ≤ +

t=Tr−1+1 η∗

Tr

Br + η · β

uti − uit−1

2 ∗

t=Tr−1 +1

α ≤+
η∗

Br + η · β · Ir

α ≤ η∗ + Br + α · β · 2Ir

α ≤ η∗ + 2Ir + 1 + α · β · 2Ir

α ≤ η∗ + 1 + 2Ir + α · β · 2Ir

α ≤ + 1 + (1 + α · β)
η∗

T
2
t=1

uti − uti−1

2 ∗

Again since the number of rounds is at most log(T ), by summing up the above bound for each round r, we get the second part of the theorem.

G Proof of Corollary 16

Corollary 16. If A satisﬁes the RVU(ρ) property, and also wit √− wit−1 ≤ κρ, then A with η∗ = T −1/4 achieves regret O˜(T 1/4) if played against itself, and O˜( T ) against any opponent.

Proof. Observe that at any round of A , algorithm A is run with ηr ≤ η∗. Thus by the property of
algorithm A, we have that at every iteration: wit − wit−1 ≤ κη∗ = κT −1/4. If all players use algorithm A , then by similar reasoning as in Theorem 4 we know that:

uti − uti−1

2 ∗

≤

(n

−

1)

wjt − wjt−1 2 ≤ (n − 1)2γ2η∗2 = (n − 1)2κ2T −1/2

j=i

Hence, by Equation 5, the regret of each player is bounded by:



T

α

wi∗ − wit, uti ≤ log(T )  + (1 + α · β) ·

t=1 η∗


T

uti − uti−1

2
∗

t=1

≤ log(T ) αT 1/4 + (1 + α · β) · T · (n − 1)2κ2T −1/2

= log(T ) αT 1/4 + (1 + α · β) · (n − 1)κT 1/4 = O˜(T 1/4)

9

H Fast convergence via a ﬁrst order regret bound for cost-minimization

In this section, we show how a different regret bound can also lead to a fast convergence rate for a smooth game. For some technical reasons we consider cost instead of utility throughout this section. We use ci : S1 × . . . × Sn → [0, 1] to denote the cost function, and similarly to previous sections C(s) = i∈N ci(s), C(w) = Es∼w[C(s)], OPT = mins∈S1×...×Sn C(s). A game is (λ, µ)-smooth if there exists a strategy proﬁle s∗, such that for any strategy proﬁle s:

ci(s∗i , s−i) ≤ λOPT + µC(s).

(20)

i∈N

Now suppose each player i uses a no-regret algorithm to produce wit on each round and receives cost cti,s = Es−i∼wt [ci(s, s−i)] for each strategy s ∈ Si. Moreover, for any ﬁxed strategy s, the
−i
no-regret algorithm ensures

T

T

T

wit, cti − cti,s ≤ A1 log d

cti,s + A2 log d

(21)

t=1

t=1

t=1

for some absolute constants A1 and A2. Note that this form of ﬁrst order bound can be achieved by a variety of algorithms such as Hedge with appropriate learning rate tuning. Under this setup, we prove the following:

Theorem 23. If a game is (λ, µ)-smooth and each player uses a no-regret algorithm with a regret satisfying Eq. (21), then we have

1 T C(wt) ≤ λ(1 + µ) OPT + An log d

T

µ(1 − µ)

T

t=1

where A = (1A−21µµ)2 + 12−Aµ2 .

Proof. Using the regret bound and Cauchy-Schwarz inequality, we have

T

T

C(wt) =

t=1

t=1 i∈N

wit, cti

T

≤

cti,s∗ + A1

i

t=1 i∈N

log d
i∈N

T
cti,s∗ + A2n log d i
t=1

T

≤

cti,s∗ + A1

i

t=1 i∈N

n log d

T
cti,s∗ + A2n log d. i
T =1 i∈N

(22)

By the smoothness assumption, we have

cti,s∗ = Es∼wt i

ci(s∗i , s−i) ≤ λOPT + µEs∼wt [C(s)] = λOPT + µC(wt),

i∈N

i∈N

and therefore

T t=1

i∈N cti,s∗ ≤ x2 where we deﬁne x =

i

applying this bound in Eq. (22), we continue with

λT OPT + µ Tt=1 C(wt). Now

1 x2 − λT OPT ≤ x2 + (A1 n log d)x + A2n log d. µ

Rearranging gives a quadratic inequality ax2 + bx + c ≤ 0 with

1−µ

a=

,

µ

√ b = −A1 n ln d,

λ c = − µ T OPT − A2n log d,

and solving for x gives

µ

x≤

(−b +

2(1 − µ)

b2 − 4ac) ≤ µ 1−µ

b2 − 2ac.

Finally solving for Tt=1 C(wt) (hidden in the deﬁnition of x) gives the bound stated in the theorem.

10

Note that the price of total anarchy is larger than the one achieved by previous analysis by a multiplicative factor of 1 + µ1 , but the convergence rate is much faster (n times faster compared to
optimistic mirror descent or optimistic FTRL).

I Extension to continuous strategy space games

In this section we extend our results to continuous strategy space games such as for instance ”splittable selﬁsh routing games” (see e.g. [20]). These are games where the price of anarchy has been well studied and quite well motivated from internet routing. In these games we consider the dynamics where the players simply observe the past play of their opponents and not the expected past play. We consider dynamics where players don’t use mixed strategies, but are simply doing online convex optimization algorithms on their continuous strategy spaces. Such learning on continuous games has also been studied in more restrictive settings in [6].
In this setting we will consider the following setting: each player i has a strategy space Si which is a closed convex set in Rd. In this setting we will denote with wi ∈ Si a strategy of a player4. Given a proﬁle of strategies w = (w1, . . . , wn), each player incurs a cost ci(w) (equivalently a utility function ui(w).
We make the following two assumptions on the costs:

1. (Convex in player strategy) For each player i and for each proﬁle of opponent strategies w−i, the function ci(·, w−i) is convex in wi.
2. (Lipschitz gradient) For each player i, the function δi(w) = ∇ici(w),5 is L-Lipschitz continuous with respect to the · 1 norm and if w−i ∈ R(n−1)d is viewed as a vector in the (n − 1) · d dimensional space, i.e.:

δi(w) − δi(y) ∗ ≤ L ·

wj − yj

(23)

j

Observe that a sufﬁcient condition for Property (2) is that the function δi(w) is coordinate-wise L-lipschitz with respect to the · norm.

Lemma 24. If for any j:

δi(w) − δi(yj , w−j ) ∗ ≤ L wj − yj

(24)

then δi(·) satisﬁes Property (2).

Proof. For any two vectors w and y, think of switching from the one to the other by switching sequentially each player from his strategy wi to yi, keeping the remaining players ﬁxed and in some pre-ﬁxed player order. The difference δi(w) − δi(y) ∗ is upper bounded by the sum of the differences of these sequential switches. The difference of each such unilateral switch for each player j is turn upper bounded by wj − yj , by the property assumed in the Lemma. The lemma then follows.

Example. (Connection to discrete game). We can view the discrete action games as a special
case of the latter setting, by re-naming mixed strategies in the discrete game to pure strategies in
the continuous space game. Under this mapping, the continuous strategy space is the simplex in Rd, where d is the number of pure strategies of the discrete game. Moreover the costs ci(w) (equiv. utilities) are multi-linear, i.e. ci(w) = s Ci(s) j wj,s. Obviously, these multi-linear costs satisfy assumption 1, i.e. they are convex (in fact linear) in a players strategy.

The second assumption is also satisﬁed, albeit with a slightly more involved proof, which appears in the proof of Theorem 4. Basically, observe that

δi,si (w) = Ci(si, s−i) wj,sj

s−i

j=i

(25)

4We will use wi instead of si for a pure strategy, since pure strategies of the continuous game will be sort of treated equivalently to mixed strategies in the discrete game we described in Section 2
5With ∇ici(w) we denote the gradient of the function with respect the strategy of player i and ﬁxing the strategy of other players. Equivalently for each ﬁxed w−i it is the gradient of the function ci(·, w−i).

11

Assuming Ci(s) ≤ 1:

|δi,si (w) − δi,si (y)| ≤

wj,sj − yj,sj ≤

wj − yj 1

s−i j=i

j=i

j=i

(26)

Where the last inequality holds by the properties of total variation distance.

Example. (Splittable congestion games). In this game each player i has an amount of ﬂow fi ≤ B he wants to route from a source si to a sink ti in an undirected graph G = (V, E). Each edge e ∈ E is associated with a latency function e(fe) which maps an amount of ﬂow fe passing through the edge to a latency. We will assume that latency functions are convex, increasing and twice differentiable.
We will also assume that both e(·) and e(·) are K-lipschitz functions of the ﬂow. We will denote with Pi the set of (si, ti) paths in the graph. Then the set of feasible strategies for each player is all possible ways of splitting his ﬂow fi onto these pats Pi. Denote with wp the amount of ﬂow a player routes on path p ∈ Pi, then the strategy space is:





Si

=

 wi

∈

|Pi |
R+

:

 wi,p = fp

(27)



p∈Pi



The latter is obviously a closed convex set in R|Pi|.
For an edge e, let fi,e(wi) = p∈Pi:e∈p wi,p to be the ﬂow on edge e caused by player i and with fe(w) = i fi,e(wi) to be the total ﬂow on the edge e. Then the cost of a player is:

ci(w) = fi,e(wi) · (fe(w))

(28)

e

First observe that the functions ci(·) are convex with respect to a player’s strategy wi. This follows since the cost is linear across edges, thus we need to show convexity locally at each edge. The latency function on an edge is a convex function of the total ﬂow, hence also x e(x + b) is also a convex function of x. Now observe that the cost from each edge is of the form fi,e(wi) e(fi,e(wi) + b) which is convex with respect to fi,e(wi). In turn, fi,e(·) is a linear function of wi. Thus whole cost function is convex in wi.
Last we need to show that the second condition on the cost functions is satisﬁed for some lipschitzness factor L. This will be a consequence of the K-lipschitzness of the latency functions. Denote with ie(w) = e(fe(w)) + fi,e(wi) · e(fe(w)). Then, observe that:

δi,p(w) = ( e(fe(w)) + fi,e(wi) · e(fe(w))) =

ie(w)

(29)

e∈p

e∈p

Since both e(·) and e(·) are K-lipschitz and fi,e(wi) ≤ B, we have that:

|δi,p(w) − δi,p(y)| ≤

|

i e

(w)

−

ie(y)|

e∈p

≤ | e(fe(w)) − e(fe(y))| + B | e(fe(w)) − e(fe(y))|

e∈p

e∈p

≤ K(1 + B) |fe(w) − fe(y)| ≤ K(1 + B)

|fj,e(wj ) − fj,e(yj )|

e∈p

e∈p j∈[n]

≤ K(1 + B)

|wj,q − yj,q|

e∈p j∈[n] q∈Pj :e∈q

= K(1 + B)

|wj,q − yj,q| ≤ K(1 + B)m

|wj,q − yj,q|

j∈[n] q∈Pj e∈p∩q

j∈[n] q∈Pj

≤ K(1 + B)m

wj − yj 1

j∈[n]

12

Thus we get that the second condition is satisﬁed with L = 2Km.

For these games we will assume that the players are performing some form of regularized learning using the gradients of their utilities as proxies. For fast convergence we would require that the algorithms they use satisfy the following property, which is a generalization of Theorem 4.

Theorem 25. Consider a repeated continuous strategy space game where the cost functions satisfy
properties 1, 2. Suppose that the algorithm of each player i satisﬁes the property that for any wi∗ ∈ Si

T

T

T

ci(wt) − ci(wi∗, w−t i) ≤ α + β

δi(wt) − δi(wt−1)

2 ∗

−

γ

wit − wit−1 2 (30)

t=1

t=1

t=1

for some α > 0 and 0 < β ≤ L2γ·n2 and with · we denote the · 1 norm. Then:

ri(T ) ≤ n · α = O(1)

(31)

i∈N

Proof. By property 2, we have that:



2

T

T

T

δi(wt) − δi(wt−1)

2 ∗

≤ L2



wjt − wjt−1  ≤ L2n

wjt − wjt−1 2

t=1

t=1 j∈[n]

t=1 j∈[n]

By summing up the regret inequality for each player and using the above bound we get:

T

T

ri(T ) ≤ n · α + βL2n2

wjt − wjt−1 2 − γ

wit − wit−1 2

i∈N

t=1 j∈[n]

t=1 i∈[n]

(32)

If βL2n2 ≤ γ, the theorem follows.

All the algorithms that we described in the previous sections can be adapted to satisfy the bound required by Theorem 25, by simply using the gradient of the cost as a proxy of the cost instead of the actual cost. This follows by standard arguments. Hence if players follow for instance the following adaptation of the regularized leader algorithm:

T −1

R(w)

wiT = argmax w, δi(wt) + δi(wT −1) −

(33)

w∈Si

t=1

η

then by Proposition 7 we get that their regret satisﬁes the conditions of Theorem 25 for a = Rη ,

β

=

η

and

γ

=

41η ,

where

R

=

argmaxwi∈Si R(wi).

We

need

that

ηL2n2

≤

1 4η

or

equivalently

η ≤ 2L1n . Thus for η = 2L1n , if all players are using the latter algorithm we get regret of at most n · Rη = 2Ln2R

Example. (Splittable congestion games). Consider the case of congestion games with splittable
ﬂow, where all the latencies and their derivatives are K-Lipschitz and the ﬂow of each player is
at most B. In that setting, suppose that we use the entropic regularizer. Then for each player i, R ≤ B · log(|Pi|). The number of possible (s, t) paths is at most 2m, which yields R ≤ B · m.
Hence, by using the linearized follow the regularized leader, we get that the total regret is at most 2Ln2R ≤ 2K(B + 1)Bm2n2.

√ J Ω( T ) Lower Bounds on Regret for other Dynamics

We consider a two-player zero-sum game which can be described by a utility matrix A. Assume the row player uses MWU with a ﬁxed learning rate η, and the column player plays the best response, that is, a pure strategy that minimizes the row player’s expected utility for the current round. Then the following theorem states that no√matter how η is set, there is always a game A such that the regret of the row player is at least Ω( T ).

13

Theorem 26. In the setting described above, let r(T ) and r (T ) be the regret of the row player for the game A = 1 0 and A = 1 respectively after T rounds. Then max{r(T ), r (T )} ≥
√ 01 0 Ω( T ).

Proof. For game A, according to the setup, one can verify that the row player will play a uniform distribution and receive utility 21 on round t where t is odd, and for the next round t+1, the row player will put slightly more weights on one row and the column player will pick the column that has 0
utility for that row. Speciﬁcally, the expected utility of the row player is eη(t−1e)η/(2t− +1e)η/(2t+1)/2 = 1+1eη . Therefore, the regret is (assuming T is even for simplicity)

TT r(T ) = −
22

1

1

2 + 1 + eη

T eη − 1 = 2 · eη + 1 .

For game A , the expected utility of the row player on round t is eηe(ηt(−t− 1)1+) 1 , and thus the regret is

T eη(t−1)

T

1

T

1

1 − e−T η

r (T ) = T − eη(t−1) + 1 = eη(t−1) + 1 ≥ 2eη(t−1) = 2(1 − e−η) .

t=1

t=1

t=1

Now if η ≥ 1, then r(T ) ≥ T · e−1 = Ω(T ). If η ≤ 1 , then r (T ) ≥ 1−e−1 ≥ T (1−e−1) =

2 e+1

T

2(1−

e

−

1 T

)

2

Ω(T ). Finally when T1 ≤ η ≤ 1, we have

T eη − 1 1 − e−1

T eη − 1 1 − e−1

r(T ) + r (T ) ≥ 2 · e + 1 + 2(1 − e−η) ≥ 2 · e + 1 + 2(eη − 1) ≥

√ To sum up, we have max{r(T ), r (T )} ≥ Ω( T ).

1 − e−1

√

T·

= Ω( T ).

e+1

14

