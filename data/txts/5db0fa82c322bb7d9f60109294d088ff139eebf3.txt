CORRECTION BY PROJECTION: DENOISING IMAGES WITH GENERATIVE ADVERSARIAL NETWORKS

Subarna Tripathi UC San Diego

Zachary C. Lipton UC San Diego

Truong Q. Nguyen UC San Diego

arXiv:1803.04477v1 [cs.CV] 12 Mar 2018

ABSTRACT
Generative adversarial networks (GANs) transform lowdimensional latent vectors into visually plausible images. If the real dataset contains only clean images, then ostensibly, the manifold learned by the GAN should contain only clean images. In this paper, we propose to denoise corrupted images by ﬁnding the nearest point on the GAN manifold, recovering latent vectors by minimizing distances in image space. We ﬁrst demonstrate that given a corrupted version of an image that truly lies on the GAN manifold, we can approximately recover the latent vector and denoise the image, obtaining signiﬁcantly higher quality, comparing with BM3D. Next, we demonstrate that latent vectors recovered from noisy images exhibit a consistent bias. By subtracting this bias before projecting back to image space, we improve denoising results even further. Finally, even for unseen images, our method performs better at denoising better than BM3D. Notably, the basic version of our method (without bias correction) requires no prior knowledge on the noise variance. To achieve the highest possible denoising quality, the best performing signal processing based methods, such as BM3D, require an estimate of the blur kernel.
1. INTRODUCTION
Generative adversarial networks (GANs) [1, 2] exploit the discriminative power of deep neural networks for the task of generative modeling. A GAN consists of two models: a generator and a discriminator. The generator maps samples from a low-dimensional latent space onto the space of images. The discriminator tries to distinguish between images produced by the generator and real images. To coerce the generator to produce images that match the distribution of real images, we optimize it to fool the discriminator. It has been shown that various GAN minimax objectives are equivalent to minimizing corresponding divergences between the real and generated data.
Over the last several years, many researchers have successfully applied variants of GANs [3] to tasks including synthesizing 2D images, face processing, image completion, image editing, 3D objects generation and reconstruction, fashion image generation, image and video super-resolutions, video

Fig. 1: Images with Gaussian noise (left), denoised images with BM3D (second), denoised images with proposed method(third), and the ground truth images (right)
generation, image-to-image translation, text-to-image generation, audio and text synthesis.
While generating images can be useful, we often want to infer latent representations given images. As an example, the latent code recovery methods is also used for generating fashion images that have horizontal symmetry [4]. It is known that vectors that are close in latent space, generate visually similar images. Algebraic operations in latent vector space often lead to meaningful corresponding operations in image space.
However, the original GAN formulation gives no out-ofthe-box method to reverse the mapping, projecting images back into latent space. How best to perform the reverse mapping (from image space to latent space) remains an open research problem. Authors in [5] suggests an extension to GAN in which a third model explicitly learns the reverse mapping. [6] suggest that inverting the generator is difﬁcult, noting that, in principle, a single image φ(z) may map to multiple latent vectors z. They propose a gradient-based approach to recover latent vectors and evaluate the process on the reconstruction error in image space.
Recently, [7] proposes to recover latent vectors using a gradient-based method using “stochastic clipping”, and achieve successful recovery 100% of time given a certain residual threshold. The idea of “stochastic clipping” is based on the notion that the latent vectors have close to zero probability of landing on the boundary values.
In this paper, we show that latent code recovery can be used to denoise and deblur images, building on the method of [7]. First, we show that for corrupted versions of im-

ages that are actually generated by our trained GAN, we can signiﬁcantly denoise them, achieving higher quality as measured by PSNR, compared to BM3D [8], one of the best signal processing-based denoising methods. Next, we demonstrate that deblurring can be treated as an attribute in latent space, given the noise variance. Arithmetic on deblurring latent vector space denoises and deblurs the images even further. Finally, we show that even for unseen images, our method appears to denoise better than BM3D (Fig 1). To our knowledge, this is the ﬁrst empirical demonstration that recovery of latent vectors in DCGAN can be used for image denoising and deblurring. After adding even signiﬁcant amounts of Gaussian noise to images, we denoise the images with higher ﬁdelity comparing with state-of-the-art denoising method.

Fig. 2: Example recovered images from CelebA dataset (no added noise) with stochastic gradient [7].

2. RELATED WORK
Image denoising is an actively researched inverse problem in low-level vision for last couple of decades. It has rich literature in traditional signal processing based methods. See [9] for a detailed survey. BM3D [8] is one of the best methods on image denoising in that domain. Recently, many researchers have proposed discriminative learning based methods for image denoising. Typically, these methods learn the image prior models and corresponding denoising function using CNNs. See [10, 11, 12] for overviews on these methods.
In this paper, we focus on the use of GANs for denoising and deblurring. Speciﬁcally, we project noisy images onto the range of the GAN by attempting to recover the latent vector which corresponds to the closest point on the GAN manifold. Several papers attempt gradient-based methods for inverting deep neural networks. Authors in [13] invert discriminative CNNs for the purpose of interpreting hidden representations. To invert generative models, [6] and [14] both optimize over latent vectors to minimize distance in image space, but neither reported that the inference procedure could faithfully recover ground truth latent vectors or that the inferred vectors (across multiple runs) tended to be proximal in latent space. In a different approach, [5], and [15], learn separate neural network encoders for performing the reverse mapping. The latent code recovery methods [7, 16] is also used for generating fashion images that have horizontal symmetry [4]. Authors in [7] also note that the reverse projection can be used to remove Gaussian noise. However, they do not investigate any potential for latent vector arithmetic for deblurring. Authors in [17] allow the model to change the input vector that leads to better images according to the discriminator.
3. METHOD
Recovery from an image generated by the generator, and from a real image are different. Former one can be considered as an inverse operation of an existing forward operation. However, attempting to recover the latent vector from a real image is

more like a projection of it onto the manifold learned by the

generator.

Our approach of recovering the latent vectors is based on

[7]. In order to recover the latent vector of a generated im-

age, we produce an image φ(z) for a latent vector z. We

then initialize a new, random vector z of the same shape as

z. This new vector z maps to a corresponding image φ(z ).

In order to reverse engineer the input z, we successively up-

date the components of z in order to push the representation

φ(z ) closer to the original image φ(z). In our experiments

we minimize the L2 norm, yielding the following optimiza-

tion problem:

min ||φ(z) − φ(z )||22.
z

We optimize over z by gradient descent, performing the update z ← z −η∇z ||φ(z)−φ(z )||22 until some convergence criteria is met. Only solving for this optimization problem
refers to as no clipping.
All latent vectors are sampled uniformly from the [−1, 1]100 hyper-cube. To enforce this constraint, we apply
the modiﬁed optimization

z ← clip(z − α∇z ||φ(z) − φ(z )||22).

For projected gradient, we replace components that are too large with the maximum allowed value and components that are too small with the minimum allowed value. The authors in [7] introduce a heuristic technique called stochastic clipping. When using stochastic clipping, instead of setting components to −1 or 1, we reassign the clipped components uniformly at random in the allowed range.
For the recovery of a real image the forward mapping φ(z) does not necessarily exist. We perform the following optimization in this case.

min ||I − φ(z )||22.
z

with stochastic clipping, where I denotes real images. We refer this latent vectors recovery methods as LVR. The generator in our experiments is trained with CelebA dataset [18].

No clipping 32.38

PSNR of reconstructed images with [7]

Projected Gradient Stochastic Clipping

33.04

33.40

Table 1: Reconstructed image quality evaluation for No clipping, projected gradient and stochastic gradient strategies as described in [7].

Fig. 3: Example recovered images from LFW dataset (no added noise) with stochastic gradient [7].
Example real images from CelebA dataset and their recovery using the LVR are shown in Fig 2. Additionally, some images from LFW [19] (the generator never saw these images) and their recovery are shown in Fig 3.
Authors in [7] note that the reverse projection can be used to remove Gaussian noise. In order to explore the denoising potential within this framework, we corrupt the real images with varying levels of Gaussian noise variance, and apply LVR for minz ||(I + η) − φ(z )||22, where I denotes real images and η denotes Gaussian noise variance. The above denoising methods do not require the noise variance a priori unlike traditional denoising methods, and still produce better denoising results.
In case of high noise variance, the recovered images using LVR methods appear to be blurred. In order to explore the deblurring potential, we apply LVR on N generated images with K different noise variances represented by (φ(zi) + ηk) and recover the corresponding latent vectors zik for those noise levels. Here, i indexes over 1 to N and k indexes over 1 to K. zk is the difference between average over N sample z and the average of their corresponding recovered zk for noise level k. We observe that, adding zk to recovered latent vectors from other generated images with noise variance k sharpens the recovered images. Interestingly, this happens while denoising real images. Empirically, there seems to exist vectors in latent space that can add sharpness in image space. If we denote the sharpness attribute in latent vector space as zsharpk for noise variance k, interestingly, we ﬁnd the quality of φ(z + zsharpk) is higher than φ(z ) for recovered latent vectors z with LVR.
4. EXPERIMENTAL RESULTS
We now summarize our experimental ﬁndings. All experiments are conducted with DCGANs as described by [2] and re-implemented in Tensorﬂow by [20]. We made necessary changes on top of [20]. We train the generator using the CelebA [18] dataset.

We ﬁrst perform the experiments for denoising of generated images after adding Gaussian noise with variance of 127 pixels units by applying different strategies as described in [7]. Stochastic clipping method outperforms projected gradient which performs better than no clipping strategy. Stochastic clipping method obtains more than 1dB higher PSNR than the without clipping strategy. Figure 4 shows the corresponding visual results.
We notice that the denoised images are signiﬁcantly smoother than the images with which the generator was trained on. In order to improve the denoising results further, we explore the latent space for additional sharpness. We compare the latent space sharpness attribute-based method as LVR-SA, and always use the baseline of latent vector recovery with stochastic clipping.
As described in section 3, we ﬁrst generate a set of 400 images, Ig, corrupt them with Gaussian noise with different variance. For each noise variance, we recover the latent vectors using stochastic clipping strategy. We then take the difference between average latent vectors that generated the image and the average latent vectors that were recovered. This difference serves as sharpness attribute. First, we add this sharpness attribute to the recovered vectors for those Ig images. We observe that after adding the sharpness attribute, the PSNR increases upto 1 dB. Next, we apply the same sharpness attribute while recovering a different set of real images, Ir. Interestingly, the same sharpness attribute helps increase the PSNR by more than 0.5 dB. Table 2 summarizes the above results, where the ﬁrst row corresponds to the former case and the second row corresponds to the later scenario respectively. Figure 5 shows the corresponding visualizations. For each column, the top images are the original images. We add Gaussian noise to those images and recover them in the middle row with stochastic clipping. Third row denotes the recovered images after adding the sharpness attribute SA. The generator is trained only on celebA [18]. In the left column, the images are sampled from CelebA dataset and in the right, the images are sampled from LFW [19] dataset.
Finally we compare the denoising results utilizing the above sharpness attribute method with stochastic clipping LVR and BM3D. Table 3 shows the results for different noise variances. The RGB images use 8-bit representation. The pixels can take values in the range of [0, 255] both inclusive for R,G, and B space. We experiment with high noise variance values. For low noise variance, the recovered images

Fig. 4: Image De-noising Results with LVR methods [7]. Top row: input noisy images to the algorithm; Reference generated images. Bottom row: Recovered images by LVR with no clipping; projected gradient and stochastic gradient methods.

same image sets different image sets

Effect of Sharpness attribute LVR LVR-SA
17.1 18.01 18.43 19.02

Table 2: Adding sharpness attribute to the recovered vectors increases enhances the image quality.

σ (in pixels)
127 184

Methods

BM3D LVR LVR-SA

29.10 18.55

33.4 33.60 22.0 22.21

Table 3: Reconstructed image quality evaluation by PSNR for different noise variance. For best BM3D reconstruction, corresponding noise variance is given. Unlike LVR, Denoising by BM3D and the proposed LVR-SA require noise variance.

Fig. 5: Sharpness attribute heuristics for images from from celebA dataset (left) and LFW dataset (right). The sharpness attribute S is added to the two scenarios.

with different methods yield similar quality image deniosing. Latent vector recovery (LVR) with stochastic clipping yields better denoising results. This LVR method does not require the noise variance as a prior knowledge. Moreover, adding the sharpness latent vector (LVR-SA) improves the image quality on top of LVR. BM3D and LVR-SA both require a-priori

knowledge of the noise variance. Figure 6 demonstrates the corresponding visual results. Denoising with the proposed method recovers clearly better quality images than BM3D.
5. CONCLUSIONS
We show that latent vector recovery from GAN, in practice, can be used for image denoising. The denoised image quality is superior to methods such as BM3D. Additionally, we show that sharpness can be treated as an attribute in latent vector space. Adding this sharpness attribute leads to even higher quality image denoising than simple latent vector recovery based methods.
6. REFERENCES
[1] Ian et al. Goodfellow, “Generative adversarial nets,” in Advances in neural information processing systems, 2014.
[2] Alec Radford, Luke Metz, and Soumith Chintala, “Unsupervised representation learning with deep convolutional generative adversarial networks,” arXiv preprint arXiv:1511.06434, 2015.
[3] Avinash Hindupur, “The GAN Zoo,” https:// deephunt.in/the-gan-zoo-79597dc8c347, 2016.
[4] Vishnu Makkapati and Arun Patro, Enhancing Symmetry in GAN Generated Fashion Images, pp. 405–410, Springer International Publishing, Cham, 2017.
[5] Jeff Donahue, Philipp Kra¨henbu¨hl, and Trevor Darrell, “Adversarial feature learning,” arXiv preprint arXiv:1605.09782, 2016.
[6] Antonia Creswell and Anil Anthony Bharath, “Inverting the generator of a generative adversarial network,” arXiv preprint arXiv:1611.05644, 2016.
[7] Zachary C. Lipton and Subarna Tripathi, “Precise recovery of latent vectors from generative adversarial networks,” CoRR, vol. abs/1702.04782, 2017.
[8] K. Dabov, A. Foi, V. Katkovnik, and K. Egiazarian, “Image denoising by sparse 3-d transform-domain collaborative ﬁltering,” Trans. Img. Proc., vol. 16, no. 8, pp. 2080–2095, Aug. 2007.
[9] P. Milanfar, “A tour of modern image ﬁltering: New insights and methods, both practical and theoretical,” IEEE Signal Processing Magazine, vol. 30, no. 1, pp. 106–128, Jan 2013.
[10] Kai Zhang, Wangmeng Zuo, and Lei Zhang, “Ffdnet: Toward a fast and ﬂexible solution for CNN based image denoising,” CoRR, vol. abs/1710.04026, 2017.

[11] Kai Zhang, Wangmeng Zuo, Yunjin Chen, Deyu Meng, and Lei Zhang, “Beyond a gaussian denoiser: Residual learning of deep CNN for image denoising,” CoRR, vol. abs/1608.03981, 2016.
[12] Nithish Divakar and R. Venkatesh Babu, “Image denoising via cnns: An adversarial approach,” CoRR, vol. abs/1708.00159, 2017.
[13] Aravindh Mahendran and Andrea Vedaldi, “Understanding deep image representations by inverting them,” in Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, 2015, pp. 5188–5196.
[14] Luke Metz, Ben Poole, David Pfau, and Jascha SohlDickstein, “Unrolled generative adversarial networks,” arXiv preprint arXiv:1611.02163, 2016.
[15] Vincent Dumoulin, Ishmael Belghazi, Ben Poole, Alex Lamb, Martin Arjovsky, Olivier Mastropietro, and Aaron Courville, “Adversarially learned inference,” in ICLR, 2017.
[16] Ashish Bora, Ajil Jalal, Eric Price, and Alexandros G. Dimakis, “Compressed sensing using generative models,” arXiv preprint arXiv:1703.03208, 2017.
[17] Alexander B. Jung, “Learning to avoid errors in gans by manipulating input spaces,” arXiv preprint arXiv:1707.00768, 2017.
[18] Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang, “Deep learning face attributes in the wild,” in Proceedings of International Conference on Computer Vision (ICCV), December 2015.
[19] Gary B. Huang, Manu Ramesh, Tamara Berg, and Erik Learned-Miller, “Labeled faces in the wild: A database for studying face recognition in unconstrained environments,” Tech. Rep. 07-49, University of Massachusetts, Amherst, October 2007.
[20] Brandon Amos, “Image Completion with Deep Learning in TensorFlow,” http://bamos.github.io/ 2016/08/09/deep-completion, 2016.

Fig. 6: Image denoising Results. Top row: original images from celebA dataset, input images to the algorithm with added Gaussian noise (127 noise variance in pixels) on input images. Bottom row: denoised images with BM3D, denoised images with proposed method.

