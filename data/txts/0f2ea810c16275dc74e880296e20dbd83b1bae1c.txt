Gated-Attention Readers for Text Comprehension
Bhuwan Dhingra∗ Hanxiao Liu∗ Zhilin Yang William W. Cohen Ruslan Salakhutdinov School of Computer Science Carnegie Mellon University
{bdhingra,hanxiaol,zhiliny,wcohen,rsalakhu}@cs.cmu.edu

arXiv:1606.01549v3 [cs.CL] 21 Apr 2017

Abstract
In this paper we study the problem of answering cloze-style questions over documents. Our model, the Gated-Attention (GA) Reader1, integrates a multi-hop architecture with a novel attention mechanism, which is based on multiplicative interactions between the query embedding and the intermediate states of a recurrent neural network document reader. This enables the reader to build query-speciﬁc representations of tokens in the document for accurate answer selection. The GA Reader obtains state-of-the-art results on three benchmarks for this task–the CNN & Daily Mail news stories and the Who Did What dataset. The effectiveness of multiplicative interaction is demonstrated by an ablation study, and by comparing to alternative compositional operators for implementing the gated-attention.
1 Introduction
A recent trend to measure progress towards machine reading is to test a system’s ability to answer questions about a document it has to comprehend. Towards this end, several large-scale datasets of cloze-style questions over a context document have been introduced recently, which allow the training of supervised machine learning systems (Hermann et al., 2015; Hill et al., 2016; Onishi et al., 2016). Such datasets can be easily constructed automatically and the unambiguous nature of their queries provides an objective benchmark to measure a system’s performance at text comprehension.
∗BD and HL contributed equally to this work. 1Source code is available on github: https:// github.com/bdhingra/ga-reader

Deep learning models have been shown to outperform traditional shallow approaches on text comprehension tasks (Hermann et al., 2015). The success of many recent models can be attributed primarily to two factors: (1) Multi-hop architectures (Weston et al., 2015; Sordoni et al., 2016; Shen et al., 2016), allow a model to scan the document and the question iteratively for multiple passes. (2) Attention mechanisms, (Chen et al., 2016; Hermann et al., 2015) borrowed from the machine translation literature (Bahdanau et al., 2014), allow the model to focus on appropriate subparts of the context document. Intuitively, the multi-hop architecture allows the reader to incrementally reﬁne token representations, and the attention mechanism re-weights different parts in the document according to their relevance to the query.
The effectiveness of multi-hop reasoning and attentions have been explored orthogonally so far in the literature. In this paper, we focus on combining both in a complementary manner, by designing a novel attention mechanism which gates the evolving token representations across hops. More speciﬁcally, unlike existing models where the query attention is applied either token-wise (Hermann et al., 2015; Kadlec et al., 2016; Chen et al., 2016; Hill et al., 2016) or sentence-wise (Weston et al., 2015; Sukhbaatar et al., 2015) to allow weighted aggregation, the Gated-Attention (GA) module proposed in this work allows the query to directly interact with each dimension of the token embeddings at the semantic-level, and is applied layer-wise as information ﬁlters during the multi-hop representation learning process. Such a ﬁne-grained attention enables our model to learn conditional token representations w.r.t. the given question, leading to accurate answer selections.
We show in our experiments that the proposed GA reader, despite its relative simplicity, consis-

tently improves over a variety of strong baselines on three benchmark datasets . Our key contribution, the GA module, provides a signiﬁcant improvement for large datasets. Qualitatively, visualization of the attentions at intermediate layers of the GA reader shows that in each layer the GA reader attends to distinct salient aspects of the query which help in determining the answer.
2 Related Work
The cloze-style QA task involves tuples of the form (d, q, a, C), where d is a document (context), q is a query over the contents of d, in which a phrase is replaced with a placeholder, and a is the answer to q, which comes from a set of candidates C. In this work we consider datasets where each candidate c ∈ C has at least one token which also appears in the document. The task can then be described as: given a document-query pair (d, q), ﬁnd a ∈ C which answers q. Below we provide an overview of representative neural network architectures which have been applied to this problem.
LSTMs with Attention: Several architectures introduced in Hermann et al. (2015) employ LSTM units to compute a combined document-query representation g(d, q), which is used to rank the candidate answers. These include the DeepLSTM Reader which performs a single forward pass through the concatenated (document, query) pair to obtain g(d, q); the Attentive Reader which ﬁrst computes a document vector d(q) by a weighted aggregation of words according to attentions based on q, and then combines d(q) and q to obtain their joint representation g(d(q), q); and the Impatient Reader where the document representation is built incrementally. The architecture of the Attentive Reader has been simpliﬁed recently in Stanford Attentive Reader, where shallower recurrent units were used with a bilinear form for the query-document attention (Chen et al., 2016).
Attention Sum: The Attention-Sum (AS) Reader (Kadlec et al., 2016) uses two bidirectional GRU networks (Cho et al., 2015) to encode both d and q into vectors. A probability distribution over the entities in d is obtained by computing dot products between q and the entity embeddings and taking a softmax. Then, an aggregation scheme named pointer-sum attention is further applied to sum the probabilities of the same entity, so that frequent entities the document will be favored compared to rare ones. Building on the

AS Reader, the Attention-over-Attention (AoA) Reader (Cui et al., 2017) introduces a two-way attention mechanism where the query and the document are mutually attentive to each other.
Mulit-hop Architectures: Memory Networks (MemNets) were proposed in Weston et al. (2015), where each sentence in the document is encoded to a memory by aggregating nearby words. Attention over the memory slots given the query is used to compute an overall memory and to renew the query representation over multiple iterations, allowing certain types of reasoning over the salient facts in the memory and the query. Neural Semantic Encoders (NSE) (Munkhdalai & Yu, 2017a) extended MemNets by introducing a write operation which can evolve the memory over time during the course of reading. Iterative reasoning has been found effective in several more recent models, including the Iterative Attentive Reader (Sordoni et al., 2016) and ReasoNet (Shen et al., 2016). The latter allows dynamic reasoning steps and is trained with reinforcement learning.
Other related works include Dynamic Entity Representation network (DER) (Kobayashi et al., 2016), which builds dynamic representations of the candidate answers while reading the document, and accumulates the information about an entity by max-pooling; EpiReader (Trischler et al., 2016) consists of two networks, where one proposes a small set of candidate answers, and the other reranks the proposed candidates conditioned on the query and the context; Bi-Directional Attention Flow network (BiDAF) (Seo et al., 2017) adopts a multi-stage hierarchical architecture along with a ﬂow-based attention mechanism; Bajgar et al. (2016) showed a 10% improvement on the CBT corpus (Hill et al., 2016) by training the AS Reader on an augmented training set of about 14 million examples, making a case for the community to exploit data abundance. The focus of this paper, however, is on designing models which exploit the available data efﬁciently.
3 Gated-Attention Reader
Our proposed GA readers perform multiple hops over the document (context), similar to the Memory Networks architecture (Sukhbaatar et al., 2015). Multi-hop architectures mimic the multistep comprehension process of human readers, and have shown promising results in several recent models for text comprehension (Sordoni et al.,

2016; Kumar et al., 2016; Shen et al., 2016). The contextual representations in GA readers, namely the embeddings of words in the document, are iteratively reﬁned across hops until reaching a ﬁnal attention-sum module (Kadlec et al., 2016) which maps the contextual representations in the last hop to a probability distribution over candidate answers.
The attention mechanism has been introduced recently to model human focus, leading to significant improvement in machine translation and image captioning (Bahdanau et al., 2014; Mnih et al., 2014). In reading comprehension tasks, ideally, the semantic meanings carried by the contextual embeddings should be aware of the query across hops. As an example, human readers are able to keep the question in mind during multiple passes of reading, to successively mask away information irrelevant to the query. However, existing neural network readers are restricted to either attend to tokens (Hermann et al., 2015; Chen et al., 2016) or entire sentences (Weston et al., 2015), with the assumption that certain sub-parts of the document are more important than others. In contrast, we propose a ﬁner-grained model which attends to components of the semantic representation being built up by the GRU. The new attention mechanism, called gated-attention, is implemented via multiplicative interactions between the query and the contextual embeddings, and is applied per hop to act as ﬁne-grained information ﬁlters during the multi-step reasoning. The ﬁlters weigh individual components of the vector representation of each token in the document separately.
The design of gated-attention layers is motivated by the effectiveness of multiplicative interaction among vector-space representations, e.g., in various types of recurrent units (Hochreiter & Schmidhuber, 1997; Wu et al., 2016) and in relational learning (Yang et al., 2014; Kiros et al., 2014). While other types of compositional operators are possible, such as concatenation or addition (Mitchell & Lapata, 2008), we ﬁnd that multiplication has strong empirical performance (section 4.3), where query representations naturally serve as information ﬁlters across hops.
3.1 Model Details
Several components of the model use a Gated Recurrent Unit (GRU) (Cho et al., 2015) which maps an input sequence X = [x1, x2, . . . , xT ] to an

ouput sequence H = [h1, h2, . . . , hT ] as follows:

rt = σ(Wrxt + Urht−1 + br), zt = σ(Wzxt + Uzht−1 + bz), h˜t = tanh(Whxt + Uh(rt ht−1) + bh), ht = (1 − zt) ht−1 + zt h˜t.

where denotes the Hadamard product or the

element-wise multiplication. rt and zt are called the reset and update gates respectively, and h˜t

the candidate output. A Bi-directional GRU (Bi-

GRU) processes the sequence in both forward and

backward directions to produce two sequences

[hf1

,

hf2

,

.

.

.

,

h

f T

]

and

[hb1

,

hb2

,

.

.

.

,

h

b T

],

which

are

concatenated at the output

G←R→U(X) = [hf1 hbT , . . . , hfT hb1] (1)

←→
where GRU(X) denotes the full output of the
Bi-GRU obtained by concatenating each forward state hfi and backward state hbT −i+1 at step i given
←→
the input X. Note GRU(X) is a matrix in R2nh×T
where nh is the number of hidden units in GRU. Let X(0) = [x(10), x(20), . . . x(|D0)|] denote the to-
ken embeddings of the document, which are also
inputs at layer 1 for the document reader below,
and Y = [y1, y2, . . . y|Q|] denote the token embeddings of the query. Here |D| and |Q| denote the
document and query lengths respectively.

3.1.1 Multi-Hop Architecture
Fig. 1 illustrates the Gated-Attention (GA) reader. The model reads the document and the query over K horizontal layers, where layer k receives the contextual embeddings X(k−1) of the document from the previous layer. The document embeddings are transformed by taking the full output of a document Bi-GRU (indicated in blue in Fig. 1):

←→ (k)

D(k) = GRUD (X(k−1))

(2)

At the same time, a layer-speciﬁc query representation is computed as the full output of a separate query Bi-GRU (indicated in green in Figure 1):

←→ (k)

Q(k) = GRUQ (Y )

(3)

Next, Gated-Attention is applied to D(k) and Q(k) to compute inputs for the next layer X(k).

X(k) = GA(D(k), Q(k))

(4)

where GA is deﬁned in the following subsection.

Figure 1: Gated-Attention Reader. Dashed lines represent dropout connections.

3.1.2 Gated-Attention Module
For brevity, let us drop the superscript k in this subsection as we are focusing on a particular layer. For each token di in D, the GA module forms a token-speciﬁc representation of the query q˜i using soft attention, and then multiplies the query representation element-wise with the document token representation. Speciﬁcally, for i = 1, . . . , |D|:

αi = softmax(Q di)

(5)

q˜i = Qαi

xi = di q˜i

(6)

In equation (6) we use the multiplication operator to model the interactions between di and q˜i. In the experiments section, we also report results for other choices of gating functions, including addition xi = di + q˜i and concatenation xi = di q˜i.

3.1.3 Answer Prediction Let q(K) = qf qTb − +1 be an intermediate output of the ﬁnal layer query Bi-GRU at the location of the cloze token in the query, and D(K) =
←→ (K)
GRUD (X(K−1)) be the full output of ﬁnal layer document Bi-GRU. To obtain the probability that
a particular token in the document answers the
query, we take an inner-product between these
two, and pass through a softmax layer:

s = softmax((q(K))T D(K))

(7)

where vector s deﬁnes a probability distribution over the |D| tokens in the document. The probability of a particular candidate c ∈ C as being the

answer is then computed by aggregating the probabilities of all document tokens which appear in c and renormalizing over the candidates:

Pr(c|d, q) ∝

si

(8)

i∈I(c,d)

where I(c, d) is the set of positions where a token in c appears in the document d. This aggregation operation is the same as the pointer sum attention applied in the AS Reader (Kadlec et al., 2016).
Finally, the candidate with maximum probability is selected as the predicted answer:

a∗ = argmaxc∈C Pr(c|d, q).

(9)

During the training phase, model parameters of GA are updated w.r.t. a cross-entropy loss between the predicted probabilities and the true answers.
3.1.4 Further Enhancements
Character-level Embeddings: Given a token w from the document or query, its vector space representation is computed as x = L(w)||C(w). L(w) retrieves the word-embedding for w from a lookup table L ∈ R|V |×nl, whose rows hold a vector for each unique token in the vocabulary. We also utilize a character composition model C(w) which generates an orthographic embedding of the token. Such embeddings have been previously shown to be helpful for tasks like Named Entity Recognition (Yang et al., 2016) and dealing with OOV tokens at test time (Dhingra et al., 2016). The embedding C(w) is generated by taking the ﬁnal outputs znfc and znbc of a Bi-GRU applied to embeddings from

a lookup table of characters in the token, and applying a linear transformation:
z = znfc ||znb c C(w) = W z + b
Question Evidence Common Word Feature (qecomm): Li et al. (2016) recently proposed a simple token level indicator feature which signiﬁcantly boosts reading comprehension performance in some cases. For each token in the document we construct a one-hot vector fi ∈ {0, 1}2 indicating its presence in the query. It can be incorporated into the GA reader by assigning a feature lookup table F ∈ RnF ×2 (we use nF = 2), taking the feature embedding ei = fiT F and appending it to the inputs of the last layer document BiGRU as, x(iK) fi for all i. We conducted several experiments both with and without this feature and observed some interesting trends, which are discussed below. Henceforth, we refer to this feature as the qe-comm feature or just feature.
4 Experiments and Results
4.1 Datasets
We evaluate the GA reader on ﬁve large-scale datasets recently proposed in the literature. The ﬁrst two, CNN and Daily Mail news stories2 consist of articles from the popular CNN and Daily Mail websites (Hermann et al., 2015). A query over each article is formed by removing an entity from the short summary which follows the article. Further, entities within each article were anonymized to make the task purely a comprehension one. N-gram statistics, for instance, computed over the entire corpus are no longer useful in such an anonymized corpus.
The next two datasets are formed from two different subsets of the Children’s Book Test (CBT)3 (Hill et al., 2016). Documents consist of 20 contiguous sentences from the body of a popular children’s book, and queries are formed by deleting a token from the 21st sentence. We only focus on subsets where the deleted token is either a common noun (CN) or named entity (NE) since simple language models already give human-level performance on the other types (cf. (Hill et al., 2016)).
2 https://github.com/deepmind/rc- data 3 http://www.thespermwhale.com/jaseweston/babi/ CBTest.tgz

The ﬁnal dataset is Who Did What4 (WDW) (Onishi et al., 2016), constructed from the LDC English Gigaword newswire corpus. First, article pairs which appeared around the same time and with overlapping entities are chosen, and then one article forms the document and a cloze query is constructed from the other. Missing tokens are always person named entities. Questions which are easily answered by simple baselines are ﬁltered out, to make the task more challenging. There are two versions of the training set—a small but focused “Strict” version and a large but noisy “Relaxed” version. We report results on both settings which share the same validation and test sets. Statistics of all the datasets used in our experiments are summarized in the Appendix (Table 5).
4.2 Performance Comparison
Tables 1 and 3 show a comparison of the performance of GA Reader with previously published results on WDW and CNN, Daily Mail, CBT datasets respectively. The numbers reported for GA Reader are for single best models, though we compare to both ensembles and single models from prior work. GA Reader-- refers to an earlier version of the model, unpublished but described in a preprint, with the following differences—(1) it does not utilize token-speciﬁc attentions within the GA module, as described in equation (5), (2) it does not use a character composition model, (3) it is initialized with word embeddings pretrained on the corpus itself rather than GloVe. A detailed analysis of these differences is studied in the next section. Here we present 4 variants of the latest GA Reader, using combinations of whether the qe-comm feature is used (+feature) or not, and whether the word lookup table L(w) is updated during training or ﬁxed to its initial value. Other hyperparameters are listed in Appendix A.
Interestingly, we observe that feature engineering leads to signiﬁcant improvements for WDW and CBT datasets, but not for CNN and Daily Mail datasets. We note that anonymization of the latter datasets means that there is already some feature engineering (it adds hints about whether a token is an entity), and these are much larger than the other four. In machine learning it is common to see the effect of feature engineering diminish with increasing data size. Similarly, ﬁxing the word embeddings provides an improvement for the WDW
4 https://tticnlp.github.io/who_did_what/

Table 1: Validation/Test accuracy (%) on WDW dataset for both “Strict”
and “Relaxed” settings. Results with “†” are cf previously published works.

Model
Human †
Attentive Reader † AS Reader † Stanford AR † NSE †
GA-- † GA (update L(w)) GA (ﬁx L(w)) GA (+feature, update L(w)) GA (+feature, ﬁx L(w))

Strict
Val Test
– 84
– 53 – 57 – 64 66.5 66.2
– 57 67.8 67.0 68.3 68.0 70.1 69.5 71.6 71.2

Relaxed
Val Test
––
– 55 – 59 – 65 67.0 66.7
– 60.0 67.0 66.6 69.6 69.1 70.9 71.0 72.6 72.6

Table 2: Top: Performance of different gating
functions. Bottom: Effect of varying the number of hops K. Results on WDW without using the qe-comm feature and with ﬁxed L(w).

Gating Function
Sum Concatenate Multiply K 1 (AS) † 2 3 4

Accuracy Val Test 64.9 64.5 64.4 63.7 68.3 68.0
– 57 65.6 65.6 68.3 68.0 68.3 68.2

and CBT, but not for CNN and Daily Mail. This is not surprising given that the latter datasets are larger and less prone to overﬁtting.
Comparing with prior work, on the WDW dataset the basic version of the GA Reader outperforms all previously published models when trained on the Strict setting. By adding the qecomm feature the performance increases by 3.2% and 3.5% on the Strict and Relaxed settings respectively to set a new state of the art on this dataset. On the CNN and Daily Mail datasets the GA Reader leads to an improvement of 3.2% and 4.3% respectively over the best previous single models. They also outperform previous ensemble models, setting a new state of that art for both datasets. For CBT-NE, GA Reader with the qecomm feature outperforms all previous single and ensemble models except the AS Reader trained on the much larger BookTest Corpus (Bajgar et al., 2016). Lastly, on CBT-CN the GA Reader with the qe-comm feature outperforms all previously published single models except the NSE, and AS Reader trained on a larger corpus. For each of the 4 datasets on which GA achieves the top performance, we conducted one-sample proportion tests to test whether GA is signiﬁcantly better than the second-best baseline. The p-values are 0.319 for CNN, <0.00001 for DailyMail, 0.028 for CBTNE, and <0.00001 for WDW. In other words, GA statistically signiﬁcantly outperforms all other baselines on 3 out of those 4 datasets at the 5% signiﬁcance level. The results could be even more signiﬁcant under paired tests, however we did not have access to the predictions from the baselines.

4.3 GA Reader Analysis
In this section we do an ablation study to see the effect of Gated Attention. We compare the GA Reader as described here to a model which is exactly the same in all aspects, except that it passes document embeddings D(k) in each layer directly to the inputs of the next layer without using the GA module. In other words X(k) = D(k) for all k > 0. This model ends up using only one query GRU at the output layer for selecting the answer from the document. We compare these two variants both with and without the qe-comm feature on CNN and WDW datasets for three subsets of the training data - 50%, 75% and 100%. Test set accuracies for these settings are shown in Figure 2. On CNN when tested without feature engineering, we observe that GA provides a signiﬁcant boost in performance compared to without GA. When tested with the feature it still gives an improvement, but the improvement is signiﬁcant only with 100% training data. On WDW-Strict, which is a third of the size of CNN, without the feature we see an improvement when using GA versus without using GA, which becomes signiﬁcant as the training set size increases. When tested with the feature on WDW, for a small data size without GA does better than with GA, but as the dataset size increases they become equivalent. We conclude that GA provides a boost in the absence of feature engineering, or as the training set size increases.
Next we look at the question of how to gate intermediate document reader states from the query, i.e. what operation to use in equation 6. Table

Table 3: Validation/Test accuracy (%) on CNN, Daily Mail and CBT. Results marked with “†” are cf previously published
works. Results marked with “‡” were obtained by training on a larger training set. Best performance on standard training sets is in bold, and on larger training sets in italics.

Model
Humans (query) † Humans (context + query) †
LSTMs (context + query) † Deep LSTM Reader † Attentive Reader † Impatient Reader † MemNets † AS Reader † DER Network † Stanford AR (relabeling) † Iterative Attentive Reader † EpiReader † AoA Reader † ReasoNet † NSE † BiDAF †
MemNets (ensemble) † AS Reader (ensemble) † Stanford AR (relabeling,ensemble) † Iterative Attentive Reader (ensemble) † EpiReader (ensemble) †
AS Reader (+BookTest) † ‡ AS Reader (+BookTest,ensemble) † ‡
GA-GA (update L(w)) GA (ﬁx L(w)) GA (+feature, update L(w)) GA (+feature, ﬁx L(w))

CNN
Val Test
–– ––
–– 55.0 57.0 61.6 63.0 61.8 63.8 63.4 66.8 68.6 69.5 71.3 72.9 73.8 73.6 72.6 73.3 73.4 74.0 73.1 74.4 72.9 74.7
–– 76.3 76.9
66.2 69.4 73.9 75.4 77.2 77.6 75.2 76.1
––
–– ––
73.0 73.8 77.9 77.9 77.9 77.8 77.3 76.9 76.7 77.4

Daily Mail
Val Test
–– ––
–– 63.3 62.2 70.5 69.0 69.0 68.0
–– 75.0 73.9
–– 77.6 76.6
–– –– –– 77.6 76.6 –– 80.3 79.6
–– 78.7 77.7 80.2 79.2
–– ––
–– ––
76.7 75.7 81.5 80.9 80.4 79.6 80.7 80.0 80.0 79.3

CBT-NE
Val Test
– 52.0 – 81.6
51.2 41.8 –– –– ––
70.4 66.6 73.8 68.6
–– –– 75.2 68.6 75.3 69.7 77.8 72.0 –– 78.2 73.2 ––
–– 76.2 71.0
–– 76.9 72.0 76.6 71.8
80.5 76.2 82.3 78.4
74.9 69.0 76.7 70.1 77.2 71.4 77.2 73.3 78.5 74.9

CBT-CN
Val Test
– 64.4 – 81.6
62.6 56.0 –– –– ––
64.2 63.0 68.8 63.4
–– –– 72.1 69.2 71.5 67.4 72.2 69.4 –– 74.3 71.9 ––
–– 71.1 68.9
–– 74.1 71.0 73.6 70.6
83.2 80.8 85.7 83.7
69.0 63.9 69.8 67.3 71.6 68.0 73.0 69.8 74.4 70.7

2 (top) shows the performance on WDW dataset for three common choices – sum (x = d + q), concatenate (x = d q) and multiply (x = d q). Empirically we ﬁnd element-wise multiplication does signiﬁcantly better than the other two, which justiﬁes our motivation to “ﬁlter” out document features which are irrelevant to the query.
At the bottom of Table 2 we show the effect of varying the number of hops K of the GA Reader on the ﬁnal performance. We note that for K = 1, our model is equivalent to the AS Reader without any GA modules. We see a steep and steady rise in accuracy as the number of hops is increased from K = 1 to 3, which remains constant beyond

that. This is a common trend in machine learning as model complexity is increased, however we note that a multi-hop architecture is important to achieve a high performance for this task, and provide further evidence for this in the next section.
4.4 Ablation Study for Model Components
Table 4 shows accuracy on WDW by removing one component at a time. The steepest reduction is observed when we replace pretrained GloVe vectors with those pretrained on the corpus itself. GloVe vectors were trained on a large corpus of about 6 billion tokens (Pennington et al., 2014), and provide an important source of prior knowl-

Figure 2: Performance in accuracy with and without the Gated-Attention module over different training sizes. p-values for an exact one-sided Mcnemar’s test are given inside the parentheses for each setting.

CNN (w/o qe-comm feature)

0.78 0.76 0.74 0.72
0.7 0.68 0.66
50% (<0.01)

No Gating With Gating
75% (<0.01)

100% (<0.01)

CNN (w qe-comm feature)

0.78 0.76 0.74 0.72
0.7 0.68 0.66
50% (0.07)

No Gating With Gating
75% (0.13)

100% (<0.01)

WDW (w/o qe-comm feature)

0.7

0.69

No Gating

0.68 With Gating

0.67

0.66

0.65

0.64

0.63

0.62

0.61

0.6

50%

75%

(0.28) (<0.01)

100% (<0.01)

WDW (w qe-comm feature)

0.7 0.69 0.68 0.67 0.66 0.65 0.64 0.63 0.62 0.61
0.6 50% (<0.01)

No Gating With Gating
75% (0.42)

100% (0.27)

Table 4: Ablation study on WDW dataset, without using
the qe-comm feature and with ﬁxed L(w). Results marked with † are cf Onishi et al. (2016).

Model
GA −char −token-attentions (eq. 5) −glove, +corpus
GA--†

Accuracy
Val Test
68.3 68.0 66.9 66.9 65.7 65.0 64.0 62.5
– 57

edge for the model. Note that the strongest baseline on WDW, NSE (Munkhdalai & Yu, 2017b), also uses pretrained GloVe vectors, hence the comparison is fair in that respect. Next, we observe a substantial drop when removing tokenspeciﬁc attentions over the query in the GA module, which allow gating individual tokens in the document only by parts of the query relevant to that token rather than the overall query representation. Finally, removing the character embeddings, which were only used for WDW and CBT, leads to a reduction of about 1% in the performance.
4.5 Attention Visualization
To gain an insight into the reading process employed by the model we analyzed the attention distributions at intermediate layers of the reader. Figure 3 shows an example from the validation set of WDW dataset (several more are in the Appendix). In each ﬁgure, the left and middle plots visualize attention over the query (equation 5) for candidates in the document after layers 1 & 2 respectively. The right plot shows attention over candi-

dates in the document of cloze placeholder (XXX) in the query at the ﬁnal layer. The full document, query and correct answer are shown at the bottom.
A generic pattern observed in these examples is that in intermediate layers, candidates in the document (shown along rows) tend to pick out salient tokens in the query which provide clues about the cloze, and in the ﬁnal layer the candidate with the highest match with these tokens is selected as the answer. In Figure 3 there is a high attention of the correct answer on financial regulatory standards in the ﬁrst layer, and on us president in the second layer. The incorrect answer, in contrast, only attends to one of these aspects, and hence receives a lower score in the ﬁnal layer despite the n-gram overlap it has with the cloze token in the query. Importantly, different layers tend to focus on different tokens in the query, supporting the hypothesis that the multihop architecture of GA Reader is able to combine distinct pieces of information to answer the query.
5 Conclusion
We presented the Gated-Attention reader for answering cloze-style questions over documents. The GA reader features a novel multiplicative gating mechanism, combined with a multi-hop architecture. Our model achieves the state-of-theart performance on several large-scale benchmark datasets with more than 4% improvements over competitive baselines. Our model design is backed up by an ablation study showing statistically signiﬁcant improvements of using Gated Attention as information ﬁlters. We also showed empirically that multiplicative gating is superior to addi-

Figure 3: Layer-wise attention visualization of GA Reader trained on WDW-Strict. See text for details.

tion and concatenation operations for implementing gated-attentions, though a theoretical justiﬁcation remains part of future research goals. Analysis of document and query attentions in intermediate layers of the reader further reveals that the model iteratively attends to different aspects of the query to arrive at the ﬁnal answer. In this paper we have focused on text comprehension, but we believe that the Gated-Attention mechanism may beneﬁt other tasks as well where multiple sources of information interact.
Acknowledgments
This work was funded by NSF under CCF1414030 and Google Research.
References
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly learning to align and translate. arXiv preprint arXiv:1409.0473, 2014.
Ondrej Bajgar, Rudolf Kadlec, and Jan Kleindienst. Embracing data abundance: Booktest dataset for reading comprehension. arXiv preprint arXiv:1610.00956, 2016.
Danqi Chen, Jason Bolton, and Christopher D Manning. A thorough examination of the cnn/daily mail reading comprehension task. ACL, 2016.
Kyunghyun Cho, Bart Van Merrie¨nboer, Caglar Gulcehre, Dzmitry Bahdanau, Fethi Bougares, Holger

Schwenk, and Yoshua Bengio. Learning phrase representations using rnn encoder-decoder for statistical machine translation. ACL, 2015.
Yiming Cui, Zhipeng Chen, Si Wei, Shijin Wang, Ting Liu, and Guoping Hu. Attention-over-attention neural networks for reading comprehension. ACL, 2017.
Bhuwan Dhingra, Zhong Zhou, Dylan Fitzpatrick, Michael Muehl, and William W Cohen. Tweet2vec: Character-based distributed representations for social media. ACL, 2016.
Karl Moritz Hermann, Tomas Kocisky, Edward Grefenstette, Lasse Espeholt, Will Kay, Mustafa Suleyman, and Phil Blunsom. Teaching machines to read and comprehend. In Advances in Neural Information Processing Systems, pp. 1684–1692, 2015.
Felix Hill, Antoine Bordes, Sumit Chopra, and Jason Weston. The goldilocks principle: Reading children’s books with explicit memory representations. ICLR, 2016.
Sepp Hochreiter and Ju¨rgen Schmidhuber. Long shortterm memory. Neural computation, 9(8):1735– 1780, 1997.
Rudolf Kadlec, Martin Schmid, Ondrej Bajgar, and Jan Kleindienst. Text understanding with the attention sum reader network. ACL, 2016.
Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. ICLR, 2015.
Ryan Kiros, Richard Zemel, and Ruslan R Salakhutdinov. A multiplicative model for learning distributed text-based attribute representations. In Advances in Neural Information Processing Systems, pp. 2348– 2356, 2014.

Sosuke Kobayashi, Ran Tian, Naoaki Okazaki, and Kentaro Inui. Dynamic entity representations with max-pooling improves machine reading. In NAACLHLT, 2016.
Ankit Kumar, Ozan Irsoy, Jonathan Su, James Bradbury, Robert English, Brian Pierce, Peter Ondruska, Ishaan Gulrajani, and Richard Socher. Ask me anything: Dynamic memory networks for natural language processing. ICML, 2016.
Peng Li, Wei Li, Zhengyan He, Xuguang Wang, Ying Cao, Jie Zhou, and Wei Xu. Dataset and neural recurrent sequence labeling model for opendomain factoid question answering. arXiv preprint arXiv:1607.06275, 2016.
Jeff Mitchell and Mirella Lapata. Vector-based models of semantic composition. In ACL, pp. 236–244, 2008.
Volodymyr Mnih, Nicolas Heess, Alex Graves, et al. Recurrent models of visual attention. In Advances in Neural Information Processing Systems, pp. 2204– 2212, 2014.
Tsendsuren Munkhdalai and Hong Yu. Neural semantic encoders. EACL, 2017a.
Tsendsuren Munkhdalai and Hong Yu. Reasoning with memory augmented neural networks for language comprehension. ICLR, 2017b.
Takeshi Onishi, Hai Wang, Mohit Bansal, Kevin Gimpel, and David McAllester. Who did what: A largescale person-centered cloze dataset. EMNLP, 2016.
Razvan Pascanu, Tomas Mikolov, and Yoshua Bengio. On the difﬁculty of training recurrent neural networks. ICML (3), 28:1310–1318, 2013.
Jeffrey Pennington, Richard Socher, and Christopher D. Manning. Glove: Global vectors for word representation. In Empirical Methods in Natural Language Processing (EMNLP), pp. 1532– 1543, 2014. URL http://www.aclweb.org/ anthology/D14-1162.
Minjoon Seo, Aniruddha Kembhavi, Ali Farhadi, and Hannaneh Hajishirzi. Bidirectional attention ﬂow for machine comprehension. ICLR, 2017.
Yelong Shen, Po-Sen Huang, Jianfeng Gao, and Weizhu Chen. Reasonet: Learning to stop reading in machine comprehension. arXiv preprint arXiv:1609.05284, 2016.
Alessandro Sordoni, Phillip Bachman, and Yoshua Bengio. Iterative alternating neural attention for machine reading. arXiv preprint arXiv:1606.02245, 2016.
Sainbayar Sukhbaatar, Jason Weston, Rob Fergus, et al. End-to-end memory networks. In Advances in Neural Information Processing Systems, pp. 2431–2439, 2015.

Theano Development Team. Theano: A Python framework for fast computation of mathematical expressions. arXiv e-prints, abs/1605.02688, May 2016. URL http://arxiv.org/abs/1605. 02688.
Adam Trischler, Zheng Ye, Xingdi Yuan, and Kaheer Suleman. Natural language comprehension with the epireader. EMNLP, 2016.
Jason Weston, Sumit Chopra, and Antoine Bordes. Memory networks. ICLR, 2015.
Yuhuai Wu, Saizheng Zhang, Ying Zhang, Yoshua Bengio, and Ruslan Salakhutdinov. On multiplicative integration with recurrent neural networks. Advances in Neural Information Processing Systems, 2016.
Bishan Yang, Wen-tau Yih, Xiaodong He, Jianfeng Gao, and Li Deng. Learning multi-relational semantics using neural-embedding models. NIPS Workshop on Learning Semantics, 2014.
Zhilin Yang, Ruslan Salakhutdinov, and William Cohen. Multi-task cross-lingual sequence tagging from scratch. arXiv preprint arXiv:1603.06270, 2016.
A Implementation Details
Our model was implemented using the Theano (Theano Development Team, 2016) and Lasagne5 Python libraries. We used stochastic gradient descent with ADAM updates for optimization, which combines classical momentum and adaptive gradients (Kingma & Ba, 2015). The batch size was 32 and the initial learning rate was 5 × 10−4 which was halved every epoch after the second epoch. The same setting is applied to all models and datasets. We also used gradient clipping with a threshold of 10 to stabilize GRU training (Pascanu et al., 2013). We set the number of layers K to be 3 for all experiments. The number of hidden units for the character GRU was set to 50. The remaining two hyperparameters—size of document and query GRUs, and dropout rate—were tuned on the validation set, and their optimal values are shown in Table 6. In general, the optimal GRU size increases and the dropout rate decreases as the corpus size increases.
The word lookup table was initialized with 100d GloVe vectors6 (Pennington et al., 2014) and OOV tokens at test time were assigned unique random vectors. We empirically observed that initializing with pre-trained embeddings gives higher performance compared to random initialization for all
5 https://lasagne.readthedocs.io/en/latest/ 6 http://nlp.stanford.edu/projects/glove/

Table 5: Dataset statistics.

# train # validation
# test # vocab max doc length

CNN
380,298 3,924 3,198
118,497 2,000

Daily Mail
879,450 64,835 53,182 208,045
2,000

CBT-NE
108,719 2,000 2,500 53,063 1,338

CBT-CN
120,769 2,000 2,500
53,185 1,338

WDW-Strict
127,786 10,000 10,000 347,406 3,085

WDW-Relaxed
185,978 10,000 10,000 308,602 3,085

Table 6: Hyperparameter settings for each dataset. dim() indicates hidden state size of GRU.

Hyperparameter
Dropout
←→
dim(GRU∗)

CNN 0.2 256

Daily Mail 0.1 256

CBT-NE 0.4 128

CBT-CN 0.4 128

WDW-Strict 0.3 128

WDW-Relaxed 0.3 128

datasets. Furthermore, for smaller datasets (WDW and CBT) we found that ﬁxing these embeddings to their pretrained values led to higher test performance, possibly since it avoids overﬁtting. We do not use the character composition model for CNN and Daily Mail, since their entities (and hence candidate answers) are anonymized to generic tokens. For other datasets the character lookup table was randomly initialized with 25d vectors. All other parameters were initialized to their default values as speciﬁed in the Lasagne library.
B Attention Plots

Figure 4: Layer-wise attention visualization of GA Reader trained on WDW-Strict. See text for details.

Figure 5: Layer-wise attention visualization of GA Reader trained on WDW-Strict. See text for details.

Figure 6: Layer-wise attention visualization of GA Reader trained on WDW-Strict. See text for details.

Figure 7: Layer-wise attention visualization of GA Reader trained on WDW-Strict. See text for details.

