arXiv:2111.00965v1 [cs.LG] 1 Nov 2021

iFlow: Numerically Invertible Flows for Efﬁcient Lossless Compression via a Uniform Coder
Shifeng Zhang, Ning Kang, Tom Ryder, Zhenguo Li Huawei Noah’s Ark Lab
{zhangshifeng4, kang.ning2, tom.ryder1, li.zhenguo}.huawei.com
Abstract
It was estimated that the world produced 59ZB (5.9 × 1013GB) of data in 2020, resulting in the enormous costs of both data storage and transmission. Fortunately, recent advances in deep generative models have spearheaded a new class of socalled "neural compression" algorithms, which signiﬁcantly outperform traditional codecs in terms of compression ratio. Unfortunately, the application of neural compression garners little commercial interest due to its limited bandwidth; therefore, developing highly efﬁcient frameworks is of critical practical importance. In this paper, we discuss lossless compression using normalizing ﬂows which have demonstrated a great capacity for achieving high compression ratios. As such, we introduce iFlow, a new method for achieving efﬁcient lossless compression. We ﬁrst propose Modular Scale Transform (MST) and a novel family of numerically invertible ﬂow transformations based on MST. Then we introduce the Uniform Base Conversion System (UBCS), a fast uniform-distribution codec incorporated into iFlow, enabling efﬁcient compression. iFlow achieves state-of-the-art compression ratios and is 5× quicker than other high-performance schemes. Furthermore, the techniques presented in this paper can be used to accelerate coding time for a broad class of ﬂow-based algorithms.
1 Introduction
The volume of data, measured in terms of IP trafﬁc, is currently witnessing an exponential yearon-year growth [13]. Consequently, the cost of transmitting and storing data is rapidly becoming prohibitive for service providers, such as cloud and streaming platforms. These challenges increasingly necessitate the need for the development of high-performance lossless compression codecs.
One promising solution to this problem has been the development of a new class of so-called “neural compression” algorithms [30, 38, 18, 4, 17, 37, 26, 31, 6, 41]. These methods typically posit a deep probabilistic model of the data distribution, which, in combination with entropy coders, can be used to compress data with the minimal codelength bounded by the negative log-likelihood [29]. However, despite reliably improved compression performance compared to traditional codecs [14, 33, 9, 34], meaningful commercial applications have been limited by impractically slow coding speed.
In this paper, we focus on developing approaches with deep probabilistic models based on normalizing ﬂows [11, 25, 32, 27, 7, 28, 23]. A normalizing ﬂow admits a learnable bijective mapping between input data and a latent variable representation. In this paradigm, inputs can be compressed by ﬁrst transforming data to latent variables, with the resulting output encoded by a prior distribution. Compared to other classes of generative models, normalizing ﬂows typically perform best in both tasks of probability density estimation (as compared with variational autoencoders [24, 15, 8]) and inference speed (as compared with autoregressive factorizations [35, 39, 22]). This suggests that compression with ﬂows can jointly achieve high compression ratios along with fast coding times.
35th Conference on Neural Information Processing Systems (NeurIPS 2021), Sydney, Australia.

IDF(++), iVPF
⌊Θ⌉

encoding
𝐳 Quantize

Φ⋅𝑥 𝑧
Direct/MAT
𝑥
Direct: 𝑧 ← 𝑥 Φ = 1 MAT: 𝑧 ← Φ ⋅ 𝑥 ∏Φ = 1

𝑧 = Φ ⋅ 𝑥 + Θ Flow layer
(Φ = 1 or ∏Φ = 1)
Quantize

𝑧=𝑓 𝑥

Flow layer

decoding Dequant

decoding

𝐱

LBB
encoding

De 𝑁 0, 𝜎𝑓′ 2
𝑓𝑥 𝑧

iFlow (Proposed)

encoding

𝑓 𝑥𝑙 𝑧 𝑓 𝑥ℎ
MST

𝐳 𝑥 𝑓−1 𝑧 En 𝑁 0, 𝜎2 de/encoding

𝐳 𝑥 𝑥𝑙 𝑥ℎ MST: 𝑧 ← 𝑎 ⋅ 𝑥 − 𝑥𝑙 𝑎 = 𝑓 𝑥ℎ −𝑓 𝑥𝑙 𝑥ℎ−𝑥𝑙

+ 𝑓 𝑥𝑙 ,

Flow layer

𝑧 = 𝑓 𝑥 iFlow layer MST

de/encoding Flow layer

iFlow layer MST

Dequant
𝐱

decoding

Dequant
𝐱

Compression ratio

Compression bandwidth

Figure 1: Illustration of IDF(++), iVPF, LBB and the proposed iFlow method. Flow layers with darker color denote higher expressive power. The top-right of each model illustration shows the key procedure of exact bijections between x¯ and z¯. The compression ratio and bandwidth are listed below.

Unfortunately, lossless compression requires discrete data for entropy coding, and the continuous bijections of normalizing ﬂows would not guarantee discrete latent variables. As such, transformations would require discretization, resulting in a loss of information [41, 3]. To resolve this issue, Integer Discrete Flows (IDF) [18, 4] (Fig. 1, left) proposed an invertible mapping between discrete data and latent variables. Similarly, iVPF [41] achieves a discrete-space bijection using volume-preserving ﬂows. However, the above models must introduce constraints on ﬂow layers to ensure a discretespace bijection, which limits the expressivity of the transformation. Local Bits-Back Coding (LBB) [17] (Fig. 1, middle) was the ﬁrst approach to succeed in lossless coding with the ﬂexible family of continuous ﬂows. It resolves the information loss by coding numerical errors with the rANS coder [12]. However, the coder is extraordinarily slow, making the method impractical.
In this paper, we introduce iFlow: a numerically invertible ﬂow-based neural compression codec that bridges the gap between high-ﬁdelity density estimators and practical coding speed. To achieve this we introduce two novelties: Modular Scale Transform (MST) and Uniform Base Conversion Systems (UBCS). MST presents a ﬂexible family of bijections in discrete space, deriving an invertible class of ﬂows suitable for lossless compression. UBCS, built on the uniform distribution, permits a highly efﬁcient entropy coding compatible with MST. The main ideas are illustrated in Fig. 1(right). We test our approach across a range of image datasets against both traditional and neural compression techniques. Experimentally we demonstrate that our method achieves state-of-the-art compression ratios, with coding time 5× quicker than that of the next-best scheme, LBB.

2 Numerically Invertible Flows and Lossless Compression

Let f : X → Z be our normalizing ﬂow, which we build as a composition of layers such that f = fL ◦ ... ◦ f2 ◦ f1. Deﬁning d-dimensional y0 = x ∈ X and yL = z ∈ Z, the latents can be computed as yl = fl(yl−1), with pX (x) calculated according to

L

log pX (x) = log pZ (z) + log | det Jfl (yl−1)|,

(1)

l=1

where Jfl (x) is the Jocabian matrix of the transformation fl at yl−1. In this paper, we use log to denote base 2 logarithms. Training the ﬂow should minimize the negative log-likelihood − log pX (x). The inverse ﬂow is deﬁned as f −1 = f1−1 ◦ ... ◦ fL−1, such that f −1(z) = x. There are many types of invertible bijections, fl. Popular choices include element-wise, autoregressive (e.g. coupling
layers) [41] and 1 × 1 convolution transformations [25].

To perform lossless compression with normalizing ﬂows, the input data should be transformed to latent variables, which are then encoded with a prior distribution. As data and encoded bits should be in binary format, x and z must be discrete, with a bijection between discrete inputs and outputs

2

established. However, as discussed, this operation is usually intractable with popular classes of transformations used in continuous ﬂows due to the numerical errors induced by discretization.
In this section, we introduce a novel algorithm derived from continuous ﬂows that allows us to achieve an exact bijiective mapping between discrete x and discrete z. We present the general idea of a ﬂow layer’s numerical invertibility in discrete space in Sec. 2.1. We then introduce our ﬂow layers in Sec. 2.2 and 2.3, with their application to compression discussed in Sec. 2.4 and 2.5.

2.1 Invertibility of Flows in Discrete Space

To discretize the data, we follow [41] and adopt k-precision quantization to assign ﬂoating points to

discretization bins such that

2k · x

x¯ = 2k ,

(2)

where · is the ﬂoor function. The associated quantization error is bounded by |x¯ − x| < 2−k. Any

d-dimensional x can be quantized into bins with volume δ = 2−kd. The probability mass of x¯ can

then be approximated by P (x¯) = p(x¯)δ, such that the theoretical codelength is − log(p(x¯)δ).

Denote our proposed numerically invertible ﬂow (iFlow) according to f¯ = f¯L ◦ ... ◦ f¯1. The input
and output should be subject to k-precision quantization, where each layer should be appropriately invertible such that y¯l−1 ≡ f¯l−1(f¯l(y¯l−1)). Denoting y¯0 = x and z¯ = y¯L, it is further expected that z¯ = f¯(x) and x ≡ f¯−1(z¯). We will show in the following subsections that f¯ can be derived from any continuous ﬂow f in such a way that the error between f¯(x) and f (x) is negligible.

2.2 Numerically Invertible Element-Wise Flows
We begin by describing our approach for element-wise ﬂows z = f (x), where f is a monotonic element-wise transformation. For notation simplicity, we assume that the ﬂow contains just one layer. In most cases, f does not present a unique inverse in discrete space, such that f −1(z¯) = x. In what follows, we introduce an approach to derive an invertible, discrete-space operation from any element-wise ﬂow transformation. For simplicity, we denote the inputs and output pairs of a continuous ﬂow as x and z = f (x); and we denote the k-precision quantized input-output pairs of iFlow as x¯ and z¯ = f¯(x¯).

2.2.1 Scale Flow

Algorithm 1 Modular Scale Transform (MST): Numerically Invertible Scale Flow f (x) = R/S · x.

Forward MST: z¯ = f¯(x¯).
1: xˆ ← 2k · x¯; 2: Decode rd using U (0, R); yˆ ← R · xˆ + rd; 3: zˆ ← yˆ/S , re ← yˆ mod S; 4: Encode re using U (0, S); 5: return z¯ ← zˆ/2k.

Inverse MST: x¯ = f¯−1(z¯).
1: zˆ ← 2k · z¯; 2: Decode re using U (0, S); yˆ ← S · zˆ + re; 3: xˆ ← yˆ/R , rd ← yˆ mod R; 4: Encode rd using U (0, R); 5: return x¯ ← xˆ/2k.

We begin with the scale transformation deﬁned as z = f (x) = a · x, (a > 0), from which we are able to build more complex ﬂow layers. The input can be converted to an integer with xˆ = 2k · x¯, and the latent variable z¯ can be recovered from integer zˆ by z¯ = zˆ/2k. Inspired by MAT in iVPF [41], we ﬁrst approximate a with a fractional such that a ≈ RS , where R, S ∈ N. Denote yˆ = R · xˆ + rd where rd is sampled uniformly from {0, 1, ..., R − 1}, we can obtain zˆ with zˆ = yˆ/S , and the remainder re = yˆ mod R can be encoded to eliminate the error. It is clear that (xˆ, rd) ↔ yˆ ↔ (zˆ, re) are bijections.
Let U (0, A) be the uniform distribution such that P (s) = A1 , s ∈ {0, 1, ..., A − 1}. The numerically invertible scale ﬂow f¯ is displayed in Alg. 1. As the modular operation is essential to Alg. 1, we name it the Modular Scale Transform (MST). Setting S and R = round(S · a) to be large, we observe that the following propositions hold.
Proposition 1. [41] |z¯ − f (x¯)| < O(S−1, 2−k).
Proposition 2. The codelength of MST is Lf (x¯, z¯) = log S − log R ≈ − log |a| = − log |f (x¯)|.

3

Proposition 1 establishes that the error is small if S and k are large. Proposition 2 demonstrates that the codelength is almost exactly the log-Jocabian of f . The above properties and the correctness of the algorithm are discussed in the Appendix. Further note that, with the exception of the usual encoding and decoding processes, MST’s operations can be parallelized, resulting in minimal additional overhead. In contrast, MAT’s operation in iVPF [41] only deals with volume-preserving afﬁne transform and is performed sequentially along dimensions, limiting its usage and efﬁciency.
2.2.2 General Element-wise Flow

Algorithm 2 Numerically Invertible Element-wise Flows

Forward: z¯ = f¯(x¯).

1: Get x¯l, x¯h, z¯l, z¯h given x¯, so that x¯ ∈ [x¯l, x¯h);

2: Set large S; get R with Eq. (4); x¯ ← x¯ − x¯l;

3: Get z¯ with forward MST in Alg. 1, given input x¯

and coefﬁcients R, S;

4: return z¯ = z¯ + z¯l.

z¯ ∈ [z¯l, z¯h).

Inverse: x¯ = f¯−1(z¯).

1: Get x¯l, x¯h, z¯l, z¯h given z¯, so that z¯ ∈ [z¯l, z¯h);

2: Set large S; get R with Eq. (4); z¯ ← z¯ − z¯l;

3: Get x¯ with inverse MST in Alg. 1, given input z¯

and coefﬁcients R, S;

4: return x¯ = x¯ + x¯l.

x¯ ∈ [x¯l, x¯h).

For simplicity, we assume the non-linear f is monotonically increasing. For a monotonically decreasing f , we simply invert the sign: −f .
MST in Alg. 1 works with linear transformations, and is incompatible with non-linear functions. Motivated by linear interpolation, we can approximate the non-linear ﬂow with a piecewise linear function. In general, consider input x¯ to be within an interval x¯ ∈ [x¯l, x¯h)1 and z¯l = f (x¯l), z¯h = f (x¯h). The linear interpolation of f is then

finp(x) = z¯h − z¯l (x¯ − x¯l) + z¯l. (3) x¯h − x¯l

It follows that z¯ can be derived from MST with input x¯−x¯l followed by adding z¯l. Furthermore, z¯ and
x¯ can be recovered with the corresponding inverse transformation. To preserve monotonicity, z¯ must be within interval z¯ ∈ [z¯l, z¯h). Denoting the invertible linear ﬂow derived from finp as f¯inp, it must hold that f¯inp(x¯l) ≥ z¯l, f¯inp(x¯h −2−k) ≤ z¯h −2−k. As we use MST in Alg. 1, we observe that when x¯z¯hh−−xz¯¯ll is approximated with R/S, the minimum possible value of f¯inp(x¯l) is z¯l (when rd = 0 in Line 2) and the maximum possible value of f¯inp(x¯h−2−k) is (R·2k(x¯h−x¯l−2−k)+R−1)/(S·2k) +z¯l
(when rd = R − 1 in Line 2). Given large S, the largest possible value of R should be

(2k · (z¯h − z¯l) − 1) · S + 1

R = 2k · (x¯h − x¯l) .

(4)

Another difﬁculty is in determining the correct interpolation interval [x¯l, x¯h). One simple solution is to split the input domain into uniform intervals with length 2−h such that x¯l = (2h · x¯)/2h , x¯h = x¯l + 2−h. However, for the inverse computation given z¯, it is not easy to recover the interpolation interval as f −1(z¯) may not be within [x¯l, x¯h). Instead, as z¯ ∈ [z¯h, z¯l), the interval [x¯l, x¯h) can be
obtained via a binary search in which x¯l is obtained with z¯ ∈ [f (x¯l), f (x¯h)). Another approach is to split the co-domain into uniform intervals such that z¯l = (2h · z¯)/2h , z¯h = z¯l + 2−h, with x¯l = f −1(z¯l), x¯h = f −1(z¯h). In this case, determining [z¯l, z¯h) during the inverse computation is simple. While for the forward pass, [z¯l, z¯h) should be determined with a binary search such that x¯ ∈ [f −1(z¯l), f −1(z¯h)). In practice, we have simpler tricks to determine the correct interval [x¯l, x¯h), [z¯l, x¯h) for both the forward and inverse computation, which can be found in the Appendix.
The general idea of the non-linear ﬂow adaptations are summarized in Alg. 2. Note that Alg. 2 can be used in any element-wise ﬂow including linear ﬂow. In Alg. 2, Proposition 2 holds such that Lf (x¯, z¯) = − log(R/S) ≈ − log x¯z¯hh−−zx¯¯ll ≈ − log |f (x¯)|. It is possible to arrive at a similar conclusion in Proposition 1 where the corresponding error is |z¯ − f (x¯)| < O(S−1, 2−k, 2−2h).

1All intervals must partition the domain of f .

4

2.3 Practical Numerically Invertible Flow Layers
Whilst one can use many types of complex transformations to build richly expressive ﬂow-based models, to ensure the existence and uniqueness of the inverse computation, these layers are generally constructed with element-wise transformations. In this subsection, we demonstrate the invertibility of discretized analogs to some of the most widely used ﬂow layers using the operators as described in Sec. 2.2. Such ﬂows include autoregressive ﬂows [20] (including coupling ﬂows [10, 11, 16]) and 1 × 1 convolutional ﬂows [25].
2.3.1 Autoregressive and Coupling Flows

Algorithm 3 Numerically Invertible Autoregressive Flow

Forward: z¯ = f¯(x¯).
1: for i = m, ..., 1 do 2: z¯i ← f¯i(x¯i, x¯<i) with Alg. 2 (forward); 3: end for 4: return z¯ = [z¯1, ..., z¯m] .

Inverse: x¯ = f¯−1(z¯).
1: for i = 1, ..., m do 2: x¯i ← f¯i−1(z¯i, x¯<i) with Alg. 2 (inverse); 3: end for 4: return z¯ = [z¯1, ..., z¯m] .

Supposing that the inputs and outputs, x and z, are split into m parts x = [x1, ..., xm] , z = [z1, ..., zm] , the autoregressive ﬂow z = f (x) can be represented as zi = fi(xi; x<i), where fi(·; x<i) is the element-wise ﬂow (discussed in Sec. 2.2), conditioned on x<i. Now let f¯i(·; x<i) denote the invertible element-wise ﬂow transformation as discussed in Alg. 1-2. Alg. 3 then illustrates the details of an invertible autoregressive ﬂow f¯.

Propositions 1 and 2 hold in our discretized autoregressive transformation. In fact, the log-determinant

of Jacobian is given by log | det Jf (x)| =

m i=1

log

|

det

Jfi

(xi;

x<i)|,

and

the

expected

codelength

is simply Lf (x¯, z¯) =

m i=1

Lf

(x¯i,

z¯i)

≈

−

m i=1

log

|

det

Jfi

(x¯i;

x¯<i)|

=

−

log

|

det

Jf

(x¯)|.

When m = 2 and f1(x1) = x1, the autoregressive ﬂow is reduced to a coupling ﬂow, which is widely used in ﬂow-based models [10, 11, 16]. It is therefore trivially clear that the coupling ﬂow is additionally compatible with Alg. 3.

2.3.2 1 × 1 Convolutional Flow
1 × 1 convolutional layers can be viewed as a matrix multiplication along a channel dimension [25]. Let x¯, z¯ ∈ Rc be inputs and outputs along channels, and W ∈ Rc×c the weights of our network. The objective is to obtain z¯ = f¯(x¯) where f (x) = Wx.
We use the ideas of iVPF [41] to achieve a numerically invertible 1 × 1 convolutional transformation. In particular, we begin by performing an LU decomposition such that W = PLΛU. It then follows that the 1 × 1 convolution is performed with successive matrix multiplications with U, Λ, L and P. In iVPF, the authors extensively discussed matrix multiplications with factors U, L and P [41]. Meanwhile, one can view the matrix multiplication with Λ as a scale transform, such that f (x) = λ x, where is an element-wise multiplication and λ are the diagonal elements of Λ. MST in Alg. 1 can then be applied. In such a case, it is clear that Proposition 1 and 2 hold for a 1 × 1 convolutional ﬂow. For Proposition 2, it is observed that Lf (x¯, z¯) ≈ −sum(log λ) = − log | det Λ| = − log | det W| = − log | det Jf (x¯)|.

2.4 Building Numerically Invertible Flows
Our ﬂow model is constructed as a composition of layers f = fL ◦ ... ◦ f2 ◦ f1, where each layer is a transformation of the type discussed in Sec. 2.2 and 2.3. Let us represent the resulting ﬂow as f¯ = f¯L ◦ ... ◦ f¯1, where f¯l is a discretized transformation derived from the corresponding continuous f . It is clear that the quantized input x¯(= y¯0) and latent z¯(= y¯L) establish a bijection with successive transformations between discrete inputs and outputs. For the forward pass, z¯ is computed with y¯l = f¯(y¯l−1), l = 1, 2, ..., L; for the inverse pass, x¯ is recovered with the inverse ﬂow f¯−1 = f¯1−1 ◦ ... ◦ f¯L−1 such that y¯l−1 = fl−1(y¯l).

5

For our resultant ﬂow model, we can draw similar conclusions as in Propositions 1 and 2. Firstly, the error of z¯ = f¯(x¯) and z = f (x¯) is small, bounded by |z¯ − z| < O(LS−1, L2−k, L2−2h). Secondly,

the codelength is approximately Lf (x¯, z¯) =

L l=1

Lfl (y¯l−1,

y¯l)

≈

−

L l=1

log

|

det

Jfl

(y¯l−1

)|.

2.5 Lossless Compression with Flows via Bits-back Dequantization

Armed with our ﬂow model f¯, performing lossless compression is straight-forward. For the encoding process, the latent is generated according to z¯ = f¯(x¯). We then encode z¯ with probability pZ(z¯)δ. For the decoding process, z¯ is decoded with pZ(z¯)δ, and x¯ is recovered with f¯−1(z¯). The expected codelength is approximately − log(pX (x¯)δ) such that

L

L(x¯) ≈ − log(pZ (z¯)δ) − log | det Jfl (y¯l−1)| ≈ − log(pX (x¯)δ).

(5)

l=1

However, we note that if k is large, − log δ = kd and the codelengths will also be large, resulting in a
waste of bits. For what follows, we adopt the bits-back trick in LBB [17] to reduce the codelength. In particular, consider coding with input data x◦ ∈ Zd, where a k-precision noise vector u¯ ∈ [0, 1)d is decoded with q(u¯|x◦)δ and added to input data such that x¯ = x◦ + u¯. In this way, x¯ is then encoded with our ﬂow f¯. For the decoding process, x◦ is recovered by applying the inverse transformation.
We name this coding process Bits-back Dequantization, which is summarized in Alg. 4.

Algorithm 4 Lossless Compression with iFlow.
Encode x◦. 1: Decode u¯ using q(u¯|x◦)δ; 2: z¯ ← f¯(x◦ + u¯); 3: Encode z¯ using pZ (z¯)δ.

Decode.
1: Decode z¯ using pZ (z¯)δ; 2: x¯ ← f¯−1(z¯), x◦ ← x¯ ; 3: Encode u¯ = x¯ − x◦ using q(u¯|x◦)δ; 4: return x◦.

In practice, q(u|x◦) is constructed with a ﬂow model such that u = g( ; x◦) where ∼ p( ). u¯ is decoded by ﬁrst decoding ¯ with p(¯)δ, and then applying u¯ = g¯(¯; x◦). Thus decoding u¯ involves − log(q(u¯|x◦)δ) bits. Overall, the expected codelength is exactly the dequantization lower
bound [19] such that

L(x◦) ≈ q(u¯|x◦)δ[log(q(u¯|x◦)δ) − log(p(x◦ + u¯)δ)]

u¯

(6)

≈ Eq(u¯|x◦)[log q(u¯|x◦) − log p(x◦ + u¯)].

2.6 Extensions

With novel modiﬁcations, ﬂow models can be applied to the generation of various data types, obtaining
superior performance [7, 28, 23]. These models can be used for improved lossless compression. In general, given input data x◦, these models generate intermediate data v with q(v|x◦), and the density
of v is modelled with ﬂow model z = f (v). For generation, when v is generated with the inverse ﬂow, x is generated with p(x◦|v). It is clear that p(x) can be estimated with variational lower bound such that log p(x◦) ≥ Eq(v|x◦)[log P (x◦|v) + log p(v) − log q(v|x◦)]. For lossless compression, x◦ can be coded with bits-back coding, which is similar with Alg. 4. In the encoding process, we ﬁrst decode v¯ with q(v¯|x◦)δ and then encode x◦ with P (x◦|v¯) (similar with Line 1 in Alg. 4-Encode). We then obtain the prior z¯ = f¯(v¯) (Line 2), before ﬁnally encoding z¯ with pZ(z¯)δ (Line 3). In the decoding process, z¯ is ﬁrstly decoded with pZ(z¯)δ (similar to Line 1 in Alg. 4-Decode), and then recovered v¯ and decoded x◦ with P (x◦|v¯) (Line 2). Finally, we encode using v¯ with q(v¯|x◦) [38].
The expected codelength is approximately

L(x◦) ≈ Eq(v¯|x◦)[log q(v¯|x◦) − log P (x◦|v¯) − log p(v¯)].

(7)

We introduce a selection of recent, state-of-the-art ﬂow-based models modiﬁed according to the above. Each model corresponds to a certain coding algorithm.
VFlow [7]. VFlow expands the input data dimension with variational data augmentation to resolve the bottleneck problem in the ﬂow model. In VFlow, v = [x◦ + u, r](u ∈ [0, 1)d), where u ∼

6

qu(u|x◦), r ∼ qr(r|x◦ +u), is modelled with ﬂows gu, gr such that u = gu( u; x◦), r = gr( r; x◦ + u) ( u, r are priors). Then we have q(v|x◦) = qu(u|x◦)qr(r|x◦ + u), P (x◦|v) = 1 (as v → (x◦ + u) → x◦). Thus for the encoding process, ¯u, ¯r are decoded. To construct v¯ we have u¯ = g¯u(¯u; x◦), ¯r = g¯r(¯r; x◦ + u¯); and then v¯ is encoded with iFlow. For the decoding process, v¯ is decoded with the inverse iFlow, and then x◦, u¯, ¯r is recovered with v¯. Here u¯, ¯r is encoded and x◦ is the decoded output. As VFlow achieves better generation results compared with general ﬂows, one would expect a better compression ratio with VFlow.

Categorical Normalizing Flow [28]. Categorical Normalizing Flows (CNF) succeed in mod-

elling categorical data such as text, graphs, etc. Given categorical data x◦ = [x1, ..., xn], xi ∈ {1, 2, ..., C}n, v = [v1, ..., vn] is represented with word embeddings such that q(vi|xi) =

qe(vi|µ(xi), σ(xi)), in which qe could be a Gaussian or logistic distribution. Then P (xi|vi) =

p˜(xi )q (vi |xi )
C

with p˜ being the prior over categories. Thus q(v|x◦) =

p˜(c)q(v |c)

n i=1

q(vi|xi),

P

(x◦|v)

=

c=1

i

n i=1

P

(xi|vi),

and

x◦

can

be

coded

with

Alg.

8

given

q(v|x◦),

P

(x◦|v)

and

the

iFlow.

3 Uniform Base Conversion Systems

Algorithm 5 Uniform Base Conversion Systems

ENCODE s using U (0, R)(R < 2K ).
Input: symbol s, state c, bit-stream bs. Output: new state c and bit-stream bs.
1: c ← c · R + s; 2: if c ≥ 2M+K then 3: bs.push_back(c mod 2K );
bits to bit-stream. 4: c ← 2cK ; 5: end if 6: return c, bs.

push K

DECODE with U (0, R)(R < 2K ).

Input: state c, bit-stream bs.

Output: decoded s, new state c and bit-stream bs.

1: if c < 2M · R then 2: c ← 2K · c+bs.pop_back();

get last

K bits from bit-stream and pop them.

3: end if

4: s ← c mod R;

5: c ← c/R ;

6: return s, c, bs.

The previous section demonstrates that coding with a uniform distribution is central to our algorithm. Note that the distribution varies in each coding process, thus dynamic entropy coder is expected. Compared to the Gaussian distribution used in LBB [17], a uniform distribution is simpler, yielding improved coding speed. As follows, we introduce our Uniform Base Conversion Systems (UBCS), which is easy to implement and the coding bandwidth is much greater than that of rANS [12].
UBCS is implemented based on a number-base conversion. The code state c is represented as an integer. For coding some symbol s ∈ {0, 1, ..., R − 1} with a uniform distribution U (0, R), the new state c is obtained by converting an R-base digit s to an integer such that

c = E(c, s) = c · R + s.

(8)

For decoding with U (0, R), given state c , the symbol s and state c are recovered by converting the integer to an R-base digit such that

c

s = c mod R, c = D(c , s) = .

(9)

R

We note, however, that c will become large when more symbols are encoded, and computing Eq. (8-9)

with large c will be inefﬁcient. Similar to rANS, we deﬁne a “normalized interval” which bounds the

state c such that c ∈ [2M , 2K+M ) (K, M are some integers values) after coding each symbol. For

the encoding process, if c ≥ 2K+M , the lower K bits are written to disk, and the remaining bits are

reserved such that c ←

c 2K

. For the decoding process, if c < 2M · R, the stored K bits should be

read and appended to the state before decoding. In this way, the decoded state is contained within the

interval [2M , 2K+M ). The initial state can be set such that c = 2M . We illustrate this idea in Alg. 5.

The correctness of Alg. 5 is illustrated in the following theorem. P1 demonstrates that the symbols can be correctly decoded with a UBCS coder, with coding performed in a ﬁrst-in-last-out (FILO) fashion. P2 shows that the codelength closely approximates the entropy of a uniform distribution, subject to a large M and K. The proof of the theorem is in the Appendix.

7

Table 2: Coding performance of iFlow, LBB and iVPF on CIFAR10 dataset. We use batch size 64.

ﬂow arch. Flow++
iVPF

compression technique
LBB [17] iFlow (Ours)
iVPF [41] iFlow (Ours)

nll 3.116 3.195

bpd
3.118 3.118
3.201 3.196

aux. bits
39.86 34.28
6.00 7.00

encoding time (ms) inference coding

16.2±0.3

116±1.0 21.0±0.5

5.5±0.1

11.4±0.2 7.1±0.2

decoding time (ms) inference coding

32.4±0.2

112±1.5 37.7±0.5

5.2±0.1

13.5±0.3 9.7±0.2

Theorem 3. Consider coding symbols s1, ...sn with si ∼ U (0, Ri), (i = 1, 2, ..., n, Ri < 2K ) using
Alg. 5, and then decode sn, sn−1, ..., s1 sequentially. Suppose (1) the initial state and bit-stream are c0 = 2M , bs0 = empty respectively; (2) After coding si, the state is ci and the bit-stream is bsi;
(3) After decoding si+1, the state is ci and the bit-stream is bsi. We have

P1: si = si+1, ci = ci, bsi = bsi for all i = 0, ..., n − 1.

P2: Denote by the codelength li = log ci + len(bsi) where len is the total number of bits in

the

bit-stream.

Then

ln

− l0

<

1 1−1/(ln 2·2M ·K)

n i=1

Ri

+

1

+

(ln

2

·

2M

)−1

.

In practice, we set K = 32 and M = 4. Compared to rANS [12] and Arithmetric Coding (AC) [40], UBCS is of greater efﬁciency as it necessitates fewer operations (more discussions are shown in the Appendix). UBCS can achieve greater computational efﬁciency via instantiating multiple UBCS coders in parallel with multi-threading. Table 1 demonstrates that UBCS achieves coding bandwidths in excess of giga-symbol/s – speed signiﬁcantly greater than rANS.

Table 1: Coding bandwidth (M symbol/s) of UBCS and rANS coder on different threads(thrd). We use the implementations in [17] for evaluating rANS.

# thrd rANS UBCS

Encoder 1

5.1±0.3

380±5

16 21.6±1.1 2075±353

Decoder

1

0.8±0.02 66.2±1.7

16

7.4±0.5 552±50

4 Experiments

In this section, we perform a number of experiments to establish the effectiveness of iFlow. We will investigate: (1) how closely the codelength matches the theoretical bound; (2) the efﬁciency of iFlow as compared with the LBB [17] baseline; (3) the compression performance of iFlow on a series low and high-resolution images.

4.1 Flow Architectures and Datasets
We adopt two types of ﬂow architectures for evaluation: Flow++ [16] and iVPF [41]. Flow++ is a state-of-the-art model using complex non-linear coupling layers and variational dequantizations [19]. iVPF is derived from a volume-preserving ﬂow in which numerically invertible discrete-space operations are introduced. The models are re-implemented or directly taken from the corresponding authors. Unless speciﬁed, we use h = 12, k = 28 and set large S – around 216, which we analyse further in the Appendix. To reduce the auxiliary bits in the bits-back coding scheme, we partition the d-dimensional data into b splits and perform MST (in Alg. 1 and 2) for each split sequentially. In this case, the auxiliary bits can be reduced to 1/b in MST. We use b = 4 in this experiment.
Following the lossless compression community [16, 4, 18, 37, 41], we perform evaluation using toy datasets CIFAR10, ImageNet32 and ImageNet64. Results for alternate methods are obtained via re-implementation or taken directly from the corresponding papers, where available. We further test the generalization capabilities of iFlow in which all toy datasets are compressed with a model trained on ImageNet32. For benchmarking our performance on high-resolution images, we evaluate iFlow using CLIC.mobile, CLIC.pro2 and DIV2k [1]. For this purpose, we adopt our ImageNet32/64 model for evaluation, and process an image in terms of 32 × 32 or 64 × 64 patches, respectively. The experiment is conducted with PyTorch framework with one Tesla P100 GPU.
2https://www.compression.cc/challenge/

8

Table 3: Compression performance in bpd on benchmarking datasets. † denotes the generation performance in which the models are trained on ImageNet32 and tested on other datasets. ‡ denotes
compression of high-resolution datasets with our ImageNet64-trained model.

PNG [5] FLIF [36] JPEG-XL [2]
L3C [30] RC [31] Bit-Swap [26]
IDF [18] IDF++ [4] iVPF [41] LBB [17] iFlow (Ours)
HiLLoC [37]† IDF [18]† iVPF† [41] iFlow (Ours)†

ImageNet32
6.39 4.52 6.39
4.76 -
4.50
4.18 4.12 4.03 3.88 3.88
4.20 4.18 4.03 3.88

ImageNet64
5.71 4.19 5.74
4.42 -
3.90 3.81 3.75 3.70 3.70
3.90 3.94 3.79 3.65

CIFAR10
5.87 4.19 5.89
3.82
3.34 3.26 3.20 3.12 3.12
3.56 3.60 3.49 3.36

CLIC.mobile
3.90 2.49 2.36
2.64 2.54
-
-
2.47/2.39‡ 2.26/2.26‡

CLIC.pro
4.00 2.78 2.63
2.94 2.93
-
-
2.63/2.54‡ 2.45/2.44‡

DIV2K
3.09 2.91 2.79
3.09 3.08
-
-
2.77/2.68‡ 2.60/2.57‡

4.2 Compression Performance
For our experiments, we use the evaluation protocols of codelength and compression bandwidth. The codelength is deﬁned in terms of the average bits per dimension (bpd). For no compression, the bpd is assumed to be 8. The compression bandwidth evaluates coding efﬁciency, which we deﬁne in terms of symbols compressed per unit time.
Table 2 demonstrates the compression results on CIFAR10. Note that we only report the encoding time (results on decoding time are similar, and are available in the Appendix). For iVPF, we use settings almost identical to the original paper [41] such that k = 14.
Firstly, we observe that, when using both the Flow++ and iVPF architectures, iFlow achieves a bpd very close to theoretically minimal codelength. When using Flow++, iFlow achieves identical performance as that of LBB. For the iVPF architecture, iFlow outperforms the underlying iVPF as it avoids the need to store 16 bits for each data sample.
Secondly, the coding latency highlights the main advantage of iFlow: we achieve encoding 5× faster than that of LBB and over 1.5× that of iVPF. In fact, the use of UBCS only represents 20% of the total coding time for all symbols (4.8ms in Flow++ and 1.6ms in iVPF). In contrast, the rANS coder of LBB commands over 85% of the total coding latency, which is the principal cause of LBB’s impracticality. Indeed, Table 1 demonstrates that our UBCS coder achieves a speed-up in excess of 50× that of rANS (which results in a coder latency of 4.8ms in iFlow vs. 99.8ms in LBB).
Lastly, compared with LBB, iFlow necessitates fewer auxiliary bits. In fact, LBB requires crica 2k + log σ bits per dimension (for δ = 2−k and small σ in [17]). Meanwhile, iFlow requires approximately k + 1b log S, and 1b log S is usually small with large b.
4.3 Comparison with the State-of-the-Art
To further demonstrate the effectiveness of iFlow, we compare the compression performance on benchmarking datasets against a variety of neural compression techniques. These include, L3C [30], Bit-swap [26], HilLoc [37], and ﬂow-based models IDF [18], IDF++ [4], iVPF [41], LBB [17]. We additionally include a number of conventional methods, such as PNG [5], FLIF [36] and JPEG-XL [2].
Experiments on Low Resolution Images. Compression results on our described selection of datasets are available in left three columns of Table 3. Here we observe that iFlow obtains improved compression performance over all approaches with the exception of LBB on low-resolution images, for which we achieve identical results.
9

Generalization. The last four rows in Table 3 demonstrate the literature-standard test of generalization, in which ImageNet32 trained model are used for testing. From these results, it is clear that iFlow achieves the best generalization performance in this test. It is worth noting that we obtain an improved performance on ImageNet64 when using our ImageNet32-trained model.
Experiments on High Resolution Images. Finally, we test iFlow across a number of high-resolution image datasets. Here images are processed into non-overlapping 32 × 32 and 64 × 64 patches for our ImageNet32 and ImageNet64-trained models. The right three columns in Table 3 display the results, which is observed that iFlow outperforms all compression methods across all available benchmarks. Note that as we crop patches for compression, the compression bandwidth is the same as that in small images like CIFAR10, i.e., 5 times faster than LBB and 30% speedup compared with iVPF.
5 Related Work
Dynamic Entropy coders, such as Arithmetic Coding (AC) [40] and Asymmetric Numerical Systems (ANS) [12], form the basis of lossless compression. However, the binary search protocol required at decode time and their comparatively high number of numerical operations make them both relatively time-consuming. The term dynamic means that the data symbols are in different distributions, in this case, efﬁcient entropy coders like Huffman coding [21] and tANS [12] are incompatible. Our proposed UBCS is dynamic coder, which requires only two operations per symbol, producing an faster algorithm than AC and ANS.
In order to utilise entropy coders, one must estimate the data distribution. For this purpose, the wider community has employed a variety of density estimators. One of the most popular, autoregressive models [35], estimates the joint density with per-pixel autoregressive factorizations. Whilst commonly achieving state-of-the-art compression ratios, the sequential pixel-by-pixel nature of encoding and/or decoding makes them impractically time-consuming. Alternatively, variational autoencoders (VAEs) [24, 26, 37] maximise a lower bound on the marginal data likelihood (otherwise known as the ELBO). With the bits-back coding framework [38], the theoretical codelength is exactly equal to the ELBO. However, in most cases, VAE formulations typically produce inferior compression ratios as there exists a gap between the ELBO and the true data likelihood.
As discussed, ﬂow-based models [16, 25, 11], which admit exact likelihood computation, represent an alternative route for density estimation. IDF [18] and IDF++ [4] proposed the titular integer discrete ﬂow to preserve the existence and uniqueness of an invertible mapping between discrete data and latent variables. In a similar vein, iVPF [41] achieved a mapping with volume-preserving ﬂows. Here the remainders of a division operation are stored as auxiliary states to eliminate the numerical error arising from discretizing latent variables. However, all of these models must introduce constraints on the underlying transform, limiting their representational power. LBB [17] was the ﬁrst ﬂowbased lossless compression approach to admit a broad class of invertible ﬂows based on continuous transforms. LBB established this family of ﬂexible bijections by introducing local bits-back coding techniques to encode numerical errors. However, LBB typical requires the coding of many such errors and does so with the ANS scheme, posing obvious challenges to computational efﬁciency.
6 Conclusions and Discussions
In this paper, we have proposed iFlow, a numerically invertible ﬂow-based model for achieving efﬁcient lossless compression with state-of-the-art compression ratios. To achieve this, we have introduced the Modular Scale Transform and Uniform Base Conversion Systems, which jointly permit an efﬁcient bijection between discrete data and latent variables. Experiments demonstrate that the codelength comes extremely close to the theoretically minimal value, with compression achieved much faster than the next-best high-performance scheme. Moreover, iFlow is able to achieve state-of-the-art compression ratios on real-word image benchmarks.
We additionally consider the potential for extending iFlow. That is, recent advances in normalizing ﬂows have achieved improved generation performance across various data types [28, 7, 23]. We have discussed the possible extension to incorporate these advancements in Sec. 2.6, and consider its application as future work. We further recognise that compression aproaches, of which iFlow is one, present signiﬁcant data privacy issues. That is, the generative model used for compression may induce data leakage; therefore, the codec should be treated carefully as to observe data-privacy laws.
10

References
[1] Eirikur Agustsson and Radu Timofte. Ntire 2017 challenge on single image super-resolution: Dataset and study. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition Workshops, pages 126–135, 2017.
[2] Jyrki Alakuijala, Ruud van Asseldonk, Sami Boukortt, Martin Bruse, Iulia-Maria Coms, a, Moritz Firsching, Thomas Fischbacher, Evgenii Kliuchnikov, Sebastian Gomez, Robert Obryk, et al. Jpeg xl next-generation image compression architecture and coding tools. In Applications of Digital Image Processing XLII, volume 11137, page 111370K. International Society for Optics and Photonics, 2019.
[3] Jens Behrmann, Paul Vicol, Kuan-Chieh Wang, Roger Grosse, and Jörn-Henrik Jacobsen. Understanding and mitigating exploding inverses in invertible neural networks. arXiv preprint arXiv:2006.09347, 2020.
[4] Rianne van den Berg, Alexey A Gritsenko, Mostafa Dehghani, Casper Kaae Sønderby, and Tim Salimans. Idf++: Analyzing and improving integer discrete ﬂows for lossless compression. arXiv preprint arXiv:2006.12459, 2020.
[5] Thomas Boutell and T Lane. Png (portable network graphics) speciﬁcation version 1.0. Network Working Group, pages 1–102, 1997.
[6] Sheng Cao, Chao-Yuan Wu, and Philipp Krähenbühl. Lossless image compression through super-resolution. arXiv preprint arXiv:2004.02872, 2020.
[7] Jianfei Chen, Cheng Lu, Biqi Chenli, Jun Zhu, and Tian Tian. Vﬂow: More expressive generative ﬂows with variational data augmentation. In International Conference on Machine Learning, pages 1660–1669. PMLR, 2020.
[8] Rewon Child. Very deep vaes generalize autoregressive models and can outperform them on images. arXiv preprint arXiv:2011.10650, 2020.
[9] Yann Collet and Chip Turner. Smaller and faster data compression with zstandard. Facebook Code [online], 2016.
[10] Laurent Dinh, David Krueger, and Yoshua Bengio. Nice: Non-linear independent components estimation. arXiv preprint arXiv:1410.8516, 2014.
[11] Laurent Dinh, Jascha Sohl-Dickstein, and Samy Bengio. Density estimation using real nvp. arXiv preprint arXiv:1605.08803, 2016.
[12] Jarek Duda. Asymmetric numeral systems: entropy coding combining speed of huffman coding with compression rate of arithmetic coding. arXiv preprint arXiv:1311.2540, 2013.
[13] GMDT Forecast. Cisco visual networking index: global mobile data trafﬁc forecast update, 2018–2023. Update, 2018:2023, 2010.
[14] Philip Gage. A new algorithm for data compression. C Users Journal, 12(2):23–38, 1994.
[15] Irina Higgins, Loic Matthey, Arka Pal, Christopher Burgess, Xavier Glorot, Matthew Botvinick, Shakir Mohamed, and Alexander Lerchner. beta-vae: Learning basic visual concepts with a constrained variational framework. 2016.
[16] Jonathan Ho, Xi Chen, Aravind Srinivas, Yan Duan, and Pieter Abbeel. Flow++: Improving ﬂow-based generative models with variational dequantization and architecture design. arXiv preprint arXiv:1902.00275, 2019.
[17] Jonathan Ho, Evan Lohn, and Pieter Abbeel. Compression with ﬂows via local bits-back coding. In Advances in Neural Information Processing Systems, pages 3879–3888, 2019.
[18] Emiel Hoogeboom, Jorn Peters, Rianne van den Berg, and Max Welling. Integer discrete ﬂows and lossless compression. In Advances in Neural Information Processing Systems, pages 12134–12144, 2019.
[19] Emiel Hoogeboom, Taco S Cohen, and Jakub M Tomczak. Learning discrete distributions by dequantization. arXiv preprint arXiv:2001.11235, 2020.
[20] Chin-Wei Huang, David Krueger, Alexandre Lacoste, and Aaron Courville. Neural autoregressive ﬂows. In Proceedings of the 35th International Conference on Machine Learning, volume 80, pages 2078–2087. PMLR, 2018.
11

[21] David A Huffman. A method for the construction of minimum-redundancy codes. Proceedings of the IRE, 40(9):1098–1101, 1952.
[22] Heewoo Jun, Rewon Child, Mark Chen, John Schulman, Aditya Ramesh, Alec Radford, and Ilya Sutskever. Distribution augmentation for generative modeling. In International Conference on Machine Learning, pages 5006–5019. PMLR, 2020.
[23] Hyeongju Kim, Hyeonseung Lee, Woo Hyun Kang, Joun Yeop Lee, and Nam Soo Kim. Softﬂow: Probabilistic framework for normalizing ﬂow on manifolds. Advances in Neural Information Processing Systems, 33, 2020.
[24] Diederik P Kingma and Max Welling. Auto-encoding variational bayes. arXiv preprint arXiv:1312.6114, 2013.
[25] Durk P Kingma and Prafulla Dhariwal. Glow: Generative ﬂow with invertible 1x1 convolutions. In Advances in neural information processing systems, pages 10215–10224, 2018.
[26] Friso H Kingma, Pieter Abbeel, and Jonathan Ho. Bit-swap: Recursive bits-back coding for lossless compression with hierarchical latent variables. arXiv preprint arXiv:1905.06845, 2019.
[27] Manoj Kumar, Mohammad Babaeizadeh, Dumitru Erhan, Chelsea Finn, Sergey Levine, Laurent Dinh, and Durk Kingma. Videoﬂow: A ﬂow-based generative model for video. arXiv preprint arXiv:1903.01434, 2 (5), 2019.
[28] Phillip Lippe and Efstratios Gavves. Categorical normalizing ﬂows via continuous transformations. arXiv preprint arXiv:2006.09790, 2020.
[29] David JC MacKay and David JC Mac Kay. Information theory, inference and learning algorithms. Cambridge university press, 2003.
[30] Fabian Mentzer, Eirikur Agustsson, Michael Tschannen, Radu Timofte, and Luc Van Gool. Practical full resolution learned lossless image compression. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pages 10629–10638, 2019.
[31] Fabian Mentzer, Luc Van Gool, and Michael Tschannen. Learning better lossless compression using lossy compression. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 6638–6647, 2020.
[32] Ryan Prenger, Rafael Valle, and Bryan Catanzaro. Waveglow: A ﬂow-based generative network for speech synthesis. In ICASSP 2019-2019 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP), pages 3617–3621. IEEE, 2019.
[33] Majid Rabbani. Jpeg2000: Image compression fundamentals, standards and practice. Journal of Electronic Imaging, 11(2):286, 2002.
[34] Greg Roelofs and Richard Koman. PNG: the deﬁnitive guide. O’Reilly & Associates, Inc., 1999.
[35] Tim Salimans, Andrej Karpathy, Xi Chen, and Diederik P Kingma. Pixelcnn++: Improving the pixelcnn with discretized logistic mixture likelihood and other modiﬁcations. arXiv preprint arXiv:1701.05517, 2017.
[36] Jon Sneyers and Pieter Wuille. Flif: Free lossless image format based on maniac compression. In 2016 IEEE International Conference on Image Processing (ICIP), pages 66–70. IEEE, 2016.
[37] James Townsend, Thomas Bird, Julius Kunze, and David Barber. Hilloc: Lossless image compression with hierarchical latent variable models. arXiv preprint arXiv:1912.09953, 2019.
[38] James Townsend, Tom Bird, and David Barber. Practical lossless compression with latent variables using bits back coding. arXiv preprint arXiv:1901.04866, 2019.
[39] Aaron Van den Oord, Nal Kalchbrenner, Lasse Espeholt, Oriol Vinyals, Alex Graves, et al. Conditional image generation with pixelcnn decoders. In Advances in neural information processing systems, pages 4790–4798, 2016.
[40] Ian H Witten, Radford M Neal, and John G Cleary. Arithmetic coding for data compression. Communications of the ACM, 30(6):520–540, 1987.
[41] Shifeng Zhang, Chen Zhang, Ning Kang, and Zhenguo Li. ivpf: Numerical invertible volume preserving ﬂow for efﬁcient lossless compression. arXiv preprint arXiv:2103.16211, 2021.
12

A Proofs
A.1 Correctness of MST (Alg. 1)
As x¯, z¯ are quantized to k-precision, xˆ and x¯ form a bijection, and so do zˆ and z¯. Thus MST is correct if and only if xˆ and zˆ are valid bijections. In particular, denoting xˆd = (S · zˆ + re)/R , rdd = (S · zˆ + re) mod R, we will show xˆd ≡ xˆ, rdd ≡ rd. In fact, according to forward MST, zˆ = (R · xˆ + rd)/S , re = (R · xˆ + rd) mod S, thus S · zˆ + re = R · xˆ + rd. Considering re is ﬁrst accurately decoded by inverse MST (in Line 2), it is clear that xˆd = (S ·zˆ+re)/R = (R·xˆ+rd)/R = xˆ, and rdd = (S ·zˆ+re) mod R = (R·xˆ+rd) mod R = rd. Thus the correctness of MST is proven.

A.2 Propositions 1-2 in MST (Alg. 1)
Firstly, as S · a − 0.5 ≤ R < S · a + 0.5, we have |a − RS | ≤ 0S.5 = O(S−1). Secondly, as z¯ = (R · 2k · x¯ + rd)/S /2k where rd ∈ [0, R), we have z¯ < (R · 2k · x¯ + R)/(S · 2k) = R/S·x¯+(R−1)/(S·2k) and z¯ > (R·2k ·x¯/S−1)/2k = R/S·x¯−2−k, thus |z¯−R/S·x¯| < O(2−k). Then the error between z¯ and f (x¯) is |z¯ − a · x¯| ≤ |z¯ − R/S · x¯| + |(a − R/S) · x¯| = O(S−1, 2−k); therefore, Proposition 1 holds.
For Proposition 2, decoding from U (0, R) involves − log R bits, and encoding U (0, S) involves log S bits. As |a − R/S| < O(S−1) and f (x¯) = a, the codelength of MST is Lf (x¯, z¯) = log S − log R = − log |a + O(S−1)| = − log |f (x¯)| + O(S−1) ≈ − log |f (x¯)|. Thus Proposition 2 holds.

A.3 Correctness of our Invertible Non-linear Flows (Alg. 2)

If the interpolation interval [x¯l, x¯h) and [z¯l, z¯h)(z¯l = f (x¯l), z¯l = f (x¯h)) are identical in both the forward and inverse processes, finp is additionally identical in both the forward and inverse processes. Consequently, an exact bijection with MST algorithm is trivially achieved. Thus we principally seek to show that the interpolation interval can be correctly determined. Before the proof, it must be emphasised that the interpolation interval should demonstrate the following properties:

1. The interpolation interval is counted and covers the domain/co-domain. x¯l, x¯h must be within the discretized set such that x¯l, x¯h ∈ Xinp (e.g. Xinp = {2−h · n, n ∈ Z});
2. The interpolation interval must be not intersected. There does not exist x such that x ∈ [x¯l, x¯h) and x ∈ Xinp \ {x¯l}.

Firstly, we show that in the forward computation, z¯ will always be within [z¯l, z¯h). In fact, z¯ = R·2k(x¯−Sx¯l)+rd /2k+z¯l where rd ∈ [0, R). As x¯ ≥ x¯l, z¯ ≥ R·0S+0 /2k+z¯l = z¯l. As x¯ ≤ x¯h−2−k,
z¯ ≤ R·2k(x¯h−x¯lS−2−k)+R−1 /2k +z¯l, following from Eq. (4) it is clear that z¯ ≤ z¯h −2−k. Therefore, it holds that z¯ ∈ [z¯l, z¯h).

Secondly, we show that during the inverse computation, the interpolation intervals [x¯l, x¯h) and

[z¯l, z¯h) are the same as that in the forward process. In other words, if the interpolation interval is

[x¯dl , x¯dh), [z¯ld, z¯hd) given z¯,

it holds that x¯dl

≡

x¯l

,

x¯

d h

≡

x¯h.

In fact,

x¯dl

≥

x¯h

is not preserved,

as

f (x¯dl ) ≥ z¯. It then follows that z¯ could not be in [z¯ld, z¯hd). Similarly, x¯h ≤ x¯l is not preserved –

otherwise f (x¯dh) ≤ z¯ and z¯ could not be in [z¯ld, z¯hd). Overall, x¯dl < x¯h and x¯dh > x¯l, such that only x¯dl = x¯l, x¯dh = x¯h satisfy this condition.

A.4 Propositions 1-2 in Invertible Non-linear Flows (Alg. 2)
In general, f (x), f (x) is bounded for all x. Consider f (x¯) in the small interval such that x¯h − x¯l ≤ 2−h or z¯h − z¯l ≤ 2−h (k h). We ﬁrst prove the following two propositions in [x¯l, x¯h):
1. |f (x¯) − x¯z¯hh−−xz¯¯ll | < O(2−h, 2h−k); 2. |finp(x¯) − f (x¯)| < O(2−2h, 2−k)

13

In fact, by performing the Taylor expansion at x¯, we have f (x¯l) = f (x¯) + (x¯l − x¯) · f (x¯) + (x¯l−2x¯)2 · f (ξl) and f (x¯h) = f (x¯) + (x¯h − x¯) · f (x¯) + (x¯h−2 x¯)2 · f (ξh), where ξh, ξl ∈ (x¯l, x¯h).
Firstly, f (x¯h) − f (x¯l) = (x¯h − x¯l) · f (x) + [ (x¯h−2 x¯)2 · f (ξh) − (x¯l−2x¯)2 · f (ξl)]. As f (x), f (x) are bounded, x¯h − x¯l ≤ O(2−h), and we have f (x¯h) − f (x¯l) = (x¯h − x¯l) · f (x) + O(2−2h). As |z¯l − f (x¯l)| < 2−k, |z¯l − f (x¯l)| < 2−k, then |z¯h − z¯l − (x¯h − x¯l) · f (x)| < O(2−k, 2−2h). Finally, |f (x¯) − x¯z¯hh−−zx¯¯ll | < O(2−h, 2h−k).
Secondly, by denoting g(x¯) = f(x¯x¯hh)−−xf¯l(x¯l) (x¯−x¯l)+f (x¯l) and replacing f (x¯l), f (x¯h) with its Taylor expansion, we have g(x¯) = f (x¯) + 2(x¯h1−x¯l) (x¯h − x¯)(x¯ − x¯l)[(x¯h − x¯)f (ξh) + (x¯ − x¯l)f (ξl)]. As f (x) is bounded, |g(x¯) − f (x¯)| < O(2−2h). Moreover, it is clear that |finp(x¯) − g(x¯)| < O(2−k), and as such it ﬁnally holds that |finp(x¯) − f (x¯)| < O(2−2h, 2−k).
For Proposition 1, with MST, we have z¯ − z¯l = R·2k·(x¯S−x¯l)+rd /2k where rd ∈ [0, R), thus |z¯−z¯l− RS ·(x¯−x¯l)| < O(2−k). Moreover, with Eq. (4), it is easy to arrive at that z¯h−z¯l−x¯2h−−kx¯(1l −S−1) − S−1 < RS ≤ z¯h−z¯l−x¯2h−−kx¯(1l −S−1) , and therefore | RS − x¯z¯hh−−xz¯¯ll | < O(S−1, 2h−k). Overall, |z¯ − finp(x¯)| = |(z¯ − z¯l − RS · (x¯ − x¯l)) + (( RS − x¯z¯hh−−zx¯¯ll ) · (x¯ − x¯l))| < O(S−1, 2−k), and ﬁnally |z¯ − f (x¯)| ≤ |z¯ − finp(x¯)| + |finp(x¯) − f (x¯)| < O(S−1, 2−k, 2−2h).
For Proposition 2, with | RS − x¯z¯hh−−zx¯¯ll | < O(S−1, 2h−k), it is clear that the expected codelength is Lf (x¯, z¯) = − log(R/S) = − log x¯z¯hh−−zx¯¯ll + O(S−1, 2h−k) = − log |f (x¯)| + O(S−1, 2h−k, 2−h). Overall, Lf (x¯, z¯) ≈ − log |f (x¯)| if S, k, h are large and k h.

A.5 Theorem 3 in UBCS (Alg. 5)

P1. We begin by showing that ci ∈ [2M , 2K+M) for all i = 0, ..., n with mathematical induction. In fact, when i = 0, c0 = 2M ∈ [2M , 2K+M ). When i = k and ck ∈ [2M , 2K+M ), denote c◦k+1 = ck · Rk+1 + sk+1. It is therefore clear that c◦k+1 = [2M · Rk+1, 2M+K · Rk+1). Note that Rk+1 < 2K and therefore 2M · Rk+1 < 2M+K . If c◦k+1 < 2K+M , ck+1 = c◦k+1 ∈ [2M · Rk+1, 2M+K ), it follows that c◦k+1 ≥ 2K+M , ck+1 = c◦k+1/2K ∈ [2M , 2K · Rk+1). Overall, ck+1 ∈ [2M , 2K+M ). Thus ci ∈ [2M , 2K+M ) for all i = 1, ..., n such that

ci−1 · Ri + si ∈ [2M · Ri, 2K+M ), ci−1 · Ri + si < 2K+M

ci = ci−12·RKi+si ∈ [2M , 2M · Ri),

ci−1 · Ri + si ≥ 2K+M

(10)

We will now demonstrate that si = si+1, ci = ci, bsi = bsi for all i = 0, ..., n − 1. Denote c◦i = ci−1 · Ri + si.
(i) Consider i = n − 1. (a) If cn < 2M · Rn, the last K bits (denoted by rn) will be popped from bsn and added to cn. In this case, according to Eq. (10), rn = c◦n mod 2K must be encoded to form bsn. Thus in the decoding process, rn is popped from bsn, and therefore bsn−1 = bsn−1, cn−1 = (2K ·cn +rn)/Rn = c◦n−1/Rn = (cn−1 ·Rn +sn−1)/Rn = cn−1, and sn−1 = (2K ·cn +rn) mod Rn = (cn−1 · Rn + sn−1) mod Rn = sn−1. (b) If cn ≥ 2M · R, no bits are popped from bsn such that bsn−1 = bsn. In this case, according to Eq. (10), no bits are pushed to bsn−1 and therefore bsn−1 = bsn = bsn−1. In the decoding process, cn−1 = c◦n−1/Rn = cn−1, sn−1 = c◦n−1 mod Rn = sn−1. Overall, P1 holds for i = n − 1.
(ii) If P1 holds for i = k, we will prove that P1 holds for i = k − 1. (a) If ck < 2M · Rk, the last K bits will be popped from bsk and added to ck. In this case, in the encoding process, as ck = ck, according to Eq. (10), rk = c◦k mod 2K must be encoded to form bsk to obtain ck. In the decoding process, as bsk = bsk, rk is popped from bsk in the decoding process, it is therefore seen that bsk−1 = bsk−1. Finally we obtain ck−1 = (2K · ck + rk)/Rk = (2K ·ck+rk)/Rk = c◦k−1/Rk = ck−1, and sk−1 = (2K ·ck+rk) mod Rk = (ck−1·Rn+sk−1) mod Rn = sk−1. (b) If ck ≥ 2M · R, no bits are popped from bsk such that bsk−1 = bsk. In this case, in the encoding process, as ck = ck, according to Eq. (10), no bits are pushed to

14

bsk−1 to obtain ck and therefore bsk−1 = bsk = bsk = bsk−1. In the decoding process, we have ck−1 = (ck−1 · Rk + sk−1)/Rk = c◦k−1/Rk = ck−1, sk−1 = (ck−1 · Rk + sk−1) mod Rk = sk−1. Overall, P1 holds for i = k − 1. From (i)(ii), it is concluded that P1 holds by proof of mathematical induction.

P2. Denote that the lower K bits of ci need to be push to bsi at i = m1, ..., mT (mt < mt+1, mt ∈ {1, ..., n − 1} for all t = 1, ..., T − 1). In other words, we have

ci =

, ci−1 ·Ri +si
2K

i ∈ {m1, ..., mT }

(11)

ci−1 · Ri + si, otherwise

Firstly, it is clear that len(bsmt+1 ) = len(bsmt )+K. Secondly, for any i ∈ {mt+1, ..., mt+1− 1}, as ci = ci−1 · Ri + si, si ∈ [0, Ri), it is clear that ci−1 · Ri ≤ ci ≤ ci−1 · Ri + Ri − 1. Thus cmt · m i=tm+1t−+11 Ri ≤ cmt+1−1 ≤ (cmt + 1) · m i=tm+1t−+11 Ri − 1, and therefore

cmt ·

R mt+1
i=mt+1 i
2K

≤ cmt+1 ≤

(cmt + 1) · m i=tm+1t+1 Ri − 1 . 2K

(12)

Note that the above inequality also holds for t = 0 in which m0 = 0. With Eq. (12), log cmt+1 ≤

(cmt +1)· m i=tm+1+1 Ri−1

(cmt +1)· m i=tm+1+1 Ri

mt+1

log

t
2K

< log

t
2K

= log cmt + i=mt+1 log Ri + log(1 +

c−m1t ) − K < log cmt + im=tm+1t+1 log Ri + (ln 2 · cmt )−1 − K. As cmt ∈ [2M , 2M · Rmt ), it holds

that

mt+1

log cmt+1 + len(bsmt+1 ) < log cmt + len(bsmt ) +

log Ri + (ln 2 · 2M )−1 (13)

i=mi +1

If mT = n, log cn+len(bsn) = log cmT +len(bsmT ); otherwise, len(bsn) = len(bsmT ) and log cn ≤ log(cmT + 1) + ni=mT +1 Ri < log cmT + ni=mT +1 Ri + (ln 2 · 2M )−1. Overall, we ﬁnally obtain
n
log cn + len(bsn) < log c0 + len(bs0) + log Ri + (T + 1) · (ln 2 · 2M )−1 (14)
i=1

Note that as cn ≥ 2M = c0, len(bsn) = T K and l0 = M = log c0 + len(bs0), it is clear that log cn + len(bsn) > T K + l0. With Eq. (14), the codelength is ﬁnally computed as

1 ln − l0 ≤ log cn + len(bsn) − l0 + 1 <

n
Ri + 1 + (ln 2 · 2M )−1 (15)

1 − 1/(ln 2 · 2M · K)

i=1

which completes the proof.

B Details of Alg. 2 in iFlow
The main difﬁculty is in determining the interpolation interval [x¯l, x¯h), [z¯l, z¯h) given x¯ or z¯. The main paper discusses two interpolation tricks: (1) interpolating uniform intervals in domain x and (2) interpolating uniform intervals in co-domain z.
Interpolating uniform intervals in x. This usually applies in the case that f is large (e.g. inverse sigmoid). The uniform interval in domain x is deﬁned as x¯l = (2h · x¯)/2h , x¯h = x¯l + 2−h. The corresponding interval in the co-domain is z¯l = f (x¯l), z¯h = f (x¯h). For the forward pass, given x¯, the interval can be obtained as above. For the inverse pass, we ﬁrst compute x = f −1(z¯) and then compute x¯m = round(2h · x )/2h, x¯l = x¯m − 2−h, x¯h = x¯m + 2−h. Finally, we have z¯{l,m,h} = f (x¯{l,m,h}). If z¯ < z¯m, we set the interval x¯l = x¯l, x¯h = x¯m; otherwise x¯l = x¯m, x¯h = x¯h. The method is summarized in Alg. 6.
The correctness of the algorithm is guaranteed provided that f is Lipchitz continuous and the numerical error between f −1(f (x¯)) and x is limited. Let |f −1(f (x)) − x| < for all x and

15

Algorithm 6 Uniform interpolating interval x in numerically invertible element-wise ﬂows.

Determine x¯l, x¯h, z¯l, z¯h given x¯. 1: x¯l = (2h · x¯)/2h , x¯h = x¯l + 2−h; 2: z¯l = f (x¯l), z¯h = f (x¯h); 3: return x¯l, x¯h, z¯l, z¯h.
Determine x¯l, x¯h, z¯l, z¯h given z¯. 1: x = f −1(z¯);

2: x¯m = round(2h · x )/2h, x¯l = x¯m − 2−h, x¯h = x¯m + 2−h;
3: z¯{l,m,h} = f (x¯{l,m,h});
4: if z¯ < z¯m then 5: x¯l = x¯l, x¯h = x¯m, z¯l = z¯l, z¯h = z¯m; 6: else
7: x¯l = x¯m, x¯h = x¯h, z¯l = z¯m, z¯h = z¯h 8: end if
9: return x¯l, x¯h, z¯l, z¯h.

|f −1(x1) − f −1(x2)| < µ|x1 − x2| for all x1, x2. We will show that Alg. 6 is correct if ε =

2−kµ + < 2−h−1. In fact, it is clear that |f −1(z¯l) − x¯l| ≤ |f −1(z¯l) − f −1(f (x¯l))| + |x¯l −

f −1(f (x¯l))| < 2−kµ + = ε. Similarly, |f −1(z¯h) − x¯h| < ε. As f −1 is monotonically increasing

and z¯ ∈ (z¯l, z¯h), it is clear that x = f −1(z¯) ∈ [x¯l − ε, x¯h + ε). As |x¯m − x | ≤ 2−h−1, we have x¯m ∈ (x¯l − ε − 2−h−1, x¯h + ε + 2−h−1). (i) When z¯ < z¯m, it corresponds to x¯ < x¯m. As x¯ ∈ [x¯l, x¯h), it is clear that x¯m ∈ (x¯l, x¯h + ε + 2−h−1) = (x¯h − 2−h, x¯h + ε + 2−h−1). Note that x¯m, x¯h ∈ {2−h · n, n ∈ Z} when ε < 2−h−1; therefore, it must hold that x¯m = x¯h. (ii) When z¯ ≥ z¯m, it corresponds to x¯ ≥ x¯m. It is clear that x¯m ∈ (x¯l −ε−2−h−1, x¯h) = (x¯l −ε−2−h−1, x¯l +2−h)

– thus it must hold that x¯m = x¯l. In fact, as h ε < 2−h−1, the correctness of Alg. 6 follows.

k, µ is bounded and is rather small, such that

Algorithm 7 Uniform interpolating interval z in numerically invertible element-wise ﬂows.

Determine x¯l, x¯h, z¯l, z¯h given x¯.
1: z = f (z¯); 2: z¯m = round(2h · z )/2h, z¯l = z¯m − 2−h, z¯h =
z¯m + 2−h; 3: x¯{l,m,h} = f −1(z¯{l,m,h});
4: if x¯ < x¯m then 5: x¯l = x¯l, x¯h = x¯m, z¯l = z¯l, z¯h = z¯m; 6: else

7: x¯l = x¯m, x¯h = x¯h, z¯l = z¯m, z¯h = z¯h 8: end if 9: return x¯l, x¯h, z¯l, z¯h.
Determine x¯l, x¯h, z¯l, z¯h given z¯. 1: z¯l = (2h · z¯)/2h , z¯h = z¯l + 2−h; 2: x¯l = f −1(x¯l), x¯h = f −1(z¯h); 3: return x¯l, x¯h, z¯l, z¯h.

Interpolating uniform intervals in z. This usually applies in the case that f is small (e.g. sigmoid). The uniform interval in co-domain z is deﬁned as z¯l = (2h · z¯)/2h , z¯h = z¯l + 2−h.
The corresponding interval in the domain is x¯l = f −1(z¯l), x¯h = f −1(z¯h). For the inverse pass given z¯, the interval can be obtained as above. For the forward pass, we ﬁrst compute z = f (x¯), and then
compute z¯m = round(2h · z )/2h, z¯l = z¯m − 2−h, z¯h = z¯m + 2−h, and x¯{l,m,h} = f −1(z¯{l,m,h}).
If x¯ < x¯m, we set the interval z¯l = z¯l, z¯h = z¯m; otherwise z¯l = z¯m, z¯h = z¯h. The method is summarized in Alg. 7.

Similarly as in Alg. 6, the correctness of Alg. 7 is ensured by h The proof is very similar as to that of Alg. 6.

k and the limited numerical errors.

C Extensions of iFlow

Algorithm 8 Lossless Compression with Flows.
Encode x◦. 1: Decode v¯ using q(v¯|x◦)δ; 2: z¯ ← f¯(v¯); 3: Encode z¯ using pZ (z¯)δ; 4: Encode x◦ using P (x◦|v¯).

Decode.
1: Decode z¯ using pZ (z¯)δ; 2: v¯ ← f¯−1(z¯); 3: Decode x◦ using P (x◦|v¯); 4: Encode v¯ using q(v¯|x◦)δ; 5: return x◦.

16

The extension of iFlow for lossless compression is summarized in Alg. 8. Note that for Variational Dequantization Flow [19, 17] (Alg. 4), v = x◦ + u(u ∈ [0, 1)d), q(v|x◦) = q(u|x◦), P (x◦|v) =
1. Thus the above coding procedure reduces to Alg. 4.

D Dynamic Uniform Entropy Coder in AC, ANS and UBCS

In this section we will demonstrate the effectiveness of UBCS compared with AC and ANS. Both AC and ANS use probability mass function (PMF) and cumulative distribution function (CDF) for encoding and inverse CDF for decoding. For ease of coding, the PMF and CDF are all mapped to integers in [0, m). For uniform distribution U (0, R) in which P (s) = 1/R, s ∈ {0, 1, ..., R − 1}, the most simple way to compute PMF and CDF are

m/R , ls = PMF(s) =

s<R−1,

m − (R − 1) · m/R , s = R − 1

(16)

bs = CDF(s − 1) = m/R · s

Given b ∈ [0, m), the output of inverse CDF s = CDF−1(b), should be exactly b ∈ [bs, bs + ls). The general way to determine CDF−1 is binary search. But for uniform distribution, we can directly
obtain the inverse CDF such that

s = CDF−1(b) = min( b/l , R − 1), l = m/R

(17)

We summarize uniform entropy coder AC, rANS and UBCS as follows: For AC:

• Initial state: interval [lo, hi);
• Encoding: get m = hi − ho, get ls, bs with Eq. (16), update interval [lo , hi ) such that lo = lo + bs, hi = lo + ls, get c ∈ [lo , hi ) as the encoded bits;
• Decoding: for encoded bits c ∈ [lo, hi) and current interval [lo, hi), get m = hi − lo, b = c − lo, decode s = CDF−1(b) with Eq. (17), update interval [lo , hi ) such that lo = lo + bs, hi = lo + ls;
• Number of atom operations in encoding: one division, one multiplication3;
• Number of atom operations in decoding: two divisions, one multiplication. Binary search may involve if Eq. (17) is not used.

For rANS:

• Initial state: number c; • Encoding: set m = 2K , get ls, bs with Eq. (16), update c = c/ls · m + (c mod ls) + bs; • Decoding: set m = 2K , for encoded bits c , get b = c mod m, decode s = CDF−1(b)
with Eq. (17), update c = ls · c /m + (c mod m) − bs; • Number of atom operations in encoding: two divisions, two multiplications4;
• Number of atom operations in decoding: two divisions, one multiplication. Binary search may involve if Eq. (17) is not used.

For UBCS:

• Initial state: number c; • Encoding: update c = c · R + s; • Decoding: for encoded bits c , decode s = c mod R, update c = • Number of atom operations in encoding: one multiplication;

c /R ;

3We omit add/sub operations as they are negligible compared with multiplication/division. 4The multiplication/division/mod with m = 2K only involve bit operations. With the result of c/ls , c mod ls only involve one multiplication.

17

Table 4: More results on coding bandwidth (M symbol/s) of UBCS and rANS coder. We use the implementations in [17] for evaluating rANS.

Encoder Decoder

# threads
1 4 8 16
1 4 8 16

rANS
5.1±0.3 10.8±1.9 15.9±1.4 21.6±1.1
0.80±0.02 2.8±0.1 5.5±0.2 7.4±0.5

UBCS
380±5 709±56 1297±137 2075±353
66.2±1.7 248±8 460±16 552±50

• Number of atom operations in decoding: one division with remainder.
Overall, UBCS uses the least number of atom operations, which conveys that UBCS performs the best. Moreover, with PMF and CDF in Eq. (16), the optimal entropy coder cannot be guaranteed.

E More Experiments

In this section we will demonstrate our performance attributes across more benchmarking datasets. All experiments are conducted in PyTorch framework on one NVIDIA Tesla P100 GPU and Intel(R) Xeon(R) CPU E5-2690 @ 2.60GHz CPU. The code for LBB and the Flow++ model is directly taken from the original paper under MIT license.

E.1 Coding Efﬁciency of UBCS

Table 5: Detailed results on the coding performance of iFlow and LBB on ImageNet32. We use a batch size of 64.

ﬂow arch.
Flow++

compression technique
LBB [17] iFlow (Ours)

nll 3.871

bpd
3.875 3.873

aux. bits
45.96 34.40

encoding time (ms) inference coding

58.7±0.1

176±2.8 66.6±0.3

decoding time (ms) inference coding

83.2±0.4

172±4.7 95.3±0.3

Table 6: Detailed results on the coding performance of iFlow and LBB on ImageNet64. We use a batch size of 64.

ﬂow arch.
Flow++

compression technique
LBB [17] iFlow (Ours)

nll 3.701

bpd
3.703 3.703

aux. bits
38.00 34.42

encoding time (ms) inference coding

24.4±0.0

284±2.5 45.0±1.7

decoding time (ms) inference coding

35.7±0.1

281±2.2 57.0±1.4

The detailed experiments is shown in Table 4.
E.2 Compression Performance
Detailed experimental results on ImageNet32 and ImageNet64 datasets are displayed in Tables 5 and 6. Note that we further report the decoding time, which we observe is close to the model inference time.
E.3 Hyper-parameters
As discussed in Sec. 2.4, the codelength will be affected by the choices of h, k and S. As S is set to a large value – and will minimally affect the codelength resulting from MST – we mainly discuss h and k. Tables 7, 8 and 9 illustrate the codelength and auxiliary bits (in bpd) for differing choices

18

of h and k. It is clear that, for large k, the codelength decreases with a larger h. This is expected as larger h corresponds to a greater numerical precision of our linear interpolation. On the other hand, for a ﬁxed h, the codelength becomes larger with a smaller k, as a smaller k corresponds to a greater quantization error. A smaller k may even lead to the failure of iFlow entirely – especially if k is close to h, which would result in the potential of a zero-valued R in Eq. (4) for sufﬁciently small |f (x¯)|. On the other hand, the auxiliary bits are principally affected by k and not h. Therefore we note that a smaller k is preferred. To conclude, we can nonetheless achieve a near-optimal codelength with a considered choice of hyper-parameters. Thus we set k = 28 and h = 12 for the experiments.

Table 7: Codelengths in terms of bpd and auxiliary length on different h and k on the CIFAR10 dataset. N/A denotes the failure of the compression procedure. The theoretical bpd (nll) is 3.116.

h

6

8

10

12

14

bpd

18 3.229±0.000

N/A

N/A

N/A

N/A

20 3.225±0.000 3.152±0.000

N/A

N/A

N/A

22 3.224±0.000 3.147±0.000 3.130±0.000

N/A

N/A

k 24 3.224±0.000 3.146±0.000 3.126±0.000 3.124±0.000

N/A

26 3.224±0.000 3.146±0.000 3.125±0.000 3.119±0.000 3.122±0.000

28 3.224±0.000 3.146±0.000 3.124±0.000 3.118±0.000 3.118±0.000

30 3.224±0.000 3.146±0.000 3.124±0.000 3.118±0.000 3.116±0.000

32 3.224±0.000 3.146±0.000 3.124±0.000 3.118±0.000 3.116±0.000

auxiliary length

18 20 22 k 24 26 28 30 32

24.25±0.01 26.25±0.01 28.26±0.01 30.25±0.01 32.25±0.01 34.25±0.01 36.25±0.01 38.25±0.01

N/A 26.27±0.01 28.27±0.01 30.27±0.01 32.27±0.01 34.27±0.01 36.26±0.01 38.26±0.01

N/A N/A 28.27±0.01 30.27±0.01 32.27±0.01 34.27±0.01 36.27±0.01 38.27±0.01

N/A N/A N/A 30.27±0.01 32.27±0.01 34.27±0.01 36.27±0.01 38.27±0.01

N/A N/A N/A N/A 32.27±0.01 34.27±0.01 36.27±0.01 38.27±0.01

Table 8: Codelengths in terms of bpd and auxiliary length on different h and k on a SUBSET of ImageNet32 dataset. N/A denotes the failure of the compression procedure. The theoretical bpd (nll) is 3.883.

h

6

8

10

12

14

bpd

18 3.994±0.000 3.953±0.000

N/A

N/A

N/A

20 3.985±0.000 3.919±0.000

N/A

N/A

N/A

22 3.983±0.000 3.910±0.000 3.900±0.000

N/A

N/A

k 24 3.983±0.000 3.908±0.000 3.892±0.000 3.896±0.000 3.928±0.000 26 3.983±0.000 3.908±0.000 3.890±0.000 3.887±0.000 3.894±0.000

28 3.983±0.000 3.908±0.000 3.889±0.000 3.885±0.000 3.886±0.000

30 3.982±0.000 3.908±0.000 3.889±0.000 3.885±0.000 3.884±0.000

32 3.983±0.000 3.908±0.000 3.889±0.000 3.885±0.000 3.884±0.000

auxiliary length

18 20 22 k 24 26 28 30 32

24.37±0.01 26.38±0.01 28.38±0.01 30.38±0.01 32.38±0.01 34.38±0.01 36.38±0.01 38.38±0.01

24.37±0.01 26.39±0.01 28.39±0.01 30.39±0.01 32.39±0.01 34.39±0.01 36.39±0.01 38.39±0.01

N/A N/A 28.39±0.01 30.40±0.01 32.40±0.01 34.40±0.01 36.39±0.01 38.39±0.01

N/A N/A N/A 30.39±0.01 32.40±0.01 34.40±0.01 36.40±0.01 38.39±0.01

N/A N/A N/A 30.38±0.01 32.39±0.01 34.40±0.01 36.40±0.01 38.39±0.01

19

Table 9: Codelengths in terms of bpd and auxiliary length on different h and k on a SUBSET of ImageNet64 dataset. N/A denotes the failure of the compression procedure. The theoretical bpd (nll) is 3.718.

h

6

8

10

12

14

bpd

18 3.829±0.000 3.779±0.000 3.867±0.000

N/A

N/A

20 3.823±0.000 3.753±0.000 3.760±0.000 3.863±0.000

N/A

22 3.821±0.000 3.746±0.000 3.733±0.000 3.755±0.000 3.861±0.000

k 24 3.821±0.000 3.744±0.000 3.727±0.000 3.729±0.000 3.754±0.000 26 3.821±0.000 3.744±0.000 3.725±0.000 3.722±0.000 3.727±0.000

28 3.821±0.000 3.744±0.000 3.725±0.000 3.720±0.000 3.721±0.000

30 3.821±0.000 3.744±0.000 3.725±0.000 3.720±0.000 3.719±0.000

32 3.821±0.000 3.744±0.000 3.725±0.000 3.720±0.000 3.719±0.000

auxiliary length

18 20 22 k 24 26 28 30 32

24.40±0.01 26.40±0.01 28.40±0.01 30.40±0.01 32.40±0.01 34.40±0.01 36.40±0.01 38.40±0.01

24.41±0.01 26.41±0.01 28.42±0.01 30.42±0.01 32.42±0.01 34.42±0.01 36.42±0.01 38.42±0.01

24.39±0.01 26.41±0.01 28.42±0.01 30.42±0.01 32.42±0.01 34.42±0.01 36.42±0.01 38.42±0.01

N/A 26.39±0.01 28.41±0.01 30.42±0.01 32.42±0.01 34.42±0.01 36.42±0.01 38.42±0.01

N/A N/A 28.39±0.01 30.41±0.01 32.42±0.01 34.42±0.01 36.42±0.01 38.42±0.01

20

