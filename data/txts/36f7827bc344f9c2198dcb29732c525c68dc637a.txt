A STUDY OF PROXIES FOR SHAPLEY ALLOCATIONS OF TRANSPORT COSTS

arXiv:1408.4901v1 [cs.GT] 21 Aug 2014

A Study of Proxies for Shapley Allocations of Transport Costs

Haris Aziz NICTA and UNSW, Sydney, Australia
Casey Cahan University of Auckland, Auckland, New Zealand
Charles Gretton NICTA and ANU, Canberra, Australia Grifﬁth University, Gold Coast, Australia
Phillip Kilby NICTA and ANU, Canberra, Australia
Nicholas Mattei NICTA and UNSW, Sydney, Australia
Toby Walsh NICTA and UNSW, Sydney, Australia

HARIS.AZIZ@NICTA.COM.AU CCAH002@AUCKLANDUNI.AC.NZ CHARLES.GRETTON@NICTA.COM.AU
PHILLIP.KILBY@NICTA.COM.AU NICHOLAS.MATTEI@NICTA.COM.AU
TOBY.WALSH@NICTA.COM.AU

Abstract
We propose and evaluate a number of solutions to the problem of calculating the cost to serve each location in a single-vehicle transport setting. Such cost to serve analysis has application both strategically and operationally in transportation. The problem is formally given by the traveling salesperson game (TSG), a cooperative total utility game in which agents correspond to locations in a travelling salesperson problem (TSP). The cost to serve a location is an allocated portion of the cost of an optimal tour. The Shapley value is one of the most important normative division schemes in cooperative games, giving a principled and fair allocation both for the TSG and more generally. We consider a number of direct and sampling-based procedures for calculating the Shapley value, and present the ﬁrst proof that approximating the Shapley value of the TSG within a constant factor is NP-hard. Treating the Shapley value as an ideal baseline allocation, we then develop six proxies for that value which are relatively easy to compute. We perform an experimental evaluation using Synthetic Euclidean games as well as games derived from real-world tours calculated for fastmoving consumer goods scenarios. Our experiments show that several computationally tractable allocation techniques correspond to good proxies for the Shapley value.
1. Introduction
We study transport scenarios where deliveries of consumer goods are made from a depot to locations on a road network. At each location there is a customer, e.g. a vending machine or shop, that has requested some goods, e.g. milk, bread, or soda. The vendor who plans and implements deliveries is
1

AZIZ, CAHAN, GRETTON, KILBY, MATTEI, & WALSH
faced with two vexing problems. First, the familiar combinatorial problem of routing and scheduling vehicles to deliver goods cost effectively. Many varieties of this ﬁrst problem exist (Golden, Raghavan, & Wasil, 2008), and for our proposes we shall refer to it as the vehicle routing problem (VRP). We begin our investigation supposing that VRP has been solved heuristically, and therefore after the assignment of locations to routes has been made.
The second vexing problem is determining how to evaluate the cost to serve each location. Speciﬁcally, the vendor must decide how to apportion the costs of transportation to each location in an equitable and economically efﬁcient manner. The results of cost to serve analysis have a variety of important applications. Using the allocation directly the vendor can of course charge locations their allocated portion of the transportation costs. More realistically, vendors use the cost allocations when (re-)negotiating contracts with customers. Supply chain managers may also reference a cost allocation when deciding whether or not to continue trade with a particular location. Finally, provided market conditions are favourable, sales managers can be instructed to acquire new customers in territories where existing cost allocations are relatively high in order to share the cost of delivery among more locations.
Addressing the second vexing problem, this paper stems from our work with a fast-moving consumer goods company that operates nationally both in Australia and New Zealand. The company serves nearly 20,000 locations weekly using a ﬂeet of 600 vehicles. Our industry partner is under increasing economic pressure to realise productivity improvements through optimisation of their logistical operations. A key aspect of that endeavour is to understand the contribution of each location to the overall cost of distribution. In this study we focus at the individual route level for a single truck, where we apportion the costs of the deliveries on that route to the constituent locations. We formalise this setting as a traveling salesperson game (TSG) (Potters, Curiel, & Tijs, 1992), where the cost to serve all locations is given by the solution to an underlying traveling salesperson problem (TSP). Formalised as a game, we can use principled solution concepts from cooperative game theory, notably the Shapley value (Shapley, 1953), in order to allocate costs to locations in a fair and economically efﬁcient manner.
Calculating the Shapley value of a game is a notoriously hard problem (Chalkiadakis, Elkind, & Wooldridge, 2011). A direct calculation for a TSG requires the optimal solution to exponentially many distinct instances of the TSP. Sampling procedures can be used for approximating the value, however these too do not offer a practical solution for larger games. Moreover, we prove that there is no polynomial-time α-approximation of the Shapley value for any constant α ≥ 1 unless P = NP. To circumscribe these computationally difﬁculties, this work explores six proxies1 for the Shapley value. Our proxies offer tractable alternatives to the Shapley value, and in some cases appeal to other allocation concepts from cooperative game theory (Peleg & Sudho¨lter, 2007; Curiel, 2008). Two of our proxies appeal to the well-known Held-Karp and Christoﬁdes TSP heuristics, respectively.
We report a detailed experimental comparison of proxies using a large corpus of Synthetic Euclidean games, and problems derived from real-world tours calculated for fast-moving consumer goods businesses in the cities of Auckland (New Zealand), Canberra, and Sydney (Australia). We highlight three computationally tractable proxies that give good approximations of the Shapley value in practice. Our evaluation also considers the ranking of locations—least to most costly—induced by the Shapley and proxy values. Ranking is relevant when, for example, we are just interested in
1. We use the word proxy instead of approximation to ease discussion and, technically, many of these measures are stand-ins for the Shapley value, not approximations of it.
2

A STUDY OF PROXIES FOR SHAPLEY ALLOCATIONS OF TRANSPORT COSTS

identifying the most costly locations to serve. We again ﬁnd that three of our proxies provide good ranking accuracy taking the rank induced by the Shapley value as the target.

2. Preliminaries
We use the framework of cooperative game theory to gain a deeper understanding of our delivery and cost allocation problems (Peleg & Sudho¨lter, 2007; Chalkiadakis et al., 2011). In cooperative game theory, a game is a pair (N, c). N is the set of agents and the second term c : 2N → R is the characteristic function. Taking S ⊆ N, c(S) is the cost of subset S. A cost allocation is a vector x = (x0, . . . , xn) denoting that cost xi is allocated to agent i ∈ N. We restrict our attention to economically efﬁcient cost allocations, which are allocations satisfying ∑i∈N xi = c(N).
For any cooperative game (N, c), a solution concept φ assigns to each agent i ∈ N the cost φi(N, c). There may be more than one allocation satisfying the properties of a particular solution concept, thus φ is not necessarily single-valued, and might give a set of cost allocations (Peleg & Sudho¨lter, 2007). A minimal requirement of a solution concept is anonymity, meaning that the cost allocation must not depend on the identities of locations. Prominent solution concepts include the core, least core, and the Shapley value. For ε ≥ 0, we say that cost allocation φ is in the (multiplicative) ε-core if ∑i∈S φi ≤ (1 + ε)c(S) for all S ⊆ N (Faigle & Kern, 1993). The 0-core is referred to simply as the core. Both the core and ε-core can be empty. The ε-core which is nonempty for the smallest possible ε is called the least core. This particular ε is referred to as the least core value.2
Our work focuses on the single-valued solution concept called the Shapley value (Shapley, 1953). Writing SVi(N, c) for the Shapley value of agent i, formally we have:

|S|!(|N| − |S| − 1)!

SVi(N, c) = ∑

(c(S ∪ {i}) − c(S)). |N|!

(1)

S⊂N\{i}

In other words, the Shapley value divides costs based on the marginal cost contributions of agents In the traveling salesperson problem (TSP) a salesperson must visit a set of locations N =
{1, . . . , n} ∪ {0} starting and ending at a special depot location 0. For i, j ∈ N ∪ {0} i = j, di j is the strictly positive distance traversed when traveling from location i to j. Here, di j = ∞ if traveling directly from i to j is impossible. Taking distinct i, j, k ∈ N ∪ {0}, the problem is symmetric if and only if di j = d ji for all i, j ∈ N ∪ {0}. It satisﬁes the triangle inequality if and only if di j + d jk ≥ dik (Garey & Johnson, 1979).
A TSP is Euclidean when each location is given by coordinates in a (two dimensional) Euclidean space; therefore di j is the Euclidean distance between i and j. A Euclidean TSP is both symmetric and satisﬁes the triangle inequality.
A tour is given by a ﬁnite sequence of locations that starts and ends at the depot 0. The length of a tour is the sum of distances between consecutive locations. For example, the length of [0, 1, 2, 0] is d01 +d12 +d20. An optimal solution to a TSP is a minimum length tour that visits every location. It is NP-hard to ﬁnd an optimal tour, and generally there is no α-approximation for any α unless P = NP. An α-approximation for a given optimisation problem is an algorithm that runs on an instance x and returns a feasible solution F(x) which has cost c(F(x)) related to the optimal solution OPT (x) by

2. The 0-core of the transport game we focus on in this work can be empty. However, if the game is convex, the Shapley value lies in the core (Tamir, 1989).

3

AZIZ, CAHAN, GRETTON, KILBY, MATTEI, & WALSH
the following relation (Papadimitriou, 1994):
|c(F(x)) − c(OPT (x))| max{c(OPT (x)), c(F(x))} ≤ α.
Informally, α is a bound on the relative error of an approximation function. When ∀i, j di j are ﬁnite, the triangle inequality and symmetry hold, then polynomial-time approximations exist (Held & Karp, 1962; Christoﬁdes, 1976).
Given a TSP, the corresponding traveling salesperson game (TSG) is a pair (N, c). N is the set of agents which corresponds to the set of locations.3 The second term c : 2N → R is the characteristic function. Taking S ⊆ N, c(S) is the length of the shortest tour of all the locations in S. A cost allocation is a vector x = (x1, . . . , xn) denoting that cost xi is allocated to location i ∈ N. For the special depot location, we shall always take x0 = 0 (Potters et al., 1992)
3. Some Properties of the Shapley Value
The Shapley value has many attractive properties when used as a cost allocation scheme by a vendor. For example, whereas the 0-core can be empty, and therefore not yield any allocation at all (Tamir, 1989), the Shapley value always exists in the TSG setting. The Shapley value is also, for general games, the unique assignment of costs that satisﬁes three important properties: (1) anonymity, the cost allocated to a particular location is dependent only on the impact it has to the total cost; (2) efﬁciency, the entire cost of serving all N locations is allocated; and (3) strong monotonicity. The latter states that if the total cost of a coalition is reduced, then the allocation to all locations participating in that coalition is either reduced or not increased (Young, 1985). Formally, the marginal contribution from player i to the total cost of coalition S is:
ci(S) = c(S) − c(S \ {i}) if i ∈ S c(S ∪ {i}) − c(S) if i ∈/ S.
Strong monotonicity can be stated as: ∀S : ci(S) ≥ c i(S) =⇒ φi(N, c) ≥ φi(N, c ). Due to these and other derivative axiomatic properties, the Shapley value has been termed “the most important normative payoff division scheme” in cooperative game theory (Winter, 2002).
Another important property of the Shapley value is that it would allocate any ﬁxed costs incurred when serving a location to that location alone. If we treat a variant of the TSG where some locations have an associated ﬁxed cost in addition to their transportation costs— e.g. parking and loading fees —then the Shapley value will allocate those ﬁxed costs to the associated locations. Formally, given a ﬁxed cost f (i) of serving location i, f (i) does not need to be removed before computing the Shapley value, as follows. Suppose c is the characteristic function of the TSG deﬁned above, and c satisﬁes the identity c (S) = c(S) + ∑i∈S f (i).
Proposition 1 SVi(N, c ) = SVi(N, c) + f (i).
3. From here on we focus on a restriction of general games to delivery games (TSGs) and therefore we use location instead of agent for ease of exposition.
4

A STUDY OF PROXIES FOR SHAPLEY ALLOCATIONS OF TRANSPORT COSTS

Proof.

SVi(N, c) = ∑ (|S|!)(|N| − |S| − 1)!(c(S ∪ {i}) − c(S))/|N|!
S⊆N\{i}

= ∑ (|S|!)(|N| − |S| − 1)!((c (S ∪ {i}) + f (i)) − c(S))/|N|!
S⊆N\{i}

= ∑ (|S|!)(|N| − |S| − 1)!(c (S ∪ {i}) − c (S))/|N|! + ∑ (|S|!)(|N| − |S| − 1)!( f (i))/|N|!

S⊆N\{i}

S⊆N\{i}

= SVi(N, c ) + ( ∑ (|S|!)(|N| − |S| − 1)!/|N|!)( f (i))
S⊆N\{i}

= SVi(N, c ) + (|N|!/|N|!)( f (i))

= SVi(N, c ) + ( f (i))

K

We also have that by charging locations according to the Shapley value, we can expect to incentivize them to recruit new customers in their vicinity. Locations recruiting for a vendor can reasonably expect to lower the transportation costs they are allocated. In detail, consider a vendor trading with locations N = {1..|N|}. From the vendors perspective, adding a new location, |N| + 1, to an existing delivery route is clearly a good idea if the revenue generated by delivering to that location is greater than the marginal cost c(N ∪ {|N| + 1}) − c(N) of the new delivery. Because existing locations in the vicinity of |N| + 1 are already paying for deliveries, charging at the threshold c(N ∪ {|N| + 1}) − c(N) however will typically be unfair. In that case existing customers would likely be subsidizing new customers, and therefore disincentivize to ﬁnd new business for the vendor. The Shapley value mitigates this, and can be expected to provide recruitment incentives. Making this discussion more concrete, suppose the game is a Euclidean scenario with N = {x} a single agent at distance 100 from the depot and the new agent y is at distance 5 from x. The transportation cost of serving {x, y} can be as high as 210. Clearly, charging the new agent at most c({x, y}) − c({x}) = 10 while x continues to pay around 200 is unfair. On the other hand, if the vendor allocates costs according to the Shapley value, the existing customer’s costs decrease when the new agent joins.
Related to the above discussion, if the characteristic function is concave then the Shapley value lies in the non-empty 0-core. Formally, concavity is satisﬁed if for all S ⊆ N \ {i} : c(S ∪ {i} ∪ {|N| + 1}) − c(S ∪ {|N| + 1}) < c(S ∪ {i}) − c(S). Charging customers according to core values actually guarantees that they are incentivized to recruit. Speciﬁcally, for all i ∈ N : SVi(N ∪ {|N| + 1}, c) < SVi(N, c). In other words, the Shapley allocation of costs to existing locations decreases when a new customer |N| + 1 is added. Unfortunately general TSGs do not necessarily have concave characteristic functions. However, concavity in expectation is all that is required for existing locations to realise savings. In practice there are synergies, and incentives for further recruitment on routes where we charge according to the Shapley value. In our empirical data, even when the game is not concave we frequently observe such incentives given a Shapley allocation. And compared to charging customers according to their marginal contribution to costs, we do not explicitly disincentivize recruitment. Summarizing, if an agent knows that all locations are charged according to the Shapley value, they can typically expect incentives to recruit new locations in their vicinity.

5

AZIZ, CAHAN, GRETTON, KILBY, MATTEI, & WALSH
4. Computing the Shapley Value
Our focus now shifts to calculation of the Shapley value. Considering games in general, it should be noted that a direct evaluation of Equation 1 requires we sum over exponentially many quantities. Such a direct approach to the calculation of the Shapley value is therefore not practical for any game of a reasonable size. Indeed, starting from the earliest literature (Mann & Shapley, 1962), authors motivate auxiliary restrictions and constraints, for example on the size and importance of coalitions, in order to describe games where the Shapley value can be calculated. More recent literature proposes a variety of approaches to directly calculate the Shapley value for certain games (Conitzer & Sandholm, 2006; Ieong & Shoham, 2005), however efﬁcient calculation of the value for TSGs has remained elusive. We require an accurate baseline in order to experimentally evaluate the proxies we later develop for the Shapley value of the TSG. To that purpose we investigate exact and general sampling-based approximations of the Shapley value. We treat our transport setting speciﬁcally, describing a novel procedure for an exact evaluation of the Shapley value of a TSG by following Bellman’s dynamic programming solution to the underlying TSP. We also discuss how in general the Shapley value can be evaluated approximated using a sampling procedure. We pursue that sampling approach in TSGs, considering two distinct characterisations of the Shapley value which are amenable to sampling-based evaluation. We performed a detailed empirical study of samplingbased evaluations using Synthetic TSGs instances where the underlying TSP model is Euclidean. In closing we give a hardness proof relating to the computation of the Shapley value of TSGs, showing that approximation of the Shapley value in that game is intractable.
4.1 Dynamic Programming
We found that the steps performed by a dynamic programming (DP) solution to the underlying TSP expose the margins—i.e. terms of the form c(S ∪ {i}) − c(S)—that are summed over in a direct evaluation of Equation 1. The Shapley value of a TSG can therefore be computed more-or-less as a side effect while a DP procedure computes the optimal solution to the underlying TSP.
These ideas can be made concrete by following the procedure outlined by Bellman (1962). The equations at the heart of that TSP solution procedure recursively deﬁne a cost function, c(S, j), which is the shortest path through all locations in S starting at the depot 0 and ending at j.4
c({ j}, j) = d0 j c(S, j) = min (c(S \ { j}, k) + dk j)
k∈S,k= j
Following the above recursive deﬁnition, a DP process iteratively tabulates c(S, j) for successively larger coalitions S. At iteration n that procedure shall tabulate all quantities c(S, j) taking |S| = n. By computing the values c(S, 0) for |S| < |N|, we have access to the characteristic function evaluation c(S) of subtours of locations in S, as follows:
c(S) = c(S, 0) = min(c(S, j) + d j0).
j∈S
4. Our notations depart slightly from Bellman’s seminal work. Whereas we take c(S, j) to be the cost of each optimal tour-preﬁx path (i.e. starting at the depot 0 and ending at j), Bellman originally took c(S, j) to be the cost of optimal tour-sufﬁx paths starting from j, traversing the locations in S and ending at the depot 0.
6

A STUDY OF PROXIES FOR SHAPLEY ALLOCATIONS OF TRANSPORT COSTS
Therefore, one can incrementally evaluate the sum in Equation 1 for a TSG, while calculating optimal subtours for progressively larger coalitions withing a classical DP procedure. Intuitively, as we compute a tour using Bellman’s algorithm, by additionally evaluating c(S, 0) for each encountered subset S we obtain all quantities required to calculate the marginal costs of locations. It is worth noting that the dynamic programming approach does not address the exponential number of subsets we need to sum over in the evaluation of Equation 1. We have therefore highlighted a concrete relationship between a classical procedure for the TSP and the Shapley value of the corresponding TSG. However, this observation does not yield a practical algorithm for games with many more than a dozen locations.
4.2 Sampling-Based Evaluation
Using either the DP solution, or indeed the state-of-the-art TSP solver Concorde (Applegate, Bixby, Chvatal, & Cook, 2007) in a direct calculation of the Shapley value, we ﬁnd it impractical to compute the exact Shapley value for instances of the TSG larger than about 15 locations. A direct method requires an exponential number of characteristic function computations, each requiring we solved an NP-hard problem. To obtain an accurate baseline for reasonably sized games our investigation now turns to sampling procedures. Indeed, because the Shapley value is a population average it is reasonable to estimate the value using a sampling procedure.
The ﬁrst use of sampling to approximate the Shapley value of games was proposed and studied by Mann and Shapley (Mann & Shapley, 1960). Perhaps the most elegant and general method proposed by Mann and Shapley is called Type-0 sampling. This method repeatedly draws uniformly at random a permutation of the agents. The marginal cost of each agent i is then calculated, by taking the difference in the cost of serving agents up to and including i in the permutation, and the cost of serving the agents proceeding i. By repeatedly sampling permutations and the marginal costs of including each agent i in this way, overtime we arrive at an unbiased estimate of the Shapley value. Further elaboration of this procedure for the TSG is given below. Type-0 sampling has appeared over the years in various guises, and is reported under a variety of different names in the literature on approximating power indices—of which the Shapley value is but one—in coalitional games. A recent variant of Type-0 sampling appears as the ApproShapley algorithm by Castro et al. in a paper which proves asymptotic bounds on the sampling error of that method (Castro, Go´mez, & Tejada, 2009). ApproShapley shall be the focus of our sampling work, however prior to giving its details, it is worth brieﬂy reviewing other classes of game where sampling-based evaluations have been explored. Bachrach et al. have previously examined Type-0 sampling in simple games—i.e. cost of a coalition is either 0 or 1—deriving bounds that are probably approximately correct. In other words, the actual Shapley value lies within a given error range with high probability (Bachrach, Markakis, Resnick, Procaccia, Rosenschein, & Saberi, 2010). Continuing in this line of work, Maleki et al. show that if the range or variance of the marginal contribution of the players is known ahead of time, then more focused (termed stratiﬁed) sampling techniques may be able to decrease the number of samples required to achieve a given error bound (Maleki, Tran-Thanh, Hines, Rahwan, & Rogers, 2013). Other methods of approximating the Shapley value, speciﬁcally for weighted voting games, have appeared in the literature including those based on multi-linear extensions (Leech, 2003; Owen, 1972) and focused random sampling (Fatima, Wooldridge, & Jennings, 2008, 2007)
To calculate the Shapley value of a TSG via sampling we employ the Type-0 method suggested by Mann and Shapley (Mann & Shapley, 1960), called ApproShapley by Castro et al.. The pseu-
7

AZIZ, CAHAN, GRETTON, KILBY, MATTEI, & WALSH

docode is given in Algorithm 1. Writing π(N) for the set of |N|! permutation orders of locations N, taking Π ∈ π(N) we write Πi for the subset of N which precede location i in Π. An alternative formulation of the Shapley value can be characterised in terms of π(N), by noting that value equates with marginal cost of each location when we construct coalitions in all possible ways, as follows.

∑ 1

SVi(N, c) =

(c(Πi ∪ {i}) − c(Πi))

(2)

|N|! Π∈π(N)

For each sampled permutation, ApproShapley evaluates the characteristic function for each i ≤ |N| computing the length of an optimal tour for the set of locations in the i-sized preﬁx. By construction, the cost allocation produced by ApproShapley is economically efﬁcient. As a small but important optimization, in our work we cache the result of each evaluation of the characteristic function to avoid solving the same TSP twice.

Algorithm 1 ApproShapley

Input: N = {1, . . . , n} locations with cost c(S) to serve a subset S ⊆ N and m number of iterations. Output: SVi for all i ∈ |N|

1 SV ← []

2 for i ← 1 to |N| do 3 SVi ← 0 4 end for

5 SampleNumber ← 1

6 for SampleNumber ← 1 to m do

7 Randomly select a permutation of the locations Perm from π(N)

8 S ← 0/

9 for i ← 1 to |N| do

10

S ← S ∪ {Permi}

11

SVPermi ← SVPermi + (c(S) − c(S \ {Permi}))

12 end for

13 end for

14 TotalValue ← ∑i∈N SVi 15 for i ← 1 to |N| do 16 SVi ← SVi ∗ (c(N)/TotalValue) 17 end for 18 return SV

In our work, we also considered an alternative sampling method, which samples not over permutations, but rather over subsets of locations as implied by the formulation in Equation 1 of Section 2. There are fewer subsets than there are permutations, a fact which we supposed could be an advantage in a sampling-based evaluation of the Shapley value. We name this method SubsetShapley, which by construction also produces an economically efﬁcient allocation. Later we empirically ﬁnd the SubsetShapley performs worse than ApproShapley, however because this approach does not yet appear in the literature we believe it worthy of discussion. SubsetShapley follows Algorithm 1 except for Lines 7–10. In this case at every iteration of the loop at Line 6 we draw a set Si ⊆ N \ {i} uniformly at random for each location i. For each i, the update to SVi is then the weighted marginal contribution, formally SVi ← SVi + |S|!(n − |S| − 1)!(c(S ∪ i) − c(S)). The coefﬁcient |S|!(n − |S| − 1)! ensures that for each subset Si of locations sampled, we account for the number of permutations where locations Si are ordered before location i.

8

A STUDY OF PROXIES FOR SHAPLEY ALLOCATIONS OF TRANSPORT COSTS In order to test which sampling method performs best, we ran convergence tests on 50 random instances for up to 5000 iterations. The instances were Euclidean TSGs on a 1,000x1,000 dimensional square with 10 locations, each at coordinates given by a pair of 32-bit ﬂoating point numbers. For each instance we calculated the exact Shapley value of every location, so that we could compare the sampled allocations with their exact counterparts. Figure 4.2 graphically summarises the results from this experimentation. We ﬁnd the ApproShapley method of sampling over permutations provides a faster convergence. After as few as 100 iterations ApproShapley achieves an average error of ≈ 10% per location with a maximum error of ≈ 20%. Additionally, the stability of the updates for ApproShapley, as measured by the percentage of the allocation that is re-assigned per iteration, is already quite good after 40 iterations. ApproShapley quickly converges to a correct and stable answer which it continues to reﬁne as more samples are taken. In practice, ApproShapley achieves a lower error, earlier, and continues to converge on an error of 0.0 faster than SubsetShapley.
9

AZIZ, CAHAN, GRETTON, KILBY, MATTEI, & WALSH 10

Figure 1: Comparison of the performance of ApproShapley (left) and SubsetShapley(right) for 100 iterations (top) and 5000 iterations (bottom) for TSGs with 10 locations. The graphs show minimum and maximum (outside the graph range for SubsetShapley) error in the Shapley value for a single location averaged over 50 instances. The error is computed as a percentage difference between the actual Shapley value and the one computed by sampling. Additionally, the average percent error for all locations per iteration is shown.

A STUDY OF PROXIES FOR SHAPLEY ALLOCATIONS OF TRANSPORT COSTS

4.3 Theoretical Hardness

We now consider, for the most general setting of the TSG, the difﬁculty of calculating the Shapley value. Below we prove that the Shapley value of a location in the TSG cannot be approximated within a constant factor in polynomial-time unless P = NP.

Theorem 2 There is no polynomial-time α-approximation of the Shapley value of the location in a TSG for constant α ≥ 1 unless P = NP.

Proof. Let G(N, E) be a graph with nodes N and edges E. If an α-approximation exists we can

use it to solve the NP-complete Hamiltonian cycle problem on G. First, from G construct a complete

weighted and undirected graph G (N, E ), where (i, j) has weight 1 if (i, j) is in the transitive closure

of E, and otherwise has weight n!α. If there is a Hamiltonian cycle in G then the Shapley value of

any i ∈ N in the TSG posed by G is at most 1. Suppose there is no Hamiltonian cycle in G. We

show there exists a permutation π of N that induces a large Shapley value for any node j as follows:

repeatedly add a node from N\ j to π so that there remains a Hamiltonian cycle amongst elements

in π; when there is no such node then add j. The marginal cost of adding j to π is at least n!α.

The Shapley value of j is the average cost of adding it to a coalition S ⊆ N \ j, therefore its Shapley

value is at least α. Even though edge weights in G are large, we can represent G compactly in

O(log(n) + n2 log(α)) space. An α-approximation on G for j therefore decides the existence of the

Hamiltonian cycle in G.

K

5. Proxies for the Shapley Value
The use of ApproShapley requires that we solve an NP-hard problem each time we evaluate the characteristic function. This is feasible for small TSG instances with less than a dozen locations, however it does create an unacceptable computational burden in larger, realistically sized games. We now describe a variety of proxies for the Shapley value that require much less computation in practice.
For the purposes of the discussion below we assume that an optimal tour for the underlying TSP is given. Not all our proxies yield economically efﬁcient allocations of the cost of the optimal tour. For that reason, we deﬁne proxies in terms of the induced fractional allocation of the cost of the optimal tour. Later, we shall compare these fractional allocations to that induced by computing the fractional Shapley value, formally φiSV = SVi/∑j∈n SVj. This formulation based on fractional allocations allows us to compare the cost allocations from all the proxies on equal footing, in a way that would be used in operational contexts such as transport settings. This formulation also enables us to efﬁciently—i.e. in the game theoretic sense—allocate the cost of the optimal route only having to solve the NP-hard TSP once.

5.1 Depot Distance (φ DEPOT)

The distance from the depot — i.e. di0 for location i — is our most straightforward proxy. We allocate cost to location i proportional to di0. The fraction allocation to location i is

φ DEPOT = di0 .

i

n
∑i=1

d

i0

For this proxy, a location that is twice as distant from the depot as another has to pay twice the cost.

11

AZIZ, CAHAN, GRETTON, KILBY, MATTEI, & WALSH

5.2 Shortcut Distance (φ SHORT)

Another proxy that is straightforward to calculate and which has been used in commercial routing software is the shortcut distance. This is the marginal cost savings of skipping a location when traversing a given optimal tour. With no loss of generality, suppose the optimal tour visits the locations according to the sequence [0, 1, 2, . . . ]. Formally, SHORTi = di−1,i + di,i+1 − di−1,i+1, where locations 0 and n + 1 are the depot, and di j is the cost of travel from location i to j. The fractional allocation given by the shortcut distance is then

φ SHORT = SHORTi

i

∑ j∈N SHORT j.

5.3 Re-routed Margin (φ ) REROUTE
For a location i ∈ N, REROUTEi is deﬁned as c(N) − c(N\i)). The allocation to a player can be computed with at most two calls to an optimal TSP solver. The fractional allocation is

φ REROUTE =

(c(N) − c(N\i)) .

i

∑ j=N(c(N) − c(N\ j))

5.4 Christoﬁdes Approximation (φ CHRIS)
A more sophisticated proxy is obtained if we use a heuristic when performing characteristic function evaluations in ApproShapley, rather than solving the individual induced TSPs optimally. For this proxy we use sampling to estimate the Shapley value and we use an approximation algorithm to estimate the underlying TSP cost. To approximate the underlying TSP characteristic function, the Christoﬁdes heuristic (Christoﬁdes, 1976), an O(N3) time procedure is used. To obtain a fractional quantity φiCHRIS, we divide the allocation to location i by the sum total of allocated costs. Assuming a symmetric distance matrix satisfying the triangle inequality, the Christoﬁdes heuristic is guaranteed to yield a tour that is within 3/2 the length of the optimal tour.
We brieﬂy describe how the heuristic operates. The TSP instance is represented as complete undirected graph G = (V, E), with one vertex in V for each location, and an edge E between every distinct pair of vertices. For i, j ∈ V the edge (i, j) ∈ E has weight di j. A tour is then obtained as follows: (1) compute the minimum spanning tree (MST) for G, (2) ﬁnd the minimum weight perfect matching for the complete graph over vertices with odd degree in that MST (typically performed using the Hungarian algorithm), (3) calculate an Eulerian tour for the Euler multigraph obtained by adding edges from Step (2) to the MST from Step (1), and (4) obtain a ﬁnal tour for the TSP by removing duplicate locations from the Eulerian tour.

5.5 Nested Moat-Packing (φ MOAT)
A cost allocation method based on a nested moat-packing was ﬁrst introduced by Faigle, Fekete, Hochsta¨ttler, and Kern (1998). This allocation is obtained by apportioning a grand-coalition cost equal to the value of the Held-Karp (Held & Karp, 1962) relaxation of the underlying TSP, multiplied by a constant factor. It is worth brieﬂy considering some details of the background of this approach, and the geometric intuitions.
The value of the Held-Karp relaxation of a TSP instance corresponds to a fairly tight lower bound on the length of an optimal tour. That value is a lower bound for the TSP in the usual sense

12

A STUDY OF PROXIES FOR SHAPLEY ALLOCATIONS OF TRANSPORT COSTS

Figure 2:

Depicts an optimal nested moat-packing, and the optimal tour (blue-line) for a TSP scenario with 6 locations. The locations are indicated by their digit labels (e.g. “1”, “2”, . . .), and occur at the center of the green moats, which appear as disks. Each green disk depicts a distinct moat associated with one location. The orange region is the moat associated with the set of locations {5, 6}. Following the nesting-scheme, the orange moat surrounds an internal region comprising the green moats around locations 5 and 6, respectively. There are 7 moats in total, and the optimal tour in this case traverses the width of each moat exactly twice.

13

AZIZ, CAHAN, GRETTON, KILBY, MATTEI, & WALSH

– i.e. it is less than or equal to the length of an optimal tour. By multiplying this value by a small

factor, speciﬁcally 1.5, one can obtain an upper bound. The approach discussed here allocates

costs to locations so that the sum of allocated costs equates with that upper bound. The allocation

gives 12 -core values provided the distance matrix is symmetric and satisﬁes the triangle inequality.

Formally, where Pi is the cost of location i, the moat-packing solution satisﬁes ∑i∈N Pi ≥ c(N) and

∀S ⊆ N : ∑i∈S Pi ≤ (1 + ε)c(S).

It

is

is

known

that

ε

≤

1 2

and

conjectured

that

ε

≤

13 .

In this

work we induce a fractional allocation, written φiMOAT, by normalizing as we have done for other

proxies. The solution to the Held-Karp relaxation, and therefore the moat-packing allocation, has an

interesting geometric interpretation which we brieﬂy discuss (see Cook, Cunningham, Pulleylank,

and Schrijver (1998) for a longer exposition). A graphic providing concrete examples of the required

concepts is in Figure 2. Our discussion distinguishes the concept of a point, a geometric point given

by its coordinates, and a location, which is a point that corresponds to a customer in the underlying

TSP. The proposed allocation is calculated by surrounding locations using a set of geometrically

nested reagions called moats. For example, in Figure 2 we have 6 locations, each of which has its

own green moat. In our graphic the locations 5 and 6 have their own green moats that describe an

interior region which is then surrounded by an outer orange moat. A moat is deﬁned by an interior

region, containing the set of locations we are surrounding with the moat, and a surrounding contour.

The interior region occurs in the space encapsulated by the moat. That moat is the region between

the boundary of the interior region and the surrounding contour. The smallest distance between a

point in the interior region and one on the surrounding contour is greater than or equal to zero. The

minimum such distance gives the width of the moat. Finally, there can be no locations in a moat.

As is usual in our setting, we need only consider moats comprising the set of points whose minimal

straight-line distance to a point in the interior region is less than or equal to the moat width. For

example, taking the interior region for a single location to consist only of its single point, the moat is

the region between that point and a circle contour of constant radius. The radius of that circle is the

width of the moat. Concretely, the green disks in Figure 2 depict circular moats around individual

locations. To obtain a cost allocation, moats are arranged so that for a vehicle to visit the set of

locations in the underlying TSP, that vehicle must traverse the width of each moat at least twice.

Choosing moats in order to to maximise the sum of their widths, the distance traversing all chosen

moats twice corresponds to the value of the Held-Karp lower bound. One obtains an ε-core value by

allocating each moat width twice to locations outside the moat, and then scaling those allocations,

here by the constant factor 1.5, to ensure the sum of allocated costs exceeds the length of an optimal

tour.

A compilation of the above ideas is expressed mathematically below in the constraints and

optimisation criterion in Equation 3. Formally, the moat width, wS, for a set of locations S ⊆ N is

calculated by solving the LP in Equation 3. Below, taking the TSP as given by a weighted fully

connected graph, we use the notation δ (S) for the set of edges joining locations in S to locations in

N \ S.

max 2 ∑S⊆N S≡0/ wS

s.t.

wS ≥ 0

∀S ⊆ N S ≡ 0/

(3)

∑i j∈δ (S) wS ≤ di j ∀i, j ∈ N

The dual of this LP corresponds to the well-known Held-Karp relaxation of the TSP, which can be solved in polynomial-time.

14

A STUDY OF PROXIES FOR SHAPLEY ALLOCATIONS OF TRANSPORT COSTS
Once a small set of non-zero wS terms are computed as per Equation 3, a nested packing is obtained by following the post-processing procedure described by O¨ zener, Ergun, and Savelsbergh (2013). A packing is nested if and only if ∀S , S s.t. wS > 0 and wS > 0, if S ∩ S ≡ 0/ then either S ⊆ S or S ⊆ S . For any optimal solution to Equation 3 there is a corresponding nested packing with the same objective value (Cornue´jols, Naddef, & Pulleyblank, 1985). The nested constraint is required and, intuitively, it prevents overcharging a subset of locations that coalesce in a moat – i.e. prevents the allocation from violating the universally quantiﬁed constraint in the deﬁnition of the core. For the nesting critera to be violated there must be three distinct non-empty sets of locations S, S and S , so that wS∪S > 0 and wS ∪S > 0. Post-processing iteratively identiﬁes and eliminates such cases. Identiﬁcation is straightforward. For each elimination we take the assignment τ ← min{wS∪S , wS ∪S }, and make the following assignment updates to the moat widths: wS ← wS + τ, wS ← wS + τ, wS∪S ← wS∪S − τ, and wS ∪S ← wS ∪S − τ. This iterative procedure terminates yielding a nested packing, however the algorithm can take exponential time in the worst case. That being said, in all our experiments we found that nesting takes only a fraction of a second. Finally, an ε-core allocation is obtained where, for each S ⊆ N we distribute the cost 3 × wS arbitrarily to the locations in the set (N\0)\S – we distribute the term evenly to all nodes outside that moat for S, excluding the depot node 0.
5.6 Hybrid Proxy Early on in our experimentation, we made an important observation that lead us to develop a sixth “blended” proxy, φ BLEND. This proxy is a linear combination of φ MOAT and φ DEPOT. We experimentally identify a λ ∈ [0, 1] for which λ × φ MOAT + (1 − λ ) × φ DEPOT provides an improved proxy for φ SV compared to either component proxies in isolation.
Our observation is that the φ MOAT does not properly distribute the depot allocation of moat widths to other locations. In order to stay within the 1/2-core allocation, that width is distributed in equal parts to all locations. Blending the φ MOAT with φ DEPOT mitigates this problem, and as we observe, increases proxy accuracy relative to φ SV. The value of the improvement seems to decrease gradually as the size of games increases. Figure 3 plots the beneﬁt of blending proxies at different values of λ in our corpus of Synthetic games and the in a corpus of Real-World transport scenarios. A detailed description of the Real-World scenarios is given later in Section 7. Experimentally we found λ = 0.6 to be most effective in Synthetic games. A clear signal for the optimal value of λ in Real-World games is not obvious, however there is clear support in our data for blending the moat and depot distances proxies. The graphs in Figure 3 show the average and worst case error in cost allocation to a particular location. We also measured the root mean squared error (RMSE) over all locations. The RMSE did not provide a clear signal to support a particular blending parameter, though it did remain clear that blending performed better than either proxy in isolation for both bot Synthetic and Real-World games.
15

AZIZ, CAHAN, GRETTON, KILBY, MATTEI, & WALSH

Average Absolute Error between Shapley and Hybrid

0.10 Maximum Error per Blend Percentage

35

0.08

30

25 0.06
20

0.04 15

0.02

10

0.000

20

40

60

5

80

100

Percentage of Hybrid that is Moat

0.10 Maximum Error per Blend Percentage for Combined 10 Players 20 Players
0.08

0.06

0.04

0.02

0.000

20

40

60

80

100

Percentage of Hybrid that is Moat

Average Absolute Error between Shapley and Hybrid

Average Absolute Error between Shapley and Hybrid

0.10 Average Error per Blend Percentage

35

0.08

30

25 0.06
20

0.04 15

0.02

10

0.000

20

40

60

5

80

100

Percentage of Hybrid that is Moat

0.10 Average Error per Blend Percentage for Combined 10 Players 20 Players
0.08

0.06

0.04

0.02

0.000

20

40

60

80

100

Percentage of Hybrid that is Moat

Average Absolute Error between Shapley and Hybrid

Figure 3: Effect of the blending parameter λ on the error of Shapley allocation prediction for all of the Synthetic datasets (top) and all of the Real-World scenarios (bottom). The lefthand graph shows the average worst case error measured at any single location, while the right-hand graph shows the average error over all locations.

16

A STUDY OF PROXIES FOR SHAPLEY ALLOCATIONS OF TRANSPORT COSTS

6. Analysis of Na¨ıve Proxies

We refer to the three proxies φ DEPOT, φ SHORT and φ REROUTE, as being na¨ıve. Contrastingly, we call φ CHRIS, φ MOAT and φ BLEND the sophisticated proxies. The formulation of the na¨ıve proxies φ DEPOT and φ SHORT make them amenable to direct analysis of their worst case performance. We consider settings where the na¨ıve proxies φ DEPOT and φ SHORT can perform quite badly.
In order to illustrate this, consider a TSG where the depot is at one corner of a square of dimen-
sion a with one location at each of the other 3 corners. Locations nearest the depot are indexed 1
and 3, and the third location indexed 2.

a

Location 1

Location 2

a

a

Depot

a

Location 3

Our na¨ıve proxies yield the following allocations:

i

φ SV φ DEPOT φ SHORT

1, 3 0.299a 0.293a 0.333a

2 0.402a 0.415a 0.333a

Observe φ DEPOT performs well in this case (maximum of ≈ 11% error) while φ SHORT does not (min-
imum of ≈ 16% error). We now identify some pathological cases on which the φ SHORT and φ DEPOT proxies perform
poorly. Our ﬁrst result demonstrates that φ DEPOT and φ SHORT may under-estimate the true Shapley
value badly.

Theorem 3 There exists an n location TSP problem on which, for some location i, the ratio φiDEP / OT φiSV goes to 0 as n goes to ∞. For the same problem the ratio / φiSHORT φiSV goes to 0 as n goes to ∞ for Θ(n)
of the locations.

Proof. Suppose the ﬁrst n − 1 locations are at distance a from the depot, whilst the nth location is located at a distance a in the opposite direction from the depot.

a Locations 1, . . . , n − 1

Depot

a Location n

Note that the normalization constant for φ SV, ∑ j∈n SVj = 4a. Now φnSV = 2a/4a = 1/2 since the cost of adding the nth location to any coalition is 2a. Leaving, for i < n,

φiSV = 2a/4(na−1) = 2(n1− 1) .

On

the

other

hand,

the

normalization

constant

for

φ DEPOT,

n
∑i=1

di

0

=

na

since

all

locations

are

equidistant from the depot. Giving, for all i ≤ n, φiDEPOT = n1 .

17

AZIZ, CAHAN, GRETTON, KILBY, MATTEI, & WALSH

Thus for i < n,

φiDEPOT = 1/n = 2n − 1

φiSV

1/2(n−1)

n

which goes to 2 as n → ∞. While

φnDEPOT = 1/n = 1 φnSV 1/2 2n

which goes to 0 as n → ∞.

Note that the shortcut proxy, φ SHORT performs poorly on this example. For i < n, φiSHORT = 0 since all the locations are co-located, leaving φnSHORT = 1. For i < n we have φiSV = 1/2(n − 1). Thus,

for i < n,

φiSHORT = 0 = 0

φiSV

1/2(n−1)

and

φnSHORT = 1 = 2

φnSV

1/2

K

Our second result demonstrates that φ DEPOT can also over-estimate the true Shapley value badly.

Theorem 4 There exists an n location TSG where the ratio / φiSV φiDEPOT goes to 0 as n goes to ∞ for Θ(n) of the locations.

Proof. Suppose the ﬁrst n − 1 locations are at distance a from the depot, whilst the nth location is located at a distance (n + 1)a from the depot in the opposite direction.

a Locations 1, . . . , n − 1

Depot

a(n + 1)

Location n

Note that the normalization constant for φ SV, ∑ j∈n SVj = 2a + 2a(n + 1) = 2a(n + 2). The Shapley value SVi for any i < n is n2−a1 , thus

φiSV = 2a2(a/nn+−12) = (n − 1)1(n + 2) .

While the fractional Shapley allocation for location n is

φnSV = 22aa((nn ++ 12)) = 12 .

The

normalization

constant

for

φ DEPOT

is

n
∑i=1

di

0

=

a(n − 1) + a(n + 1)

=

2an.

For

location

n

the assignment from the distance based proxy is

φnDEPOT = a(n2a+n1) = n2+n1 .

18

A STUDY OF PROXIES FOR SHAPLEY ALLOCATIONS OF TRANSPORT COSTS

For i < n, Thus, for location n we have

φiDEPOT = 2aan = 21n .

φnSV = 1/2 = 2n φnDEPOT n+1/2n 2n + 1

which goes to 1 as n goes to ∞.

For i < n we have

φiSV

1/(n−1)(n+2)

=

=

2n

φiDEPOT

1 2n

(n − 1)(n + 2)

which goes to 0 as n goes to ∞.

For the φ SHORT we again have i < n, φiSHORT = 0 leaving φnSHORT = 1. Thus, / φnSV φnSHORT = 1/2 while

for i < n, / φiSV φiSHORT is undeﬁned.

K

Our third result demonstrates that φ SHORT may under-estimate the Shapley value badly even on very simple examples which may be embedded in larger problems.

Theorem 5 There exists a 2 location TSG instance for which φ SHORT/φ SV = 0 for one of the two locations.

Proof. Suppose the ﬁrst location is located a distance a from the depot with the second location located a distance of a farther down the road.

a

a

Depot

Location 1

Location 2

For the ﬁrst location we have φ1SHORT = 0, as removing it has no effect on the distance we must travel to the second location. This leaves φ2SHORT = 1. The Shapley value for the ﬁrst location is

SV = 2a + 0 = a. 22

Which gives φ SV = a/4 and thus

φ SHORT 0 φ SV = a/4 = 0.

K

Our fourth and ﬁnal result demonstrates that φ SHORT may over-estimate the Shapley value badly.

Theorem 6 There exists a four location TSG for which φ SV/φ SHORT = 0 for two of the four cities.

Proof. Consider a four location TSG where locations 1 and 2 are ε from each other and the depot while cities 3 and 4 are at a distance a from the depot and ε from each other.

19

AZIZ, CAHAN, GRETTON, KILBY, MATTEI, & WALSH

Location 1

ka

ε

Depot

ε

ε

Location 2

ka

Location 4 ε
Location 3

We note that here ε << ka, as such we will hide ε terms in O(ε). The marginal cost saved
by skipping any location is ε, this means that all locations have the same allocation according to φ SHORT, namely for all i ∈ {1, . . . , 4}, φiSHORT = 1/4.
Note that the normalization constant for φ SV, ∑ j∈n SVj = 2ka + O(ε). To compute the Shapley values for locations 1 and 2 we observe that, in any given permutation, each location adds a multiple of ε, thus by symmetry, for i ∈ {3, 4},

φiSV = 2kaO+(εO)(ε)

To compute the Shapley value for locations 3 and 4 we observe that, no matter where in the permutation they appear, the ﬁrst contributes 2ka while the other contributes only ε. Consequently, by symmetry, for locations i ∈ {3, 4},

SV

2ka+O(ε ) 2

1

φi

=

=.

2ka + O(ε) 2

Thus, locations i ∈ {1, 2}, we have

φ SV

O(ε ) 2ka+O(ε )

4O(ε )

φ SHORT = 1/4 = 2ka + O(ε) .

The term goes to 0 as k goes to ∞. K

7. Empirical Study
We implemented each of the six proxies discussed, along with a version of ApproShapley that uses Concorde (Applegate et al., 2007) to evaluate the characteristic function of the TSG. The Concorde program is used to ﬁnd optimal solutions to TSPs. Rather than calculating φ SV by direct enumeration as a baseline to compare proxies, we estimate that value using ApproShapley with Concorde. For the size of games we have considered, we ﬁnd that 4000 iterations of ApproShapley to be sufﬁcient to obtain accurate baseline values.
We experimented using a corpus of games comprised of two sets of TSGs. The ﬁrst set of games are Synthetic. For each i ∈ [4, . . . , 35], we generate 20 instances of the Euclidean TSG with i locations occurring uniformly at random in a square of dimension 1, 000. The horizontal and vertical coordinates of the locations are represented using 32-bit ﬂoating point numbers. Those Euclidean games are available online at http://users.cecs.anu.edu.au/~charlesg/tsg_euclidean_ games.tar.gz.
20

A STUDY OF PROXIES FOR SHAPLEY ALLOCATIONS OF TRANSPORT COSTS
The second set of games is taken from large Real-World VRPs in the cities of Auckland, New Zealand; Canberra, Australia; and Sydney, Australia. Heuristic solutions to those VRPs are calculated using the Indigo solver (Kilby & Verden, 2011). That is a ﬂexible heuristic which implements an Adaptive Large Neighbourhood Search, the basic structure of which is described in detail by Ropke and Pisinger in (Ropke & Pisinger, 2006). 5 To give an indication of the scale and difﬁculty of these VRPs, the Auckland model comprises 1, 166 locations to be served using a ﬂeet of at most 25 vehicles over a 7 day period. In the heuristic solution we collect tours of length 10 and 20 to created TSGs for testing. Because Real-World distance matrices are asymmetric, in all cases asymmetry is negligible, we induce symmetric problems by resolving for the greater of di j and d ji – i.e. setting di j = d ji = max{di j, d ji}. It total we obtain 69 Real-World games of size 10 and 44 games of size 20. 6
All experiments reported here were performed on a computer with an Intel i7-2720QM CPU running at 2.20GHz, with 8GB of RAM, and running the Ubuntu 12.04.3 LTS operating system. For Synthetic problems with 35 locations, 4000 iterations of ApproShapley with exact TSP evaluations using Concorde (Applegate et al., 2007) takes 545 seconds. Computing φ CHRIS, which replaces the exact TSP computation with an evaluation of the Christoﬁdes heuristic, results in a reduction to 11.39 seconds in total. Computing φ MOAT takes under 1 second. All the na¨ıve proxies, namely φ DEPOT, φ SHORT, and φ , REROUTE take fractions of a second to compute.
Our experimental analysis assumes the reader is familiar with a number of statistical measures which we summaries in Appendix A. To evaluate how well proxies perform in approximating φ SV we measure the point-wise root-mean-squared error (RMSE) in each game. We also use Kendall’s τ (Kendall, 1938) (written KT) to compare the ranking—i.e. least expensive to most expensive—of locations induced by the Shapley allocation and our proxies. The value τ measures the amount of disagreement between two rankings. It is customary to report τ as a normalized value (correlation coefﬁcient) between 1 and -1, where τ = 1 means that two lists are perfectly correlated (equal) and τ = −1 means that two lists are perfectly anti-correlated (they are equal if one list is reversed). Our analysis makes use of the signiﬁcance, or p-value of a computed τ. The p-value is computed using a two-tailed t-test where the null hypothesis is that there is no correlation between orderings (τ = 0). Taking our signiﬁcance threshold to be the customary 0.05, we can reject the null hypothesis when p ≤ 0.05. When p ≥ 0.05 we fail to reject the null hypothesis, a p-value ≤ 0.05 is a statistically signiﬁcant result. This means it is unlikely that two random, uncorrelated lists would show such a high degree of correlation.
7.1 Synthetic Data
Figure 4 shows the average root mean squared error and average KT distance for each proxy from φ SV for all game sizes of the Synthetic data. A complete set of tables and results from the Synthetic Data can be found in Appendix B. We describe highlights of our results here. Overall, the best performing proxy is φ BLEND, both in terms of lowest RMSE and highest average τ. The φ SHORT and φ REROUTE proxies are by far the worst, particularly in terms of approximating Shapley value,
5. Indigo is a strong vehicle routing solution platform, recently computing 5 new best solutions for 1, 000 customer problems from the VRPTW benchmark library. The solutions computed using Indigo were certiﬁed by Dr. Geir Hasle, Chief Research Scientist at SINTEF and maintainer of the VRPTW benchmark library, as the best currently known on September 24th of 2013. http://www.sintef.no/Projectweb/TOP/VRPTW/ Homberger-benchmark/1000-customers.
6. Due to commercial agreements with our industrial partners we cannot release these Real-World games.
21

AZIZ, CAHAN, GRETTON, KILBY, MATTEI, & WALSH
but also in terms of the ranking induced by the corresponding allocations. The computationally more expensive proxy φ REROUTE always dominates φ SHORT; a trend which continues throughout our testing on Real-World data as well. The proxy φ DEPOT performs poorly at ranking, however does surprisingly well at approximation being almost competitive with the more sophisticated proxies. In ranking locations, φ REROUTE regularly identiﬁes the location ranked most costly according to the Shapley value, outperforming all proxies on this task for the synthetic data. More generally, in ≥ 60% of synthetic games the φ CHRIS, φ MOAT, φ , REROUTE and φ BLEND proxies each correctly identiﬁes the most costly location.
In the majority of the synthetic games, our analysis of rankings using Kendall’s τ strongly implies that φ CHRIS, φ MOAT and φ BLEND rankings are correlated with φ SV. Put simply, we are conﬁdent that sophisticated proxies are inducing a ranking that is similar to the one induced by the Shapley value. They also reliably identify the most expensive location. Among the pure proxies, the φ CHRIS proxy outperforms all the others at ranking by a slim margin. For example, it is able to identify the most expensive location according to the Shapley value 66.4% of the time. Additionally, regardless of the number of locations, the mean value for τ between φ SV and φ CHRIS is ≥ 0.55, and in every instance with 18 or more locations (and for the majority of instances between 4 and 17 locations) there is a statistically signiﬁcant result for τ. Comparatively, φ BLEND returns similar (and often higher) results for τ while achieving a statistically signiﬁcant correlation with the ranking induced by φ SV for every synthetic game instance with more than 8 players, save 6. The τ analysis in the case of φ MOAT is less positive, gives strong correlation in instances with more than 20 locations, though still better than any of the naive proxies.
Our experimental analysis also considered how the types of allocation error differ between proxies. For example, we considered questions, such as: Do the proxies make a lot of small errors for low cost locations, or do they make large errors for locations that are apportioned large costs? Knowledge about the type and severity of errors made by our different proxies provides some guidance to the situations where we should have conﬁdence in proxy allocations and/or the induced rankings.
Figure 5 shows the absolute error between each of the proxies and φ SV graphed as a function of the allocation according to φ SV. For all the proxies, there appears to be a strong linear component to the error — many of the proxies allocate proportionally more (or less) cost compared to the φ SV allocation. In some cases φ REROUTE allocates more than 20-times the cost allocation by φ SV, though typically this happens in the case of locations that received less than 10% of the Shapley allocation. We ﬁnd that better performing proxies make more constant real-valued errors across all locations, regardless of actual allocation. The scatterplots for φ BLEND and φ CHRIS both show the weakest linear bias, with φ BLEND showing a somewhat sub-linear bias. For example, φ CHRIS and φ MOAT can allocate 6-times φ SV, though this only occurs in the case of locations whose Shapley allocation is less that 5% of the tour cost. Measuring the factor by which it overestimates allocations, the φ DEPOT proxy appears to perform rather well, allocating at most 2.5-times the fair cost. The caveat is that φ DEPOT is indiscriminate, also making proportionately large over-allocation errors to locations which are costly according to φ SV.
7.2 Real-World Data
Measuring the performance of proxies in Real-World data from Auckland, Canberra, and Sydney, overall we ﬁnd the quality of allocation is slighly degraded compared to measurements we made in synthetic games. We identiﬁed no signiﬁcant performance differences between cities. A complete
22

A STUDY OF PROXIES FOR SHAPLEY ALLOCATIONS OF TRANSPORT COSTS

Average Root Mean Squared Error

Average Root Mean Squared Error by Location

Shortcut Distance

0.8

Re-routed Margin

Depot Distance

Moat Packing

Christofides

0.6

60/40 Moat/Depot

0.4

0.2

0.0 5 1.0
0.5

10 15 20 25 30 35 Number of Locations
Average Kendall's Tau by Number of Location Shortcut Distance Re-routed Margin Depot Distance Moat Packing Christofides 60/40 Moat/Depot

0.0

Average Kendall's Tau

0.5

1.0 5

10

15 20

25 30

35

Number of Locations

Figure 4:

Performance of the ﬁve pure proxies and one hybrid proxy according to: (left) RMSE averaged over the 20 games generated for each number of locations, and (right) Kendall’s tau rank correlation averaged over the 20 games generated for each number of locations. The error bands correspond to plus or minus one standard deviation. The horizontal axis of our Kendall’s tau plot has been inverted for ease of comparison – i.e. more correlated lists are towards the bottom of the graph (1.0).

23

AZIZ, CAHAN, GRETTON, KILBY, MATTEI, & WALSH

Absolute Difference between Fractional Shapley and Proxy

Absolute Difference between Fractional Shapley and Proxy

All Locations, Proxy: Re-routed Margin
103
102
101

All Locations, Proxy: Moat Packing
103
102
101

Absolute Difference between Fractional Shapley and Proxy

Absolute Difference between Fractional Shapley and Proxy

100

00

100

101

102

Fraction of Total Shapley Allocation

All Locations, Proxy: Christofides
103

102

101

100

00

100

101

102

Fraction of Total Shapley Allocation

All Locations, Proxy: Depot Distance
103

102

101

Absolute Difference between Fractional Shapley and Proxy

Absolute Difference between Fractional Shapley and Proxy

100

00

100

101

102

Fraction of Total Shapley Allocation

All Locations, Proxy: Shortcut Distance
103

102

101

100

00

100

101

102

Fraction of Total Shapley Allocation

All Locations, Proxy: 60/40 Moat/Depot
103

102

101

100

00

100

101

102

Fraction of Total Shapley Allocation

100

00

100

101

102

Fraction of Total Shapley Allocation

Figure 5: Absolute value of the difference between the φ SV and φ PROXY plotted as a function of φ SV for all the points in the Synthetic data for all game sizes. Note that these are log-log plots to highlight the spread of the data.
24

A STUDY OF PROXIES FOR SHAPLEY ALLOCATIONS OF TRANSPORT COSTS
set of tables and results for each of the cities can be found in Appendices C through E; we report on the combined statistics of these games in this section. Summary statistics for these games are shown in Tables 1 through 4.

Shortcut Distance Re-routed Margin Depot Distance
Moat Packing Christoﬁdes 60/40 Moat/Depot

10 Locations RMSE St. Dev.

0.4429 0.4160 0.1346

0.1436 0.1328 0.0616

0.2478 0.1338 0.1442

0.1247 0.0694 0.0697

20 Locations RMSE St.Dev.

0.3239 0.2902 0.0870

0.1064 0.0934 0.0303

0.1969 0.0863 0.0765

0.0883 0.0311 0.0301

All Games RMSE St. Dev.

0.3966 0.3670 0.1160

0.1291 0.1175 0.0494

0.2280 0.1153 0.1178

0.1105 0.0545 0.0542

Table 1: Root Mean Squared Error (RMSE) and Standard Deviation (St. Dev.) for the combined Real-World datasets for games with 10 and 20 locations. Lower is better.

Shortcut Distance Re-routed Margin Depot Distance
Moat Packing Christoﬁdes 60/40 Moat/Depot

10 Locations τ St. Dev.

-0.0135 0.3578 0.1062

0.2692 0.2388 0.2382

0.3450 0.2464 0.2037

0.2554 0.2770 0.2524

20 Locations τ St. Dev.

0.0798 0.3476 0.1622

0.1891 0.1993 0.2313

0.3064 0.3509 0.2531

0.1710 0.2258 0.2487

All Games τ St. Dev.

0.0228 0.3538 0.1280

0.2380 0.2234 0.2355

0.3300 0.2871 0.2229

0.2225 0.2571 0.2510

Table 2: Average KT distance (τ) and Standard Deviation (St. Dev.) for the combined Real-World datasets for games with 10 and 20 locations. Higher is better; +1 means the two lists are perfectly correlated and −1 means the two lists are perfectly anti-correlated.

25

AZIZ, CAHAN, GRETTON, KILBY, MATTEI, & WALSH

Shortcut Distance Re-routed Margin Depot Distance
Moat Packing Christoﬁdes 60/40 Moat/Depot

Median 10 Locations 20 Locations

0.4564 0.1730 0.4631

0.3349 0.0354 0.3276

0.1444 0.2109 0.4042

0.0531 0.0275 0.1239

Num. Signiﬁcant 10 Locations 20 Locations

3

4

15

25

3

9

16

21

10

25

9

15

Table 3: Median p (lower is better) and count of the number of statistically signiﬁcant instances (p < 0.05) out of the 69 instances of 10 location games and 44 instances of 20 location games of τ for the combined Real-World datasets.

Shortcut Distance Re-routed Margin Depot Distance
Moat Packing Christoﬁdes 60/40 Moat/Depot

10 Locations
5.8% 42.0% 34.8%
42.0% 39.1% 42.0%

20 Locations
15.9% 65.9% 38.6%
61.4% 56.8% 54.5%

All Games
9.7% 51.3% 36.3%
49.6% 46.0% 46.9%

Table 4: Percentage of correct top elements of the Shapley ordering identiﬁed by the respective proxy for the 69 games of size 10 and 44 games of size 20 for the combined Real-World data.

Examining the change in performance of sophisticated proxies when moving from the Synthetic to Real-World scenarios, the average RMSE increases from ≈ 0.075 to ≈ 0.153 while the average τ decreases from ≈ 0.63 to ≈ 0.28. Measuring RMSE, the degradation in performance of φ MOAT is clearly the most sever. Measuring ranking error via τ, φ MOAT degrades more gracefully compared to either φ CHRIS or φ BLEND. Measuring all proxy performances using RMSE, φ SHORT is always dominated by φ , REROUTE which in turn is strictly dominated by the sophisticated proxies. It is worth noting that in Real-World scenarios φ REROUTE strictly dominates all the other proxies in its ability to identify the most costly location. In that regard φ MOAT is a close second. Treating ranking error, Table 2 shows that φ REROUTE actually performs comparably with best sophisticated proxy, φ MOAT, in terms of τ. Table 3 shows that the Christoﬁdes proxy φ CHRIS achieves statistically signiﬁcant values for τ in the largest number of scenarios. The average ranking performance of φ MOAT is relatively low, which appears to be somewhat due to the discrepancy in the number of games of size 10 and 20. We see clearly superior ranking performance from φ CHRIS for the larger games. Repeating our observations for the synthetic corpus, in the Real-World games the sophisticated proxies have a greater percentage of statistically signiﬁcant results for τ. For a majority of the instances, φ CHRIS and φ MOAT achieve a statistically signiﬁcant correlation with the ranking induced by φ SV. Table 5
26

A STUDY OF PROXIES FOR SHAPLEY ALLOCATIONS OF TRANSPORT COSTS

Shortcut Distance Re-routed Margin Depot Distance
Moat Packing Christoﬁdes 60/40 Moat/Depot

Synthetic RMSE St. Dev.

0.2965 0.1826 0.0864

0.0543 0.0442 0.0182

0.0758 0.0622 0.0529

0.0174 0.0136 0.0084

Real-World RMSE St.Dev.

0.3239 0.2902 0.0870

0.1064 0.0934 0.0303

0.1969 0.0863 0.0765

0.0883 0.0311 0.0301

Synthetic τ St. Dev.

-0.0363 0.3813 0.5053

0.1358 0.1505 0.1464

0.5304 0.5965 0.6690

0.1180 0.0999 0.1105

Real-World τ St. Dev.

0.0798 0.3476 0.1622

0.1891 0.1993 0.2313

0.3064 0.3509 0.2531

0.1710 0.2258 0.2487

Table 5:

Comparison of performance between Synthetic and Real-World datasets for games with 20 locations. There are 20 games in the Synthetic corpus and 44 in the Real-World corpus. Root Mean Squared Error (RMSE) and Standard Deviation (St. Dev.) are reported on the left where lower is better. On the right average KT distance (τ) and Standard Deviation (St. Dev.) is reported where higher is better; +1 means the two lists are perfectly correlated and −1 means the two lists are perfectly anti-correlated.

shows a side by side comparison of the games with 20 locations for the Real-World and Synthetic data. Moving from synthetic to Real-World we see the performance of φ CHRIS and φ BLEND noticably degrade, though they do continue to achieving fairly low RMSE scores. Again, it is also worth
noting that all sophisticated proxies are also good and identifying the most costly location.
Examining Real-World games with 20 locations, Figures 6 and 7 give the error scatter plots for all proxies as a function of allocation according to φ SV. The linear component to the error observed in Figure 5 for Synthetic data remains clear in Real-World scenarios. There is however a
more uniform distribution of errors among locations in the latter. This is evidenced by the pillar like shapes for most of the plots; demonstrating that in the Real-World data, many of the φ SV allocations cluster around a uniform allocation of around 5–8%. Indeed, the observed tight clustering of actual Shapley values explains the respectable performance of φ DEPOT in the Real-World datasets. The much taller shapes we see in Figure 6 compared to Figure 7 indicate that proxy errors are more
randomly distributed among Real-World locations, and that in Real-World scenarios proxies make proportionately larger allocation errors irrespective of the actual φ SV allocation.

27

AZIZ, CAHAN, GRETTON, KILBY, MATTEI, & WALSH

Absolute Difference between Fractional Shapley and Proxy

Absolute Difference between Fractional Shapley and Proxy

20 Locations, Proxy: Re-routed Margin
103
102
101

20 Locations, Proxy: Shortcut Distance
103
102
101

Absolute Difference between Fractional Shapley and Proxy

Absolute Difference between Fractional Shapley and Proxy

100

00

100

101

102

Fraction of Total Shapley Allocation

20 Locations, Proxy: Depot Distance
103

102

101

100

00

100

101

102

Fraction of Total Shapley Allocation

20 Locations, Proxy: Moat Packing
103

102

101

Absolute Difference between Fractional Shapley and Proxy

Absolute Difference between Fractional Shapley and Proxy

100

00

100

101

102

Fraction of Total Shapley Allocation

20 Locations, Proxy: Christofides
103

102

101

100

00

100

101

102

Fraction of Total Shapley Allocation

20 Locations, Proxy: 60/40 Moat/Depot
103

102

101

100

00

100

101

102

Fraction of Total Shapley Allocation

100

00

100

101

102

Fraction of Total Shapley Allocation

Figure 6: Absolute value of the difference between the φ SV and φ PROXY plotted as a function of φ SV for all 44 games in the Real-World datasets with 20 locations. Note that these are log-log plots to highlight the spread of the data.
28

A STUDY OF PROXIES FOR SHAPLEY ALLOCATIONS OF TRANSPORT COSTS

Absolute Difference between Fractional Shapley and Proxy

Absolute Difference between Fractional Shapley and Proxy

20 Locations, Proxy: Re-routed Margin
103
102
101

20 Locations, Proxy: Shortcut Distance
103
102
101

Absolute Difference between Fractional Shapley and Proxy

Absolute Difference between Fractional Shapley and Proxy

100

00

100

101

102

Fraction of Total Shapley Allocation

20 Locations, Proxy: Depot Distance
103

102

101

100

00

100

101

102

Fraction of Total Shapley Allocation

20 Locations, Proxy: Moat Packing
103

102

101

Absolute Difference between Fractional Shapley and Proxy

Absolute Difference between Fractional Shapley and Proxy

100

00

100

101

102

Fraction of Total Shapley Allocation

20 Locations, Proxy: Christofides
103

102

101

100

00

100

101

102

Fraction of Total Shapley Allocation

20 Locations, Proxy: 60/40 Moat/Depot
103

102

101

100

00

100

101

102

Fraction of Total Shapley Allocation

100

00

100

101

102

Fraction of Total Shapley Allocation

Figure 7: Absolute value of the difference between the φ SV and φ PROXY plotted as a function of φ SV for all games in the Synthetic dataset with 20 locations. Note that these are log-log plots to highlight the spread of the data.
29

AZIZ, CAHAN, GRETTON, KILBY, MATTEI, & WALSH
8. Related Work
The theory of cooperative games has a rich history in which various solution concepts for allocating costs and other quantities have been proposed (Peleg & Sudho¨lter, 2007; Young, 1994). In addition to the Shapley value we see allocation concepts given by the core, the nucleolus and the bargaining set. Of those, the Shapley value is considered the “most important” allocation scheme in cooperative game theory (Winter, 2002). Application of the Shapley value spans well beyond transportation setting. For examples, the Shapley value has been applied in allocating the cost of network infrastructure (Koster, 2009; Marinakis, Migdalas, & Pardalos, 2008), promoting collaboration between agents (Zlotkin & Rosenschein, 1994) by prescribing an allocation that incentivises agents to collaborate in the completion of tasks, and as an incentive compatible way to share departmental costs in corporations (Young, 1985). Considering applications in networks more broadly, use of the Shapley value follows a general framework, where agents correspond to the nodes (or edges) of a graph (Curiel, 2008; Koster, 2009; Marinakis et al., 2008; Tijs & Driessen, 1986; Aziz & de Keijzer, 2014). Here the deﬁnition of the characteristic function depends on the application domain, with proposed evaluations based on: (i) the size of maximum matching, (ii) network ﬂow, (iii) the weight of a minimum spanning tree, and (iv) the weight of a Hamiltonian cycle (Curiel, 2008; Deng & Fang, 2008). Allocation concepts are not solely devised and employed for allocating costs and other ﬁnancial quantities. For example, the Shapley value has been used directly to measure quantities indicating the importance of agents in social networks (Moretti & Patrone, 2008), and to measure the centrality of nodes in networks (Michalak, Aadithya, Szczepanski, Ravindran, & Jennings, 2013). Another solution concept that has been used to gauge the importance of agents is the Banzhaf value (Banzhaf III, 1964). The Banzhaf value is deﬁned for simple voting games – i.e. cooperative games in which the value of the coalition is either zero or one but the Banzhaf value of an agent can suitably be extended to general cooperative games. However, even within the context simple voting games, the Banzhaf value is more suitable for measuring the inﬂuence of an agent and less suitable for allocate power between agents (Felsenthal & Machover, 1998). Similarly, our focus is to allocate costs, we focus on the Shapley value.
While solution concepts from the theory of transferable utility (TU) cooperative games (Peleg & Sudho¨lter, 2007; Chalkiadakis et al., 2011) have been used for allocations of costs, the Shapley allocations have rarely received serious attention in the transportation science literature. The associated computational cost is prohibitively high for the general case, and consequently strong notions of fairness are often taken to be a secondary consideration. Though ApproShapley is an FPRAS (fully polynomial-time randomized approximation scheme) for computing the Shapley value if the game is convex (Liben-Nowell, Sharp, Wexler, & Woods, 2012), this does not apply for the domain considered in this work. Other prominent TU game solution concepts are nucleolus and core. TSGs are introduced in Potters (Potters et al., 1992), where in addition to describing that game, the authors describe a variety of game known as the routing game.7 you do not include this footnote, the Tamir citation is anachronistic, we have the space, please leave it! For the latter an auxiliary constraint forces locations to be visited, in any coalition, in the order they are traversed by a speciﬁc tour. Assuming that the tour corresponds to the optimal for the underlying TSP, then the game has a non-empty core. Derks and Kuipers (1997) presented a quadratic-time procedure for computing a core allocation of the routing game. They also characterize suboptimal tours that specify routing games with non-empty cores. It should be noted that there are no known tractable procedures to
7. Note the cited Potters et al. journal publication extends a technical report introducing the game as early as 1987.
30

A STUDY OF PROXIES FOR SHAPLEY ALLOCATIONS OF TRANSPORT COSTS
compute a tour which guarantees the core is non-empty for the routing game. Conditions for the non-emptiness of the core in TSGs were further developed in Tamir (Tamir, 1989). We have already noted that Faigle et al. (1998) developed a procedure to calculate a multiplicative ε-core allocation for Euclidean TSGs. Yengin (2012) develop a notion of a ﬁxed route game with appointments which admits a tractable procedure for computing Shapley values. That model is not suitable for typical scenarios that involve the delivery of goods to locations from a depot. TU concepts in TSGs and routing games are developed for a practical gas delivery application in Engevall et al. (Engevall et al., 1998).
Considering vehicle routing problems and transportation settings more generally, Go¨the-Lundgren et al. (Go¨the-Lundgren et al., 1996) develop a column generation procedure to calculate the nucleolus of a homogeneous vehicle routing problem – i.e. all vehicles are equivalent. In doing so they develop a procedure to determine if the core of that vehicle routing game is empty. Engevall et al. (Engevall et al., 2004) extend that work for a very practical setting of distributing gas using a heterogeneous ﬂeet of vehicles. More recently O¨ zener et al. (O¨ zener et al., 2013) examine a number of solution concepts—including allocations derived according to the nested moat-packing of Faigle et al. (1998), and a highly bespoke approximation of the Shapley allocation—in deriving cost allocations for real-world inventory routing problems. They show that TU game allocations, especially core/duality-based allocations, have signiﬁcant advantages over the existing cost allocations which their industrial client was using.
9. Conclusions and Future Work
We studied the problem of fairly apportioning costs in transportation scenarios, speciﬁcally TSGs. The Shapley value is a highly appealing division concept for this task. Since it cannot be evaluated in reasonable time, we considered a number of proxies for the Shapley value. We examined proxy performance both in terms of approximating the Shapley value and the ranking of locations induced by the Shapley value. The stand-out proxies with respect to both measures are φ CHRIS and φ BLEND, a mixture of φ DEPOT and φ MOAT. These proxies can be computed in reasonable time, and exhibit good properties in both synthetic Euclidean games and real-world transportation scenarios.
Extensions of our work should develop proxies for the more general setting of vehicle routing games, to quantify the importance of agent synergies that are unique to the multi-vehicle model. The transport companies we interact with further seek to understand the impact of time windows (both the duration and position of allowable service times), and the effect of delivery frequency on allocated costs. Thus, a highly motivated and rich variety of problems is available to be considered for future work. Additionally, future research should consider weighted Shapley values for situations where some coalitions (and therefore margins) are more likely to occur than others. Formal approximation ratios, to complement the strong empirical evidence we obtained using sophisticated proxies should also be the subject of future research. There also remains the need for formal studies which employ proxy allocations to inform solutions to hard optimisation problems in transportation domains. Finally, scaling to larger transportation scenarios shall require new methods which avoid treating all individual agents in a large monolithic evaluation of the allocation of costs. An approximation strategy that may be fruitful here was proposed in (Souﬁani, Charles, Chickering, & Parkes, 2014), where agents are partitioned into groups and each agent in the group is assigned the same Shapley value. Measures for clustering transport agents may appeal to proximity to pose useful aggregations of agents.
31

AZIZ, CAHAN, GRETTON, KILBY, MATTEI, & WALSH
Acknowledgments
NICTA is funded by the Australian Government through the Department of Communications and the Australian Research Council through the ICT Centre of Excellence Program. Casey Cahan was supported by an Summer Research Scholarship at The Australian National University. Toby Walsh also receives support from the Asian Ofﬁce of Aerospace Research and Development (AOARD 124056) and the German Federal Ministry for Education and Research through the Alexander von Humboldt Foundation.
We would like to thank Stefano Moretti and Patrice Perny from LIP6; Hossein Azari Souﬁani from Harvard University; David Rey and Vinayak Dixit from the rCiti Project at the University of New South Wales School of Civil and Environmental Engineering, and the reviewers and attendees of the 5th Workshop on Cooperative Games in MultiAgent Systems (CoopMAS-2014) for their helpful feedback and comments on early version of this work.
References
Applegate, D. L., Bixby, R. E., Chvatal, V., & Cook, W. J. (2007). The traveling salesman problem: a computational study. Princeton University Press.
Aziz, H., & de Keijzer, B. (2014). Shapley meets shapley. In Proceeding of the 31st International Symposium on Theoretical Aspects of Computer Science (STACS 2014), pp. 99–111.
Bachrach, Y., Markakis, E., Resnick, E., Procaccia, A. D., Rosenschein, J. S., & Saberi, A. (2010). Approximating power indices: theoretical and empirical analysis. Autonomous Agents and Multi-Agent Systems, 20(2), 105–122.
Banzhaf III, J. F. (1964). Weighted voting doesn’t work: A mathematical analysis. Rutgers Law Review, 19, 317.
Bellman, R. (1962). Dynamic programming treatment of the travelling salesman problem. Journal of the ACM (JACM), 9(1), 61–63.
Castro, J., Go´mez, D., & Tejada, J. (2009). Polynomial calculation of the shapley value based on sampling. Comput. Oper. Res., 36(5), 1726–1730.
Chalkiadakis, G., Elkind, E., & Wooldridge, M. (2011). Computational aspects of cooperative game theory. Synthesis Lectures on Artiﬁcial Intelligence and Machine Learning, 5(6), 1–168.
Christoﬁdes, N. (1976). Worst-case analysis of a new heuristic for the travelling salesman problem.. Tech. rep., DTIC Document.
Conitzer, V., & Sandholm, T. (2006). Complexity of constructing solutions in the core based on synergies among coalitions. Artiﬁcial Intelligence, 170(6), 607–619.
Cook, W. J., Cunningham, W. H., Pulleylank, W. R., & Schrijver, A. (1998). Combinatorial Optimization. John Wiley & Sons, Inc.
Corder, G. W., & Foreman, D. I. (2009). Nonparametric statistics for non-statisticians: a step-bystep approach. Wiley.
Cornue´jols, G., Naddef, D., & Pulleyblank, W. (1985). The traveling salesman problem in graphs with 3-edge cutsets. j-J-ACM, 32(2), 383–410.
32

A STUDY OF PROXIES FOR SHAPLEY ALLOCATIONS OF TRANSPORT COSTS
Curiel, I. (2008). Cooperative combinatorial games. In Chinchuluun, A., Pardalos, P., Migdalas, A., & Pitsoulis, L. (Eds.), Pareto Optimality, Game Theory And Equilibria, Vol. 17 of Springer Optimization and Its Applications, pp. 131–157. Springer New York.
Deng, X., & Fang, Z. (2008). Algorithmic cooperative game theory. In Chinchuluun, A., Pardalos, P. M., Migdalas, A., & Pitsoulis, L. (Eds.), Pareto Optimality, Game Theory And Equilibria, Vol. 17 of Springer Optimization and Its Applications. Springer-Verlag.
Derks, J., & Kuipers, J. (1997). On the core of routing games. International Journal of Game Theory, 26(2), 193–205.
Engevall, S., Go¨the-Lundgren, M., & Va¨rbrand, P. (1998). The traveling salesman game: An application of cost allocation in a gas and oil company. Annals of Operations Research, 82(0), 203–218.
Engevall, S., Go¨the-Lundgren, M., & Va¨rbrand, P. (2004). The heterogeneous vehicle-routing game. Transportation Science, 38(1), 71–85.
Faigle, U., & Kern, W. (1993). On some approximately balanced combinatorial cooperative games. ZOR Methods and Models of Operations Research, 38(2), 141–152.
Faigle, U., Fekete, S., Hochsta¨ttler, W., & Kern, W. (1998). On approximately fair cost allocation in euclidean tsp games. Operations-Research-Spektrum, 20(1), 29–37.
Fatima, S. S., Wooldridge, M., & Jennings, N. R. (2007). A randomized method for the Shapley value for the voting game. In Proceedings of the 6th International Conference on Autonomous Agents and Multiagent Systems (AAMAS 07), pp. 157–165, New York, New York, USA.
Fatima, S. S., Wooldridge, M., & Jennings, N. R. (2008). A linear approximation method for the Shapley value. Artiﬁcial Intelligence, 172(14), 1673–1699.
Felsenthal, D. S., & Machover, M. (1998). The Measurement of Voting Power: Theory and Practice, Problems and Paradoxes. Edward Elgar Cheltenham.
Garey, M. R., & Johnson, D. S. (1979). Computers and Intractability: A Guide to the Theory of NP-Completeness. New York: W.H. Freeman.
Golden, B. L., Raghavan, S., & Wasil, E. A. (2008). The Vehicle Routing Problem: Latest Advances and New Challenges: latest advances and new challenges, Vol. 43. Springer.
Go¨the-Lundgren, M., Jo¨rnsten, K., & Va¨rbrand, P. (1996). On the nucleolus of the basic vehicle routing game. Mathematical Programming, 72(1), 83–100.
Held, M., & Karp, R. M. (1962). A dynamic programming approach to sequencing problems. Journal of the Society for Industrial & Applied Mathematics, 10(1), 196–210.
Ieong, S., & Shoham, Y. (2005). Marginal contribution nets: a compact representation scheme for coalitional games. In Proceedings of the 6th ACM conference on Electronic Commerce (EC 06), pp. 193–202.
Kendall, M. G. (1938). A new measure of rank correlation. Biometrika, 30(1/2), 81–93. Kilby, P., & Verden, A. (2011). Flexible routing combing constraint programming, large neigh-
bourhood search, and feature-based insertion. In 2nd Workshop on Artiﬁcial Intelligence and Logistics. Barcelona, Spain. Koster, M. (2009). Cost sharing. Encyclopedia of Complexity and Systems Science, 724–753.
33

AZIZ, CAHAN, GRETTON, KILBY, MATTEI, & WALSH
Leech, D. (2003). Computing power indices for large voting games. Management Science, 49(6), 831–837.
Liben-Nowell, D., Sharp, A., Wexler, T., & Woods, K. (2012). Computing shapley value in supermodular coalitional games. In 18th International Conference on Computing and Combinatorics (COCOON 2012), pp. 568–579.
Maleki, S., Tran-Thanh, L., Hines, G., Rahwan, T., & Rogers, A. (2013). Bounding the estimation error of sampling-based shapley value approximation with/without stratifying. CoRR, abs/1306.4265.
Mann, I., & Shapley, L. S. (1960). Values for large games IV: Evaluating the electoral college by monte carlo. Technical report, The RAND Corporation, Santa Monica, CA, USA.
Mann, I., & Shapley, L. S. (1962). Values for large games IV: Evaluating the electoral college exactly. Technical report, The RAND Corporation, Santa Monica, CA, USA.
Marinakis, Y., Migdalas, A., & Pardalos, P. M. (2008). Cost allocation in combinatorial optimization games. In Chinchuluun, A., Pardalos, P., Migdalas, A., & Pitsoulis, L. (Eds.), Pareto Optimality, Game Theory And Equilibria, Vol. 17 of Springer Optimization and Its Applications, pp. 217–244. Springer New York.
Michalak, T. P., Aadithya, K. V., Szczepanski, P. L., Ravindran, B., & Jennings, N. R. (2013). Efﬁcient computation of the Shapley value for game-theoretic network centrality. Journal of Artiﬁcial Intelligence Research, 46, 607–650.
Moretti, S., & Patrone, F. (2008). Transversality of the Shapley value. TOP, 16(1), 1–41. Owen, G. (1972). Multilinear extensions of games. Management Science, 18(5-part-2), 64–79. O¨ zener, O. O., Ergun, O., & Savelsbergh, M. (2013). Allocating cost of service to customers in
inventory routing. Oper. Res., 61(1), 112–125. Papadimitriou, C. (1994). Computational Complexity. Addison-Wesley Publishing Company, Inc. Peleg, B., & Sudho¨lter, P. (2007). Introduction to the Theory of Cooperative Games. Springer. Potters, J. A., Curiel, I. J., & Tijs, S. H. (1992). Traveling salesman games. Mathematical Program-
ming, 53(1-3), 199–211. Ropke, S., & Pisinger, D. (2006). An adaptive large neighborhood search heuristic for the pickup
and delivery problem with time windows. Transportation Science, 40(4), 455–472. Shapley, L. S. (1953). A value for n-person games. In Kuhn, H., & Tucker, W. W. (Eds.), Contribu-
tions to the Theory of Games, Vol. 2 of Annals of Mathematical Studies. Princeton University Press. Souﬁani, H. A., Charles, D. J., Chickering, D. M., & Parkes, D. C. (2014). Approximating the shapley value via multi-issue decomposition. In Proceedings of the 13th International Conference on Autonomous Agents and Multiagent Systems (AAMAS 14), pp. 1209–1216. Tamir, A. (1989). On the core of a traveling salesman cost allocation game. Operations Research Letters, 8(1), 31 – 34. Tijs, S. H., & Driessen, T. S. H. (1986). Game theory and cost allocation problems. Management Science, 32(8), 1015–1028.
34

A STUDY OF PROXIES FOR SHAPLEY ALLOCATIONS OF TRANSPORT COSTS Winter, E. (2002). The Shapley value. In Handbook of Game Theory with Economic Applications,
chap. 53, pp. 2025–2054. Elsevier. Yengin, D. (2012). Appointment games in ﬁxed-route traveling salesman problems and the Shapley
value. International Journal of Game Theory, 41(2), 271–299. Young, H. P. (1985). Producer incentives in cost allocation. Econometrica, 53(4), 757–765. Young, H. P. (1994). Cost allocation. In Handbook of Game Theory with Economic Applications,
Vol. 2, pp. 1193–1235. Young, H. P. (1985). Monotonic solutions of cooperative games. International Journal of Game
Theory, 14(2), 65–72. Zlotkin, G., & Rosenschein, J. S. (1994). Coalition, cryptography, and stability: Mechanisms for
coalition formation in task oriented domains. In Proceedings of the 12th National Conference on Artiﬁcial Intelligence (AAAI 1994), pp. 432–437.
35

AZIZ, CAHAN, GRETTON, KILBY, MATTEI, & WALSH

Appendix A. Deﬁnitions and Notations

Our work makes use of statistical measures to compare the proxies, we provide a brief overview here and refer the reader to the textbook by Cordor and Foreman (Corder & Foreman, 2009) for a more complete treatment. Note that abs() is the absolute value of the quantity (). Writing xˆ to for the average of a set {x1, . . . , xn}, the standard deviation (St.Dev) of that set is:

St.Dev =

∑ni=1 abs(xi − xˆ)2 . n

The Shapley value of the ith location, divided by the sum of the Shapley values for all locations is written φiSV, and to denote a proxy (as in the main document) we write φiPROXY. The absolute percent difference between a value and its proxy is

abs(φiSV − φiPROXY) × 100. φiSV
Our study of proxy accuracy also makes use of root mean squared errors RMSE, a common metric to express the error made over a number of predictions. Taking a TSG with locations L, the RMSE between a Shapley allocation φ SV and a proxy φ Proxy is:

RMSE =

∑i∈L(φiSV − φiPROXY)2 . |L|

Shapley values can be used to rank/order locations, from least to most costly. Our work studies the accuracy of proxies in that task using Kendall’s tau distance (KT distance), and also the KT rank correlation coefﬁcient, τ. The KT distance measures the amount of disagreement between two rankings. We study the ranking of locations induced by the Shapley value and its proxies. In the case that the rankings correspond to total orders8 the KT distance is called the bubble-sort distance, and is equal to the number of bubble-sort swap operations necessary to make two lists agree. It is customary to report KT distance as a normalized value (correlation coefﬁcient) between 1 and -1, where 1 means that two lists are perfectly correlated (equal) and -1 means that two lists are perfectly anti-correlated (they are equal if one list is reversed).
In detail, let X and Y be two partial orders over a set of items. If a ≷ b ∈ X ∩Y then we say X and Y are concordant on (a, b). If a = b ∈ X ∪ Y then we say there is a tie, and otherwise (a, b) is discordant. Where M is the number of concordant pairs, N discordant pairs, T ties exclusively in X, U ties exclusively in Y , the normalised KT distance τ between X and Y is:
M−N τ=
(M + N + T ) × (M + N +U)
Our analysis makes use of the signiﬁcance, or p-value of a KT statistic. The p-value is computed using a two-tailed t-test where the null hypothesis is that there is no correlation between orderings (τ = 0). This means that if we take our signiﬁcance threshold α = 0.05, as is common in the scientiﬁc literature, we can reject the null hypothesis when p ≤ 0.05. The interpretation of this statistic is that when p ≥ 0.05 we fail to reject the null hypothesis. A p-value ≤ 0.05 is a statistically signiﬁcant result, meaning it is unlikely that two random, uncorrelated lists would show such a high degree of correlation.
8. Which is always the case in our experiments.

36

A STUDY OF PROXIES FOR SHAPLEY ALLOCATIONS OF TRANSPORT COSTS

Appendix B. Synthetic Data
For each i ∈ [4, . . . , 35], we generate 20 instances of the Euclidean TSG with i locations occurring uniformly at random in a square of dimension 1, 000. The horizontal and vertical coordinates of the locations are represented using 32-bit ﬂoating point numbers.
Tables 6 to 12 represent a selected amount of raw data from our experiments. The ﬁrst two tables show the RMSE and τ for various numbers of locations. The subsequent two tables show the median and maximum (least signiﬁcant) p values for the τ statistic. Finally, Table 12 gives the percentage of correctly identiﬁed most costly locations. The tables in subsequent sections are the same for the Real-World data.

Shortcut Distance Re-routed Margin Depot Distance
Moat Packing Christoﬁdes 60/40 Moat/Depot

5 Locations RMSE St. Dev.

0.4948 0.3951 0.1198

0.1379 0.1104 0.0579

0.1667 0.0690 0.1136

0.0487 0.0292 0.0483

10 Locations RMSE St.Dev.

0.3826 0.2630 0.0994

0.0954 0.0594 0.0325

0.0879 0.0640 0.0538

0.0278 0.0268 0.0146

15 Locations RMSE St. Dev.

0.3603 0.2061 0.1050

0.0806 0.0546 0.0263

0.0726 0.0708 0.0575

0.0252 0.0229 0.0115

20 Locations RMSE St. Dev.

0.2965 0.1826 0.0864

0.0543 0.0442 0.0182

0.0758 0.0622 0.0529

0.0174 0.0136 0.0084

Table 6: Root Mean Squared Error (RMSE) and Standard Deviation (St. Dev.) for the Synthetic data for games with between 5 and 20 locations. Lower is better.

Shortcut Distance Re-routed Margin Depot Distance
Moat Packing Christoﬁdes 60/40 Moat/Depot

25 Locations RMSE St. Dev.

0.2830 0.1763 0.0843

0.0427 0.0371 0.0145

0.0679 0.0610 0.0514

0.0146 0.0163 0.0095

30 Locations RMSE St.Dev.

0.2553 0.1585 0.0827

0.0781 0.0455 0.0185

0.0627 0.0584 0.0555

0.0134 0.0193 0.0125

35 Locations RMSE St. Dev.

0.2437 0.1487 0.0771

0.0390 0.0238 0.0135

0.0576 0.0568 0.0539

0.0092 0.0124 0.0086

All Games RMSE St. Dev.

0.3309 0.2186 0.0935

0.0754 0.0536 0.0259

0.0845 0.0632 0.0627

0.0223 0.0201 0.0162

Table 7: Root Mean Squared Error (RMSE) and Standard Deviation (St. Dev.) for the Synthetic data for games with between 25 and 35 locations, as well as an average over all games. Lower is better.

37

AZIZ, CAHAN, GRETTON, KILBY, MATTEI, & WALSH

Shortcut Distance Re-routed Margin Depot Distance
Moat Packing Christoﬁdes 60/40 Moat/Depot

5 Locations τ St. Dev.

-0.0333 0.6833 0.6500

0.5153 0.4010 0.3069

0.6167 0.8000 0.7000

0.4628 0.2667 0.3636

10 Locations τ St. Dev.

0.0361 0.5333 0.5833

0.2554 0.1453 0.1422

0.6139 0.7500 0.8056

0.1952 0.1770 0.0986

15 Locations τ St. Dev.

-0.0220 0.4297 0.5440

0.1332 0.1598 0.1311

0.6055 0.6407 0.7374

0.1126 0.1819 0.0794

20 Locations τ St. Dev.

-0.0363 0.3813 0.5053

0.1358 0.1505 0.1464

0.5304 0.5965 0.6690

0.1180 0.0999 0.1105

Table 8: Average KT distance (τ) and Standard Deviation (St. Dev.) for the Synthetic data for games with between 5 and 20 locations. Higher is better; +1 means the two lists are perfectly correlated and −1 means the two lists are perfectly anti-correlated.

Shortcut Distance Re-routed Margin Depot Distance
Moat Packing Christoﬁdes 60/40 Moat/Depot

25 Locations τ St. Dev.

0.0174 0.3449 0.5297

0.1093 0.1526 0.1190

0.5315 0.6033 0.6848

0.1020 0.0800 0.0802

30 Locations τ St. Dev.

0.0212 0.3406 0.4914

0.1230 0.0940 0.0924

0.5030 0.6288 0.6266

0.0857 0.0736 0.0765

35 Locations τ St. Dev.

-0.0132 0.3487 0.4267

0.0859 0.0884 0.1206

0.4938 0.5601 0.5797

0.0905 0.0900 0.0812

All Games τ St. Dev.

-0.0043 0.4374 0.5329

0.1940 0.1702 0.1512

0.5564 0.6542 0.6862

0.1667 0.1384 0.1271

Table 9: Average KT distance (τ) and Standard Deviation (St. Dev.) for the Synthetic data for games with between 25 and 35 locations, as well as an average over all games. Higher is better; +1 means the two lists are perfectly correlated and −1 means the two lists are perfectly anti-correlated.

Shortcut Distance Re-routed Margin Depot Distance
Moat Packing Christoﬁdes 60/40 Moat/Depot

5
0.4969 0.1079 0.1742
0.1742 0.0415 0.1079

10
0.5316 0.0371 0.0218
0.0123 0.0035 0.0018

Number of Locations

15

20

25

0.5470 0.0328 0.0087

0.6763 0.0359 0.0019

0.5516 0.0298 0.0002

0.0022 0.0009 0.0001

0.0021 0.0002 0.0000

0.0004 0.0001 0.0000

30
0.5495 0.0079 0.0001
0.0002 0.0000 0.0000

35
0.6253 0.0023 0.0012
0.0000 0.0000 0.0000

Table 10: Median p values out of 20 games per number of locations of τ for the Synthetic data. Lower is better, p < 0.05 required for statistical signiﬁcance.

38

A STUDY OF PROXIES FOR SHAPLEY ALLOCATIONS OF TRANSPORT COSTS

Shortcut Distance Re-routed Margin Depot Distance
Moat Packing Christoﬁdes 60/40 Moat/Depot

5
1.0000 1.0000 1.0000
1.0000 1.0000 0.4969

10
1.0000 0.5316 0.2109
1.0000 0.4042 0.0218

Number of Locations

15

20

25

0.8695 0.6222 0.1124

0.9164 0.5520 0.1955

0.9604 0.5516 0.0594

0.1394 0.1394 0.0037

0.0637 0.0191 0.0107

0.0197 0.0007 0.0007

30
0.9402 0.3294 0.0468
0.0244 0.0002 0.0006

35
0.9882 0.1680 0.1196
0.0067 0.0029 0.0008

Table 11: Maximum p values out of 20 games per number of locations of τ for the Synthetic data. Lower is better, p < 0.05 required for statistical signiﬁcance.

Shortcut Distance Re-routed Margin Depot Distance
Moat Packing Christoﬁdes 60/40 Moat/Depot

5
35.0% 85.0% 75.0%
65.0% 85.0% 70.0%

10
20.0% 90.0% 25.0%
80.0% 75.0% 75.0%

Number of Locations

15

20

25

0.0% 65.0% 30.0%

5.0% 65.0% 45.0%

0.0% 70.0% 20.0%

75.0% 60.0% 75.0%

50.0% 45.0% 50.0%

55.0% 80.0% 65.0%

30
5.0% 50.0% 35.0%
50.0% 65.0% 60.0%

35
5.0% 65.0% 40.0%
60.0% 55.0% 55.0%

All Games
10.0% 70.0% 38.6%
62.1% 66.4% 64.3%

Table 12: Percentage of correct top elements of the Shapley ordering identiﬁed by the respective proxy for the 20 instances per game size for the Synthetic data.

39

AZIZ, CAHAN, GRETTON, KILBY, MATTEI, & WALSH

Absolute Difference between Fractional Shapley and Proxy

Absolute Difference between Fractional Shapley and Proxy

All Locations, Proxy: Re-routed Margin
103
102
101

All Locations, Proxy: Moat Packing
103
102
101

Absolute Difference between Fractional Shapley and Proxy

Absolute Difference between Fractional Shapley and Proxy

100

00

100

101

102

Fraction of Total Shapley Allocation

All Locations, Proxy: Christofides
103

102

101

100

00

100

101

102

Fraction of Total Shapley Allocation

All Locations, Proxy: Depot Distance
103

102

101

Absolute Difference between Fractional Shapley and Proxy

Absolute Difference between Fractional Shapley and Proxy

100

00

100

101

102

Fraction of Total Shapley Allocation

All Locations, Proxy: Shortcut Distance
103

102

101

100

00

100

101

102

Fraction of Total Shapley Allocation

All Locations, Proxy: 60/40 Moat/Depot
103

102

101

100

00

100

101

102

Fraction of Total Shapley Allocation

100

00

100

101

102

Fraction of Total Shapley Allocation

Figure 8: Absolute value of the difference between the φ SV and φ PROXY plotted as a function of φ SV for all the points in the Synthetic data for all game sizes. Note that these are log-log plots to highlight the spread of the data. This is a repeat of Figure 5
40

A STUDY OF PROXIES FOR SHAPLEY ALLOCATIONS OF TRANSPORT COSTS
Appendix C. Auckland Data
For Auckland we obtained 13 instances of 10 location games and 8 instances of 20 location games.

Shortcut Distance Re-routed Margin Depot Distance
Moat Packing Christoﬁdes 60/40 Moat/Depot

10 Locations RMSE St. Dev.

0.4208 0.4111 0.1680

0.1140 0.1052 0.0923

0.2079 0.1409 0.1541

0.0947 0.0731 0.0831

20 Locations RMSE St.Dev.

0.3498 0.3222 0.0937

0.1599 0.1427 0.0419

0.2165 0.0887 0.0879

0.1364 0.0514 0.0414

All Games RMSE St. Dev.

0.3853 0.3667 0.1309

0.1370 0.1240 0.0671

0.2122 0.1148 0.1210

0.1156 0.0623 0.0623

Table 13: Root Mean Squared Error (RMSE) and Standard Deviation (St. Dev.) for the Auckland data for games with 10 and 20 locations. Lower is better.

Shortcut Distance Re-routed Margin Depot Distance
Moat Packing Christoﬁdes 60/40 Moat/Depot

10 Locations τ St. Dev.

0.0470 0.1815 0.0085

0.3513 0.2986 0.3026

0.2122 0.1068 0.0513

0.2652 0.3442 0.2853

20 Locations τ St. Dev.

0.1083 0.2538 0.1520

0.1528 0.2080 0.3265

0.2210 0.2456 0.1886

0.1528 0.3474 0.3369

All Games τ St. Dev.

0.0777 0.2177 0.0803

0.2521 0.2533 0.3146

0.2166 0.1762 0.1200

0.2090 0.3458 0.3111

Table 14: Average KT distance (τ) and Standard Deviation (St. Dev.) for the Auckland data for games with 10 and 20 locations. Higher is better; +1 means the two lists are perfectly correlated and −1 means the two lists are perfectly anti-correlated.

41

AZIZ, CAHAN, GRETTON, KILBY, MATTEI, & WALSH

Shortcut Distance Re-routed Margin Depot Distance
Moat Packing Christoﬁdes 60/40 Moat/Depot

Median 10 Locations 20 Locations

0.2109 0.4042 0.4042

0.2704 0.2053 0.2081

0.4042 0.4042 0.6767

0.1700 0.3460 0.1904

Maximum 10 Locations 20 Locations

0.8348 1.0000 1.0000

0.8065 0.6492 0.9164

0.8348 1.0000 1.0000

0.5754 0.9164 0.7529

Table 15: Median and Maximum p values out of 13 instances of 10 location games and 8 instances of 20 location games of τ for the Auckland data. Lower is better, p < 0.05 required for statistical signiﬁcance.

Shortcut Distance Re-routed Margin Depot Distance
Moat Packing Christoﬁdes 60/40 Moat/Depot

10 Locations
7.7% 15.4% 7.7%
7.7% 7.7% 7.7%

20 Locations
0.0% 37.5% 12.5%
25.0% 75.0% 25.0%

All Games
4.8% 23.8% 9.5%
14.3% 33.3% 14.3%

Table 16: Percentage of correct top elements of the Shapley ordering identiﬁed by the respective proxy for the 13 games of size 10 and 8 games of size 20 for the Auckland data.

42

A STUDY OF PROXIES FOR SHAPLEY ALLOCATIONS OF TRANSPORT COSTS

Average Absolute Error between Shapley and Hybrid Average Absolute Error between Shapley and Hybrid

0.10 Maximum Error per Blend Percentage for Auckland 10 Players 20 Players
0.08

0.06

0.04

0.02

0.000

20

40

60

80

100

Percentage of Hybrid that is Moat

0.10 Average Error per Blend Percentage for Auckland 10 Players 20 Players
0.08

0.06

0.04

0.02

0.000

20

40

60

80

100

Percentage of Hybrid that is Moat

Figure 9: Effect of the blending parameter λ on the error of Shapley allocation prediction for the Auckland dataset. The left-hand graph shows the average worst case error that any single location experiences, while the right-hand graph shows the average error over all locations.

Appendix D. Canberra Data
For the Canberra data we obtained 7 instances each of problems with 10 and 20 locations, respectively.

Shortcut Distance Re-routed Margin Depot Distance
Moat Packing Christoﬁdes 60/40 Moat/Depot

10 Locations RMSE St. Dev.

0.3651 0.3353 0.1405

0.0763 0.0930 0.0362

0.1717 0.1206 0.1291

0.0696 0.0464 0.0395

20 Locations RMSE St.Dev.

0.2827 0.2528 0.0870

0.0088 0.0149 0.0262

0.1597 0.0830 0.0777

0.0279 0.0219 0.0221

All Games RMSE St. Dev.

0.3239 0.2941 0.1138

0.0426 0.0540 0.0312

0.1657 0.1018 0.1034

0.0488 0.0342 0.0308

Table 17: Root Mean Squared Error (RMSE) and Standard Deviation (St. Dev.) for the Canberra data for games with 10 and 20 locations. Lower is better.

43

AZIZ, CAHAN, GRETTON, KILBY, MATTEI, & WALSH

Absolute Difference between Fractional Shapley and Proxy

Absolute Difference between Fractional Shapley and Proxy

All Locations, Proxy: Re-routed Margin
103
102
101

All Locations, Proxy: Shortcut Distance
103
102
101

Absolute Difference between Fractional Shapley and Proxy

Absolute Difference between Fractional Shapley and Proxy

100

00

100

101

102

Fraction of Total Shapley Allocation

All Locations, Proxy: Depot Distance
103

102

101

100

00

100

101

102

Fraction of Total Shapley Allocation

All Locations, Proxy: Moat Packing
103

102

101

Absolute Difference between Fractional Shapley and Proxy

Absolute Difference between Fractional Shapley and Proxy

100

00

100

101

102

Fraction of Total Shapley Allocation

All Locations, Proxy: Christofides
103

102

101

100

00

100

101

102

Fraction of Total Shapley Allocation

All Locations, Proxy: 60/40 Moat/Depot
103

102

101

100

00

100

101

102

Fraction of Total Shapley Allocation

100

00

100

101

102

Fraction of Total Shapley Allocation

Figure 10: Absolute value of the difference between the φ SV and φ PROXY plotted as a function of φ SV for all the points in the Auckland data for all game sizes. Note that these are log-log plots to highlight the spread of the data.
44

A STUDY OF PROXIES FOR SHAPLEY ALLOCATIONS OF TRANSPORT COSTS

Shortcut Distance Re-routed Margin Depot Distance
Moat Packing Christoﬁdes 60/40 Moat/Depot

10 Locations τ St. Dev.

-0.0714 0.3095 0.0556

0.1918 0.2552 0.0985

0.2505 0.1190 0.1190

0.2860 0.2109 0.1888

20 Locations τ St. Dev.

0.0126 0.2239 0.0693

0.1758 0.2124 0.1161

0.1512 0.2331 0.1178

0.1458 0.1916 0.1632

All Games τ St. Dev.

-0.0294 0.2667 0.0625

0.1838 0.2338 0.1073

0.2009 0.1761 0.1184

0.2159 0.2013 0.1760

Table 18: Average KT distance (τ) and Standard Deviation (St. Dev.) for the Canberra data for games with 10 and 20 locations. Higher is better; +1 means the two lists are perfectly correlated and −1 means the two lists are perfectly anti-correlated.

Shortcut Distance Re-routed Margin Depot Distance
Moat Packing Christoﬁdes 60/40 Moat/Depot

Median 10 Locations 20 Locations

0.6767 0.2971 0.8348

0.3103 0.0744 0.3449

0.2109 0.6767 0.6767

0.3818 0.1515 0.2208

Maximum 10 Locations 20 Locations

1.0000 0.4042 1.0000

0.8886 0.9721 0.9164

0.8348 0.8348 0.8348

0.9164 0.7529 0.9721

Table 19: Median and Maximum p values out of 7 games per number of locations of τ for the Canberra data. Lower is better, p < 0.05 required for statistical signiﬁcance.

Shortcut Distance Re-routed Margin Depot Distance
Moat Packing Christoﬁdes 60/40 Moat/Depot

10 Locations
0.0% 0.0% 0.0%
0.0% 0.0% 14.3%

20 Locations
0.0% 28.6% 28.6%
42.9% 42.9% 42.9%

All Games
0.0% 14.3% 14.3%
21.4% 21.4% 28.6%

Table 20: Percentage of correct top elements of the Shapley ordering identiﬁed by the respective proxy for the 7 trials per game size for the Canberra data.

45

AZIZ, CAHAN, GRETTON, KILBY, MATTEI, & WALSH

Average Absolute Error between Shapley and Hybrid Average Absolute Error between Shapley and Hybrid

0.10 Maximum Error per Blend Percentage for Canberra 10 Players 20 Players
0.08

0.06

0.04

0.02

0.000

20

40

60

80

100

Percentage of Hybrid that is Moat

0.10 Average Error per Blend Percentage for Canberra 10 Players 20 Players
0.08

0.06

0.04

0.02

0.000

20

40

60

80

100

Percentage of Hybrid that is Moat

Figure 11: Effect of the blending parameter λ on the error of Shapley allocation prediction for the Canberra dataset. The left-hand graph shows the average worst case error that any single location experiences, while the right-hand graph shows the average error over all locations.

46

A STUDY OF PROXIES FOR SHAPLEY ALLOCATIONS OF TRANSPORT COSTS

Absolute Difference between Fractional Shapley and Proxy

Absolute Difference between Fractional Shapley and Proxy

All Locations, Proxy: Re-routed Margin
103
102
101

All Locations, Proxy: Shortcut Distance
103
102
101

Absolute Difference between Fractional Shapley and Proxy

Absolute Difference between Fractional Shapley and Proxy

100

00

100

101

102

Fraction of Total Shapley Allocation

All Locations, Proxy: Depot Distance
103

102

101

100

00

100

101

102

Fraction of Total Shapley Allocation

All Locations, Proxy: Moat Packing
103

102

101

Absolute Difference between Fractional Shapley and Proxy

Absolute Difference between Fractional Shapley and Proxy

100

00

100

101

102

Fraction of Total Shapley Allocation

All Locations, Proxy: Christofides
103

102

101

100

00

100

101

102

Fraction of Total Shapley Allocation

All Locations, Proxy: 60/40 Moat/Depot
103

102

101

100

00

100

101

102

Fraction of Total Shapley Allocation

100

00

100

101

102

Fraction of Total Shapley Allocation

Figure 12: Absolute value of the difference between the φ SV and φ PROXY plotted as a function of φ SV for all the points in the Canberra data for all game sizes. Note that these are log-log plots to highlight the spread of the data.
47

AZIZ, CAHAN, GRETTON, KILBY, MATTEI, & WALSH
Appendix E. Sydney Data
For Sydney we obtained 49 instances of 10 location games and 29 instances of 20 location games.

Shortcut Distance Re-routed Margin Depot Distance
Moat Packing Christoﬁdes 60/40 Moat/Depot

10 Locations RMSE St. Dev.

0.4598 0.4288 0.1248

0.1532 0.1398 0.0500

0.2692 0.1338 0.1438

0.1308 0.0708 0.0687

20 Locations RMSE St.Dev.

0.3266 0.2903 0.0852

0.0976 0.0832 0.0269

0.2005 0.0864 0.0731

0.0779 0.0248 0.0271

All Games RMSE St. Dev.

0.3932 0.3596 0.1050

0.1254 0.1115 0.0385

0.2349 0.1101 0.1085

0.1044 0.0478 0.0479

Table 21: Root Mean Squared Error (RMSE) and Standard Deviation (St. Dev.) for the Sydney data for games with 10 and 20 locations. Lower is better.

Shortcut Distance Re-routed Margin Depot Distance
Moat Packing Christoﬁdes 60/40 Moat/Depot

10 Locations τ St. Dev.

-0.0213 0.4114 0.1394

0.2501 0.1895 0.2242

0.3937 0.3016 0.2563

0.2306 0.2444 0.2303

20 Locations τ St. Dev.

0.0882 0.4033 0.1874

0.1974 0.1681 0.2140

0.3675 0.4083 0.3035

0.1457 0.1597 0.2191

All Games τ St. Dev.

0.0335 0.4074 0.1634

0.2238 0.1788 0.2191

0.3806 0.3550 0.2799

0.1882 0.2021 0.2247

Table 22: Average KT distance (τ) and Standard Deviation (St. Dev.) for the Sydney data for games with 10 and 20 locations. Higher is better; +1 means the two lists are perfectly correlated and −1 means the two lists are perfectly anti-correlated.

48

A STUDY OF PROXIES FOR SHAPLEY ALLOCATIONS OF TRANSPORT COSTS

Shortcut Distance Re-routed Margin Depot Distance
Moat Packing Christoﬁdes 60/40 Moat/Depot

Median 10 Locations 20 Locations

0.4631 0.1400 0.4042

0.4393 0.0265 0.3449

0.0953 0.2109 0.2971

0.0328 0.0130 0.0744

Maximum 10 Locations 20 Locations

1.0000 0.7505 1.0000

0.9720 0.8546 0.9721

1.0000 1.0000 1.0000

0.8063 0.5997 0.9164

Table 23: Median and Maximum p values out of 49 instances of 10 location games and 29 instances of 20 location games of τ for the Sydney data. Lower is better, p < 0.05 required for statistical signiﬁcance.

Shortcut Distance Re-routed Margin Depot Distance
Moat Packing Christoﬁdes 60/40 Moat/Depot

10 Locations
6.1% 55.1% 46.9%
57.1% 53.1% 55.1%

20 Locations
24.1% 82.8% 48.3%
75.9% 55.2% 65.5%

All Games
12.8% 65.4% 47.4%
64.1% 53.8% 59.0%

Table 24: Percentage of correct top elements of the Shapley ordering identiﬁed by the respective proxy for the 49 instances of 10 location games and 29 instances of 20 location games.

49

AZIZ, CAHAN, GRETTON, KILBY, MATTEI, & WALSH

Average Absolute Error between Shapley and Hybrid Average Absolute Error between Shapley and Hybrid

0.10 Maximum Error per Blend Percentage for Sydney 10 Players 20 Players
0.08

0.06

0.04

0.02

0.000

20

40

60

80

100

Percentage of Hybrid that is Moat

0.10 Average Error per Blend Percentage for Sydney 10 Players 20 Players
0.08

0.06

0.04

0.02

0.000

20

40

60

80

100

Percentage of Hybrid that is Moat

Figure 13: Effect of the blending parameter λ on the error of Shapley allocation prediction for the Sydney dataset. The left-hand graph shows the average worst case error that any single location experiences, while the right-hand graph shows the average error over all locations.

50

A STUDY OF PROXIES FOR SHAPLEY ALLOCATIONS OF TRANSPORT COSTS

Absolute Difference between Fractional Shapley and Proxy

Absolute Difference between Fractional Shapley and Proxy

All Locations, Proxy: Re-routed Margin
103
102
101

All Locations, Proxy: Shortcut Distance
103
102
101

Absolute Difference between Fractional Shapley and Proxy

Absolute Difference between Fractional Shapley and Proxy

100

00

100

101

102

Fraction of Total Shapley Allocation

All Locations, Proxy: Depot Distance
103

102

101

100

00

100

101

102

Fraction of Total Shapley Allocation

All Locations, Proxy: Moat Packing
103

102

101

Absolute Difference between Fractional Shapley and Proxy

Absolute Difference between Fractional Shapley and Proxy

100

00

100

101

102

Fraction of Total Shapley Allocation

All Locations, Proxy: Christofides
103

102

101

100

00

100

101

102

Fraction of Total Shapley Allocation

All Locations, Proxy: 60/40 Moat/Depot
103

102

101

100

00

100

101

102

Fraction of Total Shapley Allocation

100

00

100

101

102

Fraction of Total Shapley Allocation

Figure 14: Absolute value of the difference between the φ SV and φ PROXY plotted as a function of φ SV for all the points in the Sydney data for all game sizes. Note that these are log-log plots to highlight the spread of the data.
51

