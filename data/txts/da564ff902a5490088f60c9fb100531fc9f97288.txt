Programming with Personalized PageRank: A Locally Groundable First-Order Probabilistic Logic

arXiv:1305.2254v1 [cs.AI] 10 May 2013

William Y. Wang Language Technology Inst. Carnegie Mellon University
Pittsburgh, PA 15213

Kathryn Mazaitis Machine Learning Dept. Carnegie Mellon University
Pittsburgh, PA 15213

William W. Cohen Language Technology Inst. and Machine Learning Dept. Carnegie Mellon University
Pittsburgh, PA 15213

Abstract

In many probabilistic ﬁrst-order representation systems, inference is performed by “grounding”—i.e., mapping it to a propositional representation, and then performing propositional inference. With a large database of facts, groundings can be very large, making inference and learning computationally expensive. Here we present a ﬁrstorder probabilistic language which is wellsuited to approximate “local” grounding: every query Q can be approximately grounded with a small graph. The language is an extension of stochastic logic programs where inference is performed by a variant of personalized PageRank. Experimentally, we show that the approach performs well without weight learning on an entity resolution task; that supervised weight-learning improves accuracy; and that grounding time is independent of DB size. We also show that order-of-magnitude speedups are possible by parallelizing learning.
1 INTRODUCTION
In many probabilistic ﬁrst-order representation systems, including Markov Logic Networks [13] and Probabilistic Similarity Logic [3], inference is performed by mapping a ﬁrst-order program to a propositional representation, and performing inference in that propositional representation. This mapping is often called grounding. For example, Figure 1 shows a simple MLN.1 As is often the case, this MLN has two parts: the rules R1, R2, which are weighted ﬁrst-order clauses; and the database DB, which consists of facts (unit clauses) of the form links(a,b) for constants a, b.
1This MLN does a very simple sort of label-propagation through hyperlinks.

Figure 1: A Markov logic network program and its grounding. (Dotted lines are clique potentials associated with rule R2, solid lines with rule R1.)
The ﬁgure also shows the the grounded version of this MLN, which is an ordinary Markov network: the DB facts become constraints on node values, and the clauses become clique potentials.
Grounding a ﬁrst-order program can be an expensive operation. For a realistic hyperlink graph, a Markov network with size even linear in the number of facts in the database, |DB|, is impractically large for inference. Superﬁcially, it would seem that groundings must inheritly be o(|DB|) for some programs: in the example, for instance, the probability of aboutSport(x) must depends to some extent on the entire hyperlink graph (if it is fully connected). However, it also seems intuitive that if we are interested in inferring information about a speciﬁc page—say, the probability of aboutSport(d1)–then the parts of the network only distantly connected to d1 are likely to have a small inﬂuence. This suggests that an approximate grounding strategy might be feasible, in which a query such as aboutSport(d1) would be grounded by constructing a small subgraph of the full network, followed by inference on this small “locally grounded” subgraph. Likewise, consider learning (e.g., from a set of queries Q with their desired truth values). Learning might pro-

ceed by locally-grounding every query goal, allowing learning to also take less than O(|DB|) time.
In this paper, we present a ﬁrst-order probabilistic language which is well-suited to approximate “local” grounding. We present an extension to stochastic logic programs (SLP) [5] that is biased towards short derivations, and show that this is related to personalized PageRank (PPR) [12, 4] on a linearized version of the proof space. Based on the connection to PPR, we develop a proveably-correct approximate inference scheme, and an associated proveably-correct approximate grounding scheme: speciﬁcally, we show that it is possible to prove a query, or to build a graph which contains the information necessary for weightlearning, in time O( α1 ), where α is a reset parameter associated with the bias towards short derivations, and
is the worst-case approximation error across all intermediate stages of the proof. This means that both inference and learning can be approximated in time independent of the size of the underlying database—a surprising and important result.
The ability to locally ground queries has another important consequence: it is possible to decompose the problem of weight-learning to a number of moderatesize subtasks (in fact, tasks of size O( α1 ) or less) which are weakly coupled. Based on this we outline a parallelization scheme, which in our initial implementation provides a order-of-magnitude speedup in learning time.
Below, we will ﬁrst introduce our formalism, and then describe our weight-learning algorithm. We will then present experimental results on a prototypical inference task, and compare the scalability of our method to Markov logic networks. We ﬁnally discuss related work and conclude.
2 Programming with Personalized PageRank (PROPPR)
2.1 LOGIC PROGRAM INFERENCE AS GRAPH SEARCH
We will now describe our “locally groundable” ﬁrstorder probabilistic language, which we call ProPPR. Inference for ProPPR is based on a personalized PageRank process over the proof constructed by Prolog’s Selective Linear Deﬁnite (SLD) theorem-prover. To deﬁne the semantics we will use notation from logic programming [8]. Let LP be a program which contains a set of deﬁnite clauses c1, . . . , cn, and consider a conjunctive query Q over the predicates appearing in LP . A traditional Prolog interpreter can be viewed as having the following actions. First, construct a “root vertex” v0 which is a pair (Q, Q) and add it to an

Table 1: A simple program in ProPPR. See text for explanation.

about(X,Z) :- handLabeled(X,Z) about(X,Z) :- sim(X,Y),about(Y,Z) sim(X,Y) :- links(X,Y) sim(X,Y) :-
hasWord(X,W),hasWord(Y,W), linkedBy(X,Y,W) linkedBy(X,Y,W) :- true

# base. # prop. # sim,link.
# sim,word. # by(W).

otherwise-empty graph GQ,LP . (For brevity, we will use drop the subscripts of G where possible.) Then recursively add to G new vertices and edges as follows: if u is a vertex of the form (Q, (R1, . . . , Rk)), and c is a clause in LP of the form R ← S1, . . . , S , and R1 and R have a most general uniﬁer θ = mgu(R1, R ), then add to G a new edge u → v where v = (Qθ, (S1, . . . , S , R2, . . . , Rk)θ). Let us call Qθ the transformed query and (S1, . . . , S , R2, . . . , Rk)θ the associated subgoal list. If a subgoal list is empty, we will denote it by 2.
G is often large or inﬁnite so it is not constructed explicitly. Instead Prolog performs a depth-ﬁrst search on G to ﬁnd the ﬁrst solution vertex v—i.e., a vertex with an empty subgoal list—and if one is found, returns the transformed query from v as an answer to Q. Table 1 and Figure 2 show a simple Prolog program and a proof graph for it.2 Given the query Q = about(a,Z), Prolog’s depth-ﬁrst search would return Q = about(a,fashion).
Note that in this proof formulation, the nodes are conjunctions of literals, and the structure is, in general, a digraph (rather than a tree). Also note that the proof is encoded as a graph, not a hypergraph, even if the predicates in the LP are not binary: the edges represent a step in the proof that reduces one conjunction to another, not a binary relation between entities.
2.2 FROM STOCHASTIC LOGIC PROGRAMS TO PROPPR
In stochastic logic programs (SLPs) [5], one deﬁnes a randomized procedure for traversing the graph G which thus deﬁnes a probability distribution over vertices v, and hence (by selecting only solution vertices) a distribution over transformed queries (i.e. answers) Qθ. The randomized procedure thus produces a distribution over possible answers, which can be tuned
2The annotations after the hashmarks and the edge labels in the proof graph will be described below. For conciseness, only R1, . . . , Rk is shown in each node u = (Q, (R1, . . . , Rk)).

Figure 2: A partial proof graph for the query about(a,Z). The upper right shows the link structure between documents a, b, c, and d, and some of the words in the documents. Restart links are not shown.

by learning to upweight desired (correct) answers and downweight others.
In past work, the randomized traversal of G was deﬁned by a probabilistic choice, at each node, of which clause to apply, based on a weight for each clause. We propose two extensions. First, we will introduce a new way of computing clause weights, which allows for a potentially richer parameterization of the traversal process. We will associate with each edge u → v in the graph a feature vector φu→v. This edge is produced indirectly, by associating with every clause c ∈ LP a function Φc(θ), which produces the φ associated with an application of c using mgu θ. This feature vector is computed during theorem-proving, and used to annotate the edge u → v in G created by applying c with mgu θ. Finally, an edge u → v will be traversed with probability Pr(v|u) ∝ f (w, φu→v) where w is a parameter vector and where f (w, φ) is a weighting function—e.g., f (w, φ) = exp(wi · φ). This weighting function now determines the probability of a transition, in theorem-proving, from u to v: speciﬁcally, Prw(v|u) ∝ f (w, φu→v). Weights in w default to 1.0, and learning consists of tuning these.
The second and more fundamental extension is to add edges in G from every solution vertex to itself, and also add an edge from every vertex to the start vertex v0. We will call this augmented graph GQ,LP below (or just G if the subscripts are clear from context). These links make SLP’s graph traversal a personalized PageRank (PPR) procedure, sometimes known as random-walk-with-restart [18]. These links are annotated by another feature vector function Φrestart(R), which is a applied of the leftmost literal of the subgoal list for u to annotate the edge u → v.

These links back to the start vertex bias will the traversal of the proof graph to upweight the results of short proofs. To see this, note that if the restart probability P (v0|u) = α for every node u, then the probability of reaching any node at depth d is bounded by (1 − α)d.
To summarize, if u is a node of the search graph, u = (Qθ, (R1, . . . , Rk)), then the transitions from u, and their respective probabilities, are deﬁned as follows, where Z is an appropriate normalizing constant:

• If v = (Qθσ, (S1, . . . , S , R2, . . . , Rk)θσ) is a state

derived by applying the clause c (with mgu σ),

then

1

Pr(v|u) w

=

Z f (w, Φc(θ

◦

σ))

• If v = v0 = (Q, Q) is the initial state in G, then

1

Pr(v|u) w

=

Z f (w, Φrestart(R1θ))

• If v is any other node, then Pr(v|u) = 0.

Finally we must specify the functions Φc and Φrestart. For clauses in LP , the feature-vector producing function Φc(θ) for a clause is speciﬁed by annotating c as follows: every clause c = (R ← S1, . . . , Sk) can be annotated with an additional conjunction of “feature literals” F1, . . . , F , which are written at the end of the clause after the special marker “#”. The function Φc(θ) then returns a vector φ = {F1θ, . . . , F θ}, where every Fiθ must be ground.
The requirement3 that edge features Fiθ are ground is the reason for introducing the apparently unnecessary
3The requirement that the feature literals returned by φc(θ) must be ground in θ is not strictly necessary for cor-

predicate linkedBy(X,Y,W) into the program of Table 1: adding the feature literal by(W) to the second clause for sim would result in a non-ground feature by(W), since W is a free variable when Φc is called. Notice also that the weight on the by(W) features are meaningful, even though there is only one clause in the deﬁnition of linkedBy, as the weight for applying this clause competes with the weight assigned to the restart edges.
It would be cumbersome to annotate every database fact, and diﬃcult to learn weights for so many features. Thus, if c is the unit clause that corresponds to a database fact, then Φc(θ) returns a default value φ = {db}, where db is a special feature indicating that a database predicate was used.4
The function Φrestart(R) depends on the functor and arity of R. If R is deﬁned by clauses in LP , then Φrestart(R) returns a unit vector φ = {defRestart}. If R is a database predicate (e.g., hasWord(doc1,W)) then we follow a slightly diﬀerent procedure, which is designed to ensure that the restart link has a reasonably large weight even with unit feature weights: we compute n, the number of possible bindings for R, and set φ[defRestart] = n · 1−αα , where α is a global parameter. This means that with unit weights, after normalization, the probability of following the restart link will be α.
Putting this all together with the standard iterative approach to computing personalized PageRank over a graph [12], we arrive at the following inference algorithm for answering a query Q, using a weight vector w. Below, we let Nv0 (u) denote the neighbors of u— i.e., the set of nodes v where Pr(v|u) > 0 (including the restart node v = v0). We also let W be a matrix such that W[u, v] = Prw(v|u), and in our discussion, we use ppr(v0) to denote the personalized PageRank vector for v0.
1. Let v0 = (Q, Q) be the start node of the search graph. Let G be a graph containing just v0. Let v0 = {v0}.
2. For t = 1, . . . , T (i.e., until convergence):
(a) Let vt be an all-zeros vector. (b) For each u with non-zero weight in vt−1, and
each v ∈ Nu+0(u), add (u, v, φu→v) to G with weight Prw(v|u), and set vt = W · vt−1
rectness. However, in developing ProPPR programs we noted than non-ground features were usually not what the programmer intended.
4If a non-database clause c has no annotation, then the default vector is φ = {id(c)}, where c is an identiﬁer for the clause c.

3. At this point vT ≈ ppr(v0). Let S be the set of nodes (Qθ, 2) that have empty subgoal lists and non-zero weight in vT , and let Z = u∈S vT [u]. The ﬁnal probability for the literal L = Qθ is
found by extracting these solution nodes S, and
renormalizing:

Pr(L) ≡ 1 vT [(L, 2)]

w

Z

For example, given the query Q = about(a,Z) and the program of Table 1, this procedure would give assign a non-zero probability to the literals about(a,sport) and about(a,fashion), concurrently building the graph of Figure 2.

2.3 LOCALLY GROUNDING A QUERY
Note that this procedure both performs inference (by computing a distribution over literals Qθ) and “grounds” the query, by constructing a graph G. ProPPR inference for this query can be re-done efﬁciently, by running an ordinary PPR process on G. This is useful for faster weight learning. Unfortunately, the grounding G can be very large: it need not include the entire database, but if T is the number of iterations until convergence for the sample program of Table 1 on the query Q = about(d, Y ), G will include a node for every page within T hyperlinks of d.
To construct a more compact local grounding graph G, we adapt an approximate personalized PageRank method called PageRank-Nibble [1]. This method has been used for the problem of local partitioning: in local partitioning, the goal is to ﬁnd a small, lowconductance5 component of a large graph G that contains a given node v.
The PageRank-Nibble-Prove algorithm is shown in Table 2. It maintains two vectors: p, an approximation to the personalized PageRank vector associated with node v0, and r, a vector of “residual errors” in p. Initially, p = ∅ and r = {v0}. The algorithm repeatedly picks a node u with a large residual error r[u], and reduces this error by distributing a fraction α of it to p[u], and the remaining fraction back to r[u] and r[v1], . . . , r[vn], where the vi’s are the neighbors of u. The order in which nodes u are picked does not matter for the analysis (in our implementation, we follow Prolog’s usual depth-ﬁrst search as much as possible.) Relative to PageRank-Nibble, the main diﬀerences are the the use of a lower-bound on α rather than a ﬁxed restart weight and the construction of the graph Gˆ.
5For small subgraphs GS, conductance of GS is the ratio of the weight of all edges exiting GS to the weight of all edges incident on a node in GS.

Table 2: The PageRank-Nibble-Prove algorithm for inference in ProPPR. α is a lower-bound on Pr(v0|u) for any node u to be added to the graph Gˆ, and is the desired degree of approximation.

deﬁne PageRank-Nibble-Prove(Q):

let v =PageRank-Nibble((Q, Q), α , )

let S = {u : p[u] > u and u = (Qθ, 2)}

let Z = u∈S p[u]

deﬁne

Prw(L)

≡

1 Z

v[(L,

2)]

end

deﬁne PageRank-Nibble(v0, α , ): let p = r = 0, let r[v0] = 1, and let Gˆ = ∅ while ∃u : r(u)/|N (u)| > do: push(u)
return p
end

deﬁne push(u): comment: this modiﬁes p, r, and Gˆ p[u] = p[u] + α · r[u] r[u] = r[u] · (1 − α ) for v ∈ N (u): add the edge (u, v, φu→v) to Gˆ if v = v0 then r[v] = r[v] + Pr(v|u)r[u] else r[v] = r[v] + (Pr(v|u) − α )r[u] endfor
end

Following the proof technique of Andersen et al, it can be shown that after each push, p + r = ppr(v0). It is also clear than when PageRank-Nibble terminates, then for any u, the error ppr(v0)[u] − p[u] is bounded by N (u): hence, in any graph where N (u) is bounded, a good approximation can be obtained. It can also be shown [1] that the subgraph Gˆ (of the full proof space) is in some sense a “useful” subset: for an appropriate setting of , if there is a low-conductance subgraph G∗ of the full graph that contains v0, then G∗ will be contained in Gˆ: thus if there is a subgraph G∗ containing v0 that approximates the full graph well, PageRank-Nibble will ﬁnd (a supergraph of) G∗.
Finally, we have the following eﬃciency bound:

Theorem 1 (Andersen,Chung,Lang) Let ui be

the i-th node pushed by PageRank-Nibble-Prove. Then

i |N (ui)| <

1 α

.

This can be proved by noting that initially |r|1 = 1, and also that |r|1 decreases by at least α |N (ui)| on the i-th push. As a direct consequence we have the following:

Corollary 1 The number of edges in the graph Gˆ produced by PageRank-Nibble-Prove is no more than α1 .

Importantly, the bound holds independent of the size of the full database of facts. The bound also holds regardless of the size or loopiness of the full proof graph, so this inference procedure will work for recursive logic programs.
To summarize, we have outlined an eﬃcient approximate proof procedure, which is closely related to personalized PageRank. As a side-eﬀect of inference for a query Q, this procedure will create a ground graph GˆQ on which personalized PageRank can be run di-

rectly, without any (relatively expensive) manipulation of ﬁrst-order theorem-proving constructs such as clauses or logical variables. As we will see, this “locally grounded” graph will be very useful in learning weights w to assign to the features of a ProPPR program.
As an illustration of the sorts of ProPPR programs that are possible, some small sample programs are shown in Figure 3. Clauses c1 and c2 are, together, a bag-of-words classiﬁer: each proof of predictedClass(D,Y) adds some evidence for D having class Y , with the weight of this evidence depending on the weight given to c2’s use in establishing related(w,y), where w and y are a speciﬁc word in D and y is a possible class label. In turn, c2’s weight depends on the weight assigned to the r(w, y) feature by w, relative to the weight of the restart link.6 Adding c3 and c4 to this program implements label propagation, and adding c5 and c6 implements a sequential classiﬁer.
In spite of its eﬃcient inference procedure, and its limitation to only deﬁnite clauses, ProPPR appears to have much of the expressive power of MLNs [6], in that many useful heuristics can apparently be encoded.
2.4 LEARNING FOR PROPPR
As noted above, inference for a query Q in ProPPR is based on a personalized PageRank process over the graph associated with the SLD proof of a query goal G. More speciﬁcally, the edges u → v of the graph G are annotated with feature vectors φu→v, and from these feature vectors, weights are computed using a parameter vector w, and ﬁnally normalized to form a
6The existence of the restart link thus has another important role in this program, as it avoids a sort of “label bias problem” in which local decisions are diﬃcult to adjust.

Table 3: Some more sample ProPPR programs. LP = {c1, c2} is a bag-of-words classiﬁer (see text). LP = {c1, c2, c3, c4} is a recursive label-propagation scheme, in which predicted labels for one document are assigned to similar documents, with similarity being an (untrained) cosine distance-like measure. LP = {c1, c2, c5, c6} is a sequential classiﬁer for document sequences.

c1: predictedClass(Doc,Y) :possibleClass(Y), hasWord(Doc,W), related(W,Y) # c1.
c2: related(W,Y) :- true # relatedFeature(W,Y)

c3: predictedClass(Doc,Y) :similar(Doc,OtherDoc), predictedClass(OtherDoc,Y) # c3.
c4 : similar(Doc1,Doc2) :hasWord(Doc1,W), inDoc(W,Doc2) # c4.

Database predicates: hasWord(D,W): doc D contains word W inDoc(W,D): doc D contains word W previous(D1,D2): doc D2 precedes D1 possibleClass(Y): Y is a class label

c5 : predictedClass(Doc,Y) :previous(Doc,OtherDoc), predictedClass(OtherDoc,OtherY), transition(OtherY,Y) # c5.
c6: transition(Y1,Y2) :- true # transitionFeature(Y1,Y2)

probability distribution over the neighbors of u. The “grounded” version of inference is thus a personalized PageRank process over a graph with feature-vector annotated edges.

In prior work, Backstrom and Leskovic [2] outlined
a family of supervised learning procedures for this
sort of annotated graph. In the simpler case of their
learning procedure, an example is a triple (v0, u, y) where v0 is a query node, u is a node in in the personalized PageRank vector pv0 for v0, y is a target value, and a loss (v0, u, y) is incurred if pv0 [u] = y. In the more complex case of “learning to rank”, an
example is a triple (v0, u+, u−) where v0 is a query node, u+ and u− are nodes in in the personalized PageRank vector pv0 for v0, and a loss is incurred unless pv0 [u+] ≥ pv0 [u−]. The core of Backstrom and Leskovic’s result is a method for computing the gra-
dient of the loss on an example, given a diﬀerentiable
feature-weighting function f (w, φ) and a diﬀerentiable
loss function . The gradient computation is broadly
similar to the power-iteration method for computation
of the personalized PageRank vector for v0. Given the gradient, a number of optimization methods can be
used to compute a local optimum.

We adopt this learning for ProPPR, with some mod-

iﬁcations. The training data D is a set of triples

{(Q1, P 1, N 1), . . . , (Qm, P m, N m)} where each Qk is

a query, P k =

Qθ

1 +

,

.

.

.

,

Qθ

I +

is a list of correct an-

swers, and N k is a list

Qθ

1 −

,

.

.

.

,

Qθ

J −

incorrect an-

swers. Each such triple is then locally grounded using

the PageRank-Nibble-Prove method and used to pro-

duce a set I ∗ J of “learning-to-order” triples of the form (v0k, uk+,i, uk−,j) where v0k corresponds to Qk, and

the u’s are the nodes in GˆQK that correspond to the (in)correct answers for QK. We use a squared loss on
the diﬀerence of scores h = pv0 [u+] − pv0 [u−], i.e.,

(v0, u+, u−) ≡

h2 if h < 0 0 else

and L2 regularization of the parameter weights. Hence the ﬁnal function to be optimized is

(v0k, uk+,i, uk−,j ) + µ||w||22
k i,j

To optimize this loss, we use stochastic gradient de-
scent (SGD), rather than the quasi-Newton method
of Backstrom and Leskovic. Weights are initialized to
1.0 + δ, where δ is randomly drawn from [0, 0.01]. We set the learning rate β of SGD to be β = epoηch2 where epoch is the current epoch in SGD, and η, the initial
learning rate, defaults to 1.0.

We implemented SGD because it is fast and has been adapted to parallel learning tasks [20, 11]. Local grounding means that learning for ProPPR is quite well-suited to parallelization. The step of locally grounding each Qi is “embarassingly” parallel, as every grounding can be done independently. To parallelize the weight-learning stage, we use multiple threads, each of which computes the gradient over a single grounding GˆQk , and all of which accesses a single shared parameter vector w. Although the shared parameter vector is a potential bottleneck [19], it is not a severe one, as the gradient computation dominates the learning cost.7
7This is not the case when learning a linear classiﬁer, where gradient computations are much cheaper.

Table 4: ProPPR program used for entity resolution. samebib(BC1,BC2) :- author(BC1,A1),sameauthor(A1,A2),authorinverse(A2,BC2) samebib(BC1,BC2) :- title(BC1,A1),sametitle(A1,A2),titleinverse(A2,BC2) samebib(BC1,BC2) :- venue(BC1,A1),samevenue(A1,A2),venueinverse(A2,BC2) samebib(BC1,BC2) :- samebib(BC1,BC3),samebib(BC3,BC2) sameauthor(A1,A2) :- haswordauthor(A1,W),haswordauthorinverse(W,A2),keyauthorword(W) sameauthor(A1,A2) :- sameauthor(A1,A3),sameauthor(A3,A2) sametitle(A1,A2) :- haswordtitle(A1,W),haswordtitleinverse(W,A2),keytitleword(W) sametitle(A1,A2) :- sametitle(A1,A3),sametitle(A3,A2) samevenue(A1,A2) :- haswordvenue(A1,W),haswordvenueinverse(W,A2),keyvenueword(W) samevenue(A1,A2) :- samevenue(A1,A3),samevenue(A3,A2) keyauthorword(W) :- true keytitleword(W) :- true keyvenueword(W) :- true

# author. # title. # venue. # tcbib. # authorword. # tcauthor. # titleword. # tctitle. # venueword. # tcvenue. # authorWord(W). # titleWord(W). # venueWord(W).

Table 5: Performance of the approximate PageRankNibble-Prove method, compared to the grounding by running personalized PageRank to convergence. In all cases α = 0.1.

MAP Time(sec)

0.0001 0.00005 0.00002 0.00001 0.000005

0.30

28

0.40

39

0.53

75

0.54

116

0.54

216

power iteration 0.54

819

3 EXPERIMENTS
3.1 A SAMPLE TASK
To evaluate this method, we use data from an entity resolution task previously studied as a test case for MLNs [15]. The program we use in the experiments is shown in Table 4: it is approximately the same as the MLN(B+T) approach from Singla and Domingos.8 To evaluate accuracy, we use the CORA dataset, a collection of 1295 bibliography citations that refer to 132 distinct papers. Throughout the experiments, we set the regularization coeﬃcient µ to 0.001, the total number of epochs to 5, and learning rate parameter η to 1. A standard log loss function was used in our objective function.
3.2 RESULTS
We ﬁrst consider the cost of the PageRank-NibbleProve inference/grounding technique. Table 5 shows the time required for inference (with uniform weights) for a set of 52 randomly chosen entity-resolution tasks from the CORA dataset, using a Python implemention of the theorem-prover. We report the time in seconds
8The principle diﬀerence is that we do not include tests on the absence of words in a ﬁeld in our clauses.

Figure 3: Run-time for inference in ProPPR (with a single thread) as a function of the number of entities in the database. The base of the log is 2.
for all 52 tasks, as well as the mean average precision (MAP) of the scoring for each query. It is clear that PageRank-Nibble-Prove oﬀers a substantial speedup on these problems with little loss in accuracy: on these problems, the same level of accuracy is achieved in less than a tenth of the time.
While the speedup in inference time is desirable, the more important advantages of the local grounding approach are that (1) grounding time, and hence inference, need not grow with the database size and (2) learning can be performed in parallel, by using multiple threads for parallel computations of gradients in SGD. Figure 3 illustrates the ﬁrst of these points: the scalability of the PageRank-Nibble-Prove method as database size increases. For comparison, we also show the inference time for MLNs with three wellpublished inference methods: Gibbs refers to Gibbs sampling, and Lifted BP is the lifted belief propagation method. We also compare with the maximum a

Table 6: AUC results on CORA citation-matching.

MLN(Fig 1) MLN(S&D) ProPPR(w=1) ProPPR

Cites 0.513 0.520 0.680 0.800

Authors 0.532 0.573 0.836 0.840

Venues 0.602 0.627 0.860 0.869

Titles 0.544 0.629 0.908 0.900

posteriori (MAP) inference approach, which does not return probabilistic estimates of the speciﬁed queries. In each case the performance task is inference over 16 test queries.
Note that ProPPR’s runtime is constant, independent of the database size: it takes essentially the same time for 28 = 256 entities as for 24 = 16. In contrast, lifted belief propagation is around 1000 times slower on the larger database.

on the test set used by Singla and Domingos for several methods. The line for MLN(Fig 1) shows results obtained by an MLN version of the program of Figure 1. The line MLN(S&D) shows analogous results for the best-performing MLN from [15]. Compared to these methods, ProPPR does quite well even before training (with unit feature weights, w=1); the improvement here is likely due to the ProPPR’s bias towards short proofs, and the tendency of the PPR method to put more weight on shared words that are rare (and hence have lower fanout in the graph walk.) Training ProPPR improves performance on three of the four tasks, and gives the most improvement on citation-matching, the most complex task.
The results in Table 6 all use the same data and evaluation procedure, and the MLNs were trained with the state-of-the-art Alchemy system using the recommended commands for this data (which is distributed with Alchemy9). However, we should note that the MLN results reproduced here are not identical to previous-reported ones [15]. Singla and Domingos used a number of complex heuristics that are difﬁcult to reproduce—e.g., one of these was combining MLNs with a heuristic, TFIDF-based matching procedure based on canopies [9]. While the trained ProPPR model outperformed the reproduced MLN model in all prediction tasks, it outperforms the reported results from Singla and Domingos only on venue, and does less well than the reported results on citation and author 10.

Figure 4: Performance of the parallel SGD method. The x axis is the number of threads on a multicore machine, and the y axis is the speedup factor over a single-threaded implementation.
Figure 4 explores the speedup in learning (from grounded examples) due to multi-threading. The weight-learning is using a Java implementation of the algorithm which runs over ground graphs. The full CORA dataset was used in this experiment. As can be seen, the speedup that is obtained is nearly optimal, even with 16 threads running concurrently.
We ﬁnally consider the eﬀectiveness of weight learning. We train on the ﬁrst four sections of the CORA dataset, and report results on the ﬁfth. Following Singla and Domingos [15] we report performance as area under the ROC curve (AUC). Table 6 shows AUC

4 RELATED WORK
Although we have chosen here to compare experimentally to MLNs [13, 15], ProPPR represents a rather diﬀerent philosophy toward language design: rather than beginning with a highly-expressive but intractible logical core, we begin with a limited logical inference scheme and add to it a minimal set of extensions that allow probabilistic reasoning, while maintaining stable, eﬃcient inference and learning. While ProPPR is less expressive than MLNs (for instance, it is limited to deﬁnite clause theories) it is also much more eﬃcient. This philosophy is similar to that illustrated by probabilistic similarity logic (PSL) [3]; however, unlike ProPPR, PSL does not include a “local” grounding procedure, which leads to small inference problems, even for large databases.
Technically, ProPPR is most similar to stochastic logic programs (SLPs) [5]. The key innovation is the integration of a restart into the random-walk process,
9http://alchemy.cs.washington.edu 10Performance on title matching is not reported by Singla and Domingos.

which, as we have seen, leads to very diﬀerent computational properties.
There has been some prior work on reducing the cost of grounding probabilistic logics: noteably, Shavlik et al [14] describe a preprocessing algorithm called FROG that uses various heuristics to greatly reduce grounding size and inference cost, and Niu et al [10] describe a more eﬃcient bottom-up grounding procedure that uses an RDBMS. Other methods that reduce grounding cost and memory usage include “lifted” inference methods (e.g., [17]) and “lazy” inference methods (e.g., [16]); in fact, the LazySAT inference scheme for Markov networks is broadly similar algorithmically to PageRank-Nibble-Prove, in that it incrementally extends a network in the course of theorem-proving. However, there is no theoretical analysis of the complexity of these methods, and experiments with FROG and LazySAT suggest that they still lead to a groundings that grow with DB size, albeit more slowly.
ProPPR is also closely related to the Path Ranking Algorithm (PRA), learning algorithm for link prediction [7]. Like ProPPR, PRA uses random-walk methods to approximate logical inference. However, the set of “inference rules” learned by PRA corresponds roughly to a logic program in a particular form—namely, the form
p(S, T ) ← r1,1S, X1), . . . , r1,k1 (Xk1−1, T ). p(S, T ) ← r2,1(S, X1), . . . , r2,k2 (Xk2−1, T ). ...
ProPPR allows much more general logic programs. However, unlike PRA, we do not consider the task of searching for new logic program clauses.

learning task into many separate gradient computations, one for each training example, leading to a weight-learning method that can be easily parallelized. In our current implementation, an additional orderof-magnitude speedup in learning is made possible by parallelization. Experimentally, we showed that ProPPR performs well, even without weight learning, on an entity resolution task, and that supervised weight-learning improves accuracy.

5 CONCLUSIONS
We described a new probabilistic ﬁrst-order language which is designed with the goal of highly eﬃcient inference and rapid learning. ProPPR takes Prolog’s SLD theorem-proving, extends it with a probabilistic proof procedure, and then limits this procedure further, by including a “restart” step which biases the system to short proofs. This means that ProPPR has a simple polynomial-time proof procedure, based on the wellstudied personalized PageRank (PPR) method.
Following prior work on PPR-like methods, we designed a local grounding procedure for ProPPR, based on local partitioning methods [1], which leads to an inference scheme that is an order of magnitude faster that the conventional power-iteration approach to computing PPR, takes time O( α1 ), independent of database size. This ability to “locally ground” a query also makes it possible to partition the weight

References
[1] Reid Andersen, Fan R. K. Chung, and Kevin J. Lang. Local partitioning for directed graphs using pagerank. Internet Mathematics, 5(1):3–22, 2008.
[2] Lars Backstrom, Dan Huttenlocher, Jon Kleinberg, and Xiangyang Lan. Group formation in large social networks: membership, growth, and evolution. In KDD ’06: Proceedings of the 12th ACM SIGKDD international conference on Knowledge discovery and data mining, pages 44– 54, New York, NY, USA, 2006. ACM.
[3] Matthias Brocheler, Lilyana Mihalkova, and Lise Getoor. Probabilistic similarity logic. In Proceedings of the Conference on Uncertainty in Artiﬁcial intelligence, 2010.
[4] Soumen Chakrabarti. Dynamic personalized PageRank in entity-relation graphs. In WWW ’07: Proceedings of the 16th international conference on World Wide Web, pages 571–580, New York, NY, USA, 2007. ACM Press.
[5] James Cussens. Parameter estimation in stochastic logic programs. Machine Learning, 44(3):245– 271, 2001.
[6] Pedro Domingos and Daniel Lowd. Markov Logic: An Interface Layer for Artiﬁcial Intelligence. Synthesis Lectures on Artiﬁcial Intelligence and Machine Learning. Morgan & Claypool Publishers, 2009.
[7] Ni Lao and William W. Cohen. Relational retrieval using a combination of path-constrained random walks. Machine Learning, 81(1):53–67, 2010.
[8] J. W. Lloyd. Foundations of Logic Programming: Second Edition. Springer-Verlag, 1987.
[9] Andrew McCallum, Kamal Nigam, and Lyle H. Ungar. Eﬃcient clustering of high-dimensional data sets with application to reference matching. In Knowledge Discovery and Data Mining, pages 169–178, 2000.
[10] Feng Niu, Christopher R´e, AnHai Doan, and Jude Shavlik. Tuﬀy: Scaling up statistical inference in markov logic networks using an RDBMS. Proceedings of the VLDB Endowment, 4(6):373–384, 2011.
[11] Feng Niu, Benjamin Recht, Christopher R´e, and Stephen J Wright. Hogwild!: A lock-free approach to parallelizing stochastic gradient descent. arXiv preprint arXiv:1106.5730, 2011.

[12] Larry Page, Sergey Brin, R. Motwani, and T. Winograd. The PageRank citation ranking: Bringing order to the web. In Technical Report, Computer Science department, Stanford University, 1998.
[13] Matthew Richardson and Pedro Domingos. Markov logic networks. Mach. Learn., 62(12):107–136, 2006.
[14] Jude Shavlik and Sriraam Natarajan. Speeding up inference in markov logic networks by preprocessing to reduce the size of the resulting grounded network. In Proceedings of the Twentyﬁrst International Joint Conference on Artiﬁcial Intelligence (IJCAI-09), 2009.
[15] Parag Singla and Pedro Domingos. Entity resolution with markov logic. In Data Mining, 2006. ICDM’06. Sixth International Conference on, pages 572–582. IEEE, 2006.
[16] Parag Singla and Pedro Domingos. Memoryeﬃcient inference in relational domains. In Proceedings of the national conference on Artiﬁcial intelligence, volume 21, page 488. Menlo Park, CA; Cambridge, MA; London; AAAI Press; MIT Press; 1999, 2006.
[17] Parag Singla and Pedro Domingos. Lifted ﬁrstorder belief propagation. In Proceedings of the 23rd national conference on Artiﬁcial intelligence, volume 2, pages 1094–1099, 2008.
[18] Hanghang Tong, Christos Faloutsos, and Jia-Yu Pan. Fast random walk with restart and its applications. In ICDM, pages 613–622. IEEE Computer Society, 2006.
[19] Martin Zinkevich, Alex Smola, and John Langford. Slow learners are fast. Advances in Neural Information Processing Systems, 22:2331–2339, 2009.
[20] Martin Zinkevich, Markus Weimer, Alex Smola, and Lihong Li. Parallelized stochastic gradient descent. Advances in Neural Information Processing Systems, 23(23):1–9, 2010.

