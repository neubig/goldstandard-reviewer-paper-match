Sequential Decision Algorithms for Measurement-Based Impromptu Deployment of a
Wireless Relay Network along a Line
Arpan Chattopadhyay, Marceau Coupechoux, and Anurag Kumar

arXiv:1502.06878v2 [cs.NI] 7 Sep 2017

Abstract—We are motivated by the need, in some applications, for impromptu or as-you-go deployment of wireless sensor networks. A person walks along a line, starting from a sink node (e.g., a base-station), and proceeds towards a source node (e.g., a sensor) which is at an a priori unknown location. At equally spaced locations, he makes link quality measurements to the previous relay, and deploys relays at some of these locations, with the aim to connect the source to the sink by a multihop wireless path. In this paper, we consider two approaches for impromptu deployment: (i) the deployment agent can only move forward (which we call a pure as-you-go approach), and (ii) the deployment agent can make measurements over several consecutive steps before selecting a placement location among them (the explore-forward approach). We consider a very light trafﬁc regime, and formulate the problem as a Markov decision process, where the trade-off is among the power used by the nodes, the outage probabilities in the links, and the number of relays placed per unit distance. We obtain the structures of the optimal policies for the pure as-you-go approach as well as for the explore-forward approach. We also consider natural heuristic algorithms, for comparison. Numerical examples show that the explore-forward approach signiﬁcantly outperforms the pure asyou-go approach in terms of network cost. Next, we propose two learning algorithms for the explore-forward approach, based on Stochastic Approximation, which asymptotically converge to the set of optimal policies, without using any knowledge of the radio propagation model. We demonstrate numerically that the learning algorithms can converge (as deployment progresses) to the set of optimal policies reasonably fast and, hence, can be practical model-free algorithms for deployment over large regions. Finally, we demonstrate the end-to-end trafﬁc carrying capability of such networks via ﬁeld deployment.
I. INTRODUCTION
A wireless sensor network (WSN) typically comprises sen-
sor nodes (sources of measurements), a base station (or sink),
and wireless relays for multihop communication between the
sources and the sink. There are situations in which a WSN
needs to be deployed (i.e., the relays and the sensors need
to be placed) in an impromptu or as-you-go fashion. One
such situation is in emergencies, e.g., situational awareness
The contents of this paper have been arXived in [1]. Arpan Chattopadhyay and Anurag Kumar are with the Department of ECE, Indian Institute of Science, Bangalore, India; email: arpanc.ju@gmail.com, anurag@ece.iisc.ernet.in. Marceau Coupechoux is with Telecom ParisTech and CNRS LTCI, Dept. Informatique et Reseaux, 23, avenue d’Italie, 75013 Paris, France; email: marceau.coupechoux@telecom-paristech.fr. The research reported in this paper was supported by a Department of Electronics and Information Technology (DeitY, India) and NSF (USA) funded project on Wireless Sensor Networks for Protecting Wildlife and Humans, by an Indo-French Centre for Promotion of Advance Research (IFCPAR) funded project, and by the Department of Science and Technology (DST, India), via J.C. Bose Fellowship. All appendices are provided in the supplementary material.

Fig. 1. A wireless relay network, placed along a line, connecting a source to a sink. The dots (ﬁlled and unﬁlled) denote potential locations for node placement, and are successively δ meters apart. The deployed network comprises two relays (ﬁlled dots) placed at two of the potential locations; the solid arrows show the path from the source to the sink. The dotted arrows show some more possible links between pairs of potential locations.
networks deployed by ﬁrst-responders such as ﬁre-ﬁghters or anti-terrorist squads. As-you-go deployment is also of interest when deploying multihop wireless networks for sensor-sink interconnection over large terrains, such as forest trails (see [2] for an application of multi-hop WSNs in wildlife monitoring, and [3, Section 5] for application of WSN in forest ﬁre detection), where it may be difﬁcult to make exhaustive measurements at all possible deployment locations before placing the relay nodes. As-you-go deployment would be particularly useful when the network is temporary and needs to be quickly redeployed at a different place (e.g., to monitor a moving phenomenon such as groups of wildlife).1
Our work is motivated by the need for as-you-go deployment of a WSN over large terrains, such as forest trails, where planned deployment (requiring exhaustive measurements over the deployment region) would be time consuming and difﬁcult. Abstracting the above-mentioned problems, we consider the problem of deployment of relay nodes along a line, between a sink node (e.g., the WSN base-station) and a source node (e.g., a sensor) (see Figure 1), where a single deployment agent (the person who is carrying out the deployment) starts from the sink node, places relay nodes along the line, and places the source node where required. In applications, the location at which sensor placement is required might only be discovered as the deployment agent walks (e.g., in an animal monitoring application, by ﬁnding a concentration of pugmarks, or a watering hole).
In the perspective of an optimal planned deployment, we would need to place relay nodes at all potential locations (for example, with reference to Figure 1, this would mean placing relays at all the four dots in between the source and the sink) and measure the qualities of all possible links in order to decide where to place the relays. This approach would provide the global optimal solution, but the time and effort
1In remote places, cellular network coverage may not be available or practicable. Hence, a multi-hop WSN is required for monitoring purposes.

2

required might not be acceptable in the applications mentioned earlier. With impromptu deployment, the next relay placement locations depend on the radio link qualities to the previously placed nodes; these link qualities and also the source location are discovered as the agent walks along the line. Such an approach requires fewer measurements compared to planned deployment, but, in general, is suboptimal.
In this paper, we mathematically formulate the problems of impromptu deployment along a line as optimal sequential decision problems. The cost of a deployment is evaluated as a linear combination of three components: the sum transmit power along the path, the sum outage probability along the path, and the number of relays deployed; we provide a motivation for this cost structure. We formulate relay placement problems to minimize the expected average cost per-step. Our channel model accounts for path-loss, shadowing, and fading.
We explore deployment with two approaches: (i) the pure as-you-go approach and (ii) the explore-forward approach. In the pure as-you-go approach, the deployment agent can only move forward; this approach is a necessity if the deployment needs to be quick. Due to shadowing, the path-loss over a link of a given length is random, and a more efﬁcient deployment can be expected if link quality measurements at several locations along the line are compared and an optimal choice is made among these; we call this approach exploreforward. Explore-forward would require the deployment agent to retrace his steps; but this might provide a good compromise between deployment speed and deployment efﬁciency.
We formulate each of these problems as a Markov decision process (MDP), obtain the optimal policy structures, illustrate their performance numerically and compare with reasonable heuristics. Next, we propose several learning algorithms and prove that each of them asymptotically converges to the optimal policy if we seek to minimize the long run average cost per unit distance. We also demonstrate the convergence rate of the learning algorithms via numerical exploration. Finally, we demonstrate the end-to-end trafﬁc carrying capability of such networks via ﬁeld deployment.
A. Related Work
Until recently, problems of impromptu deployment of wireless networks have been addressed primarily by heuristics and by experimentation. Howard et al., in [4], provide heuristic algorithms for incremental deployment of sensors in order to cover the deployment area; their problem is related to that of self-deployment of autonomous robot teams. Souryal et al., in [5], address the problem of impromptu wireless network deployment by experimental study of indoor RF link quality variation; a similar approach is taken in [6] also. The authors of [7] describe a breadcrumbs system for aiding ﬁreﬁghting inside buildings. Their work addresses the same class of problems as ours, with the requirement that the deployment agent has to stay connected to k previously placed nodes in the deployment process. Their work considers the trade-off between link qualities and the deployment rate, but does not provide any optimality guarantee of their deployment schemes. Their next work [8] provides a reliable multiuser breadcrumbs system. Bao and Lee, in [9], study the scenario where a group

of ﬁrst-responders, starting from a command centre, enter a large area where there is no communication infrastructure, and as they walk they place relays at suitable locations in order to stay connected among themselves and with the command centre. However, these approaches are based on heuristic algorithms, rather than on rigorous formulations; hence they do not provide any provable performance guarantee.
In our work we have formulated impromptu deployment as a sequential decision problem, and have derived optimal deployment policies. Recently, Sinha et al. ([10]) have provided an algorithm based on an MDP formulation in order to establish a multi-hop network between a sink and an unknown source location, by placing relay nodes along a random lattice path. Their model uses a deterministic mapping between power and wireless link length, and, hence, does not consider statistical variability (due to shadowing) of the transmit power required to maintain the link quality over links having the same length. The statistical variation of link qualities over space requires measurement-based deployment, in which the deployment agent makes placement decisions at a point based on the measurement of the power required to establish a link (with a given quality) to the previously placed node.
We view the current paper as a continuation of our papers [11] (which provides the ﬁrst theoretical formulation of measurement-based impromptu deployment) and [12] (which provides ﬁeld deployment results using our algorithms).
B. Organization The system model and notation have been described in
Section II. Impromptu deployment with a pure as-you-go approach has been discussed in Section III. Section IV presents our work on the explore-forward approach. A numerical comparison between these two approaches are made in Section V. Section VI and Section VII describe the learning algorithms for the explore-forward approach approach. Numerical results are provided in Section VIII on the rate of convergence of the learning algorithms. Experimental results demonstrating the trafﬁc carrying capability of the deployed networks are provided in Section IX, followed by the conclusion.
II. SYSTEM MODEL AND NOTATION
The line is discretized into steps of length δ (Figure 1), starting from the sink. Each point, located at a distance of an integer multiple of δ from the sink, is considered to be a potential location where a relay can be placed. As the single deployment agent walks along the line, at each step or at some subset of steps, he measures the link quality from the current location to the previous node; these measurements are used to decide the location and transmit power of the next relay.
As shown in Figure 1, the sink is called Node 0, the relay closest to the sink is called Node 1, and the relays are enumerated as nodes {1, 2, 3, · · · } as we walk away from the sink. The link whose transmitter is Node i and receiver is Node j is called link (i, j). A generic link is denoted by e. The length of each link is an integer multiple of δ.
A. Channel Model and Outage Probability
We consider the usual aspects of path-loss, shadowing, and fading to model the wireless channel. The received power of

3

Fig. 2. Illustration of pure as-you-go deployment with A = 1 and B = 3. In this “snap-shot” of the deployment process, the deployment agent has already placed Relay 1 and Relay 2 at distances U1 and U2, has set their transmit powers to Γ1 and Γ2, thereby achieving outage probabilities Q(o1u,t0) and Q(o2u,t1) (links shown by solid arrows). Having placed Relay 2, he skips the next location (since A = 1); based on measurements made at the next location (dashed arrow), the algorithm advises him to not place a relay and move on. The diagram shows the agent in the process of evaluating the next location at r = 3δ distance from Relay 2 (dotted arrow). Based on these measurements, the deployment agent will decide whether to place a relay at r = 3δ; if a relay is not placed here, it must be placed at the next location, since B = 3.

a packet (say the k-th packet, k ≥ 1) in a particular link (i.e., a transmitter-receiver pair) of length r is given by:

Prcv,k = PT c( r )−ηHkW

(1)

r0

where PT is the transmit power, c is the path-loss at the reference distance r0, η is the path-loss exponent, Hk denotes the fading random variable seen by the k-th packet (e.g., it is an exponentially distributed random variable for the Rayleigh fading model), and W denotes the shadowing random variable. Hk captures the variation of the received power over time, and it takes independent values over different coherence times.

The path-loss between a transmitter and a receiver at a given distance can have a large spatial variability around the mean path-loss (averaged over fading), as the transmitter is moved over different points at the same distance from the receiver; this is called shadowing. Shadowing is usually modeled as a log-normally distributed, random, multiplicative path-loss factor; in dB, shadowing is distributed with values of standard deviation as large as 8 to 10 dB. Also, shadowing is spatially uncorrelated over distances that depend on the sizes of the objects in the propagation environment (see [13]); our measurements in a forest-like region of our Indian Institute of Science (IISc) campus established log-normality of the shadowing and gave a shadowing decorrelation distance of 6 meters (see [12]). In this paper, we assume that the shadowing at any two different links in the network are independent, i.e., W(e1) is independent of W(e2) for e1 = e2. This is a reasonable assumption if δ is chosen to be at least the decorrelation distance (see [13]) of the shadowing. Thus, from our experiments in the forest-like region in the IISc campus, we can safely assume independent shadowing at different potential locations if δ is greater than 6 m. In this paper, W is assumed to take values from a set W. We will denote by pW (w) the probability mass function or probability density function of W , depending on whether W is a countable set or an uncountable set (e.g., log-normal shadowing).

A link is considered to be in outage if the received signal power (RSSI) drops (due to fading) below Prcv−min (e.g., below −88 dBm, a ﬁgure that we have obtained via experimentation for the popular TelosB “motes,” see [14]). Since practical radios can only be set to transmit at a ﬁnite set of power levels, the transmit power of each node can be chosen from a discrete set, S := {P1, P2, · · · , PM }, where

Fig. 3. Illustration of explore-forward deployment with A = 1 and B = 2. In this “snap-shot” of the deployment process, the deployment agent has already placed Relay 1 and Relay 2 at distances U1 and U2, has set their transmit powers to Γ1 and Γ2, thereby achieving outage Q(o1u,t0) and Qo(2u,t1) (links shown by solid arrows). Having placed Relay 2, he skips the next location (since A = 1). The agent then evaluates the next two locations (dotted arrows) (B = 2). Then, based on the measurements at these two locations, the algorithm determines which of them to place the relay at and which power level to use.

P1 ≤ P2 ≤ · · · ≤ PM . For a link of length r, a transmit power γ and any particular realization of shadowing W = w, the outage probability is denoted by Qout(r, γ, w), which is increasing in r and decreasing in γ, w (according to (1)).

Qout(r, γ, w) depends on the fading statistics. For a link

with shadowing realization w, if the transmit power is γ, the received power of a packet will be Prcv = γc( rr0 )−ηwH. Outage is the event Prcv ≤ Prcv−min. If H is exponentially

distributed with mean 1 (i.e., for Rayleigh fading), then we

have, Qout(r, γ, w) = P(γc( rr )−ηwH ≤ Prcv−min) = 1 −

P

( r )η

0

e−

rcv−min r0 γcw

. The outage probability of a randomly chosen

link of given length and given transmit power is a random

variable, where the randomness comes from shadowing W .

Outage probability can be measured by sending a sufﬁciently

large number of packets over a link and calculating the

percentage of packets whose RSSI is below Prcv−min.

B. Deployment Process and Related Notation

In this paper, we consider two approaches for deployment.

Pure as-you-go deployment: After placing a relay, the agent skips the next A steps, and sequentially measures the outage probabilities from locations (A + 1), (A + 2), · · · , (A + B) to the previously placed node, at all transmit power levels γ ∈ S. As the agent explores the locations (A + 1), · · · , (A + B − 1) and makes link quality measurements.2 At each step he decides whether to place a relay there, and if the decision is to place a relay, then he also decides the transmit power for the placed relay. This has been depicted in Figure 2. In this process, if he has walked (A + B) steps away from the previous relay, or if he encounters the source location, then he must place a node. A and B will be ﬁxed before deployment begins.

Explore-forward deployment: After placing a node, the deployment agent skips the next A locations (A ≥ 0) and measures the outage probabilities to the previous node from locations (A + 1), · · · , (A + B), at each power level from the set S. Then, based on these B|S| measurements3 of the outage probability values, he places the relay at location u∗ ∈ {A + 1, · · · , A + B}, sets its transmit power to γ∗ ∈ S, and repeats the same process for placing the next relay. This procedure is illustrated in Figure 3. If the source location is

2At a distance r from the previous node, he measures the outage probabilities {Qout(r, γ, w)}γ∈S from the current location to the previous node, where w is the realization of the shadowing in the link being evaluated.
3Let us denote by wu the realization of shadowing in the potential link between the u-th location (starting from the previously placed node) and
the previous node (see Figure 3). The agent measures the outage probabilities {Qout(u, γ, wu)}A+1≤u≤A+B,γ∈S in order to make a placement decision.

4

encountered within (A + B) steps from the previous node, then the source is placed.
Choice of A and B: If the propagation environment is very good, or if we need to place a limited number of relays over a long line, it is very unlikely that a relay will be placed within the ﬁrst few locations from the previous node. In such cases, we can skip measurements at locations 1, 2, · · · , A and make measurements from locations (A + 1), · · · , (A + B). In general, the choice of A and B will depend on the constraints and requirements for the deployment. Larger A will result in faster exploration, but very large A will result in very high outage in each link. For a ﬁxed A, a large B results in more measurements, but we can expect a better performance.
C. Trafﬁc Model
In order to develop the problem formulation, we assume that the trafﬁc is so low that there is only one packet in the network at a time; we call this the “lone packet model.” Hence, there are no simultaneous transmissions to cause interference. This permits us to easily write down the communication cost on a path over the deployed relays. However, this assumption does not trivialize the deployment problem, since the deployment must still take into account the stochastic shadowing and fading in the links, and the effects of these factors on the number of nodes deployed and the powers they use.
The lone packet trafﬁc model is realistic for sensor networks that carry low duty cycle measurements, or just carry an occasional alarm packet. For example, recently there has been an effort to design passive infra-red (PIR) sensor platforms that can detect intrusion of a human or animal, and also can classify whether the intruder is a human or an animal ([15]). The data rate generated by such a platform deployed in a forest will be very low. The authors in [2, Section 3.2] use only a 1.1% duty cycle for a multi-hop wireless sensor network used for the purpose of wildlife monitoring. The sensors gather data from RFID collars on the animals; hence, the trafﬁc to be supported by the network is light. Lone packet model is also realistic for condition monitoring/industrial telemetry applications ([16]) as well, where the time between successive measurements is very large. Infrequent data model is common in machine-tomachine communication ([17]). Table 1 and Table 3 of [18] illustrate sensors whose sampling rate and the size of the sampled data packets are small; it shows data rate requirement as small as several bytes per second for habitat monitoring.
Even though the network is designed for the lone packet trafﬁc, it will be able to carry some amount of positive trafﬁc. See Section IX for experimental evidence of this claim; a ﬁvehop line network deployed using one algorithm proposed in this paper, over a 500 m long line in a forest-like environment, was able to carry 127 byte packets at a rate of 4 packets per second, with end-to-end packet loss probability less than 1%, which is sufﬁcient for the applications mentioned above.
Lone packet model is also valid when interference-free communication is achieved via multi-channel access. Recently there have been efforts to use multiple channels available in 802.15.4 radio in a network; see [19], [20], [21], [22]. In a line topology, this reduces to frequency reuse after certain hops, which, in turn, mitigates interference in the network. Thus, as

with the lone packet assumption, the availability of multiple channels, and appropriate channel allocation over the network, eliminates the need to optimize over link schedules.
It has been proved that design with the lone packet model can be the starting point for a design with desired positive trafﬁc (see [23]). Network design for carrying a given positive trafﬁc rate is left as a future research work.

D. Network Cost Structure

In this section we develop the cost that we use to evaluate the performance of a given deployment policy. Given the current location of the deployment agent with respect to the previous relay, and given the measurements made to the previous relay, a policy will provide the placement decision (in the case of pure as-you-go deployment, whether or not to place the relay, and if place then at what power, and in the case of explore-forward deployment, where among the B locations to place the relay and at which power).

Let us denote the number of placed relays up to x steps (i.e., xδ meters) from the sink by Nx (≤ x); deﬁne N0 = 0. Since deployment decisions are based on measurements to already placed relays, and since the path-loss over a link is a random variable (due to shadowing), we see that {Nx}x≥1 is a random process. In this paper we have assumed that each node forwards each packet to the immediately previously placed relay (e.g., with reference to Figure 1, the source forwards all packets to Relay 2, which, in turn, forwards all packets to Relay 1, etc.). See [11] for the considerably more complex possibility of relay skipping while forwarding packets.

When the node i is placed, the deployment policy also
prescribes the transmit power that this node should use, say,
Γi; then the outage probability over the link (i, i − 1), so created, is denoted by Q(oiu,it−1) (see Figure 2 and Figure 3). We evaluate the cost of the deployed network, up to xδ steps,
as a linear combination of three cost measures:

(i) The number of relays placed, i.e., Nx.

(ii) The sum outage, i.e.,

Nx i=1

Q(oiu,it−1).

The

motivation

for

this measure is that, for small values of Qout, the sum-

outage is approximately the probability that a packet sent

from the point x to the source encounters an outage along

the path from the point x back to the sink.

(iii) The sum power over the hops, i.e.,

Nx i=1

Γi.

These three costs are combined into one cost measure by combining them linearly and taking expectation (under a policy π), as follows:

Nx

Nx

Eπ( Γi + ξout Q(oiu,it−1) + ξrelayNx)

(2)

i=1

i=1

The multipliers ξout ≥ 0 and ξrelay ≥ 0 can be viewed as capturing the emphasis we wish to place on the corresponding measure of cost. For example, a large value of ξout will aim for a network deployment with smaller end-to-end expected outage. We can view ξrelay as the cost of placing a relay.
A Motivation for the Sum Power Objective: In case all the nodes have wake-on radios, the nodes normally stay in sleep mode, and each sleeping node draws a very small current

5

from the battery (see [24]). When a node has a packet, it

sends a wake-up tone to the intended receiver. The receiver

wakes up and the sender transmits the packet. The receiver

sends an ACK packet in reply. Clearly, the energy spent

in transmission and reception of data packets governs the

lifetime of a node, given that the ACK size is negligible.

We assume that a ﬁxed modulation scheme is used, so that

the transmission bit rate over all links is the same (e.g., in

IEEE 802.15.4 radios, that are commonly used for sensor

networking, the standard modulation scheme provides a bit

rate of 250 Kbps). We also assume a ﬁxed packet length.

Let tp be the transmission duration of a packet over a link, and suppose that the node i (1 ≤ i ≤ Nx) uses power Γi during transmission. Let Pr denote the packet reception power expended in the electronics at any receiving node. If the packet

generation rate ζ at the source is very small, the lifetime of the
k-th node (1 ≤ k ≤ Nx) is Tk := ζ(Γk+EPr)tp seconds (E is the total energy in a fresh battery). Hence, the rate at which we

have to replace the batteries in the network from the sink up

to distance x steps is given by Nk=x1 T1k = Nk=x1 ζ(Γk+EPr)tp .

The term ζPErtp can be absorbed into ξrelay. Hence, the battery

depletion rate is proportional to

Nx k=1

Γk

.

E. Deployment Objective

We assume that the distance L to the source from the sink is

a priori unknown, and its distribution is also unknown. Hence,

we assume that L = ∞ (deployment along a line of inﬁnite

length) and develop deployment policies that seek to minimize

the average cost per step. This setting can be useful in practice

when L is large (e.g., a long forest trail). Also, if we seek

to create networks along multiple trails in a forest, and if

deployment is done serially along multiple trails, then this

is effectively equivalent to deployment along a single long

line, provided that the trails have statistically identical radio

propagation environment. Note that, in case we deploy serially

along multiple lines but use this formulation, it means that we

seek to optimize the per-step cost averaged over multiple lines.

1) Unconstrained Problem: Motivated by the cost structure

and the L = ∞ model, we seek to solve the following:

inf lim sup Eπ Ni=x1(Γi + ξoutQ(oiu,it−1) + ξrelay ) (3)

π∈Π x→∞

x

where π is a placement policy, and Π is the set of all possible placement policies (to be formalized later). We formulate (3) as a long-term average cost Markov decision process (MDP).
2) Connection to a Constrained Problem: Note that, (3) is the relaxed version of the following constrained problem where we seek to minimize the mean power per step subject to a constraint on the mean outage per step and a constraint on the mean number of relays per step:

inf lim sup Eπ
π∈Π x→∞

Nx i=1

Γi

x

s.t. lim sup Eπ Ni=x1 Q(oiu,it−1) ≤ q and lim sup EπNx ≤ N

x→∞

x

x→∞ x

(4)

The following standard result tells us how to choose the

Lagrange multipliers ξout and ξrelay (see [25], Theorem 4.3): Theorem 1: Consider the constrained problem (4). If there
exists a pair ξo∗ut ≥ 0, ξr∗elay ≥ 0 and a policy π∗ such that π∗ is the optimal policy of the unconstrained problem (3) under (ξo∗ut, ξr∗elay) and the constraints in (4) are met with equality under π∗, then π∗ is an optimal policy for (4) also.
III. PURE AS-YOU-GO DEPLOYMENT A. Markov Decision Process (MDP) Formulation
Here we seek to solve problem (3), for the pure as-you-go approach. When the agent is r steps away from the previous node (A + 1 ≤ r ≤ A + B), he measures the outage probabilities {Qout(r, γ, w)}γ∈S on the link from the current location to the previous node, where w is the realization of the shadowing random variable in the link being evaluated. He uses the knowledge of r and the outage probabilities to decide whether to place a node at his current location, and what transmit power γ ∈ S to use if he places a relay. In this case, we formulate the impromptu deployment problem as a Markov Decision Process (MDP) with state space {A + 1, · · · , A + B} × W. At state (r, w), (A + 1) ≤ r ≤ (A + B − 1), w ∈ W, the action is either to place a relay and select a transmit power, or not to place. When r = A + B, the only feasible action is to place and select a transmit power γ ∈ S. If, at state (r, w), a relay is placed and it is set to use transmit power γ, a hop-cost of γ + ξoutQout(r, γ, w) + ξrelay is incurred. 4
A deterministic Markov policy π is a sequence of mappings {µk}k≥1 from the state space to the action space, and it is called a stationary policy if µk = µ for all k. Given the state (i.e., the measurements), the placement decision is made according to the policy.

B. Formulation for L ∼ Geometric(θ)

Under the pure as-you-go approach, we will ﬁrst minimize the expected total cost for L ∼ Geometric(θ), and then take θ → 0; this approach provides the policy structure for the average cost problem (see [26], Chapter 4).
In the L ∼ Geometric(θ) case, the deployment process regenerates (probabilistically) after placing a relay, because of the memoryless property of the geometric distribution, and because of the fact that deployment of a new node will involve measurement of qualities of new links not measured before, and the new links have i.i.d. shadowing independent of the previously measured links. The (special) state of the system at such regeneration points is denoted by 0 (apart from the states of the form (r, w)). When the source is placed at the end of the line, the process terminates. Suppose N is the (random) number of relays placed, and node N + 1 is the source node (as shown in Figure 1). We ﬁrst seek to solve the following:

N +1

N +1

min Eπ

Γi + ξout

Qo(iu,it−1) + ξrelayN

(5)

π∈Π

i=1

i=1

We will ﬁrst investigate this approach assuming ﬁnite W.

4We have taken (r, w) as a typical state for simplicity of representation;
so long as the channel model given by (1) is valid, we can also take (r, {Qout(r, γ, w)}γ∈S ) as a typical state. This happens because the cost of an action depends on the state (r, w) only via the outage probabilities.

6

C. Bellman Equation
Let us denote the optimal expected cost-to-go at state (r, w) and at state 0 be J(r, w) and J(0) respectively. Note that here we have an inﬁnite horizon total cost MDP with a ﬁnite state space and ﬁnite action space. The assumption P of Chapter 3 in [26] is satisﬁed, since the single-stage costs are nonnegative. Hence, by the theory developed in [26], we can focus on the class of stationary deterministic Markov policies.
By Proposition 3.1.1 of [26], the optimal value function J(·) satisﬁes the Bellman equation which is given by, for all (A + 1) ≤ r ≤ (A + B − 1),

J(r, w) = min min(γ + ξoutQout(r, γ, w)) + ξrelay + J(0),
γ∈S
θEW min(γ + ξoutQout(r + 1, γ, W ))
γ∈S

+(1 − θ)EW J(r + 1, W ) ,

J (A + B, w) = min(γ + ξoutQout(A + B, γ, w) + ξrelay) + J(0)
γ∈S

A+1

J(0) =

(1 − θ)k−1θEW min(γ + ξoutQout(k, γ, W ))

γ∈S

k=1

+(1 − θ)A+1EW J(A + 1, W )

(6)

These equations are understood as follows. If the current state is (r, w), (A + 1) ≤ r ≤ (A + B − 1) and the line has not ended yet, we can either place a relay and set its transmit power to γ ∈ S, or we may not place. If we place, the cost minγ∈S (γ + ξoutQout(r, γ, w) + ξrelay) is incurred at the current step, and the cost-to-go from there is J(0). If we do not place a relay, the line will end with probability θ in the next step, in which case a cost EW minγ∈S (γ + ξoutQout(r + 1, γ, W )) will be incurred. If the line does not end in the next step, the next state will be a random state (r + 1, W ) and a mean cost of EW J(r + 1, W ) will be incurred. At state (A + B, w) the only possible decision is to place a relay. At state 0, the deployment agent starts walking until he encounters the source location or location (A + 1); if the line ends at step k, 1 ≤ k ≤ A + 1 (with probability (1 − θ)k−1θ), a cost of EW minγ∈S (γ + ξoutQout(k, γ, W )) is incurred. If the line does not end within (A + 1) steps (this event has probability (1 − θ)A+1), the next state will be (A + 1, W ).
D. Value Iteration
The value iteration for (5) is obtained by replacing J(·) in (6) by J (k+1)(·) on the L.H.S (left hand side) and by J (k)(·) on the R.H.S (right hand side), and by taking J(0)(·) = 0 for all states. The standard MDP theory says that J(k)(·) ↑ J(·) for all states as k → ∞.

E. Policy Structure: OptAsYouGo Algorithm
Lemma 1: J (r, w) is increasing in r, ξout and ξrelay, decreasing in w, and jointly concave in ξout and ξrelay. J (0) is increasing and jointly concave in ξout and ξrelay.
Proof: See Appendix A. Next, we propose an optimal algorithm OptAsYouGo (Optimal algorithm with pure As-You-Go approach). Algorithm 1: (OptAsYouGo Algorithm) At state (r, w) (where A + 1 ≤ r ≤ A + B − 1), place a relay if and

only if minγ∈S (γ + ξoutQout(r, γ, w)) ≤ cth(r), where cth(r) := θEW minγ∈S (γ + ξoutQout(r + 1, γ, W )) + (1 − θ)EW J(r + 1, W ) − (ξrelay + J(0)) is a threshold increasing in r. If the decision is to place a relay, the optimal power to be selected is given by argminγ∈S (γ + ξoutQout(r, γ, w)). At state (A + B, w), select transmit power argminγ∈S (γ + ξoutQout(A + B, γ, w)).
Theorem 2: Under the pure as-you-go approach, Algorithm 1 provides the optimal policy for Problem (3).
Proof: See Appendix A.
Remark: The trade-off in the impromptu deployment problem is that if we place relays far apart, the cost due to outage increases, but the cost of placing the relays decreases. The intuition behind the threshold structure of the policy is that if at distance r we get a good link with the combination of power and outage less than a threshold, then we should accept that link because moving forward is unlikely to yield a better link. cth(r) is increasing in r. Since Qout(r, γ, w) is increasing in r for any γ, w, and since shadowing is i.i.d across links, the probability of a link (to the previous node) having desired QoS decreases as we move away from the previous node. Hence, the optimal policy will try to place relays as soon as possible if r is large, and this explains why cth(r) is increasing in r. Note that the threshold cth(r) does not depend on w, due to the fact that shadowing is i.i.d. across links.
F. Computation of the Optimal Policy Let us write V (r) := EW J (r, W ) = w∈W pW (w)J (r, w), and V (0) := J(0). Also,
for each stage k ≥ 0 of the value iteration, deﬁne V (k)(r) := EW J (k) (r, W ) and V (k)(0) := J (k)(0). Multiplying both sides of the value iteration by pW (w) and summing over w ∈ W, we obtain an iteration in terms of V (k)(·) and this iteration does not involve J(k)(·). Since J (k)(r, w) ↑ J (r, w) for each r, w and J (k)(0) ↑ J (0) as k ↑ ∞, we can argue that V (k)(r) ↑ EW J(r, W ) = V (r) for all r (by Monotone Convergence Theorem) and V (k)(0) ↑ J(0) = V (0). Then we can compute cth(r) by knowing V (·) itself (see the expression of cth(r) in Algorithm 1); we need not keep track of the cost-to-go values J(k)(r, w) for each state (r, w), at each stage k. Here we simply need to keep track of V (k)(·). Similar iterations were proposed in [11] (Section III-A-5).
G. Average Cost Problem: Optimality of OptAsYouGo Note that the problem (5) can be considered as an inﬁnite
horizon discounted cost problem with discount factor (1 − θ). Hence, keeping in mind that we have ﬁnite state and action spaces, we observe that for the discount factor sufﬁciently close to 1, i.e., for θ sufﬁciently close to 0, the optimal policy for problem in (5) is optimal for the problem in (3) (see [26, Proposition 4.1.7]). In particular, the optimal average cost per step with pure as-you-go approach, λ∗, is given by λ∗ = limθ→0 θJθ(0) (see [26, Section 4.1.1]), where Jθ(0) is the optimal cost for problem (5) under pure as-you-go with the probability of the line ending in the next step is θ.
In case W is a Borel subset of R, we still have a ﬁnite action space, and bounded, nonnegative cost per step. By [27,

7

Theorem 5.5.4], one can show that the optimal average cost per step is again λ∗ = limθ→0 θJθ(0). As θ ↓ 0, we will obtain a sequence of optimal policies (i.e., mappings from the state space to the action space), and a limit point of them will be an average cost optimal policy.

H. HeuAsYouGo: A Suboptimal Pure As-You-Go Heuristic
Algorithm 2: (HeuAsYouGo) The power used by the relays is set to a ﬁxed value. At each potential location, the deployment agent checks whether the outage to the previous relay meets a certain predetermined target with this ﬁxed transmit power level. After placing a relay, the next relay is placed at the last location where the target outage is met; or place at the (A + 1)-st location (after the previously placed relay) in the unlikely situation where the target outage is violated in the (A + 1)-st location itself. If the agent reaches the (A + B)-th step and if all previous locations violate the outage target, he must place the next relay at step (A + B).
HeuAsYouGo is a modiﬁed version of the heuristic deployment algorithm proposed in [5]. HeuAsYouGo is not exactly a pure as-you-go algorithm since it sometimes requires the agent to move one step back in case the outage target is violated.

IV. EXPLORE FORWARD DEPLOYMENT

A. Semi-Markov Decision Process (SMDP) Formulation

Let us recall explore-forward deployment from Section II-B; we denote by wu the realization of shadowing in the potential link between the u-th location (starting from the previously placed node) and the previous node (see Figure 3). The agent measures the outage probabilities {Qout(u, γ, wu)}A+1≤u≤A+B,γ∈S from locations (A + 1), · · · , (A + B) at all available transmit power levels from the set S, in order to make a placement decision.

Here we seek to solve the unconstrained problem (3).

We formulate our problem as a Semi-Markov Decision

Process (SMDP) with state space WB and action space

{A + 1, A + 2, · · · , A + B} × S. The vector w :=

(wA+1, wA+2, · · · , wA+B), i.e., the shadowing from B lo-

cations, is the state in our SMDP. In the state w, an action

(u, γ) ∈ {A+1, A+2, · · · , A+B}×S is taken where u is the

distance of the next relay (from the previous relay) that would

be placed and γ is the transmit power that this relay will use.

In this case, a hop-cost of γ + ξoutQout(u, γ, wu) + ξrelay

is incurred. After placing a relay, the next state becomes

w := (wA+1, wA+2, · · · , wA+B) with probability g(w ) :=

A+B r=A+1

pWr (wr)

(since

shadowing

is

i.i.d.

across

links).

Let us denote, by the vector W (k), the (random) state at

the k-th decision instant, and by µk(W (k)) the action at the

k-th decision instant. For a deterministic Markov policy π := {µk}k≥1, let us deﬁne the functions µ(k1) : WB → {A + 1, A + 2, · · · , A + B} and µ(k2) : WB → S as follows: if µk(w) = (u, γ), then µ(k1)(w) = u and µ(k2)(w) = γ.

B. Policy Structure: Algorithm OptExploreLim Note that, W (k) is i.i.d across k, k ≥ 1. The state space is
a Borel space and the action space is ﬁnite. The hop cost and hop length (in number of steps) are uniformly bounded across all state-action pairs. Hence, we can work with stationary

deterministic policies (see [28] for ﬁnite state space, i.e., ﬁnite W, and [29] for a general Borel state space, i.e., when W is a Borel set). Under our current scenario, the optimal average cost per step, λ∗, exists (in fact, the limit exists) and is same for all states w ∈ WB. For simplicity, we work with ﬁnite W, but the policy structure holds for Borel state space also.
We next present a deployment algorithm called “OptExploreLim,” an optimal algorithm for limited exploration.
Algorithm 3: (OptExploreLim Algorithm:) In the state w which is captured by the measurements {Qout(u, γ, wu)} for A + 1 ≤ u ≤ A + B, γ ∈ S, place the new relay according to the stationary policy µ∗ as follows:

µ∗(w) = argmin γ + ξoutQout(u, γ, wu) + ξrelay − λ∗u

(7)

u,γ

where λ∗ (or λ∗(ξout, ξrelay)) is the optimal average cost per step for the Lagrange multipliers (ξout, ξrelay).
Theorem 3: The policy µ∗ given by Algorithm 3 is optimal for the problem (3) under the explore-forward approach.
Proof: The optimality equation for the SMDP is given by (see [28], Equation 7.2.2):

v∗(w) = min γ + ξoutQout(u, γ, wu) + ξrelay
u,γ

−λ∗u +

g(w )v∗(w )

(8)

w ∈WB

v∗(w) is the optimal differential cost corresponding to state w. The structure of the optimal policy is obvious from (8), since w ∈WB g(w )v∗(w ) does not depend on (u, γ).
Later we will also use the notation π∗ or π∗(ξout, ξrelay) to denote the OptExploreLim policy under the pair (ξout, ξrelay), since here π∗ = {µ∗, µ∗, µ∗, · · · }.
Remark 1: The same optimal policy structure will hold for a Borel state space, by the theory presented in [29].
Remark 2: The optimal decision depends on state w only via the outage probabilities which can be easily measured.
Remark 3: For an action (u, γ), a cost (γ + ξoutQout(u, γ, wu) + ξrelay) will be incurred. On the other hand, λ∗u is the reference cost over u steps. The policy minimizes the difference between these two for each link.
Remark 4: The policy requires the deployment agent to know λ∗, and computation of λ∗ will require perfect knowledge of propagation environment (e.g., the path-loss exponent η in (1), the distribution of shadowing, etc.); see Section IV-C.
Theorem 4: λ∗(ξout, ξrelay) is jointly concave, increasing and continuous in ξout and ξrelay.
Proof: See Appendix B.
Let us consider a sub-class of stationary deployment policies (parameterized by λ ≥ 0, ξout ≥ 0 and ξrelay ≥ 0) given by:

µ(w) = argmin γ + ξoutQout(u, γ, wu) + ξrelay − λu

(9)

u,γ

where λ is not necessarily equal to λ∗(ξout, ξrelay).

Under the class of policies given by (9), let (Uk, Γk, Q(oku,tk−1)), k ≥ 1, denote the sequence of inter-
node distances, transmit powers and link outage probabilities

8

that the optimal policy yields during the deployment process.

By the assumption of i.i.d. shadowing across links, it follows that (Uk, Γk, Qo(ku,tk−1)), k ≥ 1, is an i.i.d. sequence.

Let Γ(λ, ξout, ξrelay), Qout(λ, ξout, ξrelay) and U (λ, ξout, ξrelay) denote the mean power per link, mean
outage per link and mean placement distance (in steps)

respectively, under the policy given by (9), where λ is not

necessarily

equal

to

λ∗(ξout,

ξrelay

).

Also,

let

∗
Γ (ξout,

ξrelay

),

∗

∗

Qout(ξout, ξrelay) and U (ξout, ξrelay) denote the optimal

mean power per link, the optimal mean outage per link and the

optimal mean placement distance (in steps) respectively, under the OptExploreLim algorithm (i.e., policy π∗(ξout, ξrelay) when λ in (9) is replaced by λ∗(ξout, ξrelay)). By the
Renewal-Reward theorem, the optimal mean power per

step, the optimal mean outage per step, and the optimal

mean number of relays per step are given by

Γ∗ (ξout ,ξrelay
∗

)

,

U (ξout,ξrelay )

Q∗out(ξout,ξrelay )
∗

and

∗

1

.

U (ξout,ξrelay )

U (ξout,ξrelay )

Theorem 5: For a given ξout, the mean number of relays

per step under the OptExploreLim algorithm (Algorithm 3),

U∗(ξout1,ξrelay) , decreases with ξrelay. Similarly, for a given

ξrelay ,

the

mean

outage

probability

per

step,

Q∗out
∗

(ξout

,ξr

elay

)

,

U (ξout,ξrelay )

decreases with ξout under the optimal policy.

Proof: See Appendix B.

Remark: The proof of Theorem 5 is quite general; the results

hold for the pure as-you-go approach also.

Theorem 6: For Problem (3), under the optimal policy (with explore-forward approach) characterized by λ∗ (i.e.,

under the OptExploreLim algorithm), we have EW minu,γ(γ+ ξoutQout(u, γ, Wu) + ξrelay − λ∗u) = 0.

Proof: See Appendix B.

C. Policy Computation
We adapt a policy iteration (from [28]) based algorithm to calculate λ∗. The algorithm generates a sequence of stationary

policies {µk}k≥1 (note that the notation µk was used for a
different purpose in Section IV-A; here each µk is a stationary,
deterministic, Markov policy), such that for any k ≥ 1, µk(·) : WB → {A+1, · · · , A+B}×S maps a state into some action. Deﬁne the sequence {µ(k1), µ(k2)}k≥1 of functions as follows: if µk(w) = (u, γ), then µ(k1)(w) = u and µ(k2)(w) = γ.
Algorithm 4: The policy iteration algorithm is as follows:

Step 0 (Initialization): Start with an initial policy µ0.

Step 1 (Policy Evaluation): Calculate the average cost λk corresponding to the policy µk, for k ≥ 0. λk is equal to the following quantity (by the Renewal Reward Theorem):

ξrelay +

w g(w)

µ(k2)(w) + ξoutQout(µ(k1)(w), µ(k2)(w), wµ(1)(w)) k w g(w)µ(k1)(w)

Step 2 (Policy Improvement): Find a new policy µk+1 by solving the following:

µk+1(w) = argmin γ + Qout(u, γ, wu) + ξrelay − λku

(10)

(u,γ)

If µk and µk+1 are same (i.e., if λ(k−1) = λk), then stop and declare µ∗ = µk, λ∗ = λk. Otherwise, go to Step 1.

Remark: By the theory in [28], this policy iteration will converge (to λ∗) in a ﬁnite number of iterations, for ﬁnite state and action spaces. For a general Borel state space (e.g., for log-normal shadowing), only asymptotic convergence to λ∗ can be guaranteed.
Computational Complexity: The ﬁnite state space has cardinality |W|B. Then, O(|W|B) addition operations are required to compute λk from the policy evaluation step. However, careful manipulation leads to a drastic reduction in this computational requirement, as shown by the following theorem.
Theorem 7: In the policy evaluation step in Algorithm 4, we can reduce the number of computations in each iteration from |W|B to O(B2M 2|W|2).
Proof: See Appendix B.

D. HeuExploreLim: An Intuitive but Suboptimal Heuristic A natural heuristic for (3) under the explore-forward ap-
proach is the following HeuExploreLim Algorithm (Heuristic Algorithm for Limited Explore-Forward):
Algorithm 5: (HeuExploreLim Algorithm) Under the explore-forward setting as discussed in Section IV, at state w, make the decision according to the following rule:

(u∗, γ∗) = argmin γ + ξoutQout(u, γ, wu) + ξrelay

u,γ

u

Under any stationary deterministic policy µ, let us denote
the cost of a link by Cµ (a random variable) and the length
of a link by Uµ (under any stationary deterministic policy µ,
the deployment process regenerates at the placement points). Lemma 2: HeuExploreLim solves infµ Eµ( CUµµ ). Proof: See Appendix B.
Remark: This heuristic is not optimal. Our optimal policy given in Theorem (3) solves infµ EEµµ((CUµµ)) . However, HeuExploreLim solves infµ Eµ( CUµµ ), which is, in general, different from infµ EEµµ((CUµµ)) . Note that Eµ( CUµµ ) = EEµµ((CUµµ)) if and only if the variance of Uµ is zero. But this does not happen due to
the variability in shadowing over space.

V. COMPARISON BETWEEN EXPLORE-FORWARD AND PURE AS-YOU-GO APPROACHES
Let us denote the optimal average cost per step (for a given ξout and ξrelay) under the explore-forward and pure as-you-go approaches by λ∗ef and λ∗ayg.
Theorem 8: λ∗ef ≤ λ∗ayg. Proof: See Appendix C.
Next, we numerically compare various deployment algorithms, in order to select the best algorithm for deployment.
A. Parameter Values Used in the Numerical Comparisons We consider deployment for a given ξout and a given ξrelay,
for the objective in (3). We provide numerical results for deployment with iWiSe motes ([30]) (based on the Texas Instrument (TI) CC2520 which implements the IEEE 802.15.4 PHY in the 2.4 GHz ISM band, yielding a bit rate of 250 Kbps, with a CSMA/CA medium access control (MAC)) equipped with 9 dBi antennas. The set of transmit power levels S is taken to be {−18, −7, −4, 0, 5} dBm, which is a subset of the transmit power levels available in the chosen device.

9

For the channel model as in (1), our measurements in a

forest-like environment inside the Indian Institute of Science Campus gave path-loss exponent η = 4.7 and c = 100.17

(i.e., 1.7 dB); see [12]. Shadowing W was found to be log-

normal;

W

=

10

Y 10

with

Y

∼ N (0, σ2),

where

σ

= 7.7

dB.

Shadowing decorrelation distance was found to be 6 meters.

Fading is assumed to be Rayleigh; H ∼ Exponential(1).

We deﬁne outage to be the event when the received signal power of a packet falls below Prcv−min = 10−9.7 mW (i.e., −97 dBm); for a commercial implementation of the

PHY/MAC of IEEE 802.15.4, −97 dBm received power

corresponds to a 2% packet loss probability for 127 byte

packets for iWiSe motes, as per our measurements.

We consider deployment along a line with step size δ =

20 meters, A = 0, B = 5. Given A = 0, we chose B is

the following way. Deﬁne a link to be good if its outage

probability is less than 3%, and choose B to be the largest

integer such that the probability of ﬁnding a good link of

length Bδ is more than 20%, when the highest transmit power

is used (this will ensure that the agent does not measure

very long links having poor outage probabilities). For the parameters η = 4.7, c = 100.17, σ = 7.7 dB, and 5 dBm

transmit power, B turned out to be 5. If B is increased further,

the probability of getting a good link will be very small.

B. Numerical Comparison Among Deployment Policies Assuming these parameter values, we computed (by MAT-
LAB) the mean power per step (in mW), mean outage per step, mean placement distance (in steps), mean cost per step and mean number of measurements made per step, for the four deployment algorithms presented so far. The results are shown in Table I. In order to make a fair comparison, we used the mean power per node for OptAsYouGo as the ﬁxed node transmit power for HeuAsYouGo, and the mean outage per link of OptAsYouGo as the target outage for HeuAsYouGo. The mean number of measurements per step is deﬁned as the ratio of the mean number of links evaluated for deployment of one node and the mean placement distance (in steps). The numerator of this ratio is B = 5 for explore-forward algorithms (since A = 0). OptAsYouGo makes one measurement per step, but HeuAsYouGo makes more than one measurements per step since the agent often evaluates a bad link, takes one step back and places the relay. 5
We notice that the average per-step cost (COST in Table I) of OptExploreLim (OEL) is the least. OEL uses the least mean power per step (POW column), places nodes the widest apart (DIST column), and the mean outage per step (OUT column) is second to lowest. On the other hand, OEL requires about twice as many measurements per step as compared to OptAsYouGo.6 Hence, we can conclude that the algorithms based on the explore-forward approach signiﬁcantly outperform the algorithms based on the pure-as-you-go approach, at the cost of slightly more measurements per step. Hence, for applications

5For planned deployment, we will have to evaluate all possible potential links; from each potential location, we need to measure link quality to B = 5 preceding potential locations, which is not feasible.
6A more detailed comparison among the algorithms can be found in Appendix C, along with elaborate discussion.

Algorithm OEL HEL OAYG HAYG

POW (mW) 0.1955 0.2432 0.2904 0.3318

OUT 0.001969 0.002507 0.003607 0.001752

DIST (steps) 2.2859 2.673 1.5 1.313

COST 0.8312 0.8684 1.265 1.267

MEAS 2.1873 1.8706
1 1.6969

TABLE I NUMERICAL COMPARISON AMONG VARIOUS ALGORITHMS FOR ξout = 100 AND ξrelay = 1. ABBREVIATIONS: OEL-OPTEXPLORELIM, HEL-HEUEXPLORELIM, OAYG-OPTASYOUGO, HAYG-HEUASYOUGO. POW-MEAN POWER (IN MW UNIT) PER STEP, OUT- MEAN OUTAGE PER STEP, DIST-MEAN PLACEMENT DISTANCE, COST-MEAN COST PER STEP,
MEAS-MEAN NUMBER OF MEASUREMENTS PER STEP.

that do not require very rapid deployment, such as deployment along a long forest trail for wildlife monitoring, exploreforward is a better approach to take. Thus, for the learning algorithms presented later, we will consider only the exploreforward approach. However, under the requirement of fast deployment (e.g., emergency deployment by ﬁrst responders), pure as-you-go or deployment without measurements (as in [10]) might be more suitable.
VI. OPTEXPLORELIMLEARNING: LEARNING WITH EXPLORE-FORWARD, FOR GIVEN ξout AND ξrelay
Based on the discussion in Section V, we proceed, in the rest of this paper, with developing learning algorithms based on the policy OptExploreLim (to solve problem (3)). We observe that the optimal policy (given by Algorithm 3) can be completely speciﬁed by the optimal average cost per step λ∗, for given values of ξout and ξrelay. But the computation of λ∗ requires policy iteration. Policy iteration requires the channel model parameters η and σ, and it is computationally intensive. In practice, these parameters of the channel model might not be available. Under this situation, the agent measures {Qout(u, γ, wu) : A + 1 ≤ u ≤ A + B, γ ∈ S} before deploying each relay, but he has to learn the optimal average cost per step in the process of deployment, and, use the corresponding updated policy each time he places a new relay. In order to address this requirement, we propose an algorithm which will maintain a running estimate of λ∗, and update it each time a relay is placed. The algorithm is motivated by the theory of Stochastic Approximation (see [31]), and it uses, as input, the measurements made for each placement, in order to improve the estimate of λ∗. We prove that, as the number of deployed relays goes to inﬁnity, the running estimate of average network cost per step converges to λ∗ almost surely.
After the deployment is over, let us denote the length, transmit power and outage values of the link between node k and node (k − 1) by uk, γk and Q(oku,tk−1). After placing the (k − 1)-st node, we will place node k, and consequently uk, γk and Q(oku,tk−1) will be decided by the following algorithm.
Algorithm 6: (OptExploreLimLearning) Let λ(k) be the estimate of the optimal average cost per step after placing the k-th relay (sink is node 0), and let λ(0) be the initial estimate. In the process of placing relay (k + 1), if the measured outage probabilities are {Qout(u, γ, wu) : A + 1 ≤ u ≤ A + B, γ ∈ S}, then place relay (k + 1) using the following policy:

(uk+1, γk+1) = argmin γ + ξoutQout(u, γ, wu) + ξrelay − λ(k)u
u,γ
After placing relay (k + 1), update λ(k) as follows (using the

10

measurements made in the process of placing relay (k + 1)):

λ(k+1) = λ(k) + ak+1 min γ + ξoutQout(u, γ, wu) + ξrelay − λ(k)u
u,γ
= λ(k) + ak+1 γk+1 + ξoutQo(ku+t 1,k) + ξrelay − λ(k)uk+1 (11)

{ak}k≥1 is a decreasing sequence such that ak > 0 ∀ k ≥ 1, k ak = ∞ and k a2k < ∞. One example is ak = k1 . Theorem 9: If we employ Algorithm 6 in the deployment
process, we will have λ(k) → λ∗ almost surely.
Proof: By Theorem 6, under OptExploreLim, we have EW minu,γ (γ + ξoutQout(u, γ, Wu) + ξrelay − λ∗u) = 0; this leads to the stochastic approximation update in Algorithm 6.
The detailed proof can be found in Appendix D.
While Algorithm 6 utilizes the general stochastic approximation update, Algorithm 7 ensures that the iterate λ(k) is the actual average network cost per step up to the k-th relay.
Algorithm 7: Start with any λ(0) > 0. Let, for k ≥ 1, λ(k)
be the average cost per step for the portion of the network already deployed between the sink and the k-th relay, i.e.,

λ(k) =

ki=1(γi + ξoutQ(oiu,it−1) + ξrelay)

k i=1

ui

Place the (k + 1)-st relay according to the following policy:

A. OptExploreLim: Effect of Multipliers ξout and ξrelay Consider the constrained problem in (4) and its relaxed
version in (3). We will seek a policy for the problem in
(4) in the class of OptExploreLim policies (see (7)). Clearly, there exists at least one tuple (q, N ) for which there exists a pair ξo∗ut > 0, ξr∗elay > 0 such that, under the optimal policy π∗(ξo∗ut, ξr∗elay), both constraints are met with equality. In order to see this, choose any ξout > 0, ξrelay > 0 and consider the corresponding optimal policy π∗(ξout, ξrelay) (provided by OptExploreLim). Suppose that the mean outage
per step and mean number of relays per step, under the policy π∗(ξout, ξrelay), are q0 and n0, respectively. Now, if we set the constraints q = q0 and N = n0 in (4), we obtain one instance of such a tuple (q, N ).
On the other hand, there exist (q, N ) pairs which are not feasible. One example is the case N = A+1B (i.e., inter-node distance is always (A+B)), along with q < EW Qout(AA++BB,PM ,W ) , where PM is the maximum available transmit power level at each node. In this case, the outage constraint cannot be
satisﬁed while meeting the constraint on the mean number of
relays per step, since even use of the highest transmit power PM at each node will not satisfy the per-step outage constraint.
Deﬁnition 1: Let us denote the optimal mean power per step for problem (4) by γ∗, for a given (q, N ). The set K(q, N )
is deﬁned as follows:

(uk+1, γk+1) = argmin γ + ξoutQout(u, γ, wu) + ξrelay − λ(k)u
u,γ
Corollary 1: Under Algorithm 7 in the deployment process, we will have λ(k) → λ∗ almost surely.
Proof: See Appendix D.
VII. OPTEXPLORELIMADAPTIVELEARNING WITH CONSTRAINTS ON OUTAGE PROBABILITY AND RELAY
PLACEMENT RATE In Section VI, we provided a stochastic approximation algorithm for relay deployment, with given multipliers ξout and ξrelay, without knowledge of the propagation parameters. Let us recall that Theorem 1 tells us how to choose the Lagrange multipliers ξout and ξrelay (if they exist) in (3) in order to solve the problem given in (4). However, we need to know the radio propagation parameters (e.g., η and σ) in order to compute an optimal pair (ξo∗ut, ξr∗elay) (if it exists) so that both constraints in (4) are met with equality. In real deployment scenarios, these propagation parameters might not be known. Hence, in this section, we provide a sequential placement and learning algorithm such that, as the relays are placed, the placement policy iteratively converges to the set of optimal policies for the constrained problem displayed in (4). The policy is of the OptExploreLim type, and the cost of the deployed network converges to the optimal cost. We modify the OptExploreLimLearning algorithm so that a running estimate (λ(k), ξo(ku)t, ξr(kel)ay) gets updated each time a new relay is placed. The objective is to make sure that the running estimate (λ(k), ξo(ku)t, ξr(kel)ay) eventually converges to the set of optimal (λ∗(ξout, ξrelay), ξout, ξrelay) tuples as the deployment progresses. Our approach is via two time-scale stochastic approximation (see [31, Chapter 6]).

K(q, N ) := (λ∗(ξout, ξrelay ), ξout, ξrelay ) :

Γ∗(ξout, ξrelay )

∗ Q∗out(ξout, ξrelay )

∗

=γ , ∗

≤q

U (ξout, ξrelay )

U (ξout, ξrelay )

1

∗

≤ N , ξout ≥ 0, ξrelay ≥ 0

U (ξout, ξrelay )

where the optimal average cost per step of the unconstrained problem (3) under OptExploreLim is λ∗(ξout, ξrelay).
K(q, N ) can possibly be empty (in case (q, N ) is not a feasible pair). Hence, we make the following assumption which ensures the non-emptiness of K(q, N ).
Assumption 1: The constraint parameters q and N in (4) are such that there exists at least one pair ξo∗ut ≥ 0, ξr∗elay ≥ 0 for which (λ∗(ξo∗ut, ξr∗elay), ξo∗ut, ξr∗elay) ∈ K(q, N ).
Remark: Assumption 1 implies that the constraints are consistent (in terms of achievability). If ξo∗ut > 0, ξr∗elay > 0, it would imply that both of the constraints are active. If ξo∗ut = 0, it would imply that we can keep the mean outage per step strictly less than q by using the minimum available power at each node, while meeting the constraint on the relay placement rate. The optimal policy in Algorithm 3, under ξout = 0, will place relays with inter-relay distance (A + B) steps, and use the minimum available power level at each node. ξo∗ut = ∞ implies that the outage constraint cannot be met even with the highest power level at each node, under the relay placement rate constraint. Similar arguments apply to ξr∗elay.
We now establish some structural properties of K(q, N ).
Theorem 10: If K(q, N ) is non-empty, then:
• Suppose that there exists ξo∗ut > 0, ξr∗elay > 0 such that the policy π∗(ξo∗ut, ξr∗elay) satisﬁes both

11

constraints in (4) with equality. Then, there does

not exist ξout ≥ 0, ξrelay ≥ 0 satisfying (i)

(λ∗(ξout, ξrelay), ξout, ξrelay) ∈ K(q, N ), and (ii)

< q or Q∗out(ξout,ξrelay )

U ∗(ξ ,ξ

)

1 U ∗(ξ ,ξ

) < N.

out relay

out relay

• If there exists a ξrelay ≥ 0 such that (λ∗(0, ξrelay), 0, ξrelay) ∈ K(q, N ), then, ∀ξrelay ≥ 0, we have (λ∗(0, ξrelay), 0, ξrelay) ∈ K(q, N ).

that ak, bk > 0, ∀k ≥ 1, k ak = ∞, k a2k < ∞, k bk = ∞, k b2k < ∞ and limk→∞ abkk = 0. In particular, we can use ak = C1k−n1 and bk = C2k−n2 where C1 > 0, C2 > 0,

1 2

<

n1

<

n2

≤

1.

Note that, for (ξout, ξrelay) ∈ [0, A2] × [0, A3], we have

0 < λ∗(ξout, ξrelay) ≤ (PM + A2 + A3). Let us deﬁne the set Kˆ(q, N ) := K(q, N )∩([0, (PM +A2 +A3)]×[0, A2]×[0, A3])

which is a subset of K(q, N ).

Proof: See Appendix E, Section A. Assumption 2: The shadowing random variable W has a continuous probability density function (p.d.f.) over (0, ∞);

Theorem 12: Under Assumption 1, Assumption 2 and un-
der proper choice of A2 and A3, the iterates (λ(k), ξo(ku)t, ξr(kel)ay) in Algorithm 8 converge almost surely to Kˆ(q, N ) as k → ∞.

for any w ∈ (0, ∞), P(W = w) = 0. One example could be

Proof: See Appendix E, Section C.

log-normal shadowing.

Remark: Algorithm 8 induces a nonstationary policy. But

Theorem 11: Suppose that Assumption 2 holds. Under Theorem 12 establishes that the sequence of policies generated

the OptExploreLim algorithm, the optimal mean power per

step

Γ∗ (ξout ,ξrelay
∗

)

,

the

optimal

mean

number

of

relays

per

U (ξout,ξrelay )

step ∗ 1

and the optimal mean outage per step

U (ξout,ξrelay )

Q∗out
∗

(ξout

,ξr

elay

)

,

are

continuous

in

ξout

and

ξrelay .

U (ξout,ξrelay )

Proof: See Appendix E, Section B.

Remark: Note that, by Theorem 11, we need not do any

randomization (see [32] for reference) among deterministic

policies in order to meet the constraints with equality.

by Algorithm 8 converges to the set of optimal stationary, deterministic policies (for problem (4)).
Discussion of Theorem 12:
(i) Two timescales: The update scheme (13) can be rewritten as a two-timescale stochastic approximation (see [31], Chapter 6). Note that, limk→∞ abkk = 0, i.e., ξout and ξrelay are adapted in a slower timescale compared to λ (which is adapted in the faster timescale). The dynamics behaves as if ξout and ξrelay are updated simultaneously

B. OptExploreLimAdaptiveLearning Algorithm

in a slow outer loop, and, between two successive updates of ξout and ξrelay, we update λ in an inner loop for a long

Algorithm 8: This algorithm iteratively updates λ(k), ξo(ku)t, ξr(kel)ay after each relay is placed. Let (λ(k), ξo(ku)t, ξr(kel)ay) be the iterates after placing the k-th relay (the sink is called node 0), and let (λ(0), ξo(0u)t, ξr(0e)lay) (ii) be the initial estimates. In the process of deploying the k-th
relay, if the shadowing (which is measured indirectly only
via Qout(u, γ, wu) for A + 1 ≤ u ≤ A + B and γ ∈ S) is w = {wA+1, · · · , wA+B}, then place the k-th relay according
to the following policy:

(uk, γk) = argmin γ + ξo(ku−t 1)Qout(u, γ, wu) + ξr(kel−a1y) − λ(k−1)u (12)
u,γ

After placing the k-th relay, let us denote the transmit power,

distance (in steps) and outage probability from relay k to relay

(k − 1) by γk, uk and Qout(uk, γk, wuk ). After placing the k-

th relay, make the following updates (using the measurements

made in the process of placing the k-th relay):

(iii)

time. Thus, the λ update equation views ξout and ξrelay

as quasi-static, while the ξout and ξrelay update equations

view the λ update equation as almost equilibrated.

Structure of the iteration: Note that, (Qout(uk, γk, wuk )−

quk) is the excess outage compared to the allowed

outage quk for the k-th link. If this quantity is pos-

itive (resp., negative), the algorithm increases (resp.,

decreases) ξout in order to reduce (resp., increase) the

outage probability in subsequent steps. Similarly, if

uk < N1 , the algorithm increases ξrelay in order to

reduce the relay placement rate. The goal is to en-

sure

limk

→∞

∗
(Qout

(ξo(ku)t

,

ξr(kel)ay

)

−

qU ∗(ξo(ku)t, ξr(kel)ay))

=

0 and limk→∞(1 − N U ∗(ξo(ku)t, ξr(kel)ay)) = 0. In

the faster timescale, our aim is to ensure that

limk→∞

EW

minu,γ (γ

+

ξ

(k) out

Qout

(u,

γ

,

Wu

)

+

ξr(kel)ay

−

λ(k)u) = 0.

Outline of the proof: The proof proceeds in ﬁve steps.

We ﬁrst prove the almost sure boundedness of {λ(k)}k≥1.

λ(k) = λ(k−1) + ak min γ + ξo(ku−t 1)Qout(u, γ, wu)
u,γ
+ξr(kel−a1y) − λ(k−1)u

Next, we prove that the difference between the sequences λ(k) and λ∗(ξo(ku)t, ξr(kel)ay) converges to 0 almost surely;
this will prove the desired convergence in the faster

ξo(ku)t = Λ[0,A2] ξo(ku−t 1) + bk(Qout(uk, γk, wuk ) − quk)

timescale. This result has been proved using the theory in [31, Chapter 6] and Theorem 9.

ξr(kel)ay = Λ[0,A3] ξr(kel−a1y) + bk(1 − N uk)

In order to ensure boundedness of the slower timescale

(13)

iterates, we have used the projection operation in the

where Λ[0,A2](x) denotes the projection of x on the interval [0, A2]. A2 and A3 need to be chosen carefully; the reason is explained in the discussion later in this section (along with a
brief discussion on how A2 and A3 have to be chosen).

slower timescale. We pose the slower timescale iteration in the same form as a projected stochastic approximation iteration (see [33, Equation 5.3.1]). In order to prove the desired convergence of the projected stochastic approximation, we show that our iteration

{ak}k≥1 and {bk}k≥1 are two decreasing sequences such

satisﬁes certain conditions given in [33] (see [33, The-

12

orem 5.3.1]).

Next, we argue (using Theorem 5.3.1 of [33]) that the

slower timescale iterates converge to the set of stationary

points of a suitable ordinary differential equation (o.d.e.).

But, in general, a stationary point on the boundary of

the closed set [0, A2] × [0, A3] in the (ξout, ξrelay) plane

may not correspond to a point in K(q, N ). Hence, we will

need to ensure that if (ξout, ξrelay) is a stationary point of the o.d.e., then (λ∗(ξout, ξrelay), ξout, ξrelay) ∈ K(q, N ).
In order to ensure this, we need to choose A2 and A3

properly. The choice of A2 and A3 is rather technical,

and is explained in detail in Appendix E, Section C5. Here

we will just provide the method of choosing A2 and A3,

without any explanation of why they should be chosen in

this way. The number A2 has to be chosen so large that

under ξout = A2 and for all A + 1 ≤ u ≤ A + B,

we will have P(argminγ∈S (γ + A2Qout(u, γ, W )) =

PM ) > 1 − κ for some small enough κ > 0. We must

also have

Q∗out (A2 ,0)
∗

≤

q. The number A3

has to be

U (A2,0)

chosen so large that for any ξout ∈ [0, A2], we will have

∗
U (ξout, A3) >

1

(provided that

1

< A + B). The

N

N

numbers A2 and A3 have to be chosen so large that there

exists at least one (ξout, ξrelay) ∈ [0, A2] × [0, A3] such that (λ∗(ξout, ξrelay), ξout, ξrelay) ∈ K(q, N ).

(iv) Asymptotic behaviour of the iterates: If the pair (q, N )

is such that one can be met with strict inequality and

the other can be met with equality while using the

optimal mean power per step for this pair (q, N ), then

one Lagrange multiplier will converge to 0. This will

happen if q

>

EW

Qout (A+B ,P1 ,W A+B

)

;

we

will

have

ξo(ku)t

→

0

(obvious from OptExploreLim with ξout = 0) in this case.

Here we will place all the relays at the (A + B)-th step

and use the smallest power level at each node. On the

other hand, if the constraints are not feasible, then either ξo(ku)t → A2 or ξr(kel)ay → A3 (since convergence to ∞ is not possible due to projection) or both will happen.

K(q, N ) may have multiple tuples. But simulation results

show that it has only one tuple in case it is nonempty.

C. Asymptotic Performance of Algorithm 8 Let us denote by πoelal the (nonstationary) deployment
policy induced by Algorithm 8. We will now show that πoelal is an optimal policy for the constrained problem (4).
Theorem 13: Suppose that Assumption 1 and Assumption 2 hold. Then, under proper choice of A2 and A3, the policy πoelal solves the problem (4); i.e., we have:

lim sup Eπoelal

x→∞

x

lim sup Eπoelal
x→∞

Ni=x1 Γi = γ∗

Nx i=1

Q(oiu,it−1)

x

≤ q,

lim sup Eπoelal Nx

x→∞

x

≤N

Proof: See Appendix E, Section D.
VIII. CONVERGENCE SPEED OF LEARNING ALGORITHMS: A SIMULATION STUDY
In this section, we provide a simulation study to demonstrate the convergence rate of Algorithm 7 and Algorithm 8. The

1.05 1
0.95

OptExploreLimLearning, λ(0)=0.4577 OptExploreLimLearning, λ(0)=1.7667 Optimal Cost 0.8312

E(λ(k))

0.9

0.85

0.8 0

5

10

15

20

25

30

35

40

k

Fig. 4. Demonstration of the convergence of OptExploreLimLearning (Algorithm 7) as deployment progresses. λ(0) has not been included here.

simulations are provided for η = 4.7, σ = 7.7 dB, δ = 20 m, A = 0, B = 5, c = 100.17, Prcv−min = −97 dBm, S = {−18, −7, −4, 0, 5} dBm (see Section II for notation
and Section V-A for parameter values).

A. OptExploreLimLearning for Given ξout and ξrelay Let us choose ξout = 100, ξrelay = 1. We assume that
the propagation environment in which we are deploying is characterized by the parameters as in Section V-A (e.g., η = 4.7, σ = 7.7 dB). The optimal average cost per step, under these parameter values, is 0.8312 (computed numerically).
On the other hand, for η = 4, σ = 7 dB, ξout = 100 and ξrelay = 1, the optimal average cost per step is 0.4577, and it is 1.7667 for η = 5.5, σ = 9 dB. These two cases correspond to two different imperfect estimates of η and σ available to
the agent before deployment starts.
Suppose that the actual η = 4.7, σ = 7.7 dB, but at the time of deployment we have an initial estimate that η = 4, σ = 7 dB; thus, we start with λ(0) = 0.4577. After placing the k-th relay, the actual average cost per step of the relay network connecting the k-th relay to the sink is λ(k); this
quantity is a random variable whose realization depends on the
shadowing realizations over the links measured in the process of deployment up to the k-th relay. We ran 10000 simulations
of Algorithm 7, starting with different seeds for the shadowing random process, and estimating E(λ(k)) as the average of the samples of λ(k) over these 10000 simulations. We also do the same for λ(0) = 1.7667 (optimal cost for η = 5.5, σ = 9 dB).
The estimates of E(λ(k)), k ≥ 1 as a function of k, for the two initial values of λ(0), are shown in Figure 4. Also shown, in Figure 4, is the optimal value λ∗ = 0.8312 for the true propagation parameters (i.e., η = 4.7, σ = 7.7 dB). From Figure 4, we observe that E(λ(k)) approaches the optimal cost 0.8312 for the actual propagation parameters, as the number of deployed relays increases, and gets to within 10% of the optimal cost by the time that 4 or 5 relays are placed, starting
with two widely different initial guesses of the propagation
parameters. Thus, OptExploreLimLearning could be useful even when the distance can be covered by only 4 to 5 relays.
Note that, each simulation yields one sample path of the deployment process. We obtained the estimates of E(λ(k)) as a function of k (by averaging over 10000 sample paths); the
convergence speed will vary across sample paths even though λ(k) → 0.8312 almost surely as k → ∞.

B. OptExploreLimAdaptiveLearning
In this section, we will discuss how OptExploreLimAdaptiveLearning (Algorithm 8) performs for deployment over a ﬁnite distance under an unknown propagation environment. We assume that the true propagation parameters are given

13

E(λ(k))

1.4

X: 1 Y: 1.415

1.2

1

0.8 OELAL Case 1
0.6 OELAL Case 2

0.4

0.8312, OEL Actual

0.2 0

10

20

30

40

50

k

E(ξ(k) )
out

140 120 100
80 0

X: 1471 Y: 113.6

OELAL Case 1 OELAL Case 2 100

0.5

1

k

1.5

2 x 104

E(ξ(k) )
relay

1.6 1.4 1.2
1 0.8
0

OELAL Case 1 OELAL Case 2 1

0.5

1

1.5

2

k

x 104

Estimate of mean outage (in %) per step after placing the k−th node

Estimate of mean placement distance (in steps)
after placing the k−th node

Estimate of mean power per step after placing
the k−th node

0.3 0.28 0.26 0.24 0.22
0.2 0.18

OELAL Case 1 OELAL Case 2 FPWU Case 1 FPWU Case 2 0.1955, OEL

3.5

OELAL Case 1

3

OELAL Case 2

FPWU Case 1

FPWU Case 2

2.5 2.2859, OEL

2

0.4 0.35
0.3 0.25
0.2

OELAL Case 1 OELAL Case 2 FPWU Case 1 FPWU Case 2 0.1969%, OEL

0.16

1.5

0

10

20

30

40

50

0

10

20

30

40

50

0

10

20

30

40

50

Fig. 5. Demonstration of thke convergence of OptExploreLimAdaptiveLearning aks deployment progresses. In the legends, “OEL” referks to the values that are

obtained if OptExploreLim is used; these are the target values for OptExploreLimAdaptiveLearning. Note that, we have used line styles for ξout and ξrelay

updates, that are different from the line styles of other four plots. Also note that, outage probabilities are shown in percentage and not in decimal.

in Section V-A (e.g., η = 4.7, σ = 7.7 dB). If we know
the true propagation environment, then, under the choice ξrelay = 1 and ξout = 100, the optimal average cost per step will be 0.8312, and this can be achieved by OptExploreLim
(Algorithm 3). The corresponding mean outage per step will be 02..02084559 = 0.001969 (i.e., 0.1969%) and the mean number of relays per step will be 2.21859 .
Now, suppose that we wish to solve the constrained problem in (4) with the targets q = 0.001969 (i.e., 0.1969%) and N = 2.21859 , but we do not know the true propagation environment. Hence, the deployment will use OptExploreLimAdaptiveLearning with some choice of ξo(0u)t, ξr(0e)lay and λ(0).
We seek to compare among the following three scenarios: (i) η and σ are completely known (we use OptExploreLim with ξrelay = 1 and ξout = 100 in this case), (ii) imperfect estimates of η and σ are available prior to deployment, and
OptExploreLimAdaptiveLearning is used to learn the optimal policy, and (iii) imperfect estimates of η and σ are available
prior to deployment, but a corresponding suboptimal policy is
used throughout the deployment without any update. For con-
venience in writing, we introduce the abbreviations OELAL
and OEL for OptExploreLimAdaptiveLearning and OptEx-
ploreLim, respectively. We also use the abbreviation FPWU for
“Fixed Policy without Update.” Now, we formally introduce
the following cases that we consider in our simulations:
(i) OEL: Here we know η = 4.7, σ = 7.7 dB, and use OptExploreLim (Algorithm 3) with ξout = 100, ξrelay = 1, λ∗ = 0.8312. OEL will meet both the constraints with
equality, and will minimize the mean power per step. (ii) OELAL Case 1: OELAL Case 1 is the case where the
true η and σ (which are unknown to the deployment
agent) are speciﬁed by Section V-A, but we use OptExploreLimAdaptiveLearning with ξo(0u)t = 75, ξr(0e)lay = 1.25 and λ(0) = 0.5007, in order to meet the constraints speciﬁed earlier in this subsection. Note that, under ξout = 75 and ξrelay = 1.25, the optimal mean cost per step is 0.5007 for η = 4, σ = 7 dB. Hence, we start with a wrong choice of Lagrange multipliers, a wrong estimate of η and σ, and an estimate of the optimal average cost per step
which corresponds to these wrong choices. The goal is to see how fast the variables λ(k), ξo(ku)t and ξr(kel)ay converge to the desired target 0.8312, 100 and 1, respectively. We
also study how close to the desired target values are the

quantities such as mean power per step, mean outage per step and mean placement distance for the relay network between k-th relay and the sink node. (iii) OELAL Case 2: OELAL Case 2 is different from OELAL Case 1 only in the aspect that λ(0) = 1.7679 is used in OELAL Case 2. Note that, under ξout = 75 and ξrelay = 1.25, the optimal mean cost per step is 1.7679 for η = 5.5, σ = 9 dB. (iv) FPWU Case 1: In this case, the true η and σ are unknown to the deployment agent. The deployment agent uses ξout = 75, ξrelay = 1.25 and λ∗ = 0.5007 throughout the deployment process under the algorithm speciﬁed by (7). Clearly, he chooses a wrong set of Lagrange multipliers ξout = 75, ξrelay = 1.25, and he has a wrong estimate η = 4, σ = 7 dB. The optimal average cost per step λ∗ = 0.5007 is computed for these wrong choice of parameters, and the corresponding suboptimal policy is used throughout the deployment process without any update; this will be used to demonstrate the gain in performance by updating the policy under OptExploreLimAdaptiveLearning, w.r.t. the case where the suboptimal policy is used without any online update. (v) FPWU Case 2: It differs from FPWU Case 1 only in the aspect that we use λ∗ = 1.7679 in FPWU Case 2. Recall that, under ξout = 75 and ξrelay = 1.25, the optimal mean cost per step is 1.7679 for η = 5.5, σ = 9 dB.

For simulation of OELAL, we chose the step sizes as

follows.

We

chose

ak

=

1 k0.55

,

chose

bk

=

10000 k0.8

for

the

ξout

update

and

bk

=

1 k0.8

for

the

ξrelay

update

(note

that,

both

ξout

and ξrelay are updated in the same timescale). We simulated

10000 independent network deployments (i.e., 10000 sample

paths of the deployment process) with OptExploreLimAdap-

tiveLearning, and estimated (by averaging over 10000 deploy-

ments) the expectations of λ(k), ξo(ku)t, ξr(kel)ay, mean power per

step Eπoelal

k i=1

Γi

,

mean

outage

per

step

Eπoelal

ki=1 Q(oiu,it−1)

Eπoelal

k i=1

Ui

Eπoelal

k i=1

Ui

and mean placement distance Eπoelal

k i=1

Ui

,

from

the

sink

k

node to the k-th placed node. In each simulated network

deployment, we placed 20000 nodes, i.e., k was allowed to

go up to 20000. Asymptotically the estimates are supposed to

converge to the values provided by OEL.

Observations from the Simulations: The results of the

simulations are summarized in Figure 5. We observe that, the

14

estimates of the expectations of λ(20000), ξo(2u0t000), ξr(2e0la0y00), mean power per step up to the 20000th node, mean outage per step up to the 20000th node, and mean placement distance (in steps) over 20000 deployed nodes are 0.8551, 104.0606, 1.0385, 0.2005, 0.2% (i.e., 0.002) and 2.2939 for the OELAL Case 1, whereas those quantities are supposed to be equal to 0.8312, 100, 1, 0.1955, 0.1969% (i.e., 0.001969) and 2.2859, respectively. We found similar results for OELAL Case 2 also. Hence, the quantities converge very close to the desired values. We have shown convergence only up to k = 50 deployments in most cases, since the convergence rate of the algorithms in the initial phase are most important in practice.
All the quantities except expectation of ξo(ku)t and ξr(kel)ay (which are updated in a slower timescale) converge reasonably close to the desired values by the time the 50th relay is placed, which will cover a distance of roughly 2 − 3.5 km. distance.
FPWU Case 1 and FPWU Case 2 either violate some constraint or uses signiﬁcantly higher per-step power compared to OEL. But, by using the OptExploreLimAdaptiveLearning algorithm, we can achieve per-step power expenditure close to the optimal while (possibly) violating the constraints by small amount; even in case the performance of OELAL is not very close to the optimal performance, it will be signiﬁcantly better than the performance under FPWU cases (compare OELAL Case 2 and FPWU Case 2 in Figure 5).
The speed of convergence will depend on the choice of the step sizes ak and bk; optimizing the rate of convergence by choosing optimal step sizes is left for future endeavours in this direction. Also, note that, the choice of ξo(0u)t, ξr(0e)lay and λ(0) will have a signiﬁcant effect on the performance of the network over a ﬁnite length; the more accurate are the estimates of η and σ, and the better are the initial choice of ξo(0u)t, ξr(0e)lay and λ(0), the better will be the convergence speed of OptExploreLimAdaptiveLearning.
IX. PHYSICAL DEPLOYMENT EXPERIMENTS For completeness, we brieﬂy summarize experimental results that were reported in our conference paper [12]. We performed an actual deployment experiment along a long tree-lined road in our campus (not exactly a straight line, which is the reality in a forest) with iWiSe motes equipped with 9 dBi antennas. We chose ξout = 100, ξrelay = 1, B = 5 steps, δ = 50 meters, and S = {−7, −4, 0, 5} dBm. We used the packet error rate (PER) of a link as a substitute for outage probability; this does not violate the assumptions of our formulation. For η = 4, σ = 7 dB, ξout = 100, ξrelay = 1, the optimal average cost per step is 1.0924 (computed numerically). Taking λ(0) = 1.0924, we performed a real deployment experiment with OptExploreLimLearning. The deployed network (along with power levels, outage probabilities and link lengths) is shown in Figure 6. The sink is denoted by the “house” symbol. The algorithm placed relays at successive distances of 150 m, 50 m, 50 m, 100 m, and 150 m, thereby covering 500 m until the source was placed. The two short (50 m long) links are created due to signiﬁcant path-loss at the turn in the road. After deployment, we used the last placed node as the source and sent periodic trafﬁc (at various rates) from the source to the sink. The end-to-end packet

Ploss

0.05 0.04 0.03 0.02 0.01
0 150

200

250

300

Inter−Packet Duration (in ms)

350

Fig. 6. Actual deployment along a long tree-lined road in the Indian Institute of Science Campus using OptExploreLimLearning with iWiSe motes, ξout = 100, ξrelay = 1: ﬁve nodes (including the source) are placed; link lengths, transmit powers, and % outage probabilities are shown; the plot shows variation of end-to-end loss probability with inter-packet duration, for periodic trafﬁc generated from the source. Picture and plot are taken from [12].

loss probability increases with arrival rate (Figure 6); this happens due to carrier sense failures and collisions because of simultaneous transmissions from different nodes. At very low arrival rate, the loss probability is 0 (but the sum PER under the lone packet model is not 0). This happens since there are link level retransmissions and since the outage durations are relatively short; in case a packet encounters an outage in a link, the retransmission attempts succeed with high probability. The results demonstrate that, even though the design was for the lone packet model, the network can carry 4 packets/second (packet size is 127 bytes) with Ploss ≤ 1%, which is sufﬁcient for many applications. Hence, network design with the lone packet model assumption is reasonable for those applications.
X. CONCLUSION
We have developed several approaches for as-you-go deployment of wireless relay networks using on-line measurements, under a very light trafﬁc assumption. Each problem was formulated as an MDP and its optimal policy structure was studied. We also studied a few learning algorithms that will asymptotically converge to the corresponding optimal policies. Numerical and experimental results have been provided to illustrate the performance and trade-offs.
This work can be extended or modiﬁed in several ways: (i) Networks that are robust to node failures and long term link variations would either require each relay to have multiple neighbours (i.e., the deployment would need to be multiconnected), or the nodes can choose their transmit powers adaptively as the environment changes. (ii) It would be of interest to develop deployment algorithms for 2 and 3 dimensional regions, where a team of agents cooperates to carry out the deployment. (iii) We have assumed very light trafﬁc conditions in our design (what we call “lone packet” trafﬁc), but our experiments show that these designs can carry a useful amount of positive trafﬁc. It will be of interest, however, to develop deployment algorithms that can provide theoretical guarantees to achieve desired trafﬁc rates.

REFERENCES

[1] A. Chattopadhyay, M. Coupechoux, and A. Kumar. Sequential decision algorithms for measurement-based impromptu deployment of a wireless relay network along a line. http://arxiv.org/abs/1502.06878.

15

[2] V. Dyo, S.A. Ellwood, D.W. Macdonald, A. Markham, C. Mascolo, B. Pasztor, S. Scellato, N. Trigoni, R. Wohlers, and K. Yousef. Evolution and sustainability of a wildlife monitoring sensor network. In Proceedings of the 8th ACM Conference on Embedded Networked Sensor Systems (SenSys 2010), pages 127—140. ACM, 2011.
[3] A. A. A. Alkhatib. A review on forest ﬁre detection techniques. International Journal of Distributed Sensor Networks (a journal published by Hindawi Publishing Corporation), 2014.
[4] M. Howard, M.J. Mataric´, and G.S. Sukhatme. An incremental selfdeployment algorithm for mobile sensor networks. Kluwer Autonomous Robots, 13(2):113–126, 2002.
[5] M.R. Souryal, J. Geissbuehler, L.E. Miller, and N. Moayeri. Real-time deployment of multihop relays for range extension. In Proc. of the International Conference on Mobile Systems, Applications, and Services (MobiSys), pages 85–98. ACM, 2007.
[6] T. Aurisch and J. To¨lle. Relay Placement for Ad-hoc Networks in Crisis and Emergency Scenarios. In Proc. of the Information Systems and Technology Panel (IST) Symposium. NATO Science and Technology Organization, 2009.
[7] H. Liu, J. Li, Z. Xie, S. Lin, K. Whitehouse, J. A. Stankovic, and D. Siu. Automatic and robust breadcrumb system deployment for indoor ﬁreﬁghter applications. In Proc. of the International Conference on Mobile Systems, Applications, and Services (MobiSys). ACM, 2010.
[8] H. Liu, Z. Xie, J. Li, K. Whitehouse, J. Stankovic, S. Lin, and D. Siu. Efﬁcient and reliable breadcrumb systems via coordination among multiple ﬁrst responders. In Personal Indoor and Mobile Radio Communications (PIMRC), 2011 IEEE 22nd International Symposium on, pages 1005–1009. IEEE, 2011.
[9] J.Q. Bao and C. Lee. Rapid deployment of wireless ad hoc backbone networks for public safety incident management. In Global Telecommunications Conference (GLOBECOM), pages 1217–1221. IEEE, 2007.
[10] A. Sinha, A. Chattopadhyay, K.P. Naveen, M. Coupechoux, and A. Kumar. Optimal sequential wireless relay placement on a random lattice path. Ad Hoc Networks Journal (Elsevier)., 21:1–17, 2014.
[11] A. Chattopadhyay, M. Coupechoux, and A. Kumar. Measurement based impromptu deployment of a multi-hop wireless relay network. In Proc. of the 11th Intl. Symposium on Modeling and Optimization in Mobile, Ad Hoc, and Wireless Networks (WiOpt). IEEE, 2013.
[12] A. Chattopadhyay, A. Ghosh, A.S. Rao, B. Dwivedi, S.V.R. Anand, M. Coupechoux, and A. Kumar. Impromptu deployment of wireless relay networks: Experiences along a forest trail. Proceedings of the IEEE International Conference on Mobile Ad hoc and Sensor Systems (MASS), 2014, a detailed version available in http://arxiv.org/abs/1409.3940.
[13] Piyush Agrawal and Neal Patwari. Correlated link shadow fading in multi-hop wireless networks. http://arxiv.org/abs/0804.2708.
[14] A. Bhattacharya, A. Rao, D. G. Rao Sahib, A. Mallya, S.M. Ladwa, R. Srivastava, S.V.R. Anand, and A. Kumar. Smartconnect: A system for the design and deployment of wireless sensor networks. In Proc. of the 5th International Conference on Communication Systems and Networks (COMSNETS). IEEE, 2013.
[15] R. Upadrashta, T. Choubisa, V. S. Aswath, A. Praneeth, A. Prabhu, S. Raman, T. Gracious, and P.V. Kumar. An animation-and-chirplet based approach to intruder classiﬁcation using PIR sensing. In Proceedings of IEEE Tenth International Conference on Intelligent Sensors, Sensor Networks and Information Processing (ISSNIP), pages 1–6, 2015.
[16] B. Aghaei. Using wireless sensor network in water, electricity and gas industry. In Proceedings of the 3rd IEEE International Conference on Electronics Computer Technology, pages 14—17, 2011.
[17] T. Adame, A. Bel, B. Bellalta, J. Barcelo, and M. Oliver. IEEE 802.11ah: the WiFi approach for M2M communications. IEEE Wireless Communications, 21(6):144—152, December 2014.
[18] A. Mainwaring, J. Polastre, R. Szewczyk, D. Culler, and J. Anderson. Wireless sensor networks for habitat monitoring. In Proceedings of Wireless Sensor Network Applications (WSNA), pages 88–97. ACM, 2002.
[19] S. Lohier, A. Rachedi, I. Salhi, and E. Livolant. Multichannel access for bandwidth improvement in IEEE 802.15.4 wireless sensor networks. Available in https://hal-enpc.archives-ouvertes.fr/hal00680871/document.
[20] Nazim Abdeddaim, Fabrice Theoleyre, Franck Rousseau, and Andrzej Duda. Multi-channel cluster tree for 802.15.4 wireless sensor networks. In Proc. of the 23th International Symposium on Personal, Indoor and Mobile Radio Communications (PIMRC), pages 590—595. IEEE, 2012.
[21] E. Toscano and L.L. Bello. Multichannel superframe scheduling for IEEE 802.15.4 industrial wireless sensor networks. IEEE Transactions on Industrial Informatics, 8(2):337 —350, May 2012.

[22] A. Bardella, N. Bui, A. Zanella, and M. Zorzi. An experimental study on

IEEE 802.15.4 multichannel transmission to improve RSSI-based service performance. In Proc. of the 4th international conference on Real-world wireless sensor networks (REALWSN), pages 154—161, 2010.

[23] A. Bhattacharya and A. Kumar. QoS aware and survivable

network design for planned http://arxiv.org/abs/1110.4746.

wireless

sensor

networks.

[24] Matthias Vodel and Wolfram Hardt. Energy-efﬁcient communication in distributed, embedded systems. In Proc. of the 9th International Workshop on Resource Allocation, Cooperation and Competition in

Wireless Networks (RAWNET), in conjunction with IEEE WiOpt, 2013.

[25] Frederick J. Beutler and Keith W. Ross. Optimal policies for controlled markov chains with a constraint. Journal of Mathematical Analysis and Applications, 112:236–252, 1985.
[26] D.P. Bertsekas. Dynamic Programming and Optimal Control, Vol. II.

Athena Scientiﬁc, 2007. [27] Onesimo Hernandez-Lerma and Jean Bernard Lasserre. Discrete-Time
Markov Control Processes Basic Optimality Criteria. Springer, 1996. [28] H.C. Tijms. A First Course in Stochastic Models. WILEY, 2003.

[29] O. Vega-Amaya and F. Luque-Vsquez. Sample-path average cost opti-

mality for semi-Markov control processes on Borel spaces: unbounded costs and mean holding times. Applicationes Mathematicae, 27(3):343–

367, 2000. [30] http://www.astec.org.in/astec/content/wireless-sensor-network. [31] Vivek S. Borkar. Stochastic approximation: a dynamical systems
viewpoint. Cambridge University Press, 2008.

[32] Dye-Jyun Ma and Armand M. Makowski’. A class of steering policies under a recurrence condition. In Proc. of the 27th Conference on Decision and Control (CDC). IEEE, 1988.
[33] H.J. Kushner and D.S. Clark. Stochastic Approximation Methods for Constrained and Unconstrained Systems. Springer-Verlag, 1978.
[34] Walter Rudin. Principles of Mathematical Analysis, Third Edition.

McGraw-Hill International Editions, 1976. [35] Tom M. Apostol. Mathematical Analysis, Second Edition. Addison-

wesley Publishing Company, 1981.

Arpan Chattopadhyay obtained his B.E. in Elec-

tronics and Telecommunication Engineering from

Jadavpur University, Kolkata, India in the year 2008,

and M.E. in Telecommunication Engineering from

Indian Institute of Science, Bangalore, India in the

year 2010. He is currently pursuing his PhD in ECE

department, Indian Institute of Science, Bangalore.

His research interest is in networks.

Marceau Coupechoux is an Associate Professor at Telecom ParisTech since 2005. He obtained his master from Telecom ParisTech in 1999 and from University of Stuttgart, Germany in 2000, and his Ph.D. from Institut Eurecom, Sophia-Antipolis, France, in 2004. From 2000 to 2005, he was with AlcatelLucent. In the Computer and Network Science department of Telecom ParisTech, he is working on cellular networks, wireless networks, cognitive networks, focusing mainly on layer 2 protocols, scheduling and resource management. From August 2011 to August 2012 he was a visiting scientist at IISc Bangalore.
Anurag Kumar obtained his B.Tech. degree from the Indian Institute of Technology at Kanpur, and the PhD degree from Cornell University, both in Electrical Engineering. He was then with Bell Laboratories, Holmdel, N.J., for over 6 years. Since 1988 he has been on the faculty of the Indian Institute of Science (IISc), Bangalore, in the Department of Electrical Communication Engineering. He is currently also the Director of the Institute. From 1988 to 2003 he was the Coordinator at IISc of the Education and Research Network Project (ERNET), India’s ﬁrst wide-area packet switching network. His area of research is communication networking, speciﬁcally, modeling, analysis, control and optimisation problems arising in communication networks and distributed systems. Recently his research has focused primarily on wireless networking. He is a Fellow of the IEEE, of the Indian National Science Academy (INSA), of the Indian Academy of Science (IASc), of the Indian National Academy of Engineering (INAE), and of The World Academy of Sciences (TWAS). He is a recepient of the Indian Institute of Science Alumni Award for Engineering Research for 2008.

16
Supplementary Material

APPENDIX A PURE AS-YOU-GO DEPLOYMENT
Proof of Lemma 1 Note that the function J(0)(·) := 0 satisﬁes all the assertions. Let us assume, as our induction hypothesis, that J(k)(·) satisﬁes all the assertions. Now Qout(r, γ, w) is increasing in r and decreasing in w (by our channel modeling assumptions in Section II-A), and the single stage costs are linear (hence concave) increasing in ξrelay, ξout. Then from the value iteration, J (k+1)(r, w) is pointwise minimum of functions which are increasing in r, ξout and ξrelay, decreasing in w, and jointly concave in ξout and ξrelay. Hence, the assertions hold for J (k+1)(r, w). Similarly, we can show that the assertions hold for J(k+1)(0). Since J(k)(·) ↑ J(·), the results follow.
Proof of Theorem 2 Consider the Bellman equation (6). We will place a relay at state (r, w) iff the cost of placing a relay, i.e., minγ∈S (γ +ξoutQout(r, γ, w))+ξrelay +J (0) is less than or equal to the cost of not placing, i.e., θEW minγ∈S (γ + ξoutQout(r + 1, γ, W )) + (1 − θ)EW J (r + 1, W ). Hence, it is obvious that we will place a relay at state (r, w) iff minγ∈S (γ + ξoutQout(r, γ, w)) ≤ cth(r) where the threshold cth(r) is given by:
cth(r) = θEW min(γ + ξoutQout(r + 1, γ, W ))
γ∈S
+(1 − θ)EW J(r + 1, W ) − (ξrelay + J(0)) (14)
By Proposition 3.1.3 of [26], if there exists a stationary policy {µ, µ, · · · } such that for each state, the action chosen by the policy is the action that achieves the minimum in the Bellman equation, then that stationary policy will be an optimal policy, i.e., the minimizer in Bellman equation gives the optimal action. Hence, if the decision is to place a relay at state (r, w), then the power has to be chosen as
argminγ∈S γ + ξoutQout(r, γ, w) .
Since Qout(r, γ, w) and J(r, w) is increasing in r for each γ, w, it is easy to see that cth(r) is increasing in r.
APPENDIX B EXPLORE FORWARD DEPLOYMENT
Proof of Theorem 4 Let us recall the deﬁnition of the functions µ(1) and µ(2). Now, λµ :=
ξrelay + w g(w) µ(2)(w)+ξoutQout(µ(1)(w),µ(2)(w),wµ(1)(w))
w g(w)µ(1)(w)
is the average cost of a speciﬁc stationary deterministic policy µ (by the Renewal Reward Theorem, since the placement process regenerates at each placement point). For each policy (µ(1), µ(2)), the numerator is linear, increasing in ξout and ξrelay and the denominator is independent of ξout and ξrelay. Now, λ∗(ξout, ξrelay) = infµ λµ. Hence, the proof follows immediately since the pointwise inﬁmum of increasing linear functions of ξout and ξrelay is increasing and jointly concave

in ξout and ξrelay, and since any increasing, concave function is continuous.
Proof of Theorem 5: We will prove only the second statement of the theorem since the proof of the ﬁrst statement is similar.
Consider any κ > 0.
Now, since the mean cost per step is a linear combination of the mean power per step, mean outage per step and the mean number of relays per step, we can write:

λ∗(ξout, ξrelay )

Γ∗(ξout, ξrelay ) + ξoutQ∗out(ξout, ξrelay ) + ξrelay

=

∗

U (ξout, ξrelay )

Γ∗(ξout + κ, ξrelay ) + ξoutQ∗out(ξout + κ, ξrelay ) + ξrelay

≤

∗

U (ξout + κ, ξrelay )

(15)

and

λ∗(ξout + κ, ξrelay )

Γ∗(ξout + κ, ξrelay ) + (ξout + κ)Q∗out(ξout + κ, ξrelay ) + ξrelay

=

∗

U (ξout + κ, ξrelay )

Γ∗(ξout, ξrelay ) + (ξout + κ)Q∗out(ξout, ξrelay ) + ξrelay

≤

∗

U (ξout, ξrelay )

(16)

where the inequality in (15) follows from the fact that
π∗(ξout, ξrelay) is an optimal policy for (ξout, ξrelay), and the inequality in (16) follows from the fact that π∗(ξout+κ, ξrelay)

is an optimal policy for (ξout + κ, ξrelay).

Adding the inequalities (15) the common terms, we obtain . Q∗out(ξout,ξrelay )
U ∗(ξout,ξrelay )

and that

(16) and cancelling Q∗out(ξout+κ,ξrelay ) ≤
U ∗(ξout+κ,ξrelay )

Proof of Theorem 6: From (8), we can write:

g(w)v∗(w) =
w

g(w) min γ + ξoutQout(u, γ, wu)
u,γ w

+ξrelay − λ∗u

+

g(w )v∗(w )

w ∈WB

Cancelling w g(w)v∗(w) from both sides, we obtain the desired result.
Proof of Theorem 7: Note that in (10), if the minimum is achieved by more than one pair of (u, γ), then any one of them can be considered to be the optimal action. Let us use the convention that among all minimizers the pair (u, γ) with minimum u will be considered as the optimal action, and if there are more than one such minimizing pair with same values of u, then the pair with smallest value of γ will be considered. We recall that S = {P1, P2, · · · , PM }. Let us denote, under policy µk+1, the probability that the optimal control is (u, γ)

17

and the shadowing is w at the u-th location, by bk(u, γ, w). Then,

bk(u, γ, w) = Πur=−A1 +1P min (γ + ξoutQout(r, γ , Wr)) − λkr
γ ∈S
> γ + ξoutQout(u, γ, w) − λku × pW (w) ×ΠAr=+uB+1P min (γ + ξoutQout(r, γ , Wr)) − λkr
γ ∈S
≥ γ + ξoutQout(u, γ, w) − λku

×I γ = argmin{P1, P2, · · · , PM } :

γ + Qout(u, γ, w)

= min(γ + ξoutQout(u, γ , w))

(17)

γ

Now, we can write,

g(w) µ(k2)(w) + ξoutQout(µ(k1)(w), µ(k2)(w), wµ(1)(w))

w

k

A+B M

=

bk−1(u, Pj , w) Pj + ξoutQout(u, Pj , w)

u=A+1 j=1 w∈W

(18)

and

A+B M

g(w)µ(k1)(w) =

bk−1(u, Pj , w)u

w

u=A+1 j=1 w∈W

A+B M

=

u

bk−1(u, Pj , w) (19)

u=A+1 j=1 w∈W

Now, for each (u, γ, w), bk−1(u, γ, w) (in (17)) can be computed in O(BM |W|) operations. Hence, total number of

operations required to compute bk−1(u, γ, w) for all u, γ, w is O(B2M 2|W|2). Now, only O(BM |W|) operations are

required in (18) and (19). Hence, the number of computations required in each iteration is O(B2M 2|W|2).

Note that, the policy improvement step is not explicitly

required in the policy iteration. This is because in the policy

evaluation step, λk is sufﬁcient to compute bk(u, γ, w) for all u, γ, w and thereby to compute λk+1. Hence, we need not store the policy in each iteration.

Proof of Lemma 2: Let us denote the HeuExploreLim pol-

icy by µh and any other stationary, deterministic policy by µ. Let us denote the sequence of link costs incurred in the deploy-

ment process (for a semi-inﬁnite line with given shadowing

over all possible links) under policy µh by cµh,1, cµh,2, · · · and the corresponding link lengths by uµh,1, uµh,2, · · · . Let us denote, under policy µh, the shadowing observed at the i-th location (where A + 1 ≤ i ≤ A + B) in the measurement

process for the placement of the l-th node, by wi,l. Now, let us couple the deployment processes under policies µ and

µh in the following way. Suppose that, under policy µ, the shadowing observed at the i-th location for the placement of

the l-th node is again wi,l (this is valid since shadowing is i.i.d

across links). Clearly, cµh,j ≤ cµ,j . Hence, by the strong law

uµh ,j

uµ,j

25

ξrelay=0.1

20

ξ =1

relay

15 ξrelay=10

10

cth(r)

5

0

20

30

40

50

60

70

80

r (in meters)

Fig. 7. Pure as-you-go deployment; variation of cth(r) with r for ξout = 100 and various values of ξrelay.
25
20 ξout=10 15 ξout=100

cth(r)

10

5

0

20

30

40

50

60

70

80

r (in meters)

Fig. 8. Pure as-you-go deployment; variation of cth(r) with r for ξrelay = 1 and various values of ξout.

of large numbers, Eµh CUµµhh ≤ Eµ CUµµ , since CUµµhh,,jj is i.i.d. across j due to i.i.d. shadowing across links.
APPENDIX C COMPARISON BETWEEN EXPLORE-FORWARD AND PURE
AS-YOU-GO APPROACHES Proof of Theorem 8 Note that for the average cost problem with pure as-you-go, there exists an optimal threshold policy (similar to Theorem 2), since the optimal policy for problem (5) achieves λ∗ayg average cost per step for θ sufﬁciently close to 0. So, let one such optimal policy be given by the set of thresholds {cth(r)}A+1≤r≤A+B−1.
Now, let us consider the average cost minimization problem with explore-forward. Consider the policy where we ﬁrst measure wA+1, wA+2, · · · , wA+B and decide to place a relay u steps away from the previous relay (where A + 1 ≤ u ≤ A + B − 1) if minγ∈S (γ + ξoutQout(r, γ, wr)) > cth(r) for all r ≤ (u−1) and minγ∈S (γ+ξoutQout(u, γ, wu)) ≤ cth(u). We must place if we reach at a distance (A+B) from the previous relay. But this is a particular policy for the problem where we gather wA+1, wA+2, · · · , wA+B and then decide where to place the relay, and clearly the average cost per step for this policy is λ∗ayg which cannot be less than the optimal average cost λ∗ef .

A. Optimal Policy Structure for the Pure As-You-Go Approach
The variation of cth(r) (see Section III-E and Section III-G, we have taken θ sufﬁciently close to 0) with r, for various values of the relay cost ξrelay and the cost of outage ξout, has been shown in Figure 7 and Figure 8. For a ﬁxed ξout, cth(r) decreases with ξrelay; i.e., as the cost of placing a relay increases, we place relays less frequently. On the other hand,

Mean Placement Distance (in Steps)

4 OptExploreLim HeuExploreLim OptAsYouGo
3 HeuAsYouGo
2

1 −10

−5

ξ

0 (in dBm)

5

relay

Mean Outage per Link

0.03 0.02 0.01

OptExploreLim HeuExploreLim OptAsYouGo HeuAsYouGo

0

10

−10

−5

ξ

0 (in dBm)

5

relay

18 10

Mean Power per Node (in dBm)

OptExploreLim

2

HeuExploreLim

0

OptAsYouGo and

HeuAsYouGo

−2

−4

−6

−10

−5

ξ

0 (in dBm)

5

10

relay

Average Cost per Step

5

OptExploreLim

4

HeuExploreLim

OptAsYouGo

3

HeuAsYouGo

2

1

0

−10

−5

ξ

0 (in dBm)

5

10

relay

Fig. 9. Results for ξout = 100: mean cost per step, mean power per link, mean outage per link and mean placement distance (steps) vs. ξrelay for the four algorithms: OptExploreLim, OptAsYouGo, HeuExploreLim, and HeuAsYouGo. Unit of ξrelay is actually mW, but in this ﬁgure it is shown in dBm. ξrelay, when expressed in dBm, is equal to 10 log10(ξrelay). In the Power plot, the HeuAsYouGo plot overlaps the OptAsYouGo plot, since the node power in the HeuAsYouGo algorithm was taken to be the same as the mean node power with the OptAsYouGo algorithm.

for a ﬁxed ξrelay, cth(r) increases with ξout. This happens because if the cost of outage increases, we cannot tolerate outage and place the relays close to each other. Note also that, cth(r) increases in r as stated in Algorithm 1.
B. Comparison Among Various Deployment Algorithms Next, assuming a system model as described in Section II
and assuming the parameter values as in Section V-A, we computed the mean cost per step, mean power per node, mean outage per link and mean placement distance (between successive relays) for four deployment algorithms presented so far7. Some of the results are shown in Figure 9. In order to make a fair comparison, we used the mean power per node for OptAsYouGo as the ﬁxed node transmit power for HeuAsYouGo, and the mean outage per link of OptAsYouGo as the pre-ﬁxed target outage for HeuAsYouGo. The following observations are from the plots in Figure 9.
1) Mean Placement Distance (see the top left panel of Figure 9): Pure as-you-go algorithms (OptAsYouGo, HeuAsYouGo) place relays sooner than the algorithms that explore forward (OptExploreLim, HeuExploreLim) before placing a relay (see Figure 9). This is as expected, since pure as-yougo algorithms do not have the advantage of exploring over
7Note that, these computations were done on MATLAB; they did not involve any ﬁeld deployment. Field experimentations were done only to validate the assumptions (such as independent shadowing assumption) and to compute the values of the parameters such as η and σ.

several locations and then picking the best. A pure as-yougo approach tends to be cautious, and therefore tries to avoid a high outage by placing relays frequently. As ξrelay (cost of a relay) increases, relays will be placed less frequently (according to Theorem 5).
2) Mean Outage per Link (see the top right panel of Figure 9): As ξrelay increases, the mean outage per link increases because we will place fewer relays with higher inter-relay distances. Pure as-you-go algorithms have link outage probability comparable to explore-forward algorithms, but they place relays too frequently. We observe that the per-link outage of HeuAsYouGo is different from that of OptAsYouGo. This happens because whenever we place a node using HeuAsYouGo, the exact outage target is never met with equality. Also, the per-link outage may decrease with ξrelay for HeuAsYouGo. As ξrelay increases, the node power and the target outage (chosen from OptAsYouGo) increases in such a way that the per-link outage for HeuAsYouGo behaves in this fashion.
We have also observed that, as ξout, the penalty for outage, increases, the mean outage per link decreases. But that result has not been shown here.
3) Mean Power per Link (see the bottom left panel of Figure 9): Increasing ξrelay will place relays less frequently, hence the transmit power increases. OptAsYouGo has smaller placement distance compared to OptExploreLim and HeuExploreLim, and hence it uses less power at each hop; we note,

19

however, that OptAsYouGo places more relays, and, hence, could still end up using more power per step.
In the power plot, the HeuAsYouGo plot overlaps the OptAsYouGo plot, since the node power in the HeuAsYouGo algorithm was taken to be the same as the mean node power with the OptAsYouGo algorithm.
We have also seen that increasing ξout (the cost per unit outage) will lower outage and hence the per-node transmit power increases.

4) Network Cost Per Step (see the bottom right panel of Figure 9): The network cost per step is the optimal average cost per step; see (3). Cost increases with ξrelay (see Figure 9) and ξout. OptAsYouGo has a larger cost than OptExploreLim and HeuExploreLim, owing to shorter links. The average cost per step of HeuExploreLim is very close to OptExploreLim and cost of HeuAsYouGo is close to OptAsYouGo, even though the heuristic policies are not optimal. However, we observed that this does not always happen. For example, for ξrelay = 0.1 and ξout = 1000, we found that the average cost per step for OptAsYouGo and HeuAsYouGo are 1.3485 and 1.9581 respectively, and the average cost per step for OptExploreLim and HeuExploreLim are 0.9810 and 1.0537 respectively.

Discussion:

(i) HeuExploreLim and HeuAsYouGo appear to be attractive

at the ﬁrst sight because they are intuitive, easy to

implement, and they do not require any channel model for

given ξout and ξrelay. But, they are suboptimal, and we do

not have any performance guarantee (e.g., the optimality

gap w.r.t. the optimal algorithms OptExploreLim and

OptAsYouGo). Hence, if we know the radio propagation

model (e.g., η and σ) exactly, and if ξout and ξrelay are

given, it is better to compute the optimal policies and

then deploy according to them.

(ii) Note that, the mean number of measurements made per

step for the pure as-you-go approach is 1, whereas it is

B E(U )

under

the

explore-forward

approach,

where

E(U )

is the mean distance between successive relays. From the

numerical results presented in this section, we ﬁnd that,

under the explore-forward approach, the mean number

of measurements required will be at most 3, and can

be even less than 2 depending on the situation. For

applications that do not require rapid deployment, such as

deployment in a large forest for monitoring purpose, this

many measurements is affordable. Hence, for the learning

algorithms, we consider only explore-forward approach.

(iii) More importantly, in practice the propagation environ-

ment will not be known, and, in order to solve the problem deﬁned in (4), we need to choose ξo∗ut and ξr∗elay while deploying (as explained in Theorem 1), if possible.

But we cannot choose this pair if we do not have a

prior knowledge of the propagation environment. Poor

choice of ξout and ξrelay might lead to violation of the

constraints in the constrained problem deﬁned in (4), or

might result in a higher mean power per step compared

to the optimal mean power per step under the constraints.

Hence, we need to adapt ξout and ξrelay as deployment

progresses. The adaptive algorithms use the structure of

the optimal policy OptExploreLim.

APPENDIX D OPTEXPLORELIMLEARNING: LEARNING WITH EXPLORE-FORWARD, FOR GIVEN ξout AND ξrelay

Proof of Theorem 9:

Let us denote the shadowing random variable in the link

between the potential locations located at distances iδ and jδ

from the sink node by Wi,j. The sample space Ω associated with the deployment process is the collection of all ω (each

ω corresponds to a ﬁxed realization {wi,j : i ≥ 0, j ≥ 0, i > j, A + 1 ≤ i − j ≤ A + B} of all possible

shadowing random variables that might be encountered in the

measurement process for deployment up to inﬁnity). Let F be

the Borel σ-algebra on Ω. Let Sk =

k i=1

Ui

be

the

distance

(in steps) of the k-th relay from the sink (S0 := 0), and

Fk := σ λ(0); Wi,j : i ≥ 0, j ≥ 0, i > j, A + 1 ≤ i − j ≤

A+B, i ≤ Sk−1+A+B, j ≤ Sk−1+A+B . The sequence of σ-algebras Fk is increasing in k, and Fk captures the history of the deployment process up to the deployment of the k-th relay.
Note that, we can rewrite the update equation in Algorithm 6 as follows:
λ(k+1) = λ(k) + ak+1 f (λ(k)) + Nk+1

where

f (λ) = EW min γ + ξoutQout(u, γ, Wu) + ξrelay − λu
u,γ
and

Nk+1 = min γ + ξoutQout(u, γ, Wu) + ξrelay − λ(k)u −
u,γ

EW min γ + ξoutQout(u, γ, Wu) + ξrelay − λ(k)u
u,γ

Note that, (γ + ξoutQout(u, γ, Wu) + ξrelay − λu) is a linearly decreasing function in λ. Hence, minu,γ(γ + ξoutQout(u, γ, Wu) + ξrelay − λu) is a concave, strictly decreasing function in λ. The function f (λ) is a nonnegative linear combination of concave, strictly decreasing functions of λ. Hence, f (λ) is strictly decreasing, concave function of λ for λ ∈ [0, ∞). Hence, f (λ) is continuous in λ. Now, f (0) > 0 and limλ→∞ f (λ) = −∞. Hence, f (λ) = 0 will have a unique positive solution.

Also, if we increase λ by an amount ∆, then we will have (A + 1)∆ ≤ |f (λ + ∆) − f (λ)| ≤ (A + B)∆. Hence, f (·) is Lipschitz continuous with Lipschitz constant (A + B).

Let us invoke four conditions from Chapter 2 of [31] as follows:

(i) f (·) is a Lipschitz continuous function.

(ii)

∞ k=1

ak

=

∞,

∞ k=1

a2k

<

∞.

(iii) {Nk}k≥1 is a Martingale difference sequence w.r.t the

sigma ﬁeld Fk and E(|Nk+1|2|Fk) ≤ K(1 + |λ(k)|2) for

some K > 0.

20

(iv) supk≥1 |λ(k)| < ∞ almost surely.

By Theorem 2 (in Chapter 2) of [31], if the four conditions are satisﬁed, then λ(k) will almost surely converge to the unique zero of f (·). But, that unique zero is the optimal average cost per step λ∗ which satisﬁes f (λ∗) = 0 (by Theorem 6). Hence, the problem reduces to checking the conditions (i)-(iv).
Since f (λ) is Lipschitz continuous with Lipschitz constant (A + B), condition (i) is satisﬁed. Condition (ii) is satisﬁed by the choice of ak.
By deﬁnition of Nk, we have EW (Nk+1|Fk) = EW (Nk+1|λ(k)) = 0 (since shadowing is i.i.d. across links, the shadowing values encountered in the process of measurement for placing a new node are independent of the shadowing values encountered in the measurement process for deploying the previous nodes) which implies that {Nk+1}k≥1 is a Martingale difference sequence w.r.t. Fk. Now, since the conditional second moment is greater than conditional variance almost surely, we have (almost surely):

E(|Nk+1|2|Fk) ≤ E

min(γ + ξoutQout(u, γ, Wu)
u,γ

2
+ξrelay − λ(k)u) |Fk

Now, we know that γ ≤ PM , A + 1 ≤ u ≤ A + B, outage probability is always in [0, 1], and ξout and ξrelay are ﬁxed. Hence, E(|Nk+1|2|Fk) can be upper bounded by K(1 + |λ(k)|2) for some K > 0. Hence, condition (iii) is also
satisﬁed. Condition (iv) is satisﬁed by the following lemma.
Lemma 3: For the iterates {λ(k)}k≥1 in (11), supk≥1 |λ(k)| < ∞ almost surely.
Proof: Let us deﬁne K0 to be the smallest integer such that ak(A + B) < 1 for all k ≥ K0 (K0 exists since ak ↓ 0). For any starting value λ(0), it is easy to ﬁnd a positive real number d (depending on the value of λ(0)) such that λ(k) ∈ [−d, d] for all k ≤ K0; this is easy to see because the
node transmit power, node outage probability and placement
distance for each node are bounded quantities.
Without loss of generality, we can take d > PM + ξout + ξrelay where PM is the maximum transmit power level of a node. We already have that λ(k) ∈ [−d, d] for all k ≤ K0. Now we will show that λ(k) ∈ [−d, d] for all k ≥ K0. To this end, let us assume, as our induction hypothesis, that λ(k) ∈ [−d, d] for some k ≥ K0. If we can show that λ(k+1) ∈ [−d, d], we
will be done with the proof.
From the update equation (11), we can write that (using
(A + B) ≥ uk+1 ≥ 1 and 0 ≤ ak+1uk+1 < 1):

λ(k+1) ≤ λ(k) + ak+1(PM + ξout + ξrelay − λ(k)uk+1) = (1 − ak+1uk+1)λ(k) + ak+1(PM + ξout + ξrelay ) ≤ (1 − ak+1uk+1)λ(k) + ak+1uk+1(PM + ξout + ξrelay ) ≤ max{λ(k), PM + ξout + ξrelay } ≤d
On the other hand:

λ(k+1) ≥ λ(k) + ak+1(0 − λ(k)uk+1) = (1 − ak+1uk+1)λ(k) ≥ −(1 − ak+1uk+1)d ≥ −d

Hence, λ(k+1) ∈ [−d, d] and the lemma is proved.

Now, since conditions (i)-(iv) are satisﬁed, by Theorem 2, Chapter 2 of [31], λ(k) → λ∗ almost surely.

Proof of Corollary 1: Suppose that, we choose ak =

k1 u in Algorithm 6. Then,

∞ k=1

ak

≥

∞ k=1 k(A1+B) =

i=1 i
∞ almost surely and

∞ k=1

a2k

≤

∞

1

k=1 k2(A+1)2

<∞

almost surely.

Now, with this step size,

λ1 = λ(0) + a1(γ1 + ξoutQ(o1u,t0) + ξrelay − λ(0)u1)

= λ(0) + 1 (γ1 + ξoutQ(1,0) + ξrelay − λ(0)u1)

u1

out

= γ1 + ξoutQ(o1u,t0) + ξrelay u1

and, in general,

λ(k+1) = λ(k) + ak+1(γk+1 + ξoutQ(oku+t 1,k) + ξrelay − λ(k)uk+1)

= λ(k) + (γk+1 + ξoutQo(ku+t 1,k) + ξrelay − λ(k)uk+1)

k+1 i=1

ui

= λ(k) ki=1 ui + (γk+1 + ξoutQo(ku+t 1,k) + ξrelay )

k+1 i=1

ui

= ki=+11(γi + ξoutQo(iu,it−1) + ξrelay )

k+1 i=1

ui

Hence, in (11) of Algorithm 6, we can replace λ(k) =

k i=1

(γi

+ξout

Qo(iu,it−1)

+ξr

elay

)

,

and

this

proves

the

theorem.

k i=1

ui

APPENDIX E OPTEXPLORELIMADAPTIVELEARNING WITH CONSTRAINT ON OUTAGE PROBABILITY AND RELAY PLACEMENT RATE

A. Proof of Theorem 10

Proof of the ﬁrst statement: Let us assume that π∗(ξo∗ut, ξr∗elay) satisﬁes both constraints in (4) with equality for some ξo∗ut > 0, ξr∗elay > 0, i.e., π∗(ξo∗ut, ξr∗elay) is an optimal policy for problem (4). Now, let us as-

sume that there exists ξout ≥ 0, ξrelay ≥ 0 satisfying (i) (λ∗(ξout, ξrelay), ξout, ξrelay) ∈ K(q, N ), and (ii) Q∗out(ξout,ξrelay) < q. We will show that this leads to a
U ∗(ξout,ξrelay )
contradiction.

Let us consider the problem of minimizing the mean out-

Γ∗(ξ∗ ,ξ∗ )

age per step subject to a constraint

out relay

∗∗

∗

on the

U (ξout,ξrelay )

mean power per step and a constraint ∗ 1

=N

U (ξo∗ut,ξr∗elay )

on the mean number of relays per step. Clearly, by Theo-

rem 1, π∗(ξo∗ut, ξr∗elay) is an optimal policy for this problem

since it satisﬁes both constraints with equality. Note that,

π∗(ξo∗ut, ξr∗elay) has a mean outage per step q. But, we also see

21

that the policy π∗(ξout, ξrelay) has the same mean power per

step and a smaller mean number of relays per step compared

to π∗(ξo∗ut, ξr∗elay) (since (λ∗(ξout, ξrelay), ξout, ξrelay) ∈

K(q, N )), and has a strictly smaller mean outage per step

compared to π∗(ξo∗ut, ξr∗elay). This leads to a contradiction since π∗(ξo∗ut, ξr∗elay) is an optimal policy for the problem of

minimizing the mean outage per step subject to a constraint Γ∗(ξo∗ut,ξr∗elay) on the mean power per step and a constraint
U ∗(ξo∗ut,ξr∗elay )

1
∗

= N on the mean number of relays per step.

U (ξo∗ut,ξr∗elay )

Similarly, we can show a contradiction if, instead of assum-

ing Q∗out(ξout,ξrelay) < q, we had assumed

1

< N.

U (ξout,ξrelay )

U (ξout,ξrelay )

Hence, the ﬁrst statement is proved.

Proof of the second statement: This statement follows from the fact that for any ξrelay ≥ 0, π∗(0, ξrelay) always places at
a distance (A + B) and uses the smallest power P1, thereby incurring a mean outage per step equal to EW QoutA(A++BB,P1,W ) .

B. Proof of Theorem 11

Denote by g(r, γ), r ∈ {A + 1, A + 2, · · · , A + B}, γ ∈ S

the joint distribution of (Uk, Γk) when λ in (9) is replaced by λ∗(ξout, ξrelay), i.e., when deployment is done using the

OptExploreLim algorithm (Algorithm 3).

Let us assume that g(r, γ) is continuous in both ξout and ξrelay (we will prove this assertion in Lemma 4 at the end

of the proof of the theorem). By Lemma 4, the mean place-

∗
ment distance U (ξout, ξrelay) =

Ar=+AB+1 γ∈S rg(r, γ) is

continuous in ξout and ξrelay. Similarly, the mean power per

∗
link Γ (ξout, ξrelay) =

A+B r=A+1

γ∈S γg(r, γ) is continuous

in ξout and ξrelay.

Let us denote by λ∗(ξout, ξrelay) the optimal average cost

per step for the problem in (3), for given ξout and ξrelay. By

Renewal-Reward Theorem,

∗

Γ∗(ξout, ξrelay ) + ξoutQ∗out(ξout, ξrelay ) + ξrelay

λ (ξout, ξrelay ) =

∗

U (ξout, ξrelay )

Since λ∗(ξout, ξrelay) is continuous in ξout and ξrelay (by

∗

Theorem 4), we conclude that Qout(ξout, ξrelay) is continuous

in ξout

and ξrelay. Hence,

Γ∗ (ξout ,ξrelay
∗

)

,

Q∗out(ξout,ξrelay )
∗

and

U (ξout,ξrelay ) U (ξout,ξrelay )

U∗(ξout1,ξrelay) are continuous in ξout and ξrelay. Hence, the

theorem is proved.

Lemma 4: Under Assumption 2, g(r, γ) is continuous in

ξout and ξrelay.

Proof: Let us ﬁx any r ∈ {A + 1, · · · , A + B} and any

γ ∈ S. We will show that g(r, γ) is continuous in ξout. The continuity of g(r, γ) w.r.t. ξrelay will follow the same line of

arguments.

Consider any sequence {ξn}n≥1 such that ξn → ξout. Let us

denote the joint probability distribution of placement distance

and node transmit power by gn(r, γ), if the cost per unit outage is ξn and if OptExploreLim is used in the deployment process. We will show that gn(r, γ) → g(r, γ) as n → ∞.

Let us deﬁne the sets Eγ = w : γ + ξoutQout(r, γ, wr) <

γ + ξoutQout(r, γ , wr) and Eu,γ = w : ξoutQout(r, γ, wr) + ξrelay − λ∗(ξout, ξrelay)r < ξoutQout(u, γ , wu) + ξrelay − λ∗(ξout, ξrelay)u .

γ+ γ+

In state w, the OptExploreLim algorithm (Algorithm 3) will place the next relay at distance r and decide power level γ if w ∈ Eγ for all γ = γ, γ ∈ S and if w ∈ Eu,γ for all u = r, γ ∈ S.
Let us deﬁne E = ∩γ =γ Eγ ∩u=r,γ ∈S Eu,γ . Note that, g(r, γ) = P(E) = E(IE ), where I denotes the indicator function, and the expectation is over the joint distribution of the shadowing vector W (shadowing random variables from B locations).

Now, for any γ = γ, we have P γ +

ξoutQout(r, γ, Wr) = γ + ξoutQout(r, γ , Wr) = 0. Also,

P γ + ξoutQout(r, γ, Wr) + ξrelay − λ∗(ξout, ξrelay)r =

γ + ξoutQout(u, γ , Wu) + ξrelay − λ∗(ξout, ξrelay)u = 0

if γ ∈ S, u = r. These two assertions follow from Assumption 2 and the fact that Qout(r, γ, w) is continuous in w. Hence, we discard these zero probability events in our analysis and safely assume that:

• For γ = γ, the complement Eγ has the same expression as Eγ except that the < sign is replaced by > sign.
• For γ ∈ S, u = r, Eu,γ has the same expression as Eu,γ except that the < sign is replaced by > sign.

Now, consider any sequence {ξn}n≥1 such that ξn → ξout. Let Eγ(n), Eu(n,γ) and E(n) be the sets obtained where we replace ξout by ξn in the expressions of the sets Eγ , Eu,γ and E respectively. Clearly, we can make similar claims for Eγ(n), Eu(n,γ) for any n ≥ 1.
Recall that, g(r, γ) = P(E) = E(IE ). Clearly, if we can
show that E(IE(n) ) → E(IE ), the lemma will be proved.

Claim 1: IE(n) → IEu,γ almost surely as n → ∞, for u,γ
u = r, γ ∈ S. Also, IE(n) → IEγ almost surely as n → ∞, γ
for γ = γ.

Proof: Suppose that, for some value of w, IEu,γ (w) = 1, i.e., γ + ξoutQout(r, γ, wr) + ξrelay − λ∗(ξout, ξrelay)r < γ + ξoutQout(u, γ , wu) + ξrelay − λ∗(ξout, ξrelay)u. Now, by Theorem 4, λ∗(ξout, ξrelay) is continuous in ξout and
ξrelay. Hence, there exists an integer n0 sufﬁciently large
such that for all n > n0, we have γ + ξnQout(r, γ, wr) + ξrelay − λ∗(ξn, ξrelay)r < γ + ξnQout(u, γ , wu) + ξrelay − λ∗(ξn, ξrelay)u, i.e., IE(n) (w) = 1 for all n > n0. Hence,
u,γ
IE(n) (w) → IEu,γ (w) if IEu,γ (w) = 1. Similar argument u,γ
works when IEu,γ (w) = 0. Hence, the ﬁrst part of the claim is proved.

The second part of the claim is proved in a similar way.

Note that, IE(n) =

I γ =γ E(n) γ

u=r,γ ∈S IE(n) . By u,γ

Claim 1, IE(n) → IE almost surely. Since indicator functions

always take values in the set {0, 1}, we have E(IE(n) ) → E(IE )

22

λ(k) = λ(k−1) + ak min γ + ξo(ku−t 1)Qout(u, γ, wu) + ξr(kel−a1y) − λ(k−1)u
u,γ

Λ[0,A2] ξo(ku−t 1) + β(Qout(uk, γk, wuk ) − quk) − ξo(ku−t 1)

ξo(ku)t = ξo(ku−t 1) + bk lim

+ o(bk)

β↓0

β

b

Λ[0,A2] ξo(ku−t 1) + β(Qout(uk, γk, wuk ) − quk) − ξo(ku−t 1) o(b )

= ξo(ku−t 1) + ak k lim

+k

ak β↓0

β

bk

Λ[0,A3] ξr(kel−a1y) + β(1 − N uk) − ξr(kel−a1y)

ξr(kel)ay = ξr(kel−a1y) + bk lim

+ o(bk)

β↓0

β

b

Λ[0,A3] ξr(kel−a1y) + β(1 − N uk) − ξr(kel−a1y) o(b )

= ξr(kel−a1y) + ak k lim

+k

(20)

ak β↓0

β

bk

by Dominated Convergence Theorem. Hence, the lemma is proved.

From the update equation (13), we can write that (using (A + B) ≥ uk+1 ≥ 1 and 0 ≤ ak+1uk+1 < 1):

C. Proof of Theorem 12

Let us denote the shadowing random variable in the link

between the potential locations located at distances iδ and jδ

from the sink node by Wi,j. The sample space Ω associated

with the deployment process is the collection of all ω (each

ω corresponds to a ﬁxed realization {wi,j : i ≥ 0, j ≥

0, i > j, A + 1 ≤ i − j ≤ A + B} of all possible

shadowing random variables that might be encountered in the

measurement process for deployment up to inﬁnity). Let F be

the Borel σ-algebra on Ω. Let Sk =

k i=1

Ui

be

the

distance

(in steps) of the k-th relay from the sink (S0 := 0), and

Fk := σ (λ(0), ξo(0u)t, ξr(0e)lay); Wi,j : i ≥ 0, j ≥ 0, i > j, A +

1 ≤ i−j ≤ A+B, i ≤ Sk−1+A+B, j ≤ Sk−1+A+B . The
sequence of σ-algebras Fk is increasing in k, and Fk captures the history of the deployment process up to the deployment of the k-th relay.
Let us recall the outline of the proof of Theorem 12 in
Section VII-B. 1) Almost sure boundedness of the λ(k) iterates: Lemma 5: The iterates {λ(k)}k≥1 in (13) are bounded
almost surely.
Proof: Let us deﬁne K0 to be the smallest integer such that ak(A + B) < 1 for all k ≥ K0 (K0 exists since ak ↓ 0). For any starting value λ(0), it is easy to ﬁnd a positive real number d (depending on the value of λ(0)) such that λ(k) ∈ [−d, d] for all k ≤ K0; this is easy to see because ξo(ku)t ∈ [0, A2], ξr(kel)ay ∈ [0, A3] for all k, and the node transmit power, node outage probability and placement distance for each node
are bounded quantities.
Without loss of generality, we can take d > PM + A2 + A3 where PM is the maximum transmit power level of a node. We already have that λ(k) ∈ [−d, d] for all k ≤ K0. Now we will show that λ(k) ∈ [−d, d] for all k ≥ K0. To this end, let us assume, as our induction hypothesis, that λ(k) ∈ [−d, d] for some k ≥ K0. If we can show that λ(k+1) ∈ [−d, d], we will be done with the proof.

λ(k+1) ≤ λ(k) + ak+1(PM + A2 + A3 − λ(k)uk+1) = (1 − ak+1uk+1)λ(k) + ak+1(PM + A2 + A3) ≤ (1 − ak+1uk+1)λ(k) + ak+1uk+1(PM + A2 + A3) ≤ max{λ(k), PM + A2 + A3} ≤d
On the other hand:
λ(k+1) ≥ λ(k) + ak+1(0 − λ(k)uk+1) = (1 − ak+1uk+1)λ(k) ≥ −(1 − ak+1uk+1)d ≥ −d
Hence, λ(k+1) ∈ [−d, d] and the lemma is proved.

2) Analyzing the Faster Time-Scale Iteration of λ(k): Let us denote by λ∗(ξout, ξrelay) the optimal average cost per step for the problem in (3), for given ξout and ξrelay.
Lemma 6: For Algorithm 8, we have (λ(k), ξo(ku)t, ξr(kel)ay) → {(λ∗(ξout, ξrelay), ξout, ξrelay) : (ξout, ξrelay) ∈ [0, A2] × [0, A3]} and limk→∞ |λ(k) − λ∗(ξo(ku)t, ξr(kel)ay)| = 0 almost surely.
Proof: We follow the proof of Lemma 1, Chapter 6 of
[31].
Using the ﬁrst order Taylor series expansion of the function Λ[0,A2](·), and using the fact that Λ[0,A2](ξo(ku−t 1)) = ξo(ku−t 1) (since ξo(ku−t 1) ∈ [0, A2]), the update equation (13) can be rewritten as (20).
Consider the update equation for ξrelay in (20). Note that:

Λ[0,A3 ] lim
β↓0

ξr(kel−a1y) + β(1 − N uk) β

− ξr(kel−a1y)

= (1 − N uk)I{0 < ξr(kel−a1y) < A3}

+ (1 − N uk)+I{ξr(kel−a1y) = 0}

− (1 − N uk)−I{ξr(kel−a1y) = A3}

ξo(ku)t = ΛG ξo(ku−t 1) + bk Qout(Uk, Γk, WUk ) − qUk = ΛG ξo(ku−t 1) + bk Q∗out(ξo(ku−t 1), ξr(kel−a1y)) − qU ∗(ξo(ku−t 1), ξr(kel−a1y))
:=f1(ξo(ku−t 1),ξr(ke− la1y))
+ Qout(λ(k−1), ξo(ku−t 1), ξr(kel−a1y)) − qU (λ(k−1), ξo(ku−t 1), ξr(kel−a1y)) − f1(ξo(ku−t 1), ξr(kel−a1y))
:=g1(λ(k−1),ξo(ku−t 1),ξr(ke− la1y))
+ Qout(Uk, Γk, WUk ) − qUk − Qout(λ(k−1), ξo(ku−t 1), ξr(kel−a1y)) − qU (λ(k−1), ξo(ku−t 1), ξr(kel−a1y))

:=M1(k)
= ΛG ξo(ku−t 1) + bk f1(ξo(ku−t 1), ξr(kel−a1y)) + g1(λ(k−1), ξo(ku−t 1), ξr(kel−a1y)) + M1(k)

ξr(kel)ay = ΛG ξo(ku−t 1) + bk 1 − N Uk

= ΛG ξr(kel−a1y) + bk 1 − N U ∗(ξo(ku−t 1), ξr(kel−a1y))

:=f2(ξo(ku−t 1),ξr(ke− la1y))
+ 1 − N U (λ(k−1), ξo(ku−t 1), ξr(kel−a1y)) − f2(ξo(ku−t 1), ξr(kel−a1y))

+ 1 − N Uk −

:=g2(λ(k−1),ξo(ku−t 1),ξr(ke− la1y))
1 − N U (λ(k−1), ξo(ku−t 1), ξr(kel−a1y))

:=M2(k)
= ΛG ξr(kel−a1y) + bk f2(ξr(kel−a1y), ξr(kel−a1y)) + g2(λ(k−1), ξr(kel−a1y), ξr(kel−a1y)) + M2(k)

23 (21)

where x+ = max{x, 0} and x− = − min{x, 0}. A similar expression holds for the ξo(ku)t update. Since Qout(·, ·, ·) and uk are bounded quantities, and since limk→0 abkk = 0, we have:

bk

(k−1)

kl→im∞ ak βli↓m0 Λ[0,A2] ξout + β(Qout(uk, γk, wuk ) − quk)

(k−1)

o(bk )

−ξout

/β + b

=0

k

and

lim bk k→∞ ak + o(bk)
bk

Λ[0,A3 ] lim
β↓0
=0

ξr(kel−a1y) + β(1 − N uk) β

− ξr(kel−a1y)

Now, note that, the function f (λ, ξout, ξrelay) =

EW minu,γ γ + ξoutQout(u, γ, Wu) + ξrelay − λu is Lip-
schitz continuous in all arguments, and the o.d.e. λ˙ (t) = f (λ(t), ξout, ξrelay) has a unique globally asymptotically stable equilibrium λ∗(ξout, ξrelay) for any ξout ≥ 0, ξrelay ≥ 0 (see the proof of Theorem 9). The quantity λ∗(ξout, ξrelay) is Lipschitz continuous in ξout and ξrelay. Also by Lemma 5 and the projection operation in the slower timescale, the iterates are bounded almost surely.
Hence, by a similar argument as in the proof of Lemma 1, Chapter 6 of [31], and by using Theorem 6 and Theorem 9, (λ(k), ξo(ku)t, ξr(kel)ay) converges to the internally chain transitive

invariant sets of the o.d.e. λ˙ (t) = f (λ(t), ξout(t), ξrelay(t)), ξ˙out(t) = 0, ξ˙relay(t) = 0. Hence, (λ(k), ξo(ku)t, ξr(kel)ay) → {(λ∗(ξout, ξrelay), ξout, ξrelay) : (ξout, ξrelay) ∈ [0, A2] × [0, A3]} and limk→∞ |λ(k) − λ∗(ξo(ku)t, ξr(kel)ay)| = 0. Hence, the lemma is proved.
Remark: Lemma 6 tells us that the faster time-scale iterate λ(k) closely tracks λ∗(ξo(ku)t, ξr(kel)ay). But it is important to note that this lemma does not guarantee the convergence of the slower timescale iterates to a single point in the twodimensional Euclidean plane.
3) The slower timescale iteration: Let us recall the notation
∗
Qout(λ, ξout, ξrelay), U (λ, ξout, ξrelay), Qout(ξout, ξrelay)
∗
and U (ξout, ξrelay) as deﬁned in Section IV-B. Let us also recall the update equation (13) in Algorithm 8. We will analyze the slower timescale update equations as a projected stochastic approximation (see Equation 5.3.1 of [33]).
Let us denote by G the compact subset [0, A2] × [0, A3] of the Euclidean space. Clearly, the set G can be deﬁned by the following set of constraints on the variables ξout and ξrelay:
−ξout ≤ 0, ξout ≤ A2, −ξrelay ≤ 0, ξrelay ≤ A3 (22)
We rewrite the slower timescale update equations in (13) as (21). Note that, the functions f1(ξout, ξrelay), f2(ξout, ξrelay), g1(λ, ξout, ξrelay), and g2(λ, ξout, ξrelay) have been deﬁned in (21). The quantities M1(k) and M2(k) are two zero mean Martingale difference noise sequences w.r.t. Fk−1; this can be seen as follows. Since shadowing

24

is i.i.d. across links, the shadowing values encountered in the process of measurement for placing the k-th node are independent of the history of the process up to the placement of node (k − 1). Hence, EW M1(k)|Fk−1 =

EW M1(k)|(λ(k−1), ξo(ku−t 1), ξr(kel−a1y))

=

0

and

EW M2(k)|Fk−1

=

EW M2(k)|(λ(k−1), ξo(ku−t 1), ξr(kel−a1y)) = 0. The update is done as follows. We compute ξ˜(k) =
relay
ξr(kel−a1y) + bk f2(ξr(kel−a1y), ξr(kel−a1y)) + g2(λ(k−1), ξr(kel−a1y), ξr(kel−a1y)) +

M2(k) and compute ξr(kel)ay = Λ[0,A3](ξ˜r(kel)ay). We compute
ξo(ku)t in a similar fashion. Hence, projection onto the set G is nothing but coordinatewise projection.
Note that, (21) is in the same form as the standard projected stochastic approximation (Equation 5.3.1 of [33]). In order to show that the iterates in (21) converge to the right set, we will make use of Theorem 5.3.1 from [33]. To use this theorem, we need to check whether (21) satisﬁes ﬁve conditions from [33], i.e., A5.1.3, A5.1.4, A5.1.5, A5.3.1. and A5.3.2. This is done in the next subsection.

4) Checking the ﬁve conditions from [33]: Before check-

ing the ﬁve conditions, we will present a lemma that will be

useful for checking one condition.

Lemma 7: Suppose that Assumption 2 holds. Under

the decision rule given by (9), the mean power per

step Γ(λ,ξout,ξrelay) , mean number of relays per step
U (λ,ξout,ξrelay )

1

and mean outage per step Qout(λ,ξout,ξrelay)

U (λ,ξout,ξrelay )

U (λ,ξout,ξrelay )

are continuous in λ, ξout and ξrelay.

Proof: The proof is similar to that of Theorem 11.

Now, we will check that conditions A5.1.3, A5.1.4, A5.1.5,

A5.3.1. and A5.3.2 from [33] are satisﬁed.

Checking Condition A5.1.3: This condition requires that

f1(·, ·) and f2(·, ·) are continuous functions. This condition is satisﬁed as a consequence of Theorem 11.

Checking Condition A5.1.4: This condition is satisﬁed since

bk > 0, bk → 0 as k → ∞ and

∞ k=1

bk

=

∞.

Checking Condition A5.1.5: This condition requires

that limk→∞ g1(λ(k−1), ξo(ku−t 1), ξr(kel−a1y)) = 0 and

limk→∞ g2(λ(k−1), ξo(ku−t 1), ξr(kel−a1y)) = 0 almost surely,

and that the sequences g1(λ(k−1), ξo(ku−t 1), ξr(kel−a1y)) and

g2(λ(k−1), ξo(ku−t 1), ξr(kel−a1y)) are bounded almost surely.

By Lemma 5, we can ﬁnd an interval [−d, d] such that

(λ(k), ξo(ku)t, ξr(kel)ay) lies inside the compact set [−d, d] ×

[0, A2] × [0, A3] for all k ≥ 1 almost surely.

Note that, Qout(λ, ξout, ξrelay) is continuous in each argument (by Lemma 7). Hence, Qout(λ, ξout, ξrelay) is uniformly continuous over the compact set [−d, d] × [0, A2] × [0, A3] and
similarly U (λ, ξout, ξrelay) is uniformly continuous over the
compact set [−d, d] × [0, A2] × [0, A3].

Now, by Lemma 6, the Euclidean distance between

(λ(k), ξo(ku)t, ξr(kel)ay) and (λ∗(ξo(ku)t, ξr(kel)ay), ξo(ku)t, ξr(kel)ay) con-

verges to 0 almost surely as k → ∞. Hence, by uniform con-

tinuity, we conclude that limk→∞ |Qout(λ(k), ξo(ku)t, ξr(kel)ay) −

Qout(λ∗(ξo(ku)t, ξr(kel)ay), ξo(ku)t, ξr(kel)ay)|

=

0

and

limk→∞ |U (λ(k), ξo(ku)t, ξr(kel)ay)

−

U (λ∗(ξo(ku)t, ξr(kel)ay), ξo(ku)t, ξr(kel)ay)| = 0 almost surely.

Hence, limk→∞ g1(λ(k−1), ξo(ku−t 1), ξr(kel−a1y)) = 0 and

limk→∞ g2(λ(k−1), ξo(ku−t 1), ξr(kel−a1y)) = 0 almost surely.

Also, g1(λ(k), ξo(ku)t, ξr(kel)ay) and g2(λ(k), ξo(ku)t, ξr(kel)ay) are

uniformly bounded across k ≥ 1, since the outage probabilities

and placement distances are bounded quantities.

Checking Condition A5.3.1: This condition requires that

G = [0, A2] × [0, A3] is the closure of its interior, which is true in our problem. It also requires that the L.H.S. of each

constraint inequality in (22) is continuously differentiable,

which is also true in our problem.

Note that, the L.H.S. of each constraint inequality in (22)

is a function of ξout and ξrelay. Condition A5.3.1 of [33] needs that for each point on the boundary of G, the gradients

of the functions (in the L.H.S. of (22)) corresponding to the

active constraints are linearly independent. Note that on each

point of the boundary of G, at most two constraints can be

simultaneously active (see (22)). If there are exactly two active

constraints, one will be for ξout and the other one will be for ξrelay. Clearly, the gradients (with respect to the tuple (ξout, ξrelay)) of the active constraint(s) at any boundary point of G are orthogonal, and hence linearly independent.

Checking Condition A5.3.2: Let m(t) := sup{n ≥

1:

n i=1

bi

≤

t}. We have to show that, there ex-

ists a T > 0 such that for any > 0, we have

limn→∞ P supj≥n maxt≤T |

m(jT +t)−1 i=m(jT )

biM1(i)|

>

=

0 and limn→∞ P supj≥n maxt≤T |

m(jT +t)−1 i=m(jT )

biM2(i)|

>

= 0. We will prove the ﬁrst result, for any T >

0 and any > 0. Let us deﬁne the event Ej :=

{maxt≤T |

m(jT +t)−1 i=m(jT )

biM1(i)|

>

}. Hence,

lim P
n→∞

m(jT +t)−1

sup max |

biM1(i)| >

j≥n t≤T i=m(jT )

= lim P ∪j≥n Ej
n→∞

= P ∩n≥1 ∪j≥nEj

= P lim sup En
n→∞

where the second equality follows from the continuity of

probability.

E|

m(nT +T )−1 i=m(nT )

bi M1(i) |2

Now, P(En) ≤

2

(by Doob’s inequal-

ity for Martingales). Since, |M1(i)| ≤ C for some C > 0

(since outage probability and placement distance are two bounded quantities; see the expression for M1(i) in (21)) and

f1(ξo(ku−t 1), ξr(kel−a1y)) + g1(λ(k−1), ξo(ku−t 1), ξr(kel−a1y)) + M1(k)

ξo(ku)t = ΛG ξo(ku−t 1) + bkU ∗(ξo(ku−t 1), ξr(kel−a1y))

∗

U (ξo(ku−t 1), ξr(kel−a1y))

f2(ξo(ku−t 1), ξr(kel−a1y)) + g2(λ(k−1), ξo(ku−t 1), ξr(kel−a1y)) + M2(k)

ξr(kel)ay = ΛG ξr(kel−a1y) + bkU ∗(ξo(ku−t 1), ξr(kel−a1y))

∗

U (ξo(ku−t 1), ξr(kel−a1y))

25
(23)

since E(M1(i)M1(j)) = 0 for i = j, the above quantity can

C2 m(nT +T )−1 b2

be upper-bounded by P(En) ≤

i=m(nT ) 2

i . Hence,

∞ n=1 P(En) ≤ C2 ∞ i2=1 b2i < ∞. Hence, by Borel-Cantelli

lemma, P lim supn→∞ En = 0, which completes checking

Condition A5.3.2 of [33].

link, mean placement distance per link and mean outage per link respectively, under any given stationary deployment policy π. Let us deﬁne the function

G(ξout, ξrelay ) := inf Γπ + ξout( Qout,π − q) + ξrelay ( 1 − N )

π Uπ

Uπ

Uπ

(25)

5) Finishing the Proof of Theorem 12: Now, we will

invoke Theorem 5.3.1 from [33] to complete the proof.

Let us rewrite (21) as (23). Note that, A + 1 ≤ U ∗(ξo(ku−t 1), ξr(kel−a1y)) ≤ A + B. Hence, if we use step size bkU ∗(ξo(ku−t 1), ξr(kel−a1y)) and use the modiﬁed functions like

f1(ξo(ku−t 1),ξr(ke− la1y)) as in (23), the conditions checked in the
U ∗(ξo(ku−t 1),ξr(ke− la1y))

previous subsection will still hold. This is evident from the fact that, once we know ξo(ku−t 1) and ξr(kel−a1y), U ∗(ξo(ku−t 1), ξr(kel−a1y))

becomes a deterministic quantity, and that the randomness in

the computation of the new iterates ξo(ku)t and ξr(kel)ay comes

from the random shadowing in the links measured in the

process of deploying the k-th node. Hence, U∗(ξ(kM−11()k,)ξ(k−1))

out

relay

M (k)

and

∗

2 (k−1)

(k−1)

are also Martingale difference sequences.

U (ξout ,ξrelay )

It is easy to check conditions A5.1.3, A5.1.5 and A5.3.2 for

(23), and the condition in A5.1.4 is satisﬁed almost surely.

Hence, from now on, let us consider the slower timescale

iteration (23).

For the function

, f1(ξout,ξrelay )
U ∗(ξout,ξrelay )

f2(ξout,ξrelay ) U ∗(ξout,ξrelay )

h(ξout, ξrelay)

:=

= − Q∗out(ξout,ξrelay )
U ∗(ξout,ξrelay )

q, ∗ 1

− N , let us deﬁne the map:

U (ξout,ξrelay )

ΛG (h(ξout, ξrelay ))

ΛG (ξout, ξrelay ) + βh(ξout, ξrelay )) − (ξout, ξrelay )

= lim

0<β→0

β

(24)

We want to show that the iterates (ξo(ku)t, ξr(kel)ay)
will converge almost surely to the set of stationary points of the o.d.e. (ξ˙out(t), ξ˙relay(t)) =

Λ , . f1(ξout(t),ξrelay (t)) f2(ξout(t),ξrelay (t))
G U ∗(ξout(t),ξrelay (t)) U ∗(ξout(t),ξrelay (t))

This

will

follow from Theorem 5.3.1 from [33], if we can show that

− , − f1(ξout,ξrelay )
U ∗(ξout,ξrelay )

f2(ξout,ξrelay ) U ∗(ξout,ξrelay )

is the gradient of a

continuously differentiable function.

Let us denote, by Γπ, U π and Qout,π, the mean power per

Lemma 8: G(ξout, ξrelay) is continuously differentiable

and its gradient is

, . f1(ξout,ξrelay )
U ∗(ξout,ξrelay )

f2(ξout,ξrelay ) U ∗(ξout,ξrelay )

Proof: The proof of Lemma 8 will be provided later in

this section.

Now,

− , − f1(ξout,ξrelay )
U ∗(ξout,ξrelay )

f2(ξout,ξrelay ) U ∗(ξout,ξrelay )

is the gradient

of a continuously differentiable function −G(ξout, ξrelay).
Hence, by Theorem 5.3.1 from [33], the iterates (ξo(ku)t, ξr(kel)ay) will almost surely converge to the set of stationary points of the o.d.e. (ξ˙out(t), ξ˙relay(t)) =

Λ , . f1(ξout(t),ξrelay (t)) f2(ξout(t),ξrelay (t))
G U ∗(ξout(t),ξrelay (t)) U ∗(ξout(t),ξrelay (t))

Lemma 9: If (ξout, ξrelay) ∈ [0, A2] × [0, A3] is

a zero of Λ , , then f1(ξout,ξrelay) f2(ξout,ξrelay)
G U ∗(ξout,ξrelay ) U ∗(ξout,ξrelay )

(λ∗(ξout, ξrelay), ξout, ξrelay) ∈ A2 and A3 are chosen properly.

K(q, N ), provided that

Proof: The proof of Lemma 9 will be provided later
in this section. One way of choosing A2 and A3 has been
described before the proof of this lemma. We have already shown that (ξo(ku)t, ξr(kel)ay)
converges to the set of (ξout, ξrelay) pairs for which

Λ , f1(ξout,ξrelay ) f2(ξout,ξrelay )
G U ∗(ξout,ξrelay ) U ∗(ξout,ξrelay )

= (0, 0). Hence, by

Lemma 6 and Lemma 9, (λ(k), ξo(ku)t, ξr(kel)ay) → K(q, N ) almost surely, which completes the proof of Theorem 12.

Now we will prove Lemma 8 and Lemma 9. Before we prove Lemma 9, we will explain how A2 and A3 have to be chosen.

Proof of Lemma 8 Suppose that, for a given (ξout, ξrelay),

the partial derivative ∂∂ξoGut exists. We will ﬁrst show

that this partial derivative is equal to

f1(ξout,ξrelay )
∗

=

U (ξout,ξrelay )

Q∗out(ξout,ξrelay )
∗

−q.

Note

that,

the

right

partial

derivative

w.r.t.

U (ξout,ξrelay )

ξout (if it exists) is:

∂G = lim G(ξout + ∆, ξrelay) − G(ξout, ξrelay)

∂ξout+ 0<∆→0

∆

26

Now, the optimal policy π∗(ξout, ξrelay) for the unconstrained problem in (3) will also minimize the expression for G(ξout, ξrelay) in (25). But, the policy π∗(ξout, ξrelay) will be suboptimal for the pair (ξout + ∆, ξrelay). Hence, we have:

G(ξout + ∆, ξrelay )

= inf Γπ + (ξout + ∆)( Qout,π − q) + ξrelay( 1 − N )

π Uπ

Uπ

Uπ

Γ∗(ξout, ξrelay )

Q∗(ξout, ξrelay )

≤

∗

+ (ξout + ∆)( ∗

− q)

U (ξout, ξrelay )

U (ξout, ξrelay )

1

+ξrelay ( ∗

− N)

U (ξout, ξrelay )

Q∗out(ξout, ξrelay )

= G(ξout, ξrelay ) + ∆

∗

−q

U (ξout, ξrelay )

which implies that,

∂G ≤
∂ξout+

∗
Qo∗ut(ξout, ξrelay) − q U (ξout, ξrelay)

In a similar manner, by using the fact that π∗(ξout, ξrelay) is suboptimal for the pair (ξout − ∆, ξrelay), we can claim that

∂G ≥
∂ξout−

∗
Qo∗ut(ξout, ξrelay) − q U (ξout, ξrelay)

Since we have assumed that ∂∂ξoGut exists, we must have

∂ξ∂ouGt+ = ∂ξ∂ouGt− , which proves that the partial derivative w.r.t.

ξout

will

be

equal

to

( Q∗out(ξout,ξrelay ) ∗

− q).

U (ξout,ξrelay )

We now turn to the existence of ∂∂ξoGut . Note that, since G(ξout, ξrelay) is the minimum of a family of afﬁne functions

of ξout and ξrelay, G(ξout, ξrelay) is concave and hence

coordinatewise concave. Hence, for any given ξrelay, there

are only at most countably many values of ξout where
∂∂ξoGut does not exist. To see this, let us deﬁne the function H(ξout, ξrelay) to be the supremum of the subgradients of

G(ξout, ξrelay) with respect to ξout (keeping ξrelay ﬁxed),

at a point (ξout, ξrelay). Since G(ξout, ξrelay) is concave,

H(ξout, ξrelay) will be decreasing in ξout. But any monotone

real-valued function has an at most countable number of

discontinuities (see [34], Theorem 4.30). Hence, for a given

ξrelay, the function H(ξout, ξrelay) is discontinuous for an at

most countable number of values of ξout, and consequently ∂∂ξoGut exists everywhere except for an at most countable set of values of ξout.

For a given ξrelay, let ξout be one such value where ∂∂ξoGut

does not exist. Then, there exists a sequence {ζn}n≥1 ↓ 0

such that ∂∂ξoGut exists at each ξout = ξout + ζn. This follows from the fact that for any ζ > 0, we can ﬁnd one ξout ∈

(ξout, ξout + ζ) where ∂∂ξoGut exists, otherwise the number of points where ∂∂ξoGut does not exist will become uncountable. Similarly, there exists a sequence {κn}n≥1 ↓ 0 such that ∂∂ξoGut

exists at each ξout = ξout − κn.

Note that, by concavity,

| ≥ | ∂G
∂ξout− ξout

∂G ∂ξout+ ξout

limn→∞ ∂∂ξoGut |ξout−κn ≥ ≥ limn→∞ ∂∂ξoGut |ξout+ζn .

The last term in this chain of inequalities is equal to

limn

→∞

(

Q∗out
∗

(ξ

out

+ζ

n

,ξ

r

elay

)

− q)

=

( Q∗out(ξout,ξrelay ) ∗

− q)

U (ξout+ζn,ξrelay )

U (ξout,ξrelay )

by the arguments in the beginning of this proof and by the

continuity results in Theorem 11. Same arguments hold for the

ﬁrst term in the chain of inequalities. Hence, ∂ξ∂ouGt− |ξout =

∂G |ξ

= ∂G |ξ

=

( Q∗out(ξout,ξrelay ) ∗

−

q).

∂ξout+ out

∂ξout out

U (ξout,ξrelay )

In a similar way, we can show that ∂ξ∂reGlay =

(∗ 1

− N ).

U (ξout,ξrelay )

Now we see that both of the partial derivatives of G exist

at all points and the partial derivatives are continuous in both

ξout and ξrelay (by Theorem 11). Hence, by Theorem 12.11

of [35], G(·, ·) is differentiable. Hence, the lemma is proved.

Choice of A2 and A3: Let us consider the scenario

where

Λ , f1(ξout,ξrelay ) f2(ξout,ξrelay )
G U ∗(ξout,ξrelay ) U ∗(ξout,ξrelay )

has a zero

(ξout, ξrelay) (on the boundary of G) such that (λ∗(ξout, ξrelay), ξout, ξrelay) ∈ K(q, N ). In this case, if (λ(k), ξo(ku)t, ξr(kel)ay) → (λ∗(ξout, ξrelay), ξout, ξrelay)
(depending on the sample path of the iterates in

the OptExploreLimAdaptiveLearning algorithm), then

we cannot expect the desired performance from the

OptExploreLimAdaptiveLearning algorithm. To alleviate this

problem, we need to choose A2 and A3 in a proper way. One method of choosing A2 and A3 is given below.

We will ﬁrst explain how A2 has to be chosen. Note that, for any given link of length u and shadowing realization

w, argminγ∈S (γ + ξoutQout(u, γ, w)) = PM if we choose ξout sufﬁciently large. We use this fact in the choice of
A2. The number A2 has to be chosen so large that under
ξout = A2 and for all A + 1 ≤ u ≤ A + B, we will have
P(argminγ∈S (γ + A2Qout(u, γ, W )) = PM ) > 1 − κ for some small enough κ > 0. Such a choice of A2 ensures that (i) the mean power per link (under policy π∗(A2, ξrelay)),
∗
Γ (A2, ξrelay) ≥ (1 − κ)PM + κP1 (which is close enough to PM ), which, further, ensures that (ii) Γ∗(A2,ξrelay) is
1/N
greater than or equal to the optimal mean power per step

for problem (4). The second claim is easy to see, since

∗
Γ (A2, ξrelay)

≥

(1 − κ)PM + κP1

≥

Γ∗(ξo∗ut, ξr∗elay),

and

since

U ∗(ξ∗ , ξ∗ )
out relay

≥

1

(recall Assumption 1 about

∗ and ξ∗ N ). Note that, the choice of

the existence of ξout

relay

κ depends on (q, N ) and the radio propagation parameters,

and, hence, must be made carefully so that the condition is

satisﬁed. In the proof of Lemma 9, we will see that this

condition ensures that for any stationary point of the form

ξout

= A2, ξrelay

∈ (0, A3),

we

have

Q∗out(A2,ξrelay )
∗

=q

and

U (A2,ξrelay )

U∗(A21,ξrelay) = N , and, consequently, the point (A2, ξrelay)

will be in K(q, N ).

The choice of A2 must satisfy another condition. We need

to

choose

A2

so

large

that

Q∗out (A2 ,0)
∗

≤

q.

Note

that,

if

(q, N )

U (A2,0)

is a feasible constraint pair, then a constraint q on the mean

outage per step alone (if we drop the constraint on the relay

placement rate) is also feasible. Let us consider the problem of

minimizing the mean power per step subject to a constraint q

27

on the mean outage per step. Then, we will choose ξrelay = 0. The mean outage per step under policy π∗(ξout, 0) will still
decrease as ξout increases (by Theorem 5). Hence, we can
choose an A2 which satisﬁes this condition. This condition
will be used in showing that if (A2, 0) is a stationary point of the o.d.e., then (λ∗(A2, 0), A2, 0) ∈ K(q, N ).

A2 has to be chosen (according to the two criteria mentioned

above) via prior computation, using the prior knowledge of the

propagation environment; if we know the range of values of

radio propagation parameters (e.g., η and σ), we can compute

what value of A2 will satisfy the criteria under all possible

radio propagation parameters.

Once A2 is chosen, we need to choose A3. The number

A3 has to be chosen so large that for any ξout ∈ [0, A2], we

∗
will have U (ξout, A3) >

1

(provided that

1

< A + B).

N

N

This is possible and obvious from the structure of OptEx-

ploreLim (Algorithm 3); by choosing ξrelay large enough, we can achieve a mean placement distance equal to (A + B),

provided that ξout ∈ [0, A2]. For example, if we choose A3 = 100(A + B)(PM + A2), then:

λ∗(ξout, A3)

∗

∗

= Γ (ξout, A3) + ξ∗outQout(ξout, A3) + A3

U (ξout, A3)

≥ A3 = 100(PM + A2) A+B

and π∗(ξout, A3) will always place at a distance of (A + B). This choice of A3 ensures that the policy π∗(ξout, A3) satisﬁes
the constraint on the relay placement rate with strict inequality,

and hence no point of the form (ξout, A3) is a stationary point of the o.d.e.

The numbers A2 and A3 have to be chosen so large that
there exists at least one (ξout, ξrelay) ∈ [0, A2] × [0, A3] such that (λ∗(ξout, ξrelay), ξout, ξrelay) ∈ K(q, N ).
Proof of Lemma 9: Suppose that (ξout, ξrelay) ∈ [0, A2] ×

[0, A3] is a zero of ΛG

f1(ξout,ξrelay )
∗

,

f2(ξout,ξrelay )
∗

.

U (ξout,ξrelay ) U (ξout,ξrelay )

Note that, ΛG

, f1(ξout,ξrelay )
U ∗(ξout,ξrelay )

f2(ξout,ξrelay ) U ∗(ξout,ξrelay )

is equal

to ( , f1(ξout,ξrelay )
U ∗(ξout,ξrelay )

f2(ξout,ξrelay ) U ∗(ξout,ξrelay )

if (ξout, ξrelay) lies in

the interior of [0, A2] × [0, A3]. Thus, for any stationary
point (ξout, ξrelay) ∈ (0, A2) × (0, A3), the optimal policy π∗(ξout, ξrelay) meets both constraints in (4) with R.H.S.=0. For such a stationary point, (λ∗(ξout, ξrelay), ξout, ξrelay) ∈
K(q, N ) (by Theorem 1).

A point (ξout, ξrelay) on the boundary has ξout = 0 or ξout = A2 or ξrelay = 0 or ξrelay = A3.

Let us recall Assumption 1 and the deﬁnition of

Λ , f1(ξout,ξrelay ) f2(ξout,ξrelay )
G U ∗(ξout,ξrelay ) U ∗(ξout,ξrelay )

(equation (24)). The ﬁrst

component of this vector-valued function at ξout = 0 is equal

to

f1(0,ξrelay )
∗

if f1(0, ξrelay) ≥ 0, and 0 otherwise. We can

U (0,ξrelay )

make similar observations at ξout = A2, ξrelay = 0 and

ξrelay = A3.

If ξrelay = A3, then by the choice of A3 as suggested in

the OptExploreLimAdaptiveLearning algorithm (Algorithm 8),

∗
we will have f2(ξout, A3) < 0 (since U (ξout, A3) >

1 ).

N

This implies that no point on ξrelay = A3 can be a zero

of ΛG

, f1(ξout,ξrelay )
U ∗(ξout,ξrelay )

f2(ξout,ξrelay ) U ∗(ξout,ξrelay )

, since the second com-

ponent of this function will be

f2 (ξout ,A3 )
∗

which is strictly

U (ξout,A3)

negative.

Suppose that that there is a zero of

Λ , f1(ξout,ξrelay ) f2(ξout,ξrelay )
G U ∗(ξout,ξrelay ) U ∗(ξout,ξrelay )

of

the

form ξout = A2, ξrelay ∈ (0, A3). Then

Λ , f1(ξout,ξrelay ) f2(ξout,ξrelay )
G U ∗(ξout,ξrelay ) U ∗(ξout,ξrelay )

will be zero if and

only if f1(A2, ξrelay) ≥ 0 and f2(A2, ξrelay) = 0.

If f1(A2, ξrelay) = 0 and f2(A2, ξrelay) = 0, then (λ∗(A2, ξrelay), A2, ξrelay) will belong to K(q, N ) (by

Theorem 1), since the corresponding optimal policy

π∗(A2, ξrelay) will satisfy both constraints in (4) with

equality. Now, we will show that, if A2 is chosen

appropriately as explained before, the case f1(A2, ξrelay) > 0

and f2(A2, ξrelay) = 0 will never arise. Suppose

that f1(A2, ξrelay) > 0 and f2(A2, ξrelay) = 0 for

some ξrelay ∈ (0, A3). Consider a new problem of

minimizing the mean outage per step, subject to a constraint

Γ∗(A2,ξrelay )
∗

on the mean power per step and a constraint

U (A2,ξrelay )

1
∗

= N on the mean number of relays per

U (A2,ξrelay )

step. By Theorem 1, π∗(A2, ξrelay) is the optimal policy

for this new problem, since it satisﬁes both constraints

with equality. But the policy π∗(ξo∗ut, ξr∗elay) has the

following properties: (i) ∗ 1

=N ≥ ∗ 1

U (A2,ξrelay )

U (ξo∗ut,ξr∗elay )

(see Assumption 1 in Section VII), i.e., π∗(ξo∗ut, ξr∗elay)

has a smaller relay placement rate compared to

π∗(A2, ξrelay) (since π∗(ξo∗ut, ξr∗elay) satisﬁes the

constraint N on the mean number of relays per step),

(ii) Γ∗(A2,ξrelay ) ≥ (1−κ)PM +κP1 ≥ , Γ∗(ξo∗ut,ξr∗elay )

U ∗(A2,ξrelay )

1 N

U ∗(ξo∗ut,ξr∗elay )

i.e., π∗(ξo∗ut, ξr∗elay) has a smaller mean power per step

compared to π∗(A2, ξrelay) (by the choice of A2, see

the previous discussion on the choice of A2), and (iii)

Q∗out(A2,ξrelay) > q ≥ , Q∗out(ξo∗ut,ξr∗elay) i.e., π∗(ξ∗ , ξ∗ )

U ∗(A2,ξrelay )

U ∗(ξo∗ut,ξr∗elay )

out relay

has a strictly smaller mean outage per step compared to

π∗(A2, ξrelay) (since π∗(ξo∗ut, ξr∗elay) satisﬁes the constraint

q on the mean outage per step and since f1(A2, ξrelay) > 0.

This leads to a contradiction since it violates the optimality

of the policy π∗(A2, ξrelay) for the new problem. Hence,

Λ , f1(ξout,ξrelay ) f2(ξout,ξrelay )
G U ∗(ξout,ξrelay ) U ∗(ξout,ξrelay )

cannot have a zero of the

form ξout = A2, ξrelay ∈ (0, A3) such that f1(A2, ξrelay) > 0 and f2(A2, ξrelay) = 0.

Now consider any stationary point of the form ξout ∈ (0, A2), ξrelay = 0. Then we must have f1(ξout, 0) = 0 and f2(ξout, 0) ≤ 0. Now, consider a new problem of minimizing the mean power per step subject to a constraint q on the mean

outage per step (with no constraint on the relay placement rate); an optimal policy for this problem is π∗(ξout, 0) (by Theorem 1, since π∗(ξout, 0) satisﬁes the outage constraint
with equality). Since (4) has one more constraint, it will have

28

a larger mean power per step, i.e., Γ∗(ξout,0) ≤ Γ∗(ξo∗ut,ξr∗elay)

U ∗(ξout,0)

U ∗(ξo∗ut,ξr∗elay )

(recall Assumption 1 about the existence of ξo∗ut and ξr∗elay).

If they are equal, then (ξout, 0) will be an optimal pair for (4)

and (λ∗(ξout, 0), ξout, 0) will be in K(q, N ). If

Γ∗ (ξout ,0)
∗

<

U (ξout,0)

, Γ∗(ξo∗ut,ξr∗elay) then the optimality of π∗(ξ∗ , ξ∗ ) for the

U ∗(ξ∗ ,ξ∗ )

out relay

out relay

problem (4) will be violated, since π∗(A2, 0) will produce a

strictly smaller mean power per step while meeting the outage

constraint with equality (since f1(ξout, 0) = 0) and the relay placement rate constraint (since f2(ξout, 0) ≤ 0).

We can take care of stationary points of the form ξrelay ∈
(0, A3), ξout = 0 in a similar way. If (0, 0) is a stationary point, then π∗(0, 0) satisﬁes both
constraints. Also, π∗(0, 0) places at distance (A + B) steps and uses the minimum power level for all links. Then π∗(0, 0)

is optimal for our original problem (3).

At (A2, 0), we will have a stationary point if and only if f1(A2, 0) ≥ 0 and f2(A2, 0) ≤ 0. If f1(A2, 0) ≥ 0 and f2(A2, 0) = 0, then we can make similar claims as in the ξout = A2 and ξrelay ∈ (0, A3) case. If f1(A2, 0) = 0 and f2(A2, 0) < 0, then we can make similar claims as in the ξout ∈ (0, A2) and ξrelay = 0 case. By the choice of A2, π∗(A2, 0) satisﬁes the outage constraint q. Hence, the case f1(A2, 0) > 0 will not arise.

Hence, the lemma is proved.

D. Proof of Theorem 13

We will only prove that lim supx→∞ Eπoelal x N i=x1 Γi ≤ γ∗ almost surely.

Let us denote the shadowing random variable in the link

between the potential locations located at distances iδ and jδ

from the sink node by Wi,j. The sample space Ω associated with the deployment process is the collection of all ω (each

ω corresponds to a ﬁxed realization {wi,j : i ≥ 0, j ≥ 0, i > j, A + 1 ≤ i − j ≤ A + B} of all possible

shadowing random variables that might be encountered in the

measurement process for deployment up to inﬁnity). Let F be

the Borel σ-algebra on Ω. Let Sk =

k i=1

Ui

be

the

distance

(in steps) of the k-th relay from the sink (S0 := 0), and

Fk := σ (λ(0), ξo(0u)t, ξr(0e)lay); Wi,j : i ≥ 0, j ≥ 0, i > j, A +

1 ≤ i−j ≤ A+B, i ≤ Sk−1+A+B, j ≤ Sk−1+A+B . The

sequence of σ-algebras Fk is increasing in k, and Fk captures the history of the deployment process up to the deployment

of the k-th relay.

Let us ﬁx an > 0.

Let us recall (from Section VII-B) the deﬁnition of the set Kˆ(q, N ) := K(q, N )∩([0, (PM +A2+A3)]×[0, A2]×[0, A3]).

Now, by Lemma 7 (see Appendix E, Section C4),

the quantities Γ(λ, ξout, ξrelay), Qout(λ, ξout, ξrelay) and

U (λ, ξout, ξrelay) (recall the notation from Section IV-B)

are continuous in (λ, ξout, ξrelay). Hence, the ratios

, Γ(λ,ξout,ξrelay )
U (λ,ξout,ξrelay )
are uniformly

Qout(λ,ξout,ξrelay )
U (λ,ξout,ξrelay )
continuous over

and the

1
U (λ,ξout,ξrelay )
compact set

[0, 2(PM + A2 + A3)] × [0, A2] × [0, A3]. Hence, for

any given > 0, we can ﬁnd a δ > 0 such that if
(λ, ξout, ξrelay) belongs to a δ -neighbourhood of Kˆ(q, N ), then (λ, ξout, ξrelay) also belongs to the set Kˆ (q, N ) where:

Kˆ (q, N ) = (λ, ξout, ξrelay) :
Γ(λ, ξout, ξrelay) ∈ [γ∗ − , γ∗ + ] U (λ, ξout, ξrelay ) Qout(λ, ξout, ξrelay ) ≤ q + ,
U (λ, ξout, ξrelay ) 1 ≤N+ ,
U (λ, ξout, ξrelay ) 0 ≤ λ ≤ 2(PM + A2 + A3),
0 ≤ ξout ≤ A2, 0 ≤ ξrelay ≤ A3

But, by Theorem 12, (λ(k), ξo(ku)t, ξr(kel)ay) → Kˆ(q, N ) almost surely. Hence, there exists an integer-valued random variable T such that (i) (λ(k), ξo(ku)t, ξr(kel)ay) belongs to a δ neighbourhood of Kˆ(q, N ) for all k ≥ T , and (ii) P(T < ∞) = 1.
In other words, for a sample path ω (for ω lying in a
set of probability 1), there exists T (ω) < ∞ such that (λ(k), ξo(ku)t, ξr(kel)ay) belongs to a δ neighbourhood of Kˆ(q, N ) for all k ≥ T (ω). Hence, for a sample path ω (for ω lying
in a set of probability 1), there exists T (ω) < ∞ such that (λ(k), ξo(ku)t, ξr(kel)ay) ∈ Kˆ (q, N ) for all k ≥ T (ω).
Using the boundedness of Γi in the ﬁrst equality, we obtain:

lim sup Eπoelal

Nx i=1

Γi

x→∞

x

= lim sup Eπoelal

Nx +1 i=1

Γi

x→∞

x

Eπoelal I(T < Nx + 1)

T i=1

Γi

≤ lim sup

x→∞

x

Eπoelal
+ lim sup
x→∞

I(T < Nx + 1) x

Nx +1 i=T +1

Γi

Eπoelal I(T ≥ Nx + 1)

Nx +1 i=1

Γi

+ lim sup

x→∞

x

I(T < Nx + 1)

T i=1

Γi

≤ Eπoelal lim sup

x→∞

x

Eπoelal
+ lim sup
x→∞

I(T < Nx + 1) x

I(T ≥ Nx + 1) +Eπoelal lixm→s∞up x

Nx +1 i=T +1

Γi

Nx +1 i=1

Γi

Eπoelal I(T < Nx + 1)

Nx +1 i=T +1

Γi

= lim sup

x→∞

x

Eπoelal I(T < Nx + 1)

Nx +1 i=T +1

Γi

= lim sup
x→∞

Eπoelal

Nx +1 i=T +1

Ui

×Eπoelal

Nx +1 i=T +1

Ui

x

(26)

Here the second inequality follows from Fatou’s

29

lemma. The second equality follows from the

facts that 0 ≤

lim supx→∞

T i=1

Γi

x

surely and 0 ≤

PM A+1

lim

supx→∞

I(T

lim supx→∞ Ti=1 ΓiI(xT <Nx+1) ≤

≤

lim supx→∞

PM T x

= 0 almost

lim supx→∞ N i=x1+1 ΓiIx(T ≥Nx+1) ≤

≥ Nx + 1) = 0 almost surely

(since P(T < ∞) = 1 and limx→∞ Nx = ∞ almost surely).

Now,

lim sup Eπoelal
x→∞

Nx +1 i=T +1

Ui

x

Nx +1 i=1

Ui

≤ lim sup Eπoelal

x→∞

x

≤ Eπoelal lim sup
x→∞

Nx +1 i=1

Ui

x

=1

Here the second inequality follows from Fatou’s lemma, and the equality follows from the fact that limx→∞ N i=x1x+1 Ui = 1 almost surely.
Hence, from (26),

lim sup Eπoelal

Nx i=1

Γi

x→∞

x

Eπoelal I(T < Nx + 1)

Nx +1 i=T +1

Γi

≤ lim sup
x→∞

Eπoelal

Nx +1 i=T +1

Ui

Eπoelal

Nx +1 i=T +1

Γi

= lim sup

x→∞ Eπoelal

Nx +1 i=T +1

Ui

(27)

Let us denote by Eπoelal,t(·) the conditional expectation under policy πoelal given that T = t. Now,

Nx +1

Eπoelal

Γi

i=T +1

∞

= Eπoelal

ΓiI(i ≤ Nx + 1)

i=T +1

∞

=

Pπoelal (T = t)

t=1

∞

×Eπoelal

ΓiI(i ≤ Nx + 1) T = t

i=t+1

∞

=

Pπoelal (T = t)

t=1

∞

×Eπoelal

ΓiI(Nx ≥ i − 1) T = t

i=t+1

∞

∞

=

Pπoelal (T = t)Eπoelal,t

ΓiI(Nx ≥ i − 1)

t=1

i=t+1

∞

∞

=

Pπoelal (T = t)

Eπoelal,t ΓiI(Nx ≥ i − 1)

t=1

i=t+1

∞

=

Pπoelal (T = t)

t=1

∞

×

Eπoelal,t Eπoelal,t ΓiI(Nx ≥ i − 1) Fi−1

i=t+1

∞

=

Pπoelal (T = t)

t=1

∞

×

Eπoelal,t I(Nx ≥ i − 1)Eπoelal,t Γi Fi−1

i=t+1

∞
≤ (γ∗ + ) Pπoelal (T = t) ×

t=1

∞

Eπoelal,t I(Nx ≥ i − 1)Eπoelal,t Ui Fi−1

i=t+1

(28)

where the ﬁfth equality follows from the Monotone Con-

vergence Theorem, and the last equality follows from the fact

that the random variable I(Nx ≥ i − 1) = I(

i−1 k=1

Uk

≤

x)

is

measurable with respect to Fi−1. The last inequality follows

Eπoelal,t Γi Fi−1
from that fact that

≤ γ∗ + almost surely

Eπoelal,t Ui Fi−1

for i > t, given that T = t (since (λ(i−1), ξo(iu−t 1), ξr(ie−la1y)) ∈ Kˆ (q, N ) for all i − 1 ≥ T ).

On the other hand, we can show that:

Nx +1

Eπoelal

Ui

i=T +1

∞

=

Pπoelal (T = t) ×

t=1

∞

Eπoelal,t I(Nx ≥ i − 1)Eπoelal,t Ui Fi−1

i=t+1

(29)

From (27), (28) and lim supx→∞ Eπoelal x N i=x1 Γi ≤

(29), γ∗ +

arbitrary,

we

have

lim supx→∞

Eπoelal x

is the optimal mean power per step for lim supx→∞ Eπoelal x N i=x1 Γi = γ∗.

In a similar manner, we

lim supx→∞ Eπoelal

N i=x1 Q(oiu,it−1) x

lim supx→∞

Eπoelal Nx x

≤ N.

we obtain that

. Since > 0 is

Nx i=1

Γi

≤ γ∗.

But

γ∗

problem (4). Hence,

can show that

≤

q and

