Conﬂuent Vessel Trees with Accurate Bifurcations
Zhongwen Zhang1 Dmitrii Marin1,2 Maria Drangova3 Yuri Boykov1,2
1University of Waterloo, Canada 2Vector Research Institute, Canada 3Robarts Research, Canada

arXiv:2103.14268v1 [cs.CV] 26 Mar 2021

Abstract
We are interested in unsupervised reconstruction of complex near-capillary vasculature with thousands of bifurcations where supervision and learning are infeasible. Unsupervised methods can use many structural constraints, e.g. topology, geometry, physics. Common techniques use variants of MST on geodesic tubular graphs minimizing symmetric pairwise costs, i.e. distances. We show limitations of such standard undirected tubular graphs producing typical errors at bifurcations where ﬂow “directedness” is critical. We introduce a new general concept of conﬂuence for continuous oriented curves forming vessel trees and show how to enforce it on discrete tubular graphs. While conﬂuence is a high-order property, we present an eﬃcient practical algorithm for reconstructing conﬂuent vessel trees using minimum arborescence on a directed graph enforcing conﬂuence via simple ﬂow-extrapolating arc construction. Empirical tests on large near-capillary sub-voxel vasculature volumes demonstrate signiﬁcantly improved reconstruction accuracy at bifurcations. Our code has also been made publicly available 1.
1. Introduction
This paper is focused on unsupervised vessel tree estimation in large volumes containing numerous nearcapillary vessels and thousands of bifurcations, see Figs. 1, 10. Around 80% of the vessels in such data have sub-voxel diameter resulting in partial volume eﬀects such as contrast loss and gaps. Besides the topological accuracy of trees reconstructed from such challenging imagery, we are particularly interested in the accurate estimation of bifurcations due to their importance in biomedical and pharmaceutical research.
1.1. Unsupervised vasculature estimation methods
Unsupervised vessel tree estimation methods for complex high-resolution volumetric vasculature data
1https://vision.cs.uwaterloo.ca/code.

(a) synthetic raw data with (b) geodesic graph two trees (blue & green) MST [13, 32, 28,
23]

(c) conﬂuent tree reconstruction

Figure 1: Synthetic example: (a) raw 3D data with blue & green reconstructed trees, see also zoom-ins (b,c). The blue tree (a,b) is an MST on a geodesic tubular graph. The green tree (a,c), is a minimum arborescence on a directed conﬂuent tubular graph, see Sec. 3.

combine low-level vessel ﬁltering and algorithms for computing global tree structures based on constraints from anatomy, geometry, physics, etc. Below we review the most relevant standard methodologies.
Low-level vessel estimation: Anisotropy of tubular structures is exploited by standard vessel ﬁltering techniques, e.g. Frangi et al. [9]. Combined with nonmaximum suppression, local tubularity ﬁlters provide estimates for vessel centerline points and tangents, see Fig. 2(a). Technically, elongated structures can be detected using intensity Hessian spectrum [9], optimally oriented ﬂux models [18, 28], steerable ﬁlters [10], path operators [22] or other anisotropic models. Dense local vessel detections can be denoised using curvature regularization [24, 20]. Prior knowledge about divergence or convergence of the vessel tree (arteries vs veins) can also be exploited to estimate an oriented ﬂow pattern [34], see Fig. 2(b).
Thinning: One standard approach to vessel topology estimation is via medial axis [26]. This assumes known vessel segmentation (volumetric mask) [21], which can be computed only for relatively thick vessels. Well-formulated segmentation of thin structures requires Gaussian- or min-curvature surface regularization that has no known practical algorithms. Segmen-

(a) Frangi ﬁltering [9]

(b) oriented ﬂow pattern [34]

Figure 2: Low-level vessel estimation: True centerline is black. Blue voxels in (a) are local maxima of some tubularity measure [9, 18, 28, 10] in the direction orthogonal to the estimated centerline tangents (red). Regularization [24, 20] can estimate subpixel centerline points (b) and oriented tangents [34] (red ﬂow ﬁeld).

(a) geodesic tubular graph

(b) MST

Figure 3: Global vessel tree reconstruction: (a) geodesic tubular graph is based on low-level estimates in Fig. 2. Graph edges represent distances, geodesics, or other symmetric (undirected) properties. MST reconstruction quality (b) depends on the graph construction (nodes, neighborhoods, edge weights).

tation is particularly unrealistic for sub-voxel vessels.
Geodesics and shortest paths: Geodesics [5, 2] and shortest paths [7] are often used for AB-interactive reconstruction of vessels between two speciﬁed points. A vessel is represented by the shortest path with respect to some anisotropic continuous (Riemannian) or discrete (graph) metric based on a local tubularity measure. Interestingly, the minimum path in an “elevated” search space combining spatial locations and radii can simultaneously estimate the vessel’s centerline and diameter, implicitly representing vessel segmentation [19, 1]. Unsupervised methods widely use geodesics as their building blocks.
Spanning trees: The standard graph concept of a minimum spanning tree (MST) is well suited for unsupervised reconstruction of large trees with unknown complex topology [13, 32, 28, 23]. MST is closely related to the shortest paths and geodesics since its optimality is deﬁned with respect to its length. Like shortest paths, globally optimal MST can be computed very eﬃciently. In contrast to the shortest paths, MST can reconstruct arbitrarily complex trees without user interaction.
The quality of MST vessel tree reconstruction depends on the underlying graph construction, see Figs. 3 and 13(a). Graphs designed for reconstructing thin tubular structures as their spanning tree (or sub-tree) are often called tubular graphs. Typically, the nodes are “anchor” points generated by low-level vessel estimators, e.g. see Fig. 2. Such anchors represent sparse [29] or semi-dense [20] samples from the estimated tree structure that may be corrupted by noise and outliers. Pairwise edges on a tubular graph typically represent distances or geodesics between the nodes, as in AB-

interactive methods discussed earlier. Such graphs are called geodesic tubular graphs, see Fig. 4.
There are numerous variants of tubular graph constructions designed to represent various thin structures as MST [13, 32, 28, 23] or shortest path trees [25]. There are also interesting and useful extensions of MST addressing tubular graph outliers, e.g. k-MST [30] and integer programming technique in [29]. Such approaches are more powerful as they seek minimum subtrees that can automatically exclude outliers. However, the corresponding optimization problems are NP-hard and require approximations. Such methods are expensive compared to the low-order polynomial complexity of MST. They are not practical for dense reconstruction problems in high-resolution vasculature volumes.
1.2. Motivation and contributions
We are interested in unsupervised reconstruction of large complex trees from vasculature volumes resolving near-capillary details. Common geodesic approaches can not represent asymmetric smoothness at bifurcations, which have forms sensitive to ﬂow orientation. Hence, standard methods produce vessel tree reconstructions with signiﬁcant bifurcation artifacts, see Figs. 1(b), 3(b) and 13(a). We deﬁne a general geometric property for oriented vessels, conﬂuence, which is missing in prior art, and propose a practical graphbased reconstruction method enforcing it. The reconstructed conﬂuent vessel trees have signiﬁcantly better bifurcation accuracy. Our contributions are detailed below.
• We introduce conﬂuence as a geometric property for overlapping oriented smooth curves in R3, e.g.

image from [30]
(a) sparse graph

k=2

k=3

k=6

(b) semi-dense geodesic tubular graphs with diﬀerent size NN systems

Figure 4: Examples of standard geodesic tubular graphs for vascular image data: A graph from [30] in (a) uses (purple) nodes connected by undirected edges corresponding to shortest paths (geodesics) w.r.t. tubularity-based Riemanninian metric. Alternatively, (b) shows graphs where (blue) nodes correspond to densely-sampled voxels along the vessels [34]. Here the edges correspond to nearest neighbors (KNN) weighted by length of some spline interpolation. In both cases (a) and (b), near- or sub-voxel vessels have sparsely sampled bifurcations.

representing blood-ﬂow trajectories2. It is like “codiﬀerentiability” or “co-continuity”. We deﬁne conﬂuent vessel trees formed by overlapping oriented curves.
• We extend conﬂuence to discrete paths and trees on directed tubular graphs where directed arcs/edges represent continuous oriented arcs/curves in R3. We propose a simple ﬂow-extrapolating circular arc construction that guarantees ε-conﬂuence, which approximates conﬂuence. Our conﬂuence constraint implies directed tubular graph with asymmetric edge weights, which is in contrast to standard undirected geodesic tubular graphs [16, 13, 32, 28, 23, 30, 20, 29, 34].
• We present an eﬃcient practical algorithm for reconstructing conﬂuent vessel trees. It uses minimum arborescence [6, 27] on our directed conﬂuent tubular graph construction.
• Our experiments on synthetic and real data conﬁrm that conﬂuent tree reconstruction signiﬁcantly improves bifurcation accuracy. We demonstrate qualitative and quantitative improvements via standard and new accuracy measures 3 evaluating tree structure, bifurcation localization, and bifurcation angles.
Our concept of conﬂuent trees is general and our speciﬁc algorithm can be modiﬁed or extended in many ways, some of which are discussed in Sec. 3. To explicitly address outliers, minimum arborescence on our conﬂuent tubular graph can be replaced by optimal sub-tree algorithms [30, 29]4 or explicit outlier de-
2Conﬂuence is known in other contexts, e.g. rail tracks [15]. 3For our dataset and implementation of evaluation metrics discussed in this paper see https://vision.cs.uwaterloo.ca/data. 4IP solver in [29] uses minimum arborescence as a subroutine.

β p
α (a) conﬂuence at point p

β
α (b) conﬂuent curves

Figure 5: Conﬂuence for oriented curves α and β.

tection [20], but these approximation algorithms address NP-hard problems and maybe too expensive for large semi-dense tubular graphs we study in this work. While outlier detection is relevant, this work is not focused on this problem.
2. Conﬂuence of Oriented Curves
This section introduces geometrically-motivated concept of smoothness for objects containing multiple oriented curves, such as vessel trees. We deﬁne conﬂuence as follows.
Definition 1 (conﬂuence at a point). Two diﬀerentiable oriented curves α(t) and β(τ ) are called conﬂuent at a shared point p if for some k > 0
α (tp) = k β (τp) where
tp and τp are s.t. α(tp) = β(τp) = p, see Fig. 5(a).
We will call two oriented curves conﬂuent if they are conﬂuent at all points they share, see Fig. 5(b).
Our concept of conﬂuence is closely related to the geometric G1-continuity [4, 8]. A curve α is called G1-

(a) ∠(c˘p1q, c˘q0∗) ≤ ε short conﬂuent arc c˘pq

(b) ∠(c˘q1p, c˘p0∗) ≤ ε long conﬂuent arc c˘qp

(c) ∠(c˘q1p, c˘p0∗) ≤ ε non-conﬂuent arc c˘qp

Figure 6: Examples of directed ﬂow-extrapolating circular arcs: (a) ﬂow c˘p1q extrapolated by conﬂuent arc c˘pq from p to q is consistent with the local ﬂow estimate ¯lq = c˘q0∗ at point q as the angle between two vectors is small. Flow extrapolation from q to p in (b) requires another circular arc c˘qp that belongs to a diﬀerent circle deﬁned by tangent ¯lq. Two arcs c˘pq and c˘qp are not even co-planar if tangents ¯lp and ¯lq are not. The extrapolated ﬂow c˘q1p is also consistent with the local ﬂow estimate ¯lp = c˘p0∗ at p, so that the reverse arc c˘qp in (b) is conﬂuent as well. In (c) the local ﬂow estimate ¯lp at p is ﬂipped and arc c˘qp becomes non-conﬂuent since the angle between c˘q1p and ¯lp = c˘p0∗ is large. Note that arc c˘pq in (c) diﬀers from (a) but it must be non-conﬂuent as well, see Theorem 1.

continuous if at any point on the curve the slope orientation is continuous. Incidentally, the diﬀerentiability classes Ck are too restrictive as a G1-continuous curve can easily be not C1 due to the curve parameterization. Note that G1-continuity is only deﬁned for a single curve while our conﬂuence extends it for a pair of curves and can be seen as “co-G1-continuity”.
Our concept of conﬂuence allows deﬁning arbitrarily complex (continuous) conﬂuent vessel trees. Such trees are formed by multiple oriented curves representing motion trajectories of blood particles from the common root to an arbitrary number of leaves where each pair of curves must be conﬂuent. Fig. 5(b) shows a simple example of a tree formed by two conﬂuent curves with one bifurcation, which can be formally deﬁned.
3. Conﬂuent Tubular Graphs
Our discrete approach to reconstructing conﬂuent vessel trees is based on eﬃcient algorithms for directed graphs. Our “tubular” graph nodes correspond to a ﬁnite set of detected vessel points. We use discrete representation of oriented vessels as paths along directed edges or directed arcs (p, q) connecting the graph nodes. Each arc (p, q) on our tubular graph represents an oriented continuous “ﬂow-extrapolating” curve in R3 from p to q. Such curves could be obtained from physical models based on ﬂuid dynamics. For simplicity, this paper is focused on oriented circular arcs, see Sec. 3.1, motivated as the lowest-order polynomial splines capable of enforcing G1-continuity and conﬂuence. In general, our conﬂuent tubular graph construction can use

higher-order ﬂow-extrapolation models, e.g. cubic Hermite splines that are common in computer graphics and geometric modeling of motion trajectories.
By using circular arcs as ﬂow-extrapolating curves, we introduce some ambiguity with “arcs” as the standard term for graph edges. However, this should not create confusion since there is a one-to-one relation between directed arcs on our tubular graph and the corresponding (circular) oriented arcs in R3. Note that both interpretations are oriented/directed. In all technically formal sentences, continuous or discrete interpretation of the “arc” is clear from the context. In more informal settings, both interpretations are often equally valid.
The rest of this Section is as follows. Oriented ﬂow-extrapolating circular arcs between tubular graph nodes are introduced in Sec. 3.1 where ε-conﬂuence constraint is deﬁned in the context of such arcs. We also deﬁne directed arc weights to represent the conﬂuence constraint and the local costs of sending ﬂow along these arcs. Geometric properties of conﬂuent circular arcs are discussed in Sec. 3.2. The algorithm estimating conﬂuent vessel trees via minimum arborescence on our directed tubular graph is presented in Sec. 3.3.
3.1. Conﬂuent ﬂow-extrapolating arcs
Formally, tubular graph G = V, A is based on a set of nodes/points V embedded in R3 representing semidensely sampled centerlines of a tubular structure. A ⊆ V 2 is a set of directed arcs. For our tubular graph construction, each directed arc (p, q) ∈ A represents some continuous oriented curve in R3 modelling ﬂow-

extrapolation from point p to point q, see Fig. 6. As discussed earlier, this paper is focused on oriented circular arcs as the simplest geometric model that can represent conﬂuent vessels, even though higher-order geometric splines or physics-motivated curves are possible. Our speciﬁc construction uses ﬂow-extrapolating circular arcs based on a set of unit vectors L¯ = {¯lp}p∈V ⊂ S2 representing ﬂow direction estimates at the nodes, see Fig. 2(b). Oriented circular arc c˘pq is ﬁt into starting point p, its ﬂow orientation estimate ¯lp, and the ending point q, see Fig. 6. Formally, curve c˘pq corresponds to a diﬀerentiable function

c˘pq : [0, 1] → R3

traversing points on a circular arc in the plane spanned by p, q, and vector ¯lp so that

c˘ (0) = p , c˘ (1) = q , c˘pq(0) = ¯l (1)

pq

pq

c˘pq (0)

p

where derivative c˘pq(s) gives an oriented tangent. For shortness, we deﬁne (oriented) unit tangents
at the beginning and the end points of any ﬂowextrapolating arc c˘ as

c˘0 := c˘ (0)

,

c˘1 :=

c˘ (1) .

(2)

c˘ (0)

c˘ (1)

The deﬁnition of arc c˘pq in (1) implies c˘p0q ≡ ¯lp so that tangent c˘p0q is the same for any arc starting at given point p regardless of its end point q. Thus,

c˘p0∗ ≡ ¯lp

(3)

where the star ∗ represents an arbitrary end point. On the other hand, tangent c˘p1q at the end point q depends on the arc’s starting point p. That is, generally,

∠(c˘p1q, c˘r1q) ≡ 0 if p = r.

ε-Conﬂuence Constraint: To constrain our tubular graph so that all feasible vessel trees are conﬂuent, it suﬃces to enforce conﬂuence of the arcs at the nodes where they meet. However, our simple ﬂowextrapolating circular arcs (1) can not be used to enforce the exact conﬂuence. We use some threshold ε to introduce a relaxed version of conﬂuence in Deﬁnition 1 for an arbitrary pair of adjacent arcs c˘pq, c˘qr connecting points p, q and r
∠(c˘p1q, c˘q0r) ≤ ε.
In general, this is a high-order (triple clique) constraint. But, property (3) of our ﬂow-extrapolating arc construction shows that the end point of the second arc c˘qr is irrelevant. Indeed,
∠(c˘p1q, c˘q0r) = ∠(c˘p1q, ¯lq) ≡ ∠(c˘p1q, c˘q0∗)

implying that our speciﬁc tubular graph construction allows to express conﬂuence as a pairwise constraint

∠(c˘p1q, c˘q0∗) ≤ ε

(4)

for any pair of points p, q. In essence, this becomes a constraint for our ﬂow extrapolating arcs c˘pq that can be called conﬂuent if ∠(c˘p1q, ¯lq) ≤ ε, see Fig. 6.
To enforce ε-conﬂuence constraint, our tubular graph can simply drop all non-conﬂuent arcs. Thus, any directed vessel tree on our graph will be conﬂuent by construction. This paper explores the simplest approach to reconstructing conﬂuent vessel trees as the minimum arborescence on our directed tubular graph. In this case, instead of dropping non-conﬂuent arcs, one can incorporate ε-conﬂuence constraint directly into the cost of the corresponding directed graph arcs

wpq := length(c˘pq) if ∠(c˘p1q, c˘q0∗) ≤ ε (5)

∞

otherwise.

The reverse edge on our tubular graph has diﬀerent weight wqp = wpq because it corresponds to a diﬀerent ﬂow extrapolating arc c˘qp that has a diﬀerent length, see Fig. 6(b). As an extension, our approach also allows “elastic” arc weights by adding integral of arc’s curvature to its length in (5). It is also possible to impose soft penalties for the discrepancy between the extrapolated ﬂow c˘p1q and ﬂow estimate c˘q0∗ ≡ lq in (5) based on physical, physiological, or other principles.
Note that higher-order (non-circular) extrapolation arcs c˘pq can be constructed to ﬁt the ﬂow orientation estimates at both ends exactly, implying an exactly conﬂuent graph. However, some non-trivial physiological constraints have to be imposed on the smoothness/curvature of such (non-circular) conﬂuent arcs which should result in very long curves in cases like Fig. 6(c). Thus, the conﬂuence constraint will manifest itself similarly to the second line in (5).

3.2. Conﬂuence and co-circularity

Speciﬁcally for oriented circular arcs, conﬂuence implies several interesting properties and can be juxtaposed with the standard concept of co-circularity [24]. Assume some circular ﬂow-extrapolating arc c˘pq and its reverse c˘qp deﬁned by two oriented tangents ¯lp, ¯lq, see Sec. 3.1 and Fig. 6(a,b).
Property 1. The angle between c˘p1q and ¯lq is equal to the angle between c˘q1p and ¯lp. That is,

∠(c˘p1q, c˘q0p) ≡ ∠(c˘q1p, c˘p0q).

(6)

While not immediately obvious, particularly in 3D, this property is not diﬃcult to prove, see Appendix A. Identity (6) implies the following.

vessel tree reconstruction using
undirected Geodesic Tubular Graph (standard)

geodesic arcs

GridMST

vessel tree reconstructions using
directed Conﬂuent Tubular Graph (our)

conﬂuent arcs

MArb

(a) MST (blue) for Geodesic Tubular Graph (yellow) [16, 30, 34] (b) Min Arborescence (green) for Conﬂuent Tubular Graph (yellow)
Figure 7: Typical tree reconstruction examples for standard geodesic (a) and our conﬂuent (b) tubular graphs. Arc weights are represented via thickness (yellow). The data is a (representative) crop with near-capillary vessels at a periphery of large volumes, e.g. Fig. 1, 10. Sub-voxel vessels have bifurcations sparsely sampled by tubular graph nodes, as in Fig. 4. MST (blue) on geodesic graph “short-cuts” most bifurcations. Minimum arborescence (green) on a directed tubular graph with conﬂuent arcs (b), see Sec. 3.1, reconstructs ﬂow-consistent bifurcations.

Theorem 1. For circular ﬂow extrapolating arcs, c˘pq is conﬂuent iﬀ the reverse arc c˘qp is conﬂuent.

This theorem shows that conﬂuence of c˘pq and c˘qp in Fig. 6(a,b) is not a coincidence. However, in general, such symmetry does not hold for non-circular ﬂowextrapolating arcs (higher order polynomial curves, etc). Also, Theorem 1 does not imply “undirectedness” of our conﬂuent tubular graph construction using simple circular arcs. As follows from (5), wpq = wqp since the reverse arcs c˘pq and c˘qp have diﬀerent lengths regardless of conﬂuence, see Fig. 6(a,b).
Interestingly, our conﬂuence constraint in case of circular oriented arcs can be related to an “oriented” generalization of co-circularity that was originally deﬁned in [24] for 2D curves. In Rn co-circularity constraint can be deﬁned for two unoriented tangent lines lp and lq at points p and q in a way similar to our deﬁnition of conﬂuence for c˘pq that is based on oriented tangents ¯lp and ¯lq. Assume unoriented circle cpq uniquely deﬁned in Rn by a pair of points p, q and tangent lp at the ﬁrst point. If we use cx to denote an unoriented unit tangent of circle c at any given point x, then circle cpq is uniquely deﬁned by three conditions

cpq : p ∈ cpq, q ∈ cpq, cppq = lp.

(7)

In general, circle cqp is diﬀerent as it is deﬁned by tangent lq at point q, that is cqqp = lq. Then, co-circularity
constraint for lp and lq can be deﬁned as

∠

(c

q pq

,

cqqp

)

≡

∠(cqpp, cppq)

≤

(8)

where ∠(·, ·) is the angle between two lines in contrast to the angle between vectors in the similar identity (6).

The diﬀerence between conﬂuence for ¯lp, ¯lq and cocircularity for lp, lq can be illustrated by the examples in Fig. 6. Note that unoriented versions of ¯lp, ¯lq are identical in all three examples (a,b,c) as they do not depend of the ﬂip of orientation in (c). Thus, they are equally co-circular in (a,b,c). At the same time, oriented tangents are conﬂuent in (a,b) while ﬂipping orientation for ¯lp results in non-conﬂuence in (c). The properties discussed above imply that conﬂuence can be seen as oriented generalization of co-circularity [24].
Property 2. Conﬂuence of oriented circular arcs c˘pq or c˘qp, which are deﬁned by oriented tangents ¯lp, ¯lq, implies co-circularity of the corresponding unoriented tangents lp, lq, but not the other way around.
Note that co-circularity constraint for unoriented circular arcs along a path on a tubular graph can enforce G1-smoothness within a single vessel branch. But, unoriented co-circularity enforces smoothness indiscriminately in all directions from a bifurcation point without resolving conﬂicts between multiple branches. This leads to artifacts observed on geodesic tubular graphs, see Fig. 13(a). In contrast, the conﬂuence constraint discriminates orientations of branches when enforcing smoothness at bifurcations, see Fig. 13(b).
3.3. Conﬂuent tree reconstruction algorithm
Our Conﬂuent Tree Reconstruction Algorithm 1 is discussed below. It inputs raw volumetric data with a marked root of the tree. The algorithm has four steps. First, it runs a subroutine that estimates a set of points on the tree centerline V and oriented ﬂow pattern at these points L¯. We use a standard vector ﬁeld

Algorithm 1 Conﬂuent Tree Reconstruction Require: Raw volumetric data and root location
1: Estimate a set of centerline points V and directed ﬂow estimates L¯ = {¯lp|p ∈ V }.
2: Build a set of oriented arcs A ⊆ V × V , Sec. 3.1 3: Build a conﬂuent tubular graph G by computing
weights wpq for (p, q) ∈ A using (5). 4: Return the Minimum Arborescence of G.
estimation method [34] based on non-negative divergence constraint and regularization over the voxel-grid neighborhood. Since 80% of our large vasculature volumes are near-capillary vessels, the weak sub-voxel signal often results in missing data points and grid-based regularization fails to produce consistent ﬂow orientations, particularly at the tree periphery. We modiﬁed [34] by (anisotropically) enlarging their regularization neighborhood, see Appendix B, improving the quality of ﬂow estimates L¯ that helps to reconstruct conﬂuent vessel trees.
Second, we build a set of oriented arcs between the points in V that correspond to directed edges on our tubular graph G. Our conﬂuence constraint works well even with a complete graph A = V × V . But, for eﬃciency, we restrict the neighborhood to K nearest neighbors (KNN). The running time is O(K|V | log |V |) with k-d trees.
The last two steps compute a directed weight wpq for all arcs (p, q) ∈ A as described in Sec. 3.1, and invoke a standard minimum arborescence algorithm that has complexity O(|A| + |V | log |V |) [11]. In practice, the overall running time of our method for vessel tree reconstruction is dominated by the centerline localization and ﬂow pattern estimation in the ﬁrst step.
4. Experimental results
We use two baselines which we call NMS-MST and GridMST. NMS-MST uses the Frangi method [9] along with Non-Maximum Suppression (NMS) to obtain the centerline points and local unoriented tangent estimates. On top of these, NMS-MST uses the KNN (K = 500) graph of the centerline points to build the MST. Note that the KNN graph is symmetric such that a pair of nodes have an arc as long as one is a neighbor of the other. Here, the undirected edge weight is computed by the sum of two shorter arc lengths. GridMST uses [34] for estimating the centerline points and ﬂow direction. Then, it also uses the KNN graph of the centerline points to build the MST.
GridArb uses the set of centerline points and ﬂow estimates produced by [34], but it uses the conﬂuent tubular graph to build the minimum arborescence (dis-

cussed in Sec. 3.3). MArb exploits a modiﬁed version of [34] (see Appendix B) and also uses the conﬂuent tubular graph to build the minimum arborescence. We set ε = π2 in (5) for all our experiments.

Method
NMS-MST GridMST GridArb
MArb

Flow estimates Frangi et al. [9] Zhang et al. [34] Zhang et al. [34] Modiﬁed [34], see suppl materials

Graph Weights standard geodesic our conﬂuent (5)

Tree Extraction
MST
minimum arborescence

4.1. Validation Measures
Many validation measures rely on matching between the ground truth and the predicted tree. Matching algorithms could be separated into several groups. First, match the nodes of the trees independently based on a distance measure, e.g. [34, 28, 31], partial (local) subtree matching [12], or global tree matching approaches [17, 33, 3]. We base our evaluation approach on the ﬁrst group of methods due to their eﬃciency and the size of our problem.
Centerline reconstruction quality. Our reconstructed tree is ideally the centerline of the vasculature. We compute the recall and fall-out statistics of the centerline points to evaluate the reconstruction quality. To obtain the centerline receiver operating characteristic (ROC) curve, we generate a sequence of recall /fall-out points by varying the detection threshold parameter for the low-level vessel ﬁlter of Frangi et al. [9].
Similarly to [34], a speciﬁc point on the ground truth centerline is considered detected correctly (recall) iﬀ it is located within max(r, ζ) distance of a reconstructed tree where r is the radius of the√corresponding ground truth vessel segment and ζ = 22 voxel-size. A point on the reconstructed tree that is farther away than this distance is considered incorrectly detected (fall-out). Before computing the ROC curve we re-sample uniformly both the ground truth and reconstructed trees.
Bifurcation reconstruction quality. We introduce two separate metrics. First, we compute the ROC curve for only bifurcation points to assess the quality of detection. Second, we measure the median angular error at the reconstructed bifurcations to assess the accuracy, where we match all ground truth bifurcations to closet branching points on the detected tree regardless of their proximity and use the median rather than the average for greater stability. The diﬀerence between our angular error measure and that in [34] is discussed in Appendix C.

noise std 10 Recall ratio

100%

95%

90%

85%

80%

75%

NMS-MST

70%

GridMST

65%

GridArb MArb

60%0% 5% 10% 15% 20% 25% 30% 35% 40%

Fall-out ratio

100%

95%

90%

85%

80%

75%

NMS-MST

70%

GridMST

65%

GridArb MArb

60%0% 5% 10% 15% 20% 25% 30% 35% 40%

Fall-out ratio

(a) centerline detection

Recall ratio

Recall ratio

90%

85%

80%

75%

70%

NMS-MST

GridMST

65%

GridArb

MArb

60%10% 15% 20% 25% 30% 35% 40%

Fall-out ratio

90%

85%

80%

75%

70%

NMS-MST

GridMST

65%

GridArb

MArb

60%10% 15% 20% 25% 30% 35% 40%

Fall-out ratio

(b) bifurcation detection

noise std 15 Recall ratio

Figure 8: Quantitative comparison. Our methods are denoted by MArb and GridArb. GridMST is the best result from [34].

noise std 10

noise std 15

33.0

33.0

Angle Error, degree Angle Error, degree

30.5

NMS-MST

30.5

NMS-MST

28.0

GridMST

28.0

GridMST

25.5

GridArb (our) MArb (our)

25.5

GridArb (our) MArb (our)

23.0

23.0

20.5

20.5

18.0

18.0

15.50.005

0.040

0.080 0.120 0.1600.200

Threshold Value

15.50.005

0.040

0.080 0.120 0.1600.200

Threshold Value

Figure 9: Median branching angular error for our methods (GridArb and MArb from Sec. 3) outperform all competitors (NMS-MST and GridMST [34])

Figure 10: Real data micro-CT volume and vessel centerline reconstruction (green) obtained by our method and (blue) by [34]. To reduce clutter we show the result of Frangi et al. ﬁlter [9] instead of raw input data. The real data zoom-in is at the top left.

4.2. Synthetic Data with Ground Truth
One of the major challenges in large-scale vessel tree reconstruction is the lack of ground truth. That complicates many interactive and supervised learning methods and makes evaluation hard. Zhang et al. [34] generated and published a dataset with ground truth using [14]. We used our newly generated 15 volumes (see Appendix D) 100 × 100 × 100 with intensities between 0 and 512. Our new dataset has a larger variance of bifurcation angles. The voxel size is 0.046 mm. We add Gaussian noise with std 10 and 15.
Fig. 8 compares the results of our methods with two competitors. One is the method of [34], another baseline is simple MST computed over non-maximum suppression of vessel ﬁlter output. All methods use essentially the same detection mechanism, i.e. Frangi et al. ﬁlter, so the centerline extraction quality does not differ much. On the other hand, our method signiﬁcantly outperforms in the quality of bifurcation detection, see Fig. 8 (b). This result is complemented by superior angular errors in Fig. 9. We attribute this to the sub-

voxel accuracy and better reconstruction of bifurcation. A typical example is shown in Fig. 1(b,c).
The GridArb performs competitively in terms of angular errors but gives the worst results in terms of centerline quality. This is due to the artifact caused by some inconsistent ﬂow estimates near the tree periphery (see Fig. 13 for concrete examples). In Sec. 3.3 we argue that enlarging the regularization neighborhood helps improve the estimation of the ﬂow orientation.
4.3. High Resolution Microscopy CT
We use challenging microscopy computer tomography volume (micro-CT) of size 585×525×892 voxels to qualitatively demonstrate the advantages of our approach. The data is a high-resolution image of mouse heart obtained ex vivo with the use of contrast. The resolution allows detecting nearly capillary level vessels, which are partially resolved (partial volume). Fig. 10 shows the whole volume and reconstruction.

References
[1] Fethallah Benmansour and Laurent D Cohen. Tubular structure segmentation based on minimal path method and anisotropic enhancement. IJCV, 92(2):192–210, 2011. 2
[2] Da Chen, Jean-Marie Mirebeau, and Laurent D Cohen. Global minimum for a ﬁnsler elastica minimal path approach. International Journal of Computer Vision, 122(3):458–483, 2017. 2
[3] Egor Chesakov. Vascular tree structure: Fast curvature regularization and validation. Electronic Thesis and Dissertation Repository. The University of Western Ontario, (3396), 2015. Master of Science thesis. 7
[4] Anthony D DeRose. Geometric continuity: a parametrization independent measure of continuity for computer aided geometric design. Technical report, CA Univ Berkeley Dept of Electrical Engineering and Computer Sciences, 1985. 3
[5] Thomas Deschamps and Laurent D. Cohen. Fast extraction of minimal paths in 3d images and applications to virtual endoscopy. Medical Image Analysis, 5(4):281 – 299, 2001. 2
[6] Jack Edmonds. Optimum branchings. J. Res. Nat. Bur. Standards, 71B(4), October- December 1967. 3
[7] M. A. T. Figueiredo and J. M. N. Leitao. A nonsmoothing approach to the estimation of vessel contours in angiograms. IEEE Transactions on Medical Imaging, 14(1):162–172, March 1995. 2
[8] AH Fowler and CW Wilson. Cubic spline: A curve ﬁtting routine. Technical report, Union Carbide Corp., Oak Ridge, Tenn. Y-12 Plant, 1966. 3
[9] Alejandro F Frangi, Wiro J Niessen, Koen L Vincken, and Max A Viergever. Multiscale vessel enhancement ﬁltering. In MICCAI’98, pages 130–137. Springer, 1998. 1, 2, 7, 8, 12
[10] William T. Freeman and Edward H Adelson. The design and use of steerable ﬁlters. IEEE Transactions on Pattern Analysis & Machine Intelligence, (9):891–906, 1991. 1, 2
[11] Harold N Gabow, Zvi Galil, Thomas Spencer, and Robert E Tarjan. Eﬃcient algorithms for ﬁnding minimum spanning trees in undirected and directed graphs. Combinatorica, 6(2):109–122, 1986. 7
[12] Todd A Gillette, Kerry M Brown, and Giorgio A Ascoli. The diadem metric: comparing multiple reconstructions of the same neuron. Neuroinformatics, 9(2-3):233, 2011. 7

[13] Germ´an Gonz´alez, Franc¸ois Fleuret, and Pascal Fua. Automated delineation of dendritic networks in noisy image stacks. In European Conference on Computer Vision, pages 214–227. Springer, 2008. 1, 2, 3
[14] Ghassan Hamarneh and Preet Jassi. Vascusynth: simulating vascular trees for generating volumetric image data with ground-truth segmentation and tree analysis. Computerized medical imaging and graphics, 34(8):605–616, 2010. 8, 13
[15] Peter Hui, Michael J Pelsmajer, Marcus Schaefer, and Daniel Stefankovic. Train tracks and conﬂuent drawings. Algorithmica, 47(4):465–479, 2007. 3
[16] Julien Jomier, Vincent LeDigarcher, and Stephen R Aylward. Automatic vascular tree formation using the mahalanobis distance. In International Conference on Medical Image Computing and Computer-Assisted Intervention, pages 806–812. Springer, 2005. 3, 6
[17] Philip N. Klein. Computing the edit-distance between unrooted ordered trees. pages 91–102, 1998. 7
[18] Max W K Law and Albert C S Chung. Three dimensional curvilinear structure detection using optimally oriented ﬂux. In European conference on computer vision, pages 368–382. Springer, 2008. 1, 2
[19] Hua Li and Anthony Yezzi. Vessels as 4-d curves: Global minimal 4-d paths to extract 3-d tubular surfaces and centerlines. IEEE transactions on medical imaging, 26(9):1213–1223, 2007. 2
[20] Dmitrii Marin, Yuchen Zhong, Maria Drangova, and Yuri Boykov. Thin structure estimation with curvature regularization. In International Conference on Computer Vision (ICCV), 2015. 1, 2, 3
[21] Odyss´ee Merveille, Benoˆıt Naegel, Hugues Talbot, and Nicolas Passat. nD variational restoration of curvilinear structures with prior-based directional regularization. IEEE Transactions on Image Processing, 28(8):3848–3859, 2019. 1
[22] Odyss´ee Merveille, Hugues Talbot, Laurent Najman, and Nicolas Passat. Curvilinear structure analysis by ranking the orientation responses of path operators. IEEE transactions on pattern analysis and machine intelligence, 40(2):304–317, 2017. 1
[23] Stefano Moriconi, Maria A Zuluaga, H Rolf J¨ager, Parashkev Nachev, S´ebastien Ourselin, and M Jorge Cardoso. Inference of cerebrovascular topology with geodesic minimum spanning trees.

IEEE transactions on medical imaging, 38(1):225– 239, 2018. 1, 2, 3
[24] Pierre Parent and Steven W Zucker. Trace inference, curvature consistency, and curve detection. PAMI, 11:823–839, 1989. 1, 2, 5, 6
[25] Hanchuan Peng, Fuhui Long, and Gene Myers. Automatic 3d neuron tracing using all-path pruning. Bioinformatics, 27(13):i239–i247, 2011. 2
[26] Kaleem Siddiqi and Stephen Pizer. Medial representations: mathematics, algorithms and applications, volume 37. Springer Science & Business Media, 2008. 1
[27] R. E. Tarjan. Finding optimum branchings. Networks, 7(1):25–35, 1977. 3
[28] Engin Turetken, Carlos Becker, Przemyslaw Glowacki, Fethallah Benmansour, and Pascal Fua. Detecting irregular curvilinear structures in gray scale and color imagery using multi-directional oriented ﬂux. In Proceedings of the IEEE International Conference on Computer Vision, pages 1553–1560, 2013. 1, 2, 3, 7
[29] Engin Turetken, Fethallah Benmansour, Bjoern Andres, Przemyslaw Glowacki, Hanspeter Pﬁster, and Pascal Fua. Reconstructing curvilinear networks using path classiﬁers and integer programming. IEEE Transactions on Pattern Analysis and Machine Intelligence (TPAMI), 38(12):2515– 2530, December 2016. 2, 3
[30] Engin Turetken, German Gonzalez, Christian Blum, and Pascal Fua. Automated reconstruction of dendritic and axonal trees by global optimization with geometric priors. Neuroinformatics, 9(2-3):279–302, 2011. 2, 3, 6
[31] J. A. Tyrrell, E. di Tomaso, D. Fuja, R. Tong, K. Kozak, R. K. Jain, and B. Roysam. Robust 3d modeling of vasculature imagery using superellipsoids. IEEE Transactions on Medical Imaging, 26(2):223–237, Feb 2007. 7
[32] Jun Xie, Ting Zhao, Tzumin Lee, Eugene Myers, and Hanchuan Peng. Automatic neuron tracing in volumetric microscopy images with anisotropic path searching. In International Conference on Medical Image Computing and Computer-Assisted Intervention, pages 472–479. Springer, 2010. 1, 2, 3
[33] Kaizhong Zhang and Dennis Shasha. Simple fast algorithms for the editing distance between trees and related problems. SIAM journal on computing, 18(6):1245–1262, 1989. 7
[34] Zhongwen Zhang, Dmitrii Marin, Egor Chesakov, Marc Moreno Maza, Maria Drangova, and Yuri

Boykov. Divergence prior and vessel-tree reconstruction. In IEEE conference on Computer Vision and Pattern Recognition (CVPR), Long Beach, California, June 2019. 1, 2, 3, 6, 7, 8, 11, 12, 13

Appendices
A. The proof of Property 1
Proof. First, we only consider the circle going through p, q and tangential to some vector τ¯p as shown in Fig. 11. Moving the tangent vector τ¯p in its direc-
𝒑 𝒑
𝒒

tion along the circle yields another tangent vector τ¯q
at q. We also translate τ¯p to q. By construction, ∆Opq
is equilateral. Thus, ∠Opq = ∠Oqp. Since τ¯p and
τ¯q are tangential to the circle, we have α + ∠Opq = β + ∠Oqp = π2 , which obviously gives α = β. WLOG, we assume vectors τ¯p, τ¯q and e¯ are all unit vectors. As
α = β, we have:

τ¯q = 2[(τ¯p · e¯)e¯ − τ¯p] + τ¯p

(9)

Now, we consider the two circles going through both p and q while one is tangential to ¯lp and the other is tangential to the ¯lq as shown in Fig. 12. Note that these two circles are not necessarily co-planar. Using
(9), we can obtain

c˘1pq = 2[(c˘0pq · e1)e1 − c˘0pq] + c˘0pq

(10)

c˘1qp = 2[(c˘0qp · e1)e1 − c˘0qp] + c˘0qp

(11)

To prove (6), it is suﬃcient to prove equality of the two dot products which can be simpliﬁed using (10) and (11):

c˘1pq · c˘0qp = 2(c˘0pq · e1)(c˘0qp · e1) − c˘0pq · c˘0qp

(12)

Figure 11: Illustration for (9). O is the center of the circle. e¯ is a unit vector along pq.
𝑐̆ 𝑙̅ = 𝑐̆
𝑙̅ = 𝑐̆
Figure 12: Two circles given by p,q, c˘0pq and c˘0qp. Vectors in red are co-planar with the red circle while those in maroon are co-planar with the maroon circle.

c˘1qp · c˘0pq = 2(c˘0qp · e1)(c˘0pq · e1) − c˘0qp · c˘0pq

(13)

It is obvious that the RHS of (12) and (13) are equal. Therefore, these two angles are equal.

B. CRF Regularization Neighborhood
Our tree extraction method is based on a directed conﬂuent tubular graph construction G = V, A presented in Sec. 3 of the paper. We proposed an approach that builds conﬂuent ﬂow-extrapolating arcs c˘pq for our graph from estimated oriented ﬂow vectors {¯lp | p ∈ V }. Speciﬁc ﬂow orientations can be computed from Frangi ﬁlter outputs using standard MRF/CRF regularization methods [34] enforcing divergence (or convergence) of the ﬂow pattern. However, as mentioned in Sec. 3.3 and Sec. 4, we modiﬁed [34] by anisotropically enlarging the regularization neighborhood to improve the estimates of ﬂow orientations, which are important for our directed arc construction. The 26-grid neighborhood regularization used in [34] generates too many CRF connectivity gaps near the vessel tree periphery where the signal gets weaker. Such gaps result in ﬂow orientation errors, see white vectors in the zoom-ins in Fig. 13(a,b). While tree reconstruction on standard undirected geodesic tubular graphs, see Fig. 13(a), are oblivious to such errors, our directed conﬂuent tubular graph construction is sensitive to wrong orientations,

tree reconstruction (blue) on undirected Tubular Graph (standard)
GridMST

tree reconstructions (red and green) on directed Conﬂuent Tubular Graph (our)

GridArb

MArb

(a) Flow pattern estimate (white) [34] + MST on geodesic tubular graph

(b) Flow pattern estimate (white) [34] + min. arb. on conﬂuent tubular graph

(c) Improved ﬂow estimate (white) + min. arb. on conﬂuent tubular graph

Figure 13: Typical tree reconstruction examples for standard (a) and our conﬂuent (b,c) tubular graphs. (a) White vectors represent CRF-based ﬂow pattern estimates [34] using 26-grid regularization neighborhood N . In case of thin sub-voxel vessels, such N has gaps creating inconsistent ﬂow pattern for isolated small branches (yellow box) lacking bifurcations used by divergence prior to disambiguate orientations. (a) Undirected geodesic tubular graph with large KNN easily bridges such gaps ignoring (inconsistent) ﬂow directions and produces topologically valid vessel MST (blue), even though bifurcations are not accurate. (b) Directed conﬂuent tubular graph is sensitive to ﬂow pattern errors. Minimum arborescence on this graph produces accurate bifurcations, but ﬂow orientation errors (yellow box) lead to wrong topology. (c) CRF-based ﬂow pattern estimator [34] with modiﬁed anisotropic KNN system N addresses the gaps at thin vessels. This improves ﬂow orientations (white vectors in yellow box) and resolves conﬂuent tubular graph artifacts producing trees with accurate both topology and bifurcations.

see Fig. 13(b). To address CRF gaps in the ﬂow orientation estimator [34], we modiﬁed their 26-grid regularization neighborhood into anisotropic KNN based on Frangi’s vessel tangents [9]. This signiﬁcantly reduces orientation errors in {¯lp | p ∈ V } and resolves conﬂuent tubular graph artifacts, see Fig. 13(c). We detail anisotropic KNN below.
CRF connectivity quality: Besides the size of the neighborhood K, anisotropic KNN system has another important hyper-parameter, aspect ratio ar. To select better parameters K and ar, we can evaluate CRF connectivity system N using ROC curves for synthetic vasculature volumes with ground truth. We consider an edge in N as correct iﬀ the projections of its ends onto the ground truth tree have parent/descendant relationship. The recall is the portion of the ground truth tree covered by the correct edges. The fall-out is the ratio of incorrect edges to the total edge count.
As shown in Fig. 14, simply increasing the size of neighborhood closes many gaps but, in the meantime, introduces a lot of spurious connections between diﬀerent vessel branches. Thus, we propose to use anisotropic neighborhoods. Speciﬁcally, the regularization neighborhood is redeﬁned as k anisotropic nearest

neighbors instead of regular grid connectivity. This similar to the KNN except Mahalanobis distance is used. This modiﬁcation addresses the issue giving the state-of-the-art result, see Fig.13(c). To implement such anisotropic neighborhood system, we ﬁrst built an isotropic KNN with some large K, eg. K=500. Then, for each node and its neighbors, we transformed the Euclidean distance into Mahalanobis distance based on the tangent direction on the node. After this, we selected K (eg. K=4) nearest neighbors for each node again based on the Mahalnobis distance. Note that such anisotropic neighborhood is symmetric since we consider a pair of nodes as neighbor as long as one is connected to the other.
C. Angular Error Measure
The average angular error introduced in [34] uses only correctly detected points to compute the bifurcation angular errors. Using such matching to compare diﬀerent methods is unfair as for a particular detection threshold these methods correctly detect diﬀerent sets of bifurcations. So, we match all ground truth bifurcations to closet branching points on the detected tree regardless of their proximity. For certain thresholds, this causes many incorrectly matched bifurcation and

99.0%

...

4-ANN graph

98.5%

Recall

98.0%
97.5% 2-ANN graph

97.0%
96.5% 5%

1-ANN graph

10%

15%

20%

Fall-out

7-ANN graph

ar1 ar4 ar7 ar10 ar20 ar40 grid26

25%

30%

Figure 14: (Quasi) ROC curves evaluating accuracy of the neighborhoods N used for ﬂow pattern estimation, as in [34]. We compare anisotropic KNNs and standard 26-grid connectivity (see gray dot). Evaluation is done based on synthetic data with ground truth where correct connectivity is available. “ar” stands for the aspect ratio and the number denotes the square of the aspect ratio. “grid26” represent the regular 26 neighbors on grid. We select “ar10” with 4 anisotropic nearest neighbourhood (ANN) connectivity system.
large errors. Despite that such statistic is inﬂuenced signiﬁcantly by random matches, it is meaningful for comparing diﬀerent reconstruction methods.
D. Synthetic Data with Ground Truth
Zhang et al. [34] generated and published a dataset with ground truth using [14]. We found that the diversity of bifurcation angles is limited. The mean angle is 68◦ and std is 17◦. To increase the angle variance, we introduce a simple modiﬁcation of vessel tree generation. When a new bifurcation is created from a point and existing line segment, we move the bifurcation towards one of the segment’s ends chosen at random decreasing the distance by half. The new mean is 68◦ and std is 29◦. We generate 15 volumes 100×100×100 with intensities between 0 and 512. The voxel size is 0.046 mm. We add Gaussian noise with std 10 and 15.

