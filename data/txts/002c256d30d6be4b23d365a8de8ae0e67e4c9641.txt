arXiv:2112.04426v3 [cs.CL] 7 Feb 2022

Improving language models by retrieving from trillions of tokens
Sebastian Borgeaud†, Arthur Mensch†, Jordan Hoﬀmann†, Trevor Cai, Eliza Rutherford, Katie Millican, George van den Driessche, Jean-Baptiste Lespiau, Bogdan Damoc, Aidan Clark, Diego de Las Casas, Aurelia Guy, Jacob Menick, Roman Ring, Tom Hennigan, Saﬀron Huang, Loren Maggiore, Chris Jones, Albin Cassirer, Andy Brock, Michela Paganini, Geoﬀrey Irving, Oriol Vinyals, Simon Osindero, Karen Simonyan, Jack W. Rae‡, Erich Elsen‡ and Laurent Sifre†,‡ All authors from DeepMind, †Equal contributions, ‡Equal senior authorship

We enhance auto-regressive language models by conditioning on document chunks retrieved from a

large corpus, based on local similarity with preceding tokens. With a 2 trillion token database, our

Retrieval-Enhanced Transformer (R

) obtains comparable performance to GPT-3 and Jurassic-1

on the Pile, despite using 25× fewer parameters. After ﬁne-tuning, R

performance translates to

downstream knowledge-intensive tasks such as question answering. R

combines a frozen B

retriever, a diﬀerentiable encoder and a chunked cross-attention mechanism to predict tokens based on

an order of magnitude more data than what is typically consumed during training. We typically train

R

from scratch, yet can also rapidly R

ﬁt pre-trained transformers with retrieval and still

achieve good performance. Our work opens up new avenues for improving language models through

explicit memory at unprecedented scale.

1. Introduction

Language modelling (LM) is an unsupervised task that consists of modelling the probability of text, usually by factorising it into conditional next-token predictions 𝑝(𝑥1, . . . , 𝑥𝑛) = 𝑖 𝑝(𝑥𝑖|𝑥<𝑖). Neural networks have proven to be powerful language models, ﬁrst in the form of recurrent architectures (Graves, 2013; Jozefowicz et al., 2016; Mikolov et al., 2010) and more recently in the form of Transformers (Vaswani et al., 2017), that use attention to contextualise the past. Large performance improvements have come from increasing the amount of data, training compute, or model parameters. Transformers have been scaled from 100 million parameter models in seminal work to over hundred billion parameters (Brown et al., 2020; Radford et al., 2019) in the last two years which has led to models that do very well on a wide array of tasks in a zero or few-shot formulation. Increasing model size predictably improves performance on a wide range of downstream tasks (Kaplan et al., 2020). The beneﬁts of increasing the number of parameters come from two factors: additional computations at training and inference time, and increased memorization of the training data.

In this work, we endeavor to decouple these, by exploring eﬃcient means of augmenting language

models with a massive-scale memory without signiﬁcantly increasing computations. Speciﬁcally, we

suggest retrieval from a large text database as a complementary path to scaling language models.

Instead of increasing the size of the model and training on more data, we equip models with the

ability to directly access a large database to perform predictions—a semi-parametric approach. At

a high level, our Retrieval Transformer (R

) model splits the input sequence into chunks and

retrieves text similar to the previous chunk to improve the predictions in the current chunk. Existing

retrieval for language modelling work only considers small transformers (100 millions parameters)

and databases of limited size (up to billions of tokens) (Guu et al., 2020; Khandelwal et al., 2020;

Lewis et al., 2020; Yogatama et al., 2021). To our knowledge, our work is the ﬁrst to show the beneﬁts

of scaling the retrieval database to trillions of tokens for large parametric language models. Our main

Corresponding authors: {sborgeaud|amensch|jordanhoﬀmann|sifre}@deepmind.com

Improving language models by retrieving from trillions of tokens

C4 Eval bits-per-byte

172M

425M

1.5B

7.5B

Baseline

RETRO [OFF]

RETRO [ON]

1.0

1.0

1.0

0.9

0.9

0.9

0.8

0.8

0.8

0.7

0.7

0.7

Numbe2r0o0f N40o0n-E8m00be1d6d00ing Para7m50s0(M) 0Re1trieval1d0atas1e0t0(B T1o0k0e0ns1)0000 0 1Numb3er5of n10eighb3o0r5s0 100

Figure 1 | Scaling of R

. The performance gain of our retrieval models remains constant with

model scale (left), and is comparable to multiplying the parameteric model size by ∼ 10×. The gain

increases with the size of the retrieval database (middle) and the number of retrieved neighbours

(right) on the C4 validation set, when using up to 40 neighbours. Past this, performance begins to

degrade, perhaps due to the reduced quality. At evaluation R

can be used without retrieval

data (R

[OFF]), bringing limited performance degradation compared to baseline transformers.

contributions are the following.

• We introduce R

, a retrieval-enhanced autoregressive language model (§2.2). We use a

chunked cross-attention module to incorporate the retrieved text (§2.4), with time complexity

linear in the amount of retrieved data. We show that retrieving based on a pre-trained frozen

B model (§2.3) works at scale, removing the need for training and updating a retriever

network.

• We show that our method scales well with model size and database size (Fig. 1): R

provides a constant gain for models ranging from 150M to 7B parameters, and R

can be

improved at evaluation time by increasing the database size and the number of retrieved neigh-

bours. Our largest model obtains state-of-the-art results on a range of downstream evaluation

datasets including Wikitext103 (Merity et al., 2017) and the Pile (Gao et al., 2020) (§4). We

show that R

can be ﬁne-tuned to achieve competitive performance on downstream tasks

such as question answering (§4.3).

• We propose an evaluation aware of proximity of test documents with the training set (§2.6),

addressing the problem of test set leakage (Lee et al., 2021). This is relevant for all language

models, and especially for retrieval-enhanced models since they have direct access to the training

dataset during evaluation. Using this methodology, we show that the performance of R

comes from both explicit neighbour copying and general knowledge extraction (§4.4).

2. Method

We design our retrieval-enhanced architecture to be capable of retrieving from a database with trillions

of tokens. For this purpose, we retrieve at the level of contiguous token chunks instead of individual

tokens which reduces storage and computation requirements by a large linear factor. Our method ﬁrst

constructs a key-value database, where values store raw chunks of text tokens and keys are frozen

B embedddings (Devlin et al., 2019). We use a frozen model to avoid having to periodically

re-compute embeddings over the entire database during training. Each training sequence is then split

into chunks, which are augmented with their 𝑘-nearest neighbour retrieved from the database. An

encoder-decoder architecture integrates retrieval chunks into the model’s predictions. We summarize

the R

architecture in Fig. 2, and detail it in this section. We end the section by introducing

2

Improving language models by retrieving from trillions of tokens

Retrieval dataset
Input tokens C1

BERT

Neighbours

BERT
Frozen kNN Retriever
Condition KV

Q

C2

EMB

ATTN

CCA

Transformer Encoder

Encoded neighbours E1 E2
Attend

FFW

READ

C3

X

RETRO block (x L)

Chunked cross-attention (CCA)

Encoded neighbours

E1

E2

H1

H1+

CA

H2

H3 H

H2+

CA

Attending chunks

CA(H1+, E1) CA(H2+, E2) CCA(H, E)

Figure 2 | R

architecture. Left: simpliﬁed version where a sequence of length 𝑛 = 12 is split

into 𝑙 = 3 chunks of size 𝑚 = 4. For each chunk, we retrieve 𝑘 = 2 neighbours of 𝑟 = 5 tokens each. The

retrieval pathway is shown on top. Right: Details of the interactions in the C operator. Causality is

maintained as neighbours of the ﬁrst chunk only aﬀect the last token of the ﬁrst chunk and tokens

from the second chunk.

a new methodology to evaluate language models when an evaluation set is partially present in the training set.

2.1. Training dataset
We use a multi-lingual version of MassiveText (Rae et al., 2021) for both training and retrieval data. The dataset consists of text documents from multiple sources and multiple languages totalling over 5 trillion tokens (detailed in Table 1). Sequences are sampled from subsets of the training data, with sampling weights given in the right-most column of Table 1. We tokenize the dataset using SentencePiece (Kudo and Richardson, 2018) with a vocabulary of 128,000 tokens. During training (unless otherwise speciﬁed), we retrieve from 600B tokens from the training data. The training retrieval database is made of the same subsets as the training data, in proportion that matches the training sampling frequencies. During evaluation the retrieval database consists in the full union of these datasets, with the exception of books for which we use a sub-sample of 4%. The evaluation retrieval database thus contains 1.75T tokens. To limit test set leakage, we compute the 13-gram Jaccard similarity between train and test documents using the MinHash scheme and remove all training documents with high similarity (0.8 or higher) to a validation or test set document. Additionally, we remove all validation and test articles from Wikitext103 (Merity et al., 2017) from our Wikipedia training data.

2.2. Retrieval-enhanced autoregressive token models
Our approach uses retrieval as a way to augment input examples at the granularity of small chunks of tokens. Formally, we consider sequences of integer tokens in 𝕍 = [1, 𝑣], obtained using a text tokenizer1. We split each 𝑛-token-long example 𝑋 = (𝑥1, . . . , 𝑥𝑛) into a sequence of 𝑙 chunks (𝐶1, . . . , 𝐶𝑙) of size 𝑚 = 𝑛𝑙 , i.e. 𝐶1 (𝑥1, . . . , 𝑥𝑚), . . . , 𝐶𝑙 (𝑥𝑛−𝑚+1, . . . , 𝑥𝑛) ∈ 𝕍𝑚. We use 𝑛 = 2048 and 𝑚 = 64. We augment each chunk 𝐶𝑢 with a set R D (𝐶𝑢) of 𝑘 neighbours from the database D. R D (or
1We use the notation [1, 𝑣] {1, . . . , 𝑣} throughout the text.

3

Improving language models by retrieving from trillions of tokens

R for brevity) is a non-trainable operator speciﬁed in §2.3. Token likelihoods are provided by a model, parameterized by 𝜃, that takes as input both previous tokens and their retrieved neighbours. This deﬁnes the following retrieval-enhanced sequence log-likelihood:

𝑙𝑚

∑︁ ∑︁

𝐿 (𝑋 |𝜃, D)

𝜃 𝑥(𝑢−1) 𝑚+𝑖 | (𝑥 𝑗) 𝑗<(𝑢−1) 𝑚+𝑖, ( R D (𝐶𝑢 ))𝑢 <𝑢 .

(1)

𝑢=1 𝑖=1

We set R (𝐶1) = ∅, namely the likelihood of tokens from the ﬁrst chunk does not depend on any retrieval data. This likelihood deﬁnition preserves autoregressivity: the probability of the 𝑖-th token of the 𝑢-th chunk, 𝑥(𝑢−1)𝑚+𝑖, only depends on previously seen tokens (𝑥 𝑗)1 𝑗<(𝑢−1)𝑚+𝑖 and on the data retrieved from the previous chunks (R (𝐶𝑢 ))𝑢 <𝑢. We can therefore directly sample with logprobability , where sampling within the chunk 𝐶𝑢 is conditioned on the neighbours (R (𝐶𝑢 ))𝑢 <𝑢. This makes retrieval-enhanced models directly comparable with the largest language models that are evaluated by sampling.

2.3. Nearest neighbour retrieval
Retrieval neighbours. Our database consists of a key-value memory. Each value consists of two contiguous chunks of tokens which we denote [𝑁, 𝐹] where 𝑁 is the neighbour chunk which is used to compute the key, and 𝐹 is its continuation in the original document. The corresponding key is the B embedding of 𝑁, averaged over time, that we denote B (𝑁). For each chunk 𝐶, we retrieve its approximate 𝑘-nearest neighbours from our key-value database using the 𝐿2 distance on BERT embeddings 𝑑 (𝐶, 𝑁) = ||B (𝐶) − B (𝑁)||22. The model receives the corresponding values R (𝐶) ( [𝑁1, 𝐹1], . . . , [𝑁𝑘, 𝐹𝑘]). Both neighbour chunks and their continuations provide meaningful improvements, as illustrated in our ablation study (Appendix D). We use a length 64 for both 𝑁 𝑗 and 𝐹 𝑗, thus R (𝐶) has a shape of 𝑘 × 𝑟 with 𝑟 = 128. To avoid retrieving the chunk 𝐶𝑢+1 in the retrieval set R (𝐶𝑢), which would break causality during training, we ﬁlter out neighbours originating from the same document as the training sequence 𝑋.
For a database of 𝑇 elements, we can query the approximate nearest neighbours in O (log 𝑇) time. We use the SCaNN library (Guo et al., 2020) to achieve this. This means that we can query our 2 trillion token database in 10 ms whilst evaluating or sampling from the model; this expense is amortized over a chunk length. Performing retrieval on-the-ﬂy is too slow to keep up with the training calculations—we leverage the frozen aspect of the embedding operator B to precompute all approximate nearest neighbours and save the results as part of the data. In Fig. 9 in the Appendix, we show results where we only retrieve neighbours within Wikipedia. We ﬁnd that neighbours tend to come from 2-3 links away from a given article whereas random articles are more than 5 links apart.
Table 1 | MassiveText. The last column indicates the sampling weight during training. The multilingual subsets include documents in 10 languages. The full breakdown is given in §A.1.

Source
Web Books News Wikipedia GitHub

Token count (M)
977,563 3,423,740
236,918 13,288
374,952

Documents (M)
1,208 20 398 23 143

Multilingual
Yes No No Yes No

Sampling frequency
55% 25% 10% 5% 5%

4

Improving language models by retrieving from trillions of tokens

2.4. R

model architecture

Our model relies on an encoder-decoder transformer architecture, integrating the retrieved data

through a cross-attention mechanism as introduced in Vaswani et al. (2017). First, the retrieved

tokens R (𝐶) are fed into an encoder Transformer, which computes the encoded neighbours set 𝐸.

Denoting the intermediate activations by 𝐻, our transformer decoder then interleaves R

-blocks

R

(𝐻, 𝐸) and standard Transformer blocks L M (𝐻) (the hyperparameter 𝑃 ⊆ [1, 𝐿] determines at

which layers we use a R

-block). These blocks are built from three diﬀerent residual operators

with signature ℝ𝑛×𝑑 → ℝ𝑛×𝑑: a fully-connected layer F , the standard sequence-level self-attention

layer A , and a chunked cross-attention layer C (·, 𝐸) that incorporates information from the

retrieval encoder:

R

(𝐻, 𝐸) F (C (A (𝐻) , 𝐸)) , and L (𝐻) F (A (𝐻))

(2)

Since F , A and C are all autoregressive operators whose output at position 𝑖 only

depends on (ℎ𝑗) 𝑗 𝑖, any succession of R

and layers, followed by a token classiﬁcation

head deﬁnes an autoregressive log-likelihood (1). An overview of the model architecture is given in

Algorithm 1 and in Fig. 2. We next describe the retrieval encoder and the chunked cross-attention

layer in more detail, and explain how to sample from R

.

Encoding retrieval neighbours. For each chunk 𝐶𝑢, the 𝑘 retrieval neighbours R (𝐶𝑢) are fed into

a bi-directional transformer E

,

yielding

the

outputs

𝑗
𝐸𝑢

E

( R (𝐶𝑢) 𝑗, 𝐻𝑢) ∈ ℝ𝑟×𝑑 ,

where 𝑗 ∈ [1, 𝑘] indexes each neighbour. The retrieval encoder is a non-causal transformer. It

is conditioned on 𝐻𝑢, the activations of chunk 𝐶𝑢, through cross-attention layers; this allows the

representations of the retrieval encoder to be modulated by the retrieving chunk in a diﬀerentiable

way. More precisely, the encoding of the 𝑗th neighbour of the 𝑢th chunk, R (𝐶𝑢) 𝑗, depends on the

attended activation 𝐻𝑢 (ℎ(𝑢−1)𝑚+𝑖)𝑖∈[1,𝑚] ∈ ℝ𝑚×𝑑 of chunk 𝐶𝑢 at layer min(𝑃). All neighbours for

all chunks are encoded in parallel, yielding a full encoded set 𝐸 (𝐸𝑢𝑗 )𝑢∈[1,𝑙], 𝑗∈[1,𝑘] ∈ ℝ𝑙×𝑘×𝑟×𝑑 . We

denote 𝐸𝑢 ∈ ℝ𝑘×𝑟×𝑑 as the encoded neighbours for chunk 𝑢 ∈ [1, 𝑙].

Chunked cross-attention. To perform the C operation, we ﬁrst split a given intermediate acti-

vation 𝐻 ∈ ℝ𝑛×𝑑 into 𝑙−1 attending chunks 𝐻𝑢+ (ℎ𝑢 𝑚+𝑖−1)𝑖∈[1,𝑚] ∈ ℝ𝑚×𝑑

, as depicted on the

𝑢∈ [1,𝑙−1]

right of Fig. 2. 𝐻𝑢+ holds the intermediary embeddings of the last token in chunk 𝐶𝑢 and of the ﬁrst

𝑚

−

1

tokens

in

𝐶𝑢+1

2.

We

compute

the

cross-attention

between

𝐻+
𝑢

and

𝐸𝑢—the

encoded

retrieval

set obtained from chunk 𝐶𝑢. Attention is computed across time and across neighbours simultaneously,

as we merge the neighbour and time dimensions of 𝐸𝑢 before applying cross-attention. Since there

is a notion of alignment between data chunks and retrieval neighbours, we use relative positional

encodings as described in §B.1.2.

We concatenate the 𝑙−1 outputs of the per-chunk cross-attentions (each of shape 𝑚 × 𝑑) across time, and properly pad the result; we thus form the output activation C (𝐻, 𝐸) ∈ ℝ𝑛×𝑑. Formally,
for each chunk 𝐶𝑢 and for each token 𝑖 ∈ [1, 𝑚] we set

C ( 𝐻, 𝐸)𝑢 𝑚+𝑖−1 C (ℎ𝑢 𝑚+𝑖−1, 𝐸𝑢),

(3)

2The last token of chunk 𝐶𝑢 is the ﬁrst to be able to access the retrieved content 𝐸𝑢 while maintaining autoregressivity

in (1). Hence, there is a one token overlap between chunk 𝐶𝑢 = 𝑥(𝑢−1)𝑚+𝑖 𝑖∈[1,𝑚] and the corresponding attending chunk

𝐶+
𝑢

(𝑥𝑢 𝑚+𝑖−1)𝑖∈ [1,𝑚] .

5

Improving language models by retrieving from trillions of tokens

Algorithm 1: Overview of R

model architecture.

Hyperparam: 𝑃 and 𝑃enc, indices of layers with cross-attention in the decoder and encoder

respectively

Hyperparam: 𝐿 and 𝐿enc, number of decoder layers and number of encoder layers.

Input: 𝑋 ∈ 𝕍𝑛: sequence of tokens. (R Output: 𝑂 ∈ ℝ𝑛×|𝕍 |: the output logits

(𝐶𝑢))1 𝑢 𝑙: the retrieved neighbours

def E

(R (𝐶𝑢)1 𝑢 𝑙, 𝐻):

( 𝐻𝑢)𝑢∈[1,𝑙] ← S

(𝐻)

for 𝑗 ∈ [1, 𝑘], 𝑢 ∈ [1, 𝑙] do // Encoder shared across neighbours and chunks

𝑗
𝐸𝑢

=

E

enc ( R

(𝐶𝑢) 𝑗) // May be shared with the decoder E M B

for 𝑝 ∈ [1, 𝐿enc] do

𝑗
𝐸𝑢

←

A

enc (𝐸𝑢𝑗 ) // Bi-directional attention

if 𝑝 ∈ 𝑃enc then

𝑗
𝐸𝑢

←

C

enc

(

𝑗
𝐸𝑢,

𝐻𝑢)

𝑗
𝐸𝑢

←

F

enc (𝐸𝑢𝑗 )

return 𝐸

𝐻 ← E (𝑋) for 𝑝 ∈ [1, 𝐿] do
𝐻 ← A ( 𝐻) // Causal attention if 𝑝 = min(𝑃) then
// The neighbour E N C O D E R is conditioned with the decoder activations of

the last layer before the first

𝐸=E if 𝑝 ∈ 𝑃 then

(R (𝐶𝑢)1 𝑢 𝑙, 𝐻)

𝐻 ← C (𝐻, 𝐸)

𝐻 ← F (𝐻)

𝑂 ← R (𝐻)

cross-attention

where C is the cross-attention residual operator over time-concatenated encoded neighbours. We recall that this operator is deﬁned in its simplest version by three parameter matrices 𝐾 ∈ ℝ𝑑×𝑐, 𝑄 ∈ ℝ𝑑×𝑐 and 𝑉 ∈ ℝ𝑑×𝑑. For all ℎ ∈ ℝ𝑑 and 𝑌 ∈ ℝ𝑇×𝑑, we deﬁne

C (ℎ, 𝑌 ) softmax(𝑌 𝐾𝑄𝑇 ℎ)𝑌𝑉,

(4)

where the softmax is performed on the second dimension and all products are matrix products. We use multi-head cross-attention, and add positional encodings to the softmax(see §B.1.2).

The ﬁrst 𝑚 − 1 tokens cannot attend to any neighbour of a previous chunk; at these positions, we deﬁne C as the identity, setting C (𝐻, 𝐸) 𝑗 ℎ𝑗 for all tokens 𝑗 ∈ [1, 𝑚 − 1]. Finally, the last token ℎ𝑙𝑚 attends to the last retrieval set 𝐸𝑙 and we set ℎ𝑙 𝑚 C (ℎ𝑙 𝑚, 𝐸𝑙) (not shown in Fig. 2). Listing 1 contains a simpliﬁed implementation of C . Note that chunked cross-attention is autoregressive: the output of C at position 𝑖 depends on the sequence from tokens from 0 to 𝑖 that is input to C .

With R

models, even though each C cross-attention attends only to the neighbours of

the preceding chunk R (𝐶𝑢−1), the dependencies over previous neighbours are propagated via the self-attention operations. The activations of the 𝑖th token in the 𝑢th chunk therefore potentially depend

upon the set of all previous neighbours R (𝐶𝑢 )𝑢 <𝑢, without incurring the quadratic cost of cross

attending to that set.

6

Improving language models by retrieving from trillions of tokens

Sampling. When sampling, at the end of a chunk 𝐶𝑢, we use SCaNN to retrieve neighbours R (𝐶𝑢),

based on the embedding B (𝐶𝑢). The encoded neighbours 𝐸𝑢 = E

(R (𝐶𝑢)) are then

used to condition the generation of the next chunk 𝐶𝑢+1, which we do incrementally: overall the

cost of sampling is thus quadratic in the size of the sampled sequence, as when sampling from

regular Transformers; the added cost of retrieval is linear in the number of chunks 𝑙, and is negligible

compared to the token sampling cost in practice.

2.5. Baseline Transformer architecture

We use a transformer (Vaswani et al., 2017) similar to the one described in (Radford et al., 2019),

with some minimal changes: we replace LayerNorm with RMSNorm (Zhang and Sennrich, 2019) and

use relative position encodings (Dai et al., 2019). As baselines, we train retrieval-free transformers

with 132M, 368M, 1.3B and 7.0B parameters (embedding matrices are excluded from parameter

counts). The hyperparameters we used are detailed in Table 2. All retrieval models use the same

size encoder for the retrieval data, with 𝑑 = 896 and 2 layers, which roughly adds 19𝑀 parameters.

The encoder uses relative positional encodings. The retrieval models contain one R

-block every

3 blocks, starting from layer 6. For our smallest model, C is applied in layers 6, 9 and 12 of the

main pathway and also once for query conditioning in the encoder, which adds an additional 12𝑀

parameters. The relative number of extra parameters reduces as we increase the baseline model size.

All models are implemented using JAX (Bradbury et al., 2018) and Haiku (Hennigan et al., 2020).

2.6. Quantifying dataset leakage exploitation

R

models may arguably beneﬁt more easily from evaluation dataset leakage, i.e. the fact that

we evaluate on data that were also present in the training set. To better understand how retrieval

improves language modelling performance, we therefore quantify evaluation likelihood as a function

of the overlap between the evaluation and training datasets.

The following approach can be used with any language model, and depends only on the frozen retriever system presented in §2.3. We split the evaluation sequences (𝑋𝑖)𝑖 into chunks of length 𝑚 ≤ 64, and we see the training data as a set of chunks C. For each evaluation chunk 𝐶 ∈ C, we retrieve the 10 closest neighbours (of length up to 128) in the training data. We then compute the longest token substring common to both the evaluation chunk and its neighbours. This gives a number 𝑠 ∈ [0, 𝑚]. The value 𝑟(𝐶) = 𝑠 , ranging from 0 (chunk never seen) to 1 (chunk entirely seen), gives a
𝑚
reliable indication of how much overlap there is between the evaluation chunk and the training data. For a given model, we then obtain the log-likelihood (𝐶) of each chunk 𝐶, and the number of bytes 𝑁 (𝐶) it encodes. We then consider the ﬁltered bits-per-bytes of the model:

𝐶∈C (𝐶)

∀ 𝛼 ∈ [0, 1], C𝛼 {𝐶 ∈ C, 𝑟(𝐶) 𝛼}, bpb(𝛼)

𝛼
,

(5)

𝐶∈C 𝑁 (𝐶)

𝛼

Table 2 | Number of parameters for our baseline and R with the corresponding hyperparameters.

models, excluding embeddings, along

Baseline parameters
132M 368M 1,309M 6,982M

R
172M (+30%) 425M (+15%) 1,451M (+11%) 7,532M (+8%)

𝑑
896 1,536 2,048 4,096

𝑑ﬀw
3,584 6,144 8,192 16,384

# heads
16 12 16 32

Head size
64 128 128 128

# layers
12 12 24 32

7

Improving language models by retrieving from trillions of tokens

which correspond to the bits-per-bytes on the set of chunks that overlap less than 𝛼 % with the training chunks. Note that the full evaluation bit-per-bytes performance is recovered by bpb(1). The function bpb(·) allows us to evaluate the impact of evaluation leakage over predictive performance: for low 𝛼, bpb(𝛼) gives an indication on how the model performs on chunks that are entirely new; the slope of bpb(·) shows how much the model exploits evaluation leakage.

3. Related Work

We ﬁrst review existing work on using retrieval for language modelling, and compare R

to these

works (see Table 3). As we train R

models on a large dataset containing a substantial section

of the internet, our work raises potential privacy, safety, and fairness issues that we then review.

3.1. Retrieval for language modelling
Brants et al. (2007) show that scaling the training data to trillions of tokens improves the machine translation performance of 𝑛-gram models. More recently, GPT-2 (Radford et al., 2019), GPT-3 (Brown et al., 2020), and Jurassic-1 (Lieber et al., 2021) show that scaling up language models leads to massive improvements on many downstream tasks. At the same time, Carlini et al. (2021) demonstrate that large-scale language models can perfectly memorise parts of their training data, suggesting that enhancing models with retrieval may lead to further improvements. However, signiﬁcant leakage between train and test datasets (Lee et al., 2021; Lewis et al., 2021) makes comparing and evaluating large models trained on large datasets diﬃcult, especially once retrieval capabilities over the training dataset are added.
Historically, information retrieval for text relies on inverted index matching such as TF-IDF and BM25 (Robertson and Zaragoza, 2009). Foundational work use latent topic modelling approaches like LDA (Blei et al., 2003) to identify relevant neighbours (Wei and Croft, 2006). Work in machine translation such as Zhang et al. (2018) and Gu et al. (2018) retrieve translation pairs based on edit distance between source sentences and guide the translation output using the closest retrieved target sentences. The retrieval database may also be structured — for example, Ahn et al. (2016) use a symbolic knowledge graph to improve an RNN language model.
With the success of deep learning, retrieving systems have partly switched to dense learned representations based on a neural network’s activations. Continuous cache (Grave et al., 2017) adds probability mass to tokens for which previous activations resemble the current activation vector, extending the model’s context to the local history. 𝑘NN-LM (Khandelwal et al., 2020) applies this idea to transformers and extends the retrieval database to English Wikipedia, resulting in

Table 3 | Comparison of R

with existing retrieval approaches.

Continuous Cache

𝑘NN-LM

S

D

R

RAG

FD

E

2

R

(ours)

# Retrieval tokens
O 103 O 109 O 109 O 109 O 109 O 109 O 109 O 109 O 1012

Granularity
Token Token Token Prompt Prompt Prompt Prompt Prompt Chunk

Retriever training
Frozen (L ST M) Frozen (Transformer) Frozen (Transformer)
Contrastive proxy End-to-End
Fine-tuned D Frozen D
End-to-End (EM) Frozen (B )

Retrieval integration
Add to probs Add to probs Gated logits Extractive QA Prepend to prompt Cross-attention Cross-attention Cross-attention Chunked cross-attention

8

Improving language models by retrieving from trillions of tokens

substantial improvements on Wikitext103 evaluation. Continuous cache and 𝑘NN-LM do not modify

the underlying neural-network models, but interpolate at inference between the language model’s

output and distributions computed from retrieved tokens. These methods can therefore be plugged

into any model without additional training, although this limits the model’s ability to reason about

the retrieved text. S

(Yogatama et al., 2021) addresses this limitation by adding an extra gating

network to post-process the retrieved data; yet most of the network is unaﬀected by the retrieval

during inference.

The retrieval representations may be trained directly instead of relying on a pre-trained model—

retriever systems have been developed for this purpose, primarily on open-domain question answering.

For example, D (Karpukhin et al., 2020) trains two B models (for queries and keys respectively)

using a contrastive loss to align the representations of a question and of its answers. Lee et al. (2019)

use an inverse cloze task to ﬁnd semantic representations of passages for retrieval. These works diﬀers

from continuous cache and 𝑘NN-LM in that they embeds passages (or chunks) of text together, as

opposed to each token individually. The retriever network is trained in isolation of the downstream

task that uses the retrieval data. This potential issue is speciﬁcally addressed by R

(Guu et al.,

2020), which trains the retrieval system end-to-end to maximize the ﬁnal training cross-entropy. This

comes with the extra complexity of searching the database during training and periodically updating

the embedding table, severely limiting the scale at which it can operate. R AG (Lewis et al., 2020)

and F D (Izacard and Grave, 2021) build upon D to set the state of the art on question answering

benchmarks by training encoder-decoder transformer models. More recently, E 2 (Sachan et al.,

2021) extends F D by using an expectation-maximization algorithm to train the retriever end-to-end

and achieves state of the art results compared to similarly sized models.

In the open-domain dialogue setting, BlenderBot 2.0 (Komeili et al., 2021) learns to issue textual

internet queries, outperforming dense retrieval methods when evaluated on a task measuring how

close model responses are to those of humans. This involves collecting a dataset of human dialogues

with associated search queries, which limits the scalability of this approach. Hashemi et al. (2020)

introduce the Guided Transformer, a modiﬁed Transformer similar to R

, for document retrieval

and clarifying question selection. Although eﬀective on question answering and other tasks with

strong conditioning, none of these methods are designed to model arbitrary text sequences, in contrast

with R

.

R

shares components with 𝑘NN-LM and D in that it uses frozen retrieval representations.

R

models longer sequences than QA examples; this requires to reason at a sub-sequence level,

and to retrieve diﬀerent documents for the diﬀerent chunks of a sequence. Similar to F D, R

processes the retrieved neighbours separately in the encoder, and assemble them in the chunked

cross-attention. This diﬀers from e.g. R

, that prepends retrieved documents to the prompt.

Using chunks allows for repeated retrieval whilst generating a sequence as opposed to retrieving

only once based on the prompt alone. Furthermore, retrieval is done during the whole pre-training

process in R

, and is not simply plugged-in to solve a certain downstream task. Finally, previous

methods based on dense query vectors use small models and retrieval datasets with less than 3B

tokens (English Wikipedia). Table 3 summarizes the diﬀerence of R

with existing approaches.

3.2. Privacy, safety and fairness
Bender et al. (2021); Weidinger et al. (2021) highlight several dangers of large language models. Those stem from their ability to memorise training data, their high training cost, the static nature of their training data (Lazaridou et al., 2021), their tendency of amplifying inherent biases in the training data, and their ability to generate toxic language (Gehman et al., 2020). In this section we inspect these dangers, focusing on how retrieval augmented language models may exacerbate or

9

Improving language models by retrieving from trillions of tokens

mitigate them.

Large language models can perfectly memorise parts of their training data (Carlini et al., 2021).

When coupled with large training datasets gathered from the web or other sources, this has clear

privacy and safety implications. Retrieval models such as R

that have access to the entire training

dataset during inference exacerbate these privacy issues by being able to directly copy training data.

However, retrieval systems oﬀer a path towards mitigating these concerns via obliteration of the

retrievable data at inference time. In addition, diﬀerential privacy training (Abadi et al., 2016) of

retrieval models could guarantee that no private information is stored in the model weights, while

individualisation on private data could be made by updating the retrieval database at inference time.

Due to their high training cost, re-training large language model regularly to incorporate new data, languages, and norms is prohibitively expensive. To keep retrieval models up-to-date, it may be suﬃcient to update the retrieval database, which is orders of magnitude cheaper than re-training a model from scratch. In addition to the beneﬁts of updating models in terms of fairness and bias, simply training large language models has a signiﬁcant energy cost (Schwartz et al., 2020; Strubell et al., 2019). Retrieval mechanisms oﬀer a path to reducing the compute requirements needed to train and update language models that reach a certain performance.

Large language models are prone to generating toxic outputs, as shown in Gehman et al. (2020). Bender et al. (2021); Jo and Gebru (2020) advocate for the importance of better training data curation and documentation. Additionally, if portions of the training data are found to be eliciting biased or toxic outputs after training, retrieval allows for some correction, as the oﬀending retrieval data can be retroactively ﬁltered. However, it is also the case that without careful analysis and intervention, retrieval models may exacerbate biases that are present in the training data. Retrieval models can also add a further source of bias through the selection mechanism for retrieval documents. Further work in this area is required to better understand how retrieval aﬀects the bias and toxicity of the model outputs.

Finally, samples from large models are diﬃcult to interpret, making mitigating these issues all the more challenging (Belinkov et al., 2020; Jain and Wallace, 2019). Retrieval provides more insights in to the outputs of a model, as one can directly visualise or modify the neighbours that are being used. The examples in Table 6, 7, 20 and 21 illustrate how retrieval makes language models more factual and interpretable by providing more transparent outputs.

4. Results

We ﬁrst report results on language modelling benchmarks. Second, we show how to R

ﬁt

pre-trained Transformer language models into retrieval models with few additional FLOPs. Next,

we report R

results on question answering. Finally, we report evaluation metrics with leakage

ﬁltering, to better understand the source of the gains with retrieval.

4.1. Language modelling
Datasets. We evaluate our models on C4 (Raﬀel et al., 2020), Wikitext103 (Merity et al., 2017), Curation Corpus (Curation, 2020), Lambada (Paperno et al., 2016) and the Pile (Gao et al., 2020). We also evaluate on a set of manually selected Wikipedia articles that were added or heavily edited in September 2021, months after our pre-training and retrieval dataset was collected (details are given in §A.2). We construct the dataset with articles from the “future” and manually remove new articles that strongly overlap documents in our training data. This guarantees that the evaluation documents are not leaked in our training data.

10

Improving language models by retrieving from trillions of tokens

172M

425M

1.5B

7.5B

Baseline

RETRO [OFF]

RETRO [ON]

a) LAMBADA Accuracy
0.70 0.65 0.60 0.55 0.50

0.70 b) Curation Corpus bpb 0.65 0.60 0.55

c) Wikitext103 Perplexity 20 10 5
3

d) Wikipedia Sept 21 bpb 0.85 0.80 0.75
0.70
0.65

0.45 0.50

2

0.60

No2n00-Em40b0ed8d0i0ng16P0a0rams (7M5)00 No2n00-Em40b0ed8d0i0ng16P0a0rams (7M5)00 No2n00-Em40b0ed8d0i0ng16P0a0rams (7M5)00 No2n00-Em40b0ed8d0i0ng16P0a0rams (7M5)00

Figure 3 | Scaling with respect to model size. (a) LAMBADA top-1 accuracy. (b) Evaluation loss on curation corpus. (c) Perplexity on Wikitext103 valid. (d) Bits-per-byte on selected Wikipedia articles from September 2021.

For C4, Wikitext103, the Pile, and our Wikipedia dataset we evaluate the language modelling performance on entire documents and measure the bits-per-byte (bpb). We favour bits-per-byte over loss as it is tokenizer agnostic. We evaluate with a sequence length of 2048 tokens but use a stride of 1024 within documents to mitigate boundary eﬀects. On Curation Corpus we concatenate the article, the “TL;DR:” string, and the summary, but only evaluate the bpb on the summary. For Lambada we evaluate the accuracy on the last word, using greedy generation.

Model scaling. In Fig. 1(left) and Fig. 3 we show the language modelling performance as we scale

models from 150 million to 7 billion (non-embedding) parameters. We see that on all datasets,

R

outperforms the baseline at all model sizes. Furthermore, we observe that improvements do

not diminish as we scale the models. The performance is dataset dependent, with the largest gains on

Wikitext103 and C4. Wikipedia articles and other web pages are similar to Wikitext103 documents,

even if not exact copies (§4.4), we thus obtain dramatic improvements on Wikitext103 as our retrieval

model is able to directly exploit these overlaps. The smallest gains are for Curation Corpus, where

R

only slightly outperforms the baseline. This is expected as Curation Corpus summaries are

designed to only contain information from the source article and are not included in our retrieval

database. On our “future” Wikipedia September 2021 dataset, we also observe consistent gains for

all model sizes.

Data scaling. Fig. 1 (middle) shows how scaling the retrieval database at evaluation improves the language modelling performance. We observe dramatic gains as the retrieval data is increased from Wikipedia (4 billion tokens) to all of Massive text (1.7T tokens). Fig. 1(right) shows how performance scales as we increase the number of retrieved chunks. Despite being only trained with 2 neighbours, we see consistent improvements for all models when the number of neighbours is increased from 1 to 10. Furthermore, we observe that larger models are able to better utilise more neighbours: the 172M model improves with up to 10 neighbours, whereas the 7B model improves with up to 40 neighbours.

The Pile. We evaluate our 7B models on the Pile test sets3 and compare against the 178B parameter Jurrasic-1 (Lieber et al., 2021) model and the 280B parameter Gopher (Rae et al., 2021) model. We do not compare against GPT-3 as it is outperformed by Jurassic-1 and Gopher on almost all subsets. Fig. 4 shows the relative improvements in bits-per-byte over our 7B transformer baseline for our
3Due to legal and ethical concerns relating to their use, we exclude the Enron Emails and the Youtube Subtitles datasets.

11

% improvement dm_mathematics
ubuntu_irc nih_exporter
arxiv uspto_backgrounds
opensubtitles philpapers hackernews
stackexchange freelaw
pubmed_abstracts books3 pile_cc
pubmed_central gutenberg_pg_19
github

Improving language models by retrieving from trillions of tokens

100

Relative bits-per-byte improvement over our 7B baseline without retrieval Jurassic-1 (178B)

80

Gopher (280B)

60

RETRO (7.5B)

40

20

0

20

Figure 4 | The Pile: Comparison of our 7B baseline against Jurassic-1, Gopher, and R

. We

observe that the retrieval model outperforms the baseline on all test sets and outperforms Jurassic-1

on a majority of them, despite being over an order of magnitude smaller.

7.5B R

model, Jurassic-1 and Gopher. Jurassic-1 outperforms the baseline on all datasets

except for books, likely due to the inclusion of books in our training data. Gopher and R

outperform the baseline on all test sets. Overall, R

7.5B outperforms Jurassic-1 and Gopher on

a majority of the test sets. On the dm_mathematics and ubuntu_irc subsets, our R

model

does not outperform our 7B baseline and underperforms Jurassic-1. We hypothesise that the retrieved

neighbours on these datasets are not helpful, due to a combination of what is in our retrieval dataset

and the eﬃcacy of the nearest-neighbour search.

Wikitext103. To validate our approach in a controlled setting, we compare our method with 𝑘NN-LM (Khandelwal et al., 2020) on the Wikitext103 dataset in Table 4. We train a baseline transformer on the training set of Wikitext103. This transformer has 24 layers, 1024 hidden units, 16 heads and a key size of 64, as in Baevski and Auli (2019). Our baseline does not have adaptive input, and our tokenizer has an open vocabulary, unlike Baevski and Auli (2019), which makes our baseline

Table 4 | Perplexities on Wikitext103. When using the Wikpedia dataset for retrieval, R performs similarly to our implementation of 𝑘NN-LM. As we scale the retrieval dataset, R performs much better. The perplexities for retrieving from full MassiveText are quite low, which is partly due to partial overlap with Wikitext103 not caught by our deduplication.

Model

Adaptive Inputs (Baevski and Auli, 2019)

S

(Yogatama et al., 2021)

𝑘NN-LM (Khandelwal et al., 2020)

Megatron (Shoeybi et al., 2019)

Baseline transformer (ours) 𝑘NN-LM (ours) R R R R R

Retrieval Set
Wikipedia Wikipedia -
Wikipedia Wikipedia C4 MassiveText (1%) MassiveText (10%) MassiveText (100%)

#Database tokens
3B 3B
-
4B 4B 174B 18B 179B 1792B

#Database keys
3B 3B
-
4B 0.06B 2.9B 0.8B 4B 28B

Valid
17.96 17.20 16.06
-
21.53 18.52 18.46 12.87 18.92 13.54 3.21

Test
18.65 17.60 16.12 10.81
22.96 19.54 18.97 10.23 20.33 14.95 3.92

12

Improving language models by retrieving from trillions of tokens

perplexities a bit higher. The full experiment details and hyperparameters are given in §C.2 and Table 11.

We re-implement 𝑘NN-LM with our tokenizer and baseline transformer to produce embeddings of
size 1024 for every token in Wikitext103. 𝑘NN-LM has probabilities 𝑝𝑘NN-LM = 𝜆 𝑝𝑘NN + (1 − 𝜆) 𝑝L with 𝑝𝑘NN (𝑛𝑘) ∝ exp (−𝛼𝑑𝑘). We tune 𝜆 = 0.118 and 𝛼 = 0.00785 on the validation set (Fig. 7) and report performance for these hyperparameters on both the validation and test set.

We ﬁne-tune our baseline transformer into a R

model (Fig. 7), using the Wikitext103

training data and retrieving from Wikipedia with 2 neighbours. We only train the new weights, as

explained in §4.2, and share the embedding weights between the encoder and the main pathway.

This is necessary for Wikitext103 which is quite small, as training R

from scratch in this setting

leads to over-ﬁtting.

We evaluate the ﬁne-tuned R

model with diﬀerent retrieval sets. We use 10 neighbours at

evaluation for both R

and 𝑘NN-LM. When retrieving from Wikipedia, we obtain results com-

parable to our 𝑘NN-LM implementation. Furthermore, scaling the retrieval database to MassiveText

yields dramatic improvements, though this is partly due to leakage (see §4.4). For reproducibility,

we also include results when retrieving from C4, which are close to previous state-of-the-art and

comparable to using 10 % of MassiveText.

It is worth noting that 𝑘NN-LM requires 1024 ﬂoats for every token in the retrieval dataset,

totalling 15 terabytes (Tb) for the 4 billion tokens in Wikipedia. 𝑘NN-LM and other token-level

retrieval approaches therefore don’t scale to retrieval databases with trillions of tokens such as

MassiveText. In comparison, R

only requires 215Gb to index our Wikipedia dataset, and 93Tb

for MassiveText. Inspecting the number of retrieval database entries in Table 4 makes it clear why

retrieving at the chunk level is necessary when scaling to datasets with trillions of tokens.

4.2. R

-ﬁtting baseline models

We extend baseline models into R

models by freezing the pre-trained weights and training

only chunked cross-attention and neighbour encoder parameters (less than 10% of weights for the

7B model) in Fig. 5. This oﬀers an eﬃcient alternative path to enhance transformers with retrieval,

requiring only 6 million sequences (3% of the pre-training sequences that we used). Additionally,

by only training the new weights we ensure that when evaluated without retrieval, the original

model performance is exactly maintained. R

ﬁtting models quickly surpasses the performance of

baseline models and even achieves performance close to that of R

models trained from scratch.

The experiment hyperparameters are given in §C.3.

4.3. Question answering

We ﬁne-tune our retrieval models on the Natural Questions (Kwiatkowski et al., 2019) dataset

to demonstrate that our retrieval pathway can be used to inject information from arbitrary data

sources. We use the version4 provided by Izacard and Grave (2021) which is augmented with the

retrieved passages from D (Karpukhin et al., 2020). We ﬁne-tune all the weights of our 7.5B

pre-trained R

model for 25,000 steps using the top 20 retrieved passages. We format the

data as “question: {question} \n answer: {answer}” and left pad the data such that

“answer:” coincides with the end of the ﬁrst chunk of 64 tokens and thus aligns with the ﬁrst

retrieving chunk. The model has access to the question via the previous tokens in the sequence as well

as the top 20 DPR Wikipedia passages and their titles via the chunked cross-attention mechanism.

4https://github.com/facebookresearch/FiD

13

Improving language models by retrieving from trillions of tokens

Figure 5 | R

-ﬁtting a baseline transformer. Any transformer can be ﬁne-tuned into a retrieval-

enhanced transformer by randomly initializing and training only the chunked cross-attention and

retrieval encoder weights. Fine-tuning in this way quickly recovers and surpasses the non-retrieval

performance, and almost achieves the same performance as training a retrieval model from scratch

(shown by the arrow on the right hand side of each plot). We ﬁnd good performance R

-ﬁtting

our models training on only 3% the number of tokens seen during pre-training.

The exact match scores are shown in Table 5 and the full ﬁne-tuning details are given in §C.4. Our

method is competitive with previous approaches such as R

, R AG and D , but underperforms

the more recent F D. In contrast with this work, we ﬁnd that increasing the number of neighbours

past 20 does not improve R

performance on this task. We hypothesise that the encoder-decoder

structure of T5—the base model in F D— and the T5 pre-training objective leads to a model that

relies more on the encoder output than R

, which is important in the QA setting. To compete

with T5-ﬁnetuned models, future work should consider ways of forcing R

to rely further on the

retrieval encoder output when producing tokens.

4.4. Relating retrieval performance to dataset leakage.

We report the ﬁltered eval losses as detailed in §2.6 on C4, Curation Corpus and Wikitext103 in Fig. 6.

On C4 and Wikitext103, for which there is leakage into the training set, the slope is negative for both

baseline models and R

models. R

models exploit leakage more strongly than baseline

models, as indicated by the more negative slope. This is due to its explicit ability to copy-paste existing

training chunks to predict leaked evaluation chunks (see a qualitative example of this model behavior

Table 5 | Question answering results. Exact match accuracy on Natural Questions.

Model

R

(Guu et al., 2020)

D (Karpukhin et al., 2020)

R AG (Lewis et al., 2020)

E 2 (Sachan et al., 2021)

F D (Izacard and Grave, 2021)

F D + Distill. (Izacard et al., 2020)

Baseline 7B (closed book)

R

7.5B (DPR retrieval)

Test Accuracy
40.4 41.5 44.5 52.5 51.4 54.7
30.4 45.5

14

Eval bpb

Improving language models by retrieving from trillions of tokens

1.0 0.9 0.8 0.7 12.5%

C4 50%

172M 0.65 0.60 0.55 0.50 100% 12.5%

425M

1.5B

Curation Corpus

7.5B

Baseline

Wikitext103

0.8

0.6

0.4

50%

100% 01.22.5% 50%

Max eval/train chunk overlap when filtering

RETRO [ON]
Wikipedia Sept 2021 0.85

0.80

0.75

0.70

0.65

0.60

100% 12.5% 50%

100%

Figure 6 | Performance vs. longest common retrieval substring. Evaluation loss as a function of allowed longest common substring between evaluation data chunks and their nearest neighbours. Retrieval still helps when considering chunks with no more than 8 contiguous tokens overlapping with training dataset chunks.

on a Wikitext103 article in Table 19). On Curation Corpus, retrieval provides a constant oﬀset, which is expected as there is by design no leakage between Curation Corpus and the training dataset.

On the other hand, R

outperforms baseline models at all leakage levels, down to 𝛼 = 12.5%.

At this level, the loss is computed on chunks with less than 8 contiguous tokens shared with the

closest matching chunk in the training dataset—this is a reasonable level of overlap at which we

consider that there is no local leakage. Retrieval thus improves predictions on both chunks that are

syntactically similar to chunks in the training set, and on chunks that are syntactically diﬀerent from

all training chunks. This points toward a non trivial R

capacity of generalizing based on both

model parameters and retrieval database. Similar results are found on the Pile dataset (see Fig. 12,

§F.3).

4.5. Using R

for sampling

We show examples of samples obtained using the 7.5B R

model in Table 6, Table 7 and

Appendix E. For each chunk (the ﬁrst one being the prompt), we juxtapose sampled chunks 𝐶𝑢 with

retrieved neighbours R (𝐶𝑢). To give an indication of local overlap, we colour each sampled token

in chunk 𝐶𝑢 based on the length of the longest common preﬁx (LCP) found in the retrieved chunks

R (𝐶𝑢−1). Similarly, we colour the retrieved chunks based on the LCP in the sampled chunk. For the

sample in Table 6, for which we chose the prompt, we observe that the retrieved chunks inﬂuence the

sample as there are overlaps between the sampled tokens and neighbour tokens. Overall, retrieval

reduces hallucinations (in line with the ﬁndings of Shuster et al. (2021)) and makes the model more

knowledgeable, when comparing with samples produced with retrieval disabled. In the sample in

Table 7, the model recognises that the prompt is the beginning of the ﬁrst scene of Hamlet and

leverages retrieval data to continue it with only a few mistakes. We provide further examples in

Appendix E, including examples from the evaluation sets, as well as the detailed procedure used for

colouring the tables.

5. Conclusion

We present Retrieval-Enhanced Transformers (R

), a method for modelling arbitrary text se-

quences whilst retrieving from databases with trillions of tokens—scaling the data available to models

by an order of magnitude compared to what is typically consumed during training. R

models

15

Improving language models by retrieving from trillions of tokens

gains do not diminish for models with up to at least 7B parameters, and correspond to non-retrieval

models with 10× more parameters on certain datasets. On Wikitext103 and the Pile, R

outper-

forms previous models trained on large scale datasets. We also show that R

is competitive on

retrieval-intensive downstream tasks such as question answering.

R

models are ﬂexible and can be used without retrieval at evaluation and still achieve

comparable performance to baseline models. Conversely, baseline models can be rapidly ﬁne-tuned

into R

models to obtain nearly the same performance as if trained from scratch. Careful analysis

shows that only a modest fraction of the gains obtained by R

are due to test set leakage. In

general, we caution for such leakage in large-scale language datasets and suggest further work in

better understanding the role of test set leakage in the performance of large-scale language models.

Overall, our work demonstrates at an unprecedented scale that semi-parametric approaches can provide an orthogonal, more eﬃcient approach than raw parameter scaling as we seek to build more powerful language models.

Acknowledgements
We would like to thank Nikolai Grigorev, Marc’aurelio Ranzato, Cyprien de Masson d’Autume, Po-Sen Huang, Johannes Welbl, Lisa Anne Hendricks, Ethan Perez, Jeﬀ Stanway, Eric Noland, Gregory Wayne, John Jumper, Julian Schrittwieser, Lorrayne Bennett, Devang Agrawal, Dani Yogatama, Susannah Young, Nando de Freitas, Demis Hassabis, and Koray Kavukcuoglu for their help, advice and reviews. Additionally, we would like to thank Zonglin Li, David Simcha, and the ScaNN developers for their help.

16

Improving language models by retrieving from trillions of tokens

Table 6 | Sample - Beavers are interesting animals. The R

[O ] sample quickly diverges to other

animals while the R

[O ] sample tends to stay focused on the beaver topic due to neighbour conditioning.

Prompt and sample of R

[O ]

Beavers are interesting animals that live near rivers. They build

dams to create ponds. Frogs are am phibians, so they can live in both l and and water. They have great camou ﬂage to hide from predators. The G olden Retriever, or Golden, is a ver y big dog. They are very strong, and have a thick coat to help them live in
cold areas. A kangaroo is an anima l that is very large. It can jump ve ry high. They can run very fast. A meerkat is a small animal that lives in Africa. They live in colonies of up to a hundred of them. They can c limb trees very easily.
A mouse is a small mammal that lives on land. It is a very good climber and it can run very fast. Penguins are birds that live on Antarctica. T hey have a thick coat to keep them w arm. Rabbits are small animals that live in the ground. They

Prompt and sample of R

[O ]

colored by LCP with R (𝐶𝑢−1)

LCP = 0, 1, 2, 3,4, 5

Beavers are interesting animals that live near rivers. They build

their houses called beaver dams in the riverbeds. They also live on lan d.Beavers use their strong teeth an d strong jaws to cut down trees and branches to build their homes. They also use their teeth and jaws to che w up food. Beavers use their big, ﬂ at tails to swim. They use
their sharp teeth to gnaw at rocks and cut trees. They use their ﬂat t ails to steer when they are swimming .In the winter, beavers have to bui ld a house called a beaver lodge. Th ey build a house that is very strong . The walls are made of twigs. The r oof is made
of branches and other tree parts. T hey also use their strong jaws to cu t trees. They bring them to their ho use. They also use their sharp teeth to chew up the tree parts. They use their ﬂat tails to swim to the top of their house. Then they use their teeth and jaws to chew up the tree

[𝑁1,
𝑢

𝐹1 𝑢

]

colored

by

LCP

with

𝐶𝑢+1

LCP = 0, 1, 2, 3,4, 5
.Beavers build their lodges in pon ds they have created in wooded areas .Like many things in nature, there is a connection between creatures i n the wild.Beaver ponds cause tree s to drown, but the dead trees attra ct the great blue heron, which often return year after year. Over time, a beaver pond can attract more than 50 nests in a colony, called a rooke ry.An example of this can be found in the large pond oﬀ Bradford Road at Carter Fields near the Boxford l ine.Chris Leahy, an expert with th e Massachusetts Audubon Society who wrote

, then they mean that you are very b usy. Beavers swim easily in streams, picking up rocks and sticks to buil d their dams. They gnaw at trees wit h their big front teeth to cut them down. Then they use parts of the tre es to build their houses.Beavers ar e clever builders. They know exactly what they need to build their beave r dams. They use mud from the stream to make their dams stay together. T hey use their tails to pat down the mud.Beavers put a snug room at the top of their dams for their babies. They store their food underwater. Be avers eat the bark from the
, then they mean that you are very b usy. Beavers swim easily in streams, picking up rocks and sticks to buil d their dams. They gnaw at trees wit h their big front teeth to cut them down. Then they use parts of the tre es to build their houses.Beavers ar e clever builders. They know exactly what they need to build their beave r dams. They use mud from the stream to make their dams stay together. T hey use their tails to pat down the mud.Beavers put a snug room at the top of their dams for their babies. They store their food underwater. Be avers eat the bark from the

[𝑁2,
𝑢

𝐹2 𝑢

]

colored

by

LCP

with

𝐶𝑢+1

LCP = 0, 1, 2, 3,4, 5
naw them into smaller sections and d rag them into the water.Engineers of the Pond Beavers are interesting animals because they change the hab itat in which they live. Beavers do this by blocking up streams to creat e ponds. Then they build their homes , called lodges, in these ponds. Bea vers’ bodies make them well-suited f or underwater building Special muscl es close oﬀ their noses, ears, and throats to keep the water out. Beave rs’ broad tails act like rudders for steering. Their two very large, ora nge front teeth are used to gnaw dow n trees. They begin building their d am

ar-like tail, and two protruding tee th that are strong enough to gnaw do wn trees. The beaver uses trees, bra nches, and mud to build dams across rivers and streams. These dams creat e a deep pool of water in which the beaver builds its home. A beaver hom e is called a lodge. A baby beaver o r “kit” remains in the family lodge until the age of two.Beaver fur, kn own as pelt, was once highly popular as a trim for hats and coats. How m ight the popularity of beaver fur co ntributed to the colonization of New York?wwwWw

w at trees with their big front teet h to cut them down. Then they use pa rts of the trees to build their hous es.Beavers are clever builders. The y know exactly what they need to bui ld their beaver dams. They use mud f rom the stream to make their dams st ay together. They use their tails to pat down the mud.Beavers put a snu g room at the top of their dams for their babies. They store their food underwater. Beavers eat the bark fro m the trees that they cut down!1. W hat is the main idea of the ﬁrst pa ragraph?.2. What is the main idea o f the second paragraph?

17

Improving language models by retrieving from trillions of tokens

Table 7 | Sample - Hamlet, Act 1, Scene 1. The R

[O ] sample has correct syntax but is hallucinated,

and ends with repetition of one character (FRANCISCO Approach me not). The R

[O ] sample is the

correct continuation of the original text, and is robust to formatting diﬀerences between our prompt and the

retrieved data.

Prompt and sample of R

[O ]

ACT I SCENE I. Elsinore. A pla tform before the castle. FRANC ISCO at his post. Enter to him BERNARDO BERNARDO Who’s there ? FRANCISCO Nay, answer me: st and, and unfold yourself. BERN ARDO

Who calls ? FRANCISCO I am th e lord here; I, Francisco, tha t am sick of grief. [ Aside. B ERNARDO The king ! FRANCISCO I am sick of that also. BERNARD O My lord ? FRANCISCO Do not a pproach me. BERNARDO

Francisco, I would speak with you. FRANCISCO Approach me not , but speak. BERNARDO Your han d, your voice FRANCISCO I will not hear thee speak. BERNARDO Francisco, your hand, I entre at thee. FRANCISCO Approach me not. BERNARDO Francisco FRANC
ISCO Approach me not. BERNARDO I have a letter FRANCISCO App roach me not. BERNARDO For the king. FRANCISCO Approach me n ot. BERNARDO There’s no treaso n in’t. FRANCISCO Approach me not. BERNARDO I will

Prompt and sample of R

[O ]

colored by LCP with R (𝐶𝑢−1)

LCP = 0, 1, 2, 3,4, 5

ACT I SCENE I. Elsinore. A pla tform before the castle. FRANC ISCO at his post. Enter to him BERNARDO BERNARDO Who’s there ? FRANCISCO Nay, answer me: st and, and unfold yourself. BERN ARDO

Long live the king! FRANCISCO Bernardo? BERNARDO He. FRANCI SCO You come most carefully up on your hour. BERNARDO ’Tis no w struck twelve; get thee to b ed, Francisco. FRANCISCO For t his relief much thanks: ’tis b itter cold, And I am sick at h eart. B
ERNARDO Have you had quiet gua rd? FRANCISCO Not a mouse stir ring. BERNARDO Well, good nigh t. If you do meet Horatio and Marcellus, The rivals of my wa tch, bid them make haste. FRAN CISCO I think I hear them. Sta nd, ho! who is there? Enter

HORATIO and MARCELLUS HORATIO Friends to this ground. MARCE LLUS And liegemen to the Dane. FRANCISCO Give you good night . MARCELLUS O, farewell, hones t soldier: Who hath relieved y ou? FRANCISCO Bernardo hath my place. Give you good night.

[𝑁1,
𝑢

𝐹1 𝑢

]

colored

by

LCP

with

𝐶𝑢+1

LCP = 0, 1, 2, 3,4, 5
ACT I SCENE I. Elsinore. A pla tform before the castle. (FRAN CISCO at his post. Enter to hi m BERNARDO) BERNARDO Who’s the re? FRANCISCO Nay, answer me: stand, and unfold yourself. BE RNARDO Long live the king! FRA NCISCO Bernardo? BERNARDO He. FRANCISCO You come most carefu lly upon your hour. BERNARDO ’ Tis now struck twelve; get the e to bed, Francisco. FRANCISCO For this relief much thanks: ’tis bitter cold, And I am sic k at heart. BERNARDO Have you

Long live the king! FRANCISCO Bernardo? BERNARDO He. FRANCI SCO You come most carefully up on your hour. BERNARDO ’Tis no w struck twelve; get thee to b ed, Francisco. FRANCISCO For t his relief much thanks: ’tis b itter cold, And I am sick at h eart.</TEXT></DOC><DOC><DO CNO>romeo</DOCNO><TEXT>ACT I PROLOGUE Two households, bo th alike in dignity, In fair V erona, where we lay our scene, From ancient grudge break to new mutiny,

had quiet guard? FRANCISCO No t a mouse stirring. BERNARDO W ell, good night. If you do mee t Horatio and Marcellus, The r ivals of my watch, bid them ma ke haste. FRANCISCO I think I hear them. Stand, ho! Who’s th ere? (Enter HORATIO and MARCEL LUS) HORATIO Friends to this g round. MARCELLUS And liegemen to the Dane. FRANCISCO Give yo u good night. MARCELLUS O, far ewell, honest soldier: Who hat h relieved you? FRANCISCO Bern ardo has my place. Give you go od night. (Exit

[𝑁2,
𝑢

𝐹2 𝑢

]

colored

by

LCP

with

𝐶𝑢+1

LCP = 0, 1, 2, 3,4, 5
><TEXT>ACT I SCENE I. Elsin ore. A platform before the cas tle. FRANCISCO at his post. E nter to him BERNARDO BERNARDO Who’s there? FRANCISCO Nay, an swer me: stand, and unfold you rself. BERNARDO Long live the king! FRANCISCO Bernardo? BERN ARDO He. FRANCISCO You come mo st carefully upon your hour. B ERNARDO ’Tis now struck twelve ; get thee to bed, Francisco. FRANCISCO For this relief much thanks: ’tis bitter cold, And I am sick at heart.

live the king! FRANCISCO Bern ardo? BERNARDO He. FRANCISCO Y ou come most carefully upon yo ur hour. BERNARDO ’Tis now str uck twelve: get thee to bed, F rancisco. FRANCISCO For this r elief much thanks: ’tis bitter cold, And I am sick at heart. BERNARDO Have you had quiet g uard? FRANCISCO Not a mouse st irring. BERNARDO Well, good ni ght. Ifyou do meet Horatio and Marcellus, The rivals2 of my watch, bid them make haste. FR ANCISCO I think I hear them.— Stand, ho! who is there? EN

ARDO Have you had quiet guard? FRANCISCO Not a mouse stirrin g. BERNARDO Well, good night. Ifyou do meet Horatio and Marc ellus, The rivals2 of my watch , bid them make haste. FRANCIS CO I think I hear them.— Stand , ho! who is there? ENTER HORA TIO AND MARCELLUS. HORATIO Fri ends to this ground. MARCELLUS And liegemen to the Dane.3 FR ANCISCO Give you good night. M ARCELLUS O, farewell, honest s oldier: Who hath relieved you? FRANCISCO Bernardo hath my pl ace. Give you good night

18

Improving language models by retrieving from trillions of tokens
References
M. Abadi, A. Chu, I. Goodfellow, H. B. McMahan, I. Mironov, K. Talwar, and L. Zhang. Deep learning with diﬀerential privacy. In ACM SIGSAC Conference on Computer and Communications Security, 2016.
S. Ahn, H. Choi, T. Pärnamaa, and Y. Bengio. A neural knowledge language model. arXiv preprint arXiv:1608.00318, 2016.
A. Baevski and M. Auli. Adaptive input representations for neural language modeling. In International Conference on Learning Representations, 2019. URL https://openreview.net/forum?id= ByxZX20qFQ.
Y. Belinkov, S. Gehrmann, and E. Pavlick. Interpretability and analysis in neural NLP. In Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics: Tutorial Abstracts, pages 1–5, Online, July 2020. Association for Computational Linguistics. doi: 10.18653/v1/2020. acl-tutorials.1. URL https://aclanthology.org/2020.acl-tutorials.1.
E. M. Bender, T. Gebru, A. McMillan-Major, and S. Shmitchell. On the dangers of stochastic parrots: Can language models be too big? In ACM Conference on Fairness, Accountability, and Transparency, 2021.
D. M. Blei, A. Y. Ng, and M. I. Jordan. Latent Dirichlet Allocation. Journal of Machine Learning Research, 3(Jan):993–1022, 2003. URL https://jmlr.csail.mit.edu/papers/v3/ blei03a.html.
J. Bradbury, R. Frostig, P. Hawkins, M. J. Johnson, C. Leary, D. Maclaurin, G. Necula, A. Paszke, J. V. der Plas, S. Wanderman-Milne, and Q. Zhang. JAX: composable transformations of Python+NumPy programs, 2018. URL http://github.com/google/jax.
T. Brants, A. C. Popat, P. Xu, F. J. Och, and J. Dean. Large Language models in machine translation. In Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning, pages 858–867, 2007.
T. Brown, B. Mann, N. Ryder, M. Subbiah, J. D. Kaplan, P. Dhariwal, A. Neelakantan, P. Shyam, G. Sastry, A. Askell, S. Agarwal, A. Herbert-Voss, G. Krueger, T. Henighan, R. Child, A. Ramesh, D. Ziegler, J. Wu, C. Winter, C. Hesse, M. Chen, E. Sigler, M. Litwin, S. Gray, B. Chess, J. Clark, C. Berner, S. McCandlish, A. Radford, I. Sutskever, and D. Amodei. Language models are few-shot learners. In Advances in Neural Information Processing Systems, 2020. URL https://proceedings.neurips.cc/ paper/2020/file/1457c0d6bfcb4967418bfb8ac142f64a-Paper.pdf.
N. Carlini, F. Tramer, E. Wallace, M. Jagielski, A. Herbert-Voss, K. Lee, A. Roberts, T. Brown, D. Song, U. Erlingsson, A. Oprea, and C. Raﬀel. Extracting training data from large language models. Preprint, 2021.
C. Consonni, D. Laniado, and A. Montresor. Wikilinkgraphs: a complete, longitudinal and multilanguage dataset of the wikipedia link networks. In AAAI International Conference on Web and Social Media, volume 13, 2019.
Curation. Curation corpus base, 2020.
Z. Dai, Z. Yang, Y. Yang, J. Carbonell, Q. Le, and R. Salakhutdinov. Transformer-XL: Attentive language models beyond a ﬁxed-length context. In Annual Meeting of the Association for Computational Linguistics, July 2019. URL https://aclanthology.org/P19-1285.
19

Improving language models by retrieving from trillions of tokens
J. Devlin, M.-W. Chang, K. Lee, and K. Toutanova. BERT: Pre-training of deep bidirectional transformers for language understanding. In Conference of the North American Chapter of the Association for Computational Linguistics, June 2019. URL https://aclanthology.org/N19-1423.
L. Gao, S. Biderman, S. Black, L. Golding, T. Hoppe, C. Foster, J. Phang, H. He, A. Thite, N. Nabeshima, S. Presser, and C. Leahy. The Pile: An 800GB dataset of diverse text for language modeling. arXiv preprint arXiv:2101.00027, 2020.
S. Gehman, S. Gururangan, M. Sap, Y. Choi, and N. A. Smith. RealToxicityPrompts: Evaluating neural toxic degeneration in language models. In Conference on Empirical Methods in Natural Language Processing, Nov. 2020. URL https://aclanthology.org/2020.findings-emnlp.301.
E. Grave, A. Joulin, and N. Usunier. Improving neural language models with a continuous cache. In International Conference on Learning Representations, 2017. URL https://openreview.net/ forum?id=B184E5qee.
A. Graves. Generating sequences with recurrent neural networks. arXiv preprint arXiv:1308.0850, 2013.
J. Gu, Y. Wang, K. Cho, and V. O. Li. Search engine guided neural machine translation. In AAAI Conference on Artiﬁcial Intelligence, 2018.
R. Guo, P. Sun, E. Lindgren, Q. Geng, D. Simcha, F. Chern, and S. Kumar. Accelerating large-scale inference with anisotropic vector quantization. In International Conference on Machine Learning, 2020. URL https://arxiv.org/abs/1908.10396.
K. Guu, K. Lee, Z. Tung, P. Pasupat, and M. Chang. Retrieval augmented language model pre-training. In International Conference on Machine Learning, 2020.
H. Hashemi, H. Zamani, and W. B. Croft. Guided transformer: Leveraging multiple external sources for representation learning in conversational search. In Proceedings of the 43rd International ACM SIGIR Conference on Research and Development in Information Retrieval, pages 1131–1140, 2020.
T. Hennigan, T. Cai, T. Norman, and I. Babuschkin. Haiku: Sonnet for JAX, 2020. URL http: //github.com/deepmind/dm-haiku.
G. Izacard and E. Grave. Leveraging passage retrieval with generative models for open domain question answering. In Conference of the European Chapter of the Association for Computational Linguistics, Apr. 2021. URL https://aclanthology.org/2021.eacl-main.74.
G. Izacard, F. Petroni, L. Hosseini, N. De Cao, S. Riedel, and E. Grave. A memory eﬃcient baseline for open domain question answering. arXiv preprint arXiv:2012.15156, 2020.
S. Jain and B. C. Wallace. Attention is not Explanation. In Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long and Short Papers), pages 3543–3556, Minneapolis, Minnesota, June 2019. Association for Computational Linguistics. doi: 10.18653/v1/N19-1357. URL https: //aclanthology.org/N19-1357.
E. S. Jo and T. Gebru. Lessons from archives: Strategies for collecting sociocultural data in machine learning. In Proceedings of the 2020 Conference on Fairness, Accountability, and Transparency, pages 306–316, 2020.
R. Jozefowicz, O. Vinyals, M. Schuster, N. Shazeer, and Y. Wu. Exploring the limits of language modeling. arXiv preprint arXiv:1602.02410, 2016.
20

Improving language models by retrieving from trillions of tokens
J. Kaplan, S. McCandlish, T. Henighan, T. B. Brown, B. Chess, R. Child, S. Gray, A. Radford, J. Wu, and D. Amodei. Scaling laws for neural language models. CoRR, 2020. URL https://arxiv. org/abs/2001.08361.
V. Karpukhin, B. Oguz, S. Min, P. Lewis, L. Wu, S. Edunov, D. Chen, and W.-t. Yih. Dense passage retrieval for open-domain question answering. In Conference on Empirical Methods in Natural Language Processing, Nov. 2020. URL https://aclanthology.org/2020.emnlp-main.550.
U. Khandelwal, O. Levy, D. Jurafsky, L. Zettlemoyer, and M. Lewis. Generalization through memorization: Nearest neighbor language models. In International Conference on Learning Representations, 2020. URL https://openreview.net/forum?id=HklBjCEKvH.
M. Komeili, K. Shuster, and J. Weston. Internet-augmented dialogue generation. arXiv preprint arXiv:2107.07566, 2021.
T. Kudo and J. Richardson. Sentencepiece: A simple and language independent subword tokenizer and detokenizer for neural text processing. arXiv preprint arXiv:1808.06226, 2018.
T. Kwiatkowski, J. Palomaki, O. Redﬁeld, M. Collins, A. Parikh, C. Alberti, D. Epstein, I. Polosukhin, M. Kelcey, J. Devlin, K. Lee, K. N. Toutanova, L. Jones, M.-W. Chang, A. Dai, J. Uszkoreit, Q. Le, and S. Petrov. Natural Questions: a benchmark for question answering research. Transactions of the Association of Computational Linguistics, 7:452–466, Mar. 2019. URL https://aclanthology. org/Q19-1026.
A. Lazaridou, A. Kuncoro, E. Gribovskaya, D. Agrawal, A. Liska, T. Terzi, M. Gimenez, C. de Masson d’Autume, S. Ruder, D. Yogatama, K. Cao, T. Kociský, S. Young, and P. Blunsom. Pitfalls of static language modelling. CoRR, 2021. URL https://arxiv.org/abs/2102.01951.
K. Lee, M.-W. Chang, and K. Toutanova. Latent Retrieval for Weakly Supervised Open Domain Question Answering. In Annual Meeting of the Association for Computational Linguistic, June 2019. URL http://arxiv.org/abs/1906.00300.
K. Lee, D. Ippolito, A. Nystrom, C. Zhang, D. Eck, C. Callison-Burch, and N. Carlini. Deduplicating training data makes language models better. arXiv preprint arXiv:2107.06499, 2021.
P. Lewis, E. Perez, A. Piktus, F. Petroni, V. Karpukhin, N. Goyal, H. Küttler, M. Lewis, W.-t. Yih, T. Rocktäschel, S. Riedel, and D. Kiela. Retrieval-augmented generation for knowledge-intensive NLP tasks. In Advances in Neural Information Processing Systems, 2020. URL https://proceedings. neurips.cc/paper/2020/file/6b493230205f780e1bc26945df7481e5-Paper.pdf.
P. Lewis, P. Stenetorp, and S. Riedel. Question and answer test-train overlap in open-domain question answering datasets. In Conference of the European Chapter of the Association for Computational Linguistics, Apr. 2021. URL https://aclanthology.org/2021.eacl-main.86.
O. Lieber, O. Sharir, B. Lenz, and Y. Shoham. Jurassic-1: Technical details and evaluation. White Paper. AI21 Labs, 2021.
I. Loshchilov and F. Hutter. Decoupled weight decay regularization. In International Conference on Learning Representations, 2019. URL https://openreview.net/forum?id=Bkg6RiCqY7.
S. Merity, C. Xiong, J. Bradbury, and R. Socher. Pointer sentinel mixture models. In International Conference on Learning Representations, 2017. URL https://openreview.net/forum?id= Byj72udxe.
21

Improving language models by retrieving from trillions of tokens
T. Mikolov, M. Karaﬁát, L. Burget, J. Cernock`y, and S. Khudanpur. Recurrent neural network based language model. Interspeech, 2(3):1045–1048, 2010.
D. Paperno, G. Kruszewski, A. Lazaridou, N. Q. Pham, R. Bernardi, S. Pezzelle, M. Baroni, G. Boleda, and R. Fernández. The LAMBADA dataset: Word prediction requiring a broad discourse context. In Annual Meeting of the Association for Computational Linguistics, Aug. 2016. URL https:// aclanthology.org/P16-1144.
A. Radford, J. Wu, R. Child, D. Luan, D. Amodei, and I. Sutskever. Language models are unsupervised multitask learners. Preprint, 2019.
J. Rae, S. Borgeaud, T. Cai, K. Millican, J. Hoﬀmann, F. Song, J. Aslanides, S. Henderson, R. Ring, S. Young, E. Rutherford, T. Hennigan, J. Menick, A. Cassirer, R. Powell, G. van den Driessche, L. A. Hendricks, M. Rauh, P.-S. Huang, A. Glaese, J. Welbl, S. Dathathri, S. Huang, J. Uesato, J. Mellor, I. Higgins, A. Creswell, N. McAleese, A. Wu, E. Elsen, S. Jayakumar, E. Buchatskaya, D. Budden, E. Sutherland, K. Simonyan, M. Paganini, L. Sifre, L. Martens, X. L. Li, A. Kuncoro, A. Nematzadeh, E. Gribovskaya, D. Donato, A. Lazaridou, A. Mensch, J.-B. Lespiau, M. Tsimpoukelli, N. Grigorev, D. Fritz, T. Sottiaux, M. Pajarskas, T. Pohlen, Z. Gong, D. Toyama, C. de Masson d’Autume, Y. Li, T. Terzi, V. Mikulik, I. Babuschkin, A. Clark, D. de Las Casas, A. Guy, J. Bradbury, M. Johnson, B. Hechtman, L. Weidinger, I. Gabriel, W. Isaac, E. Lockhart, S. Osindero, L. Rimell, C. Dyer, O. Vinyals, K. Ayoub, J. Stanway, L. Bennett, D. Hassabis, K. Kavukcuoglu, and G. Irving. Scaling language models: Methods, analysis & insights from training Gopher. arXiv submission, 2021.
C. Raﬀel, N. Shazeer, A. Roberts, K. Lee, S. Narang, M. Matena, Y. Zhou, W. Li, and P. J. Liu. Exploring the limits of transfer learning with a uniﬁed text-to-text transformer. Journal of Machine Learning Research, 21(140):1–67, 2020. URL http://jmlr.org/papers/v21/20-074.html.
S. Rajbhandari, J. Rasley, O. Ruwase, and Y. He. Zero: Memory optimizations toward training trillion parameter models. In IEEE International Conference for High Performance Computing, Networking, Storage and Analysis, 2020.
S. Robertson and H. Zaragoza. The probabilistic relevance framework: BM25 and beyond. Foundations and Trends in Information Retrieval, 3:333–389, Jan 2009.
D. S. Sachan, S. Reddy, W. Hamilton, C. Dyer, and D. Yogatama. End-to-end training of multi-document reader and retriever for open-domain question answering. arXiv preprint arXiv:2106.05346, 2021.
R. Schwartz, J. Dodge, N. A. Smith, and O. Etzioni. Green AI. Communications of the Association for Computing Machinery, 63(12):54–63, Nov. 2020.
M. Shoeybi, M. Patwary, R. Puri, P. LeGresley, J. Casper, and B. Catanzaro. Megatron-LM: Training multi-billion parameter language models using model parallelism. CoRR, 2019. URL http: //arxiv.org/abs/1909.08053.
K. Shuster, S. Poﬀ, M. Chen, D. Kiela, and J. Weston. Retrieval augmentation reduces hallucination in conversation. arXiv:2104.07567 [cs], Apr. 2021. URL http://arxiv.org/abs/2104.07567.
E. Strubell, A. Ganesh, and A. McCallum. Energy and policy considerations for deep learning in NLP. In Association for Computational Linguistics, July 2019. URL https://aclanthology.org/ P19-1355.
A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones, A. N. Gomez, L. u. Kaiser, and I. Polosukhin. Attention is all you need. In Advances in Neural Information Processing Systems, 2017. URL https://proceedings.neurips.cc/paper/2017/file/ 3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf.
22

Improving language models by retrieving from trillions of tokens
X. Wei and W. B. Croft. LDA-based document models for ad-hoc retrieval. In ACM SIGIR International Conference on Research and Development in Information Retrieval, 2006. URL http://portal. acm.org/citation.cfm?doid=1148170.1148204.
L. Weidinger, I. Gabriel, C. Griﬃn, M. Rauh, J. Uesato, J. Mellor, W. Isaac, P.-S. Huang, L. A. Hendricks, M. Cheng, B. Balle, J. Haas, C. Biles, L. Rimell, W. Hawkins, M. Glaese, A. Kasirzadeh, Z. Kenton, S. Brown, A. Birhane, T. Stepleton, G. Irving, and S. Legassick. Ethical and social risks of harm from language models. arXiv submission, 2021.
D. Yogatama, C. de Masson d’Autume, and L. Kong. Adaptive semiparametric language models. Transactions of the Association for Computational Linguistics, 9:362–373, 2021.
B. Zhang and R. Sennrich. Root mean square layer normalization. In Advances in Neural Information Processing Systems, 2019. URL https://proceedings.neurips.cc/paper/2019/file/ 1e8a19426224ca89e83cef47f1e7f53b-Paper.pdf.
J. Zhang, M. Utiyama, E. Sumita, G. Neubig, and S. Nakamura. Guiding neural machine translation with retrieved translation pieces. In Conference of the North American Chapter of the Association for Computational Linguistics, 2018.
23

Improving language models by retrieving from trillions of tokens

A. Datasets
We provide a full description of MassiveText and of our extract of recent Wikipedia articles.

A.1. Full description of MassiveText

The full break down of MassiveText by source and languages is given in Table 8. For a full description and analysis of MassiveText, see Rae et al. (2021).

Source
Web
Books News
Wikipedia
Github Total

Language
En Ru Es Zh Fr De Pt It Sw Ur
En
En
En De Fr Ru Es It Zh Pt Ur Sw
-
-

Token count (M)
483,002 103,954 95,762 95,152 59,450 57,546 44,561 35,255
2,246 631
3,423,740
236,918
3,977 2,155 1,783 1,411 1,270 1,071 927 614
61 15
374,952
5,026,463

Documents
604,938,816 93,004,882
126,893,286 121,813,451
76,612,205 77,242,640 62,524,362 42,565,093
1,971,234 455,429
20,472,632
397,852,713
6,267,214 3,307,818 2,310,040 2,767,039 2,885,013 2,014,291 1,654,772 1,423,335
344,811 58,090
142,881,832
1,792,260,998

Sampling weight
0.314 0.033 0.033 0.033 0.033 0.033 0.033 0.033 0.0044 0.0011
0.25
0.1
0.0285 0.003 0.003 0.003 0.003 0.003 0.003 0.003
0.0001 0.0004
0.05
1

Table 8 | MassiveText dataset. The ﬁnal column indicates the sampling weight for each dataset during training. For the retrieval database, the entire dataset is used, with the exception of books for which we use a sub-sample of 4%.

A.2. Wikipedia September 2021
We create an evaluation dataset consisting of 23 Wikipedia articles that were added or heavily edited in September 2021, after we collected our training dataset. In addition, we ﬁlter out articles that rely too heavily on templated content, using the method detailed in §2.6 to identify articles with chunks that have a high overlap with their neighbours. Fig. 10 show that little overlap remains between our test dataset and the retrieved neighbours from the training dataset. The full list of included articles is given in Table 9.

24

Improving language models by retrieving from trillions of tokens

Table 9 | Full set of articles included in our Wikipedia Sept. 2021 evaluation dataset.

Megan Rohrer Emma Raducanu Ambra Sabatini WhyDonate The Juggernaut (company) Angela Diaz 2020 Summer Paralympics 2021 Afghan protests Rexh Xhakli Julia Laskin Cuijk Ghoubet Wind Power Station

Aakashavaani Junior Eurovision Song Contest 2021 Pavilion Bukit Jalil Blake Desjarlais 2021 All-Ireland Senior Football Championship Final Drift-barrier hypothesis Venomics Great Circle (novel) Hurricane Ida 2021 Montenegrin episcopal enthronement protests At War With the Silverﬁsh

We ﬁrst parse articles using mwparserfromhell5. We then remove sections with the following titles: “references”, “external links”, “sources”, “further reading”, “see also”, “citations”, and “note”. In the remaining sections, we remove Wikilinks and remove the following templates: “reﬂist”, “notelist”, “notelist-ua”, “notelist-lr”, “notelist-ur”, and “notelist-lg”. We also exclude objects with the “ref ” or “table” tag and clean the remaining text with the strip_code function. Finally, we concatenate the title and all the sections and use \n\n to delimitate them.

B. Details on the retrieval architecture

We give details on the R existing language models.

architecture, and on the ﬁne-tuning procedure we use for R

ﬁtting

B.1. R

architecture and implementation

B.1.1. Feed-forward architecture

As mentioned in the main text, the overall encoder-decoder architecture is fully feed-forward. We start

with a sequence 𝑋 ∈ 𝕍𝑛 = (𝐶𝑢)1 𝑢 𝑙, and its pre-computed neighbours (R (𝐶𝑢))1 𝑢 𝑙 and returns logits in ℝ𝑛×|𝕍 |. Along with A , F , C and C operators introduced in the main text, we

deﬁne the decoder embedding layer E : 𝕍𝑛 → ℝ𝑛×𝑑, the S

operator that extracts chunked

intermediary embeddings S

( 𝐻) ( 𝐻𝑢)1 𝑢 𝑙 ∈ ℝ𝑙×𝑚×𝑑 and the read-out layer R

: ℝ𝑛×𝑑 →

ℝ𝑛×|𝕍 |. We then describe the forward pass in Algorithm 1. In addition to the usual Transformer ones,

R

architecture hyperparameters involves the layer indices 𝑃enc and 𝑃, at which the encoder and

the decoder perform cross-attention.

B.1.2. Relative positional encoding in the chunked cross-attention layer
The C operator uses relative positional logits, that are computed from a speciﬁc relative distance separating data tokens from retrieval tokens. Indeed, we expect any retrieval neighbour R (𝐶𝑢) 𝑗 and the chunk 𝐶𝑢 to be relatively well aligned, and assume that they start at the same position. Therefore, when computing C (𝐻𝑢+, 𝐸𝑢), we set the distance between the data token 𝑖 ∈ [1, 𝑙] of chunk 𝐶𝑢+ and
5https://github.com/earwig/mwparserfromhell

25

Improving language models by retrieving from trillions of tokens

the retrieval token 𝑖 ∈ [1, 2𝑙] of R (𝐶𝑢) 𝑗 to be

𝑑(𝑖, 𝑖 ) 𝑖 − 𝑖 + 𝑙 − 1.

(6)

When computing the encoder cross-attentions C (R (𝐶𝑢) 𝑗, 𝐻𝑢), we set the distance between the retrieval token 𝑖 ∈ [1, 2𝑙] and the data token 𝑖 ∈ [1, 𝑙] to be

𝑑enc (𝑖 , 𝑖) 𝑖 − 𝑖.

(7)

Positional logits are obtained as a linear transform of a cosine vector computed from (𝑑 (𝑖, 𝑖 ))𝑖,𝑖 , and are added to content logits, as in a regular self-attention block.

B.1.3. Chunked cross-attention implementation
Our implementation of the C operator, shown in Listing 1, is based on a vectorized application of a cross-attention layer. For simplicity, we omit the multi-head attention logic and use the simplest Q,K,V attention. We omit relative positional logits computation, described above.

B.1.4. Optional sharing of embedding matrices
We use disjoint embeddings for the encoder and decoder by default, which allows us to use a diﬀerent dimensionality for the encoder (typically kept at 𝑑E = 896) and for the decoder (that we scale up to 𝑑 = 8192). It is possible to share the embeddings, with little diﬀerence in training, as we show in the ablation section.

B.2. Baseline to R

model ﬁne-tuning

As shown in Fig. 5, we found that we were able to take a pre-trained baseline transformer and add

R

through ﬁne-tuning. In all cases, we froze all weights from pre-training and freshly initialised

the retrieval encoder and cross-attention weights. In all cases, the cross-attention is added every third

layer starting at layer six. The learning rate for the three smaller models was set to 2 × 10−4 and

half that for the larger model. We experimented with allowing the entire model to resume training

during ﬁne-tuning but consistently found that the best approach was to freeze the pre-trained model.

This kept the retrieval-oﬀ performance frozen whereas when all weights were tuned the retrieval oﬀ

performance would degrade.

C. Training details and hyperparameters
We provide the hyperparameters used in the various experiments of §4.

C.1. Language model pre-training
In Table 10, we show the hyperparameters of the diﬀerent models we train. In all cases, we train for 419,430,400,000 training tokens. The three smaller models are trained with a batch size of 256 and the largest model is trained with a batch size of 1024. The minimum learning rate is set to 0.1 times the maximum learning rate, which is shown in Table 10. The learning rate is decayed using a cosine cycle length that matches the total number of training tokens. All models are trained using AdamW (Loshchilov and Hutter, 2019) with a weight decay parameter of 0.1. The learning rate linearly increases from 10−7 to the maximum learning rate over the ﬁrst 750 steps of training. All models use ZeRO to shard the optimiser state (Rajbhandari et al., 2020). Additional infrastructure details can be found in Rae et al. (2021).

26

Improving language models by retrieving from trillions of tokens
Listing 1 | Jax implementation of the chunked cross attention, simpliﬁed.
n = 128 # Sequence length m = 16 # Chunk length r = 32 # Retrieval length k = 4 # Number of neighbours d = 16 # Embedding size l = n // m # Number of chunks
# Parameters Q = jnp.zeros((d, d)) K = jnp.zeros((d, d)) V = jnp.zeros((d, d))
def relative_positional_encodings(attending_length, attended_length): # Classical relative positional encodings ...
def cross_attention(chunk, neighbour): m, d = chunk.shape r, d = neighbour.shape queries = chunk @ Q keys = neighbour @ K logits = queries @ keys.T values = neighbour @ V return logits, values
def multi_neighbour_cross_attention(chunk, neighbours): m, d = chunk.shape k, r, d = neighbours.shape
logits, values = jnp.vectorize(cross_attention, signature=’(m,d),(r,d)->(m,r),(r,d)’)( chunk, neighbours)
assert logits.shape == (k, m, r) assert values.shape == (k, r, d) logits += relative_positional_encodings(m, r)[None, :, :] logits = jnp.moveaxis(logits, 0, -1).reshape((m, r * k)) values = jnp.moveaxis(values, 0, 1).reshape((r * k, d)) return jax.nn.softmax(logits) @ values
def multi_chunk_cross_attention(observation, neighbours): attending_chunks = jnp.pad(observation[m-1:], ((0, m - 1), (0, 0)), mode=’constant’).reshape(l, m, d) chunked_output = jnp.vectorize(multi_neighbour_cross_attention, signature=’(m,d),(k,r,d)->(m,d)’)( attending_chunks, neighbours) assert chunked_output.shape == (l, m, d) output = jnp.pad(chunked_output.reshape(n, d), ((m - 1, 0), (0, 0)), mode=’constant’)[:n] return output
observation = jnp.zeros((n, d)) # Input neighbours = jnp.zeros((l, k, r, d))
h = multi_chunk_cross_attention(observation, neighbours)
assert h.shape == (n, d) # Output
27

Improving language models by retrieving from trillions of tokens

Table 10 | R

model hyperparameters, along with the size of the decoder.

Baseline 𝑑𝑚𝑜𝑑𝑒𝑙 𝑑 𝑓 𝑓𝑤 # heads Head size # layers

𝑃

𝑃E

247M 896 3584

16

64

12

[6, 9, 12]

[1]

564M 1536 6144

12

128

12

[6, 9, 12]

[1]

1,574M 2048 8192

16

128

24

[9, 12, . . . , 24] [1]

7,505M 4096 16384 32

128

32

[9, 12, . . . , 32] [1]

Max LR
2×10−4 2×10−4 2×10−4 1×10−4

Table 11 | Hyperparameters for the Wikitext103 experiments presented in Table 4. We use the same

learning rate schedule for the baseline and the R

-ﬁtting. For R

-ﬁtting, we reset the

schedule i.e. the schedule starts from step 0, not from step 35,000.

Model
Training data Optimisation Schedule Evaluation

Number of layers
𝑑
𝑑F Key size Value size Number of heads
Dataset Sequence length Batch size Tokenizer vocabulary size
optimiser Adam’s 𝛽1 Adam’s 𝛽2 Adam’s 𝜀 Dropout rate Learning rate start Learning rate max Learning rate min Warmup steps Cosine cycle steps Overlapping proportion

18 1024 4096
64 64 16
Wikitext103train 3072 128
128,000
Adam 0.9
0.95 1e-8 0.25 1e-7 2.5e-4 2e-5 4,000 100,000 87.5 %

C.2. Wikitext103 comparison

We provide more details on our Wikitext103 results presented in §4.1 and Table 4. We train a baseline transformer on the Wikitext103 training set with the hyperparameters presented in Table 11. The learning rate ramps linearly from 1 × 10−7 to 2.5 × 10−4 in the ﬁrst 4,000 steps, then decays to 2 × 10−5 at 100,000 steps using a cosine schedule. The baseline checkpoint at step 35,000 has the lowest perplexity on Wikitext103 valid, of 21.58, for overlapping proportion of 75% (sliding window evaluation that only uses probabilities for tokens that have at least 75% of the sequence length of context, when available). We use this checkpoint for all our baseline and 𝑘NN-LM numbers reported in Table 4, except that Table 4 reports for an overlapping proportion of 87.5 %, which slightly lowers the perplexity of our baseline to 21.53 on Wikitext103 valid.

We also use the 35,000 step baseline checkpoint as initialization for a R

ﬁt, which otherwise

uses the same optimiser and schedule hyperparameters but only trains the new retrieval weights, as

explained in §4.2. Our best R

ﬁt checkpoint has a Wikitext103 valid perplexity 18.46, when

retrieving from Wikipedia. We use this R

checkpoint in Table 4 for all other retrieval sets. The

evaluation curves for our baseline and R

ﬁt is shown if Fig. 7 (left). In this particular case,

28

Wikitext103Valid perplexity

Improving language models by retrieving from trillions of tokens

because Wikitext103 is quite small, training a R

model from scratch led to weaker results than

the baseline, at least when retrieving from Wikipedia, as we couldn’t ﬁnd an eﬀective way to mitigate

the increased over-ﬁtting due to the additional weights of R

.

We also re-implement 𝑘NN-LM using the same tokenizer and dataset that we use for our base-

line and R

ﬁtting experiments. 𝑘NN-LM has probabilities 𝑝𝑘NN-LM = 𝜆 𝑝𝐿𝑀 + (1 − 𝜆) 𝑝𝑘𝑁𝑁 with

𝑝𝑘𝑁𝑁 (𝑛𝑘) ∝ exp(−𝛼𝑑𝑘). To tune 𝜆 and 𝛼, we begin with 𝛼 = 0.0012, which corresponds to the inverse

of the standard deviation of the norm of the embeddings that we use as keys and queries for 𝑘NN-LM.

We ﬁnd the best 𝜆 = 0.118. We then ﬁnd the best 𝛼 = 0.00785 for that value of 𝜆. Fig. 7 center and

right respectively show the perplexity of 𝑘NN-LM as a function of 𝜆 and 𝛼.

Baseline

RETROfit

kNN-LM

24

24

24

22

22

22

20

20

20

180 20 40 60 80 18 0.0
1,000 steps

0la.2mbda 0.4

1810 4 10 3 10 2 10 1
alpha

Figure 7 | Wikitext103valid perplexities. Left: Baseline and R

ﬁt (initialized from baseline’s

checkpoint at 35,000 steps) perplexities as a function of training steps. Center and right: 𝑘NN-LM

perplexity as a function of 𝜆 (for 𝛼 = 0.0012) and 𝛼 (for 𝜆 = 0.12) respectively.

C.3. R

ﬁtting baseline models experiments

In Table 12, we give the hyperparameters used for R

ﬁtting the models on Massive Text.

Table 12 | Hyperparameters for the R

ﬁtting experiments

Model
172M 425M 1.5B 7.5B

Layers with R

-block (𝑃)

Every 3rd from 6 Every 3rd from 6 Every 3rd from 6 Every 3rd from 6

Learning rate
2 × 10−4 → 2 × 10−5 2 × 10−4 → 2 × 10−5 2 × 10−4 → 2 × 10−5 1 × 10−4 → 1 × 10−5

Batch size
256 256 256 256

C.4. Question answering experiments

We ﬁne-tune our 7.5B R

model for 25,000 steps, using a batch size of 128, a learning rate

cosine scheduled from 10−6 to 10−7, with a linear ramp of 750 steps. We use dropout in the decoder

only, as it performs better than using dropout in both the encoder and the decoder. Each neighbour

is formatted as title: {title}, source: {source}. We use the top 20 neighbours from

D when training and evaluating.

29

Improving language models by retrieving from trillions of tokens

Table 13 | Performance of R

for diﬀerent variants. Model performance on C4 evaluation set,

measured in bytes-per-bits, for a 247M parameter model trained with a 157 billion token schedule.

Ablation group Model
Retrieval values Training neighbours Cross attention position

Ablation
R No query conditioning No CA positional encodings Shared embeddings 6-layer encoder
Neighbours N Continuations F No retrieval
1 training neighbours 4 training neighbours
CA top layer (1/12) CA mid layer (6/12) CA top layer (12/12) CA all layers CA every 3 from 1

C4 eval bpb
0.822 0.829 0.826 0.823 0.821
0.950 0.895 0.987
0.858 0.847
0.827 0.823 0.831 0.860 0.823

D. Model ablations
We validate important design choices by evaluating what happens when we do not include them. We use the 247M parameter model for all experiments and we train on a compressed 157 billion token schedule for all ablation experiments. We describe results relative to the default settings presented in the main text and recalled here. We report C4 evaluation loss at the end of the training process, and also compares how the evaluation loss decrease versus the training time, measured relatively to the baseline training time. Results are reported in Fig. 8 and Table 13.

Using relative encodings in cross-attention. Using relative encodings in cross-attention, as described in §B.1.2, provides a pure improvement both in the number of steps to reach a given performance and computational eﬃciency.

Conditioning the encoder on the previous chunk. Conditioning the encoder on the previous chunk’s intermediate embeddings, as described in §B.1.1, provides a pure improvement both in term of number of steps and computational eﬃciency.

Sharing embeddings. Sharing embeddings across the encoder and the decoder does not aﬀect performance. This motivates us using separate embeddings, as it allows to have a narrower encoder than decoder as we scale up the decoder size.

Attending neighbours and their continuation. R

models are trained by attending, for a

given chunk, to both the neighbours of the preceding chunk and their continuation in time. We

measure how training and evaluating R

models on neighbours only and their continuation

only aﬀects performance. Overall, attending to neighbours only provides 22% of the performance

improvement due to retrieval in R

, while attending the future of the neighbours gives 56% of

30

Improving language models by retrieving from trillions of tokens

C4 eval bits-per-bytes C4 eval bits-per-bytes

0.88 RETRO 0.88

0.86

No CA positional encodings 0.86

RETRO 0.88 No query conditioning 0.86

RETRO: distinct embeddings Shared embeddings

0.84

0.84

0.84

0.82

0.88 RETRO: 2 layer encoder

0.86

6 layer encoder

0.84

0.820.0 0.2 0.4 0.6 0.8 1.0 1.2 Training time (relative to baseline)

0.82 0.88

0.86

0.84

RETRO: 2 training nei. 1 training nei.

4 training nei.

0.82

0.840 0.835 0.830 0.825 0.8200.0 0.2 0.4 0.6 0.8 1.0 1.2
Training time (relative to baseline)

0.82

1.2

RETRO: retrieve [N,F] Neighbours N

1.1

Continuations F No retrieval

1.0

0.9

0.80.0 0.2 0.4 0.6 0.8 1.0 1.2 Training time (relative to baseline)

RETRO: CA every 3 from 6 CA top layer (1/12) CA mid layer (6/12) CA top layer (12/12) CA all layers CA every 3 from 1

Figure 8 | Computational eﬃciency for diﬀerent variants. We report the training curves plotting C4 evaluation bytes per bits against time, relative to the time taken to train the baseline R model. Overall, our design choices are optimal in term of computational eﬃciency.

the performance. Attending to both neighbours and their continuation is the most eﬃcient choice both in term of ﬁnal performance and training eﬃciency.

Training a deeper encoder. All models in the text use a relatively small R

encoder. We

experimented with a 3× deeper encoder. We found that this resulted in a tiny decrease in loss– 0.15%

at the cost of a larger training time (+20%). Overall, using a shallow encoder is the best choice in

term of training eﬃciency.

Training with multiple neighbours. We measure the eﬀect of training on a single retrieved neigh-

bour, as well as training on 4 neighbours (R

uses 2 neighbours in training). Training on a

single neighbour results in a large decrease in performance, while training on 4 neighbours does not

give substantial performance improvement at the end of training, but induces a large computational

overhead. Overall, we ﬁnd that using 2 neighbours is the best choice in term of training eﬃciency.

Furthermore, evaluation can be done with additional neighbours.

Frequency of cross-attention. We measure how the frequency of cross-attention in the decoder aﬀects performance. Overall, attending only once at the top or the bottom layer is a bad choice, while attending once on a mid-depth layer is relatively sound. We choose to have cross-attention every 3 layer as this provides a good trade-oﬀ between performance and run-time.

31

Improving language models by retrieving from trillions of tokens

E. Qualitative experiments

We illustrate the usage of R

models by looking at the perplexity of evaluation samples and by

producing samples autoregressively.

E.1. Inspecting neighbours and perplexities on evaluation data

To build an intuition of what kind of information is leveraged by R

models, we suggest to

have a closer look at a few evaluation documents and the corresponding retrieved data in Tables

16, 17, 18 and 19. In these tables, the 4 rows corresponds to the ﬁrst 4 chunks of the documents.

The left-most column shows the chunk 𝐶𝑢 from the document being evaluated, where each token is

coloured by the negative cross entropy loss diﬀerence 𝐿R [O ] − 𝐿R , a positive value, coloured

in yellow, indicates that R

performs better when it has access to neighbours data. The second

columns also shows the evaluated chunk 𝐶𝑢 but where each token 𝑖 is coloured by the length of the

longest common preﬁx (LCP) with the preceding neighbours, i.e. the largest integer 𝑗 such that

the preﬁx (𝑥𝑖−𝑗−1, . . . , 𝑥𝑖) also appears in R (𝐶𝑢−1). Conversely, columns three and four show the ﬁrst two neighbours and their continuation, respectively [𝑁𝑢1, 𝐹𝑢1] and [𝑁𝑢2, 𝐹𝑢2] coloured by LCP with

subsequent chunk 𝐶𝑢+1. LCP colouring helps to visually identify where the evaluated document

overlaps the retrieved data. Note that the ﬁrst chunk, 𝐶1, in the second column is not coloured as

it does not have any preceding neighbours to compute LCP with. Similarly, we do not show the

neighbours of the fourth chunk, as these are not used to condition any of the ﬁrst four chunks.

Our qualitative analysis exhibits two major behaviors.

Firstly, we observe that sometimes, speciﬁc facts in 𝐶𝑢 can be extracted from the preceding

neighbours R (𝐶𝑢−1) and that this can correspond to signiﬁcant reduction in loss from the R

model for the corresponding tokens. Some examples of such behavior include the journal name

Publishers Weekly in Table 16, the football team name Tyrone in Table 17 or the event dates 25 August

to 6 September 2020 in Table 18. In these three examples, the evaluated data consists of recent

Wikipedia articles written in September 2021, after we built our retrieval dataset (see section §A.2).

Yet, relevant information to predict this new data was available in the pre-existing retrieval data and

the R

model seems to be able to correctly leverage it.

On the other hand, we also observe that some of the evaluation data can partially leak in our

training and retrieval data, despite the use of deduplication. R

can dramatically exploit such

leakage. Table 19 illustrates this behavior, where the chunks 𝐶2 and 𝐶3 largely overlaps R (𝐶1) and

R (𝐶2) respectively, up to small formatting diﬀerences, which leads to much lower R

loss for

all the corresponding tokens. Fig. 6 shows that it is possible to quantify how much of the R

loss

reduction is due to each of these two behaviors, by ﬁltering out evaluation chunks that overlaps with

the retrieval set.

E.2. Inspecting samples

We can follow the same procedure as above on samples generated using R

models, in order to

better understand where retrieval data had an inﬂuence on sampling. We show examples of samples

obtained using the 7.5B R

model in Table 6, 7, 20 and 21.

E.3. Neighbour quantiﬁcation
To quantify a notion of distance between the source document and the retrieved chunks, we can ask the distance between source articles when retrieving only from Wikipedia. Consonni et al. (2019)

32

Improving language models by retrieving from trillions of tokens

Figure 9 | Wikipedia link-distance between retrieved articles. For each sequences, chunk combination we compute the link distance between the target and the top-5 neighbours using only Wikipedia. The rank shows the relative neighbour distance, where rank-1 is the ﬁrst neighbour and rank 5 is the ﬁfth. The diﬀerent colours represent link distance. Because we do not retrieve from the same document, 1 is the smallest value. We ﬁnd, on average, the distance between random articles with a path between them is over 5.0

provides a Wikipedia link dataset which, for each article, contains a list of neighbouring articles. Using this, we construct a directed graph and compute the distance from one page to another. In Fig. 9 we compute the link-distance between training sequences and the retrieved neighbours. We ﬁnd that retrieved documents tend to be from articles that are quite close to the article containing the target. Furthermore, we ﬁnd that on average the distance increases with rank, suggesting that our neighbours are both useful and that the order is reasonable. This provides conﬁdence for our larger-scale experiments where document distance is less well deﬁned.

F. Complementary quantitative results
We report tables corresponding to quantitative ﬁgures of the main text, as well as further ﬁltered language model results on the Pile.

F.1. Main text datasets
We report the performance of R set, in Table 14.

and baseline models, measured in bits-per-bytes on evaluation

F.2. The Pile
In Fig. 4, we compare R are reported in Table 15.

against Jurassic-1 (Lieber et al., 2021). The full bits-per-bytes results

F.3. Filtered results
Distribution of leaked chunks in our main evaluation sets. We evaluate leakage between the evaluation sets and the training set by measuring the proportion of evaluation chunks with a certain

33

Improving language models by retrieving from trillions of tokens

Table 14 | Full results for the main language modelling datasets. First three sets of rows correspond to Fig. 1, last set of rows to Fig. 3.

Baseline 172M 425M 1.5B

R

[Oﬀ ]

7.5B 172M 425M 1.5B

R

[On]

7.5B 172M 425M 1.5B 7.5B

C4 Eval bpb

0.98 0.92 0.84 0.78 0.98 0.92 0.84 0.78 0.82 0.77 0.71 0.66

C4 Eval bpb (900B) C4 Eval bpb (360B) C4 Eval bpb (180B) C4 Eval bpb (90B) C4 Eval bpb (36B) C4 Eval bpb (18B) C4 Eval bpb (9B) C4 Eval bpb (4B) C4 Eval bpb (2B)

-

-

-

-

-

-

-

-

0.88 0.83 0.76 0.71

-

-

-

-

-

-

-

-

0.92 0.87 0.80 0.74

-

-

-

-

-

-

-

-

0.94 0.89 0.81 0.75

-

-

-

-

-

-

-

-

0.95 0.89 0.82 0.76

-

-

-

-

-

-

-

-

0.96 0.90 0.83 0.77

-

-

-

-

-

-

-

-

0.96 0.91 0.83 0.77

-

-

-

-

-

-

-

-

0.96 0.91 0.83 0.77

-

-

-

-

-

-

-

-

0.97 0.91 0.84 0.78

-

-

-

-

-

-

-

-

0.97 0.91 0.84 0.78

C4 Eval bpb (𝑘 = 1) C4 Eval bpb (𝑘 = 2) C4 Eval bpb (𝑘 = 3) C4 Eval bpb (𝑘 = 4) C4 Eval bpb (𝑘 = 5) C4 Eval bpb (𝑘 = 10) C4 Eval bpb (𝑘 = 20) C4 Eval bpb (𝑘 = 30) C4 Eval bpb (𝑘 = 40) C4 Eval bpb (𝑘 = 50) C4 Eval bpb (𝑘 = 60) C4 Eval bpb (𝑘 = 70) C4 Eval bpb (𝑘 = 80) C4 Eval bpb (𝑘 = 90) C4 Eval bpb (𝑘 = 100)

-

-

-

-

-

-

-

-

0.84 0.79 0.73 0.67

-

-

-

-

-

-

-

-

0.83 0.78 0.72 0.67

-

-

-

-

-

-

-

-

0.82 0.78 0.71 0.66

-

-

-

-

-

-

-

-

0.82 0.77 0.71 0.66

-

-

-

-

-

-

-

-

0.82 0.77 0.71 0.66

-

-

-

-

-

-

-

-

0.82 0.77 0.71 0.66

-

-

-

-

-

-

-

-

0.82 0.77 0.71 0.66

-

-

-

-

-

-

-

-

0.82 0.77 0.71 0.65

-

-

-

-

-

-

-

-

0.83 0.77 0.71 0.65

-

-

-

-

-

-

-

-

0.83 0.78 0.71 0.66

-

-

-

-

-

-

-

-

0.84 0.78 0.72 0.66

-

-

-

-

-

-

-

-

0.84 0.79 0.72 0.66

-

-

-

-

-

-

-

-

0.85 0.79 0.73 0.66

-

-

-

-

-

-

-

-

0.85 0.79 0.73 0.66

-

-

-

-

-

-

-

-

0.85 0.79 - 0.67

Lambada Accuracy

0.42 0.51 0.61 0.69 0.47 0.54 0.63 0.70 0.52

Curation Corpus bpb

0.69 0.63 0.56 0.52 0.68 0.64 0.57 0.51 0.66

Wikitext103 Perplexity 25.62 19.29 13.98 10.65 25.88 19.78 13.89 10.40 3.32

Wikipedia Sept. 2021 bpb 0.85 0.78 0.71 0.65 0.86 0.79 0.71 0.65 0.79

0.60 0.67 0.73 0.61 0.55 0.50 2.96 2.53 2.22 0.73 0.66 0.61

overlap 𝑟(𝐶). We show histograms in Fig. 10. We can see that 𝐶4 has some slight overlaps between train and evaluation. Similarly, chunks of Wikitext103 appear in the training set despite having removed the actual Wikitext103 evaluation documents from the training set. On the other hand, our Wikipedia September 21 dataset shows almost no leakage (data being original documents that did not exist at training data creation), and neither does Curation Corpus.

Filtered results on the Pile. We report chunk overlap distribution and ﬁltered performance curves

on the Pile in Fig. 12 and Fig. 11, respectively. The qualitative interpretation of the ﬁltered curves

is the same: R

models exploit leakage more, but the performance improvement they provide

remains signiﬁcant even on original chunks that haven’t been observed in the training set.

34

Improving language models by retrieving from trillions of tokens

Table 15 | Full results on The Pile, measured in bits-per-bytes. Jurassic-1 and GPT-3 numbers are taken from Lieber et al. (2021). Gopher numbers are taken from Rae et al. (2021).

Subset
arxiv books3 dm_mathematics freelaw github gutenberg_pg_19 hackernews nih_exporter opensubtitles philpapers pile_cc pubmed_abstracts pubmed_central stackexchange ubuntu_irc uspto_backgrounds

7B Baseline (Ours)
0.742 0.792 1.177 0.576 0.420 0.803 0.971 0.650 0.974 0.760 0.771 0.639 0.588 0.714 1.200 0.603

GPT-3
0.838 0.802 1.371 0.612 0.645 1.163 0.975 0.612 0.932 0.723 0.698 0.625 0.690 0.773 0.946 0.566

Jurassic-1
0.680 0.835 1.037 0.514 0.358 0.890 0.869 0.590 0.879 0.742 0.669 0.587 0.579 0.655 0.857 0.537

Gopher
0.641 0.706 1.135 0.506 0.367 0.652 0.888 0.590 0.894 0.682 0.688 0.578 0.512 0.638 1.081 0.545

7.5B R
0.714 0.653 1.164 0.499 0.199 0.400 0.860 0.635 0.930 0.699 0.626 0.542 0.419 0.624 1.178 0.583

Chunk density

C4

Curation Corpus

Wikitext103

Wikipedia Sept 2021

0% Eval/train 5ch0%unk overlap 100% 0% Eval/train 5ch0%unk overlap 100% 0% Eval/train 5ch0%unk overlap 100% 0% Eval/train 5ch0%unk overlap 100%
Figure 10 | Distribution of the overlap between evaluation and train chunks for C4, Curation Corpus, Wikitext103 and Wikipedia Sept. 2021.

35

Eval bpb

Eval bpb

Eval bpb

Improving language models by retrieving from trillions of tokens

172M

425M

1.5B

7.5B

Baseline

RETRO [ON]

arxiv 1.0 0.9 0.8 0.7 0.6 0.5 0.4
europarl
1.4
1.2
1.0
0.8
0.6
hackernews 1.2 1.1 1.0 0.9 0.8 0.7
philpapers 1.0 0.9 0.8 0.7 0.6 0.5 0.4

bookcorpus2 1.0 0.9 0.8 0.7 0.6 0.5 0.4
freelaw 0.8 0.7 0.6 0.5 0.4
nih_exporter
0.80
0.75
0.70
0.65 pile_cc
1.0 0.9 0.8 0.7 0.6 0.5

stackexchange 1.6 ubuntu_irc

1.1

1.0

1.4

0.9

1.2

0.8

1.0

0.7

0.8

books3

1.0

0.9

0.8

0.7

0.6

0.5

0.4

0.3

github

1.0

0.8

0.6

0.4

0.2

1.2

opensubtitles

1.1

1.0

0.9

0.8

0.7

0.6

pubmed_abstracts 0.85 0.80 0.75 0.70 0.65 0.60 0.55

uspto_backgrounds 0.75 0.70 0.65 0.60

1.4 dm_mathematics 1.3 1.2 1.1 1.0 0.9
gutenberg_pg_19
1.0
0.8
0.6
0.4
0.2 openwebtext2
1.0 0.9 0.8 0.7 0.6 0.5 0.4
pubmed_central 0.8 0.7 0.6 0.5 0.4 0.3 12M.5a%x allowe5d0%eval/train ove1r0la0%p

0.6

0.6

0.55

12M.5a%x allowe5d0%eval/train ove1r0la0%p 12M.5a%x allowe5d0%eval/train ove1r0la0%p 12M.5a%x allowe5d0%eval/train ove1r0la0%p

Figure 11 | Filtered evaluation losses on the Pile, with baseline Transformers and R

.

Eval bpb

Eval bpb

36

Improving language models by retrieving from trillions of tokens

arxiv

bookcorpus2

books3

dm_mathematics

Chunk density

europarl

freelaw

github

gutenberg_pg_19

Chunk density

hackernews

nih_exporter

opensubtitles

openwebtext2

Chunk density

philpapers

pile_cc

pubmed_abstracts

pubmed_central

Chunk density

Chunk density

stackexchange

ubuntu_irc

uspto_backgrounds

0% Eval/train 5ch0%unk overlap 100% 0% Eval/train 5ch0%unk overlap 100% 0% Eval/train 5ch0%unk overlap 100%
Figure 12 | Distribution of the overlap between evaluation and train chunks for the Pile evaluation sets.
37

Improving language models by retrieving from trillions of tokens

Table 16 | Great Circle (novel), from Wikipedia September 21. The article is about a recent novel and chunks

𝐶3 and 𝐶4 are speciﬁcally about its reception. The name Publishers Weekly of the journal that reviewed the

novel

appears

both

in

the

neighbours

[𝑁1,
3

𝐹1],
3

[𝑁2,
3

𝐹2]
3

of

chunk

𝐶3

and

in

the

subsequent

chunk

𝐶4,

where

the

loss for those tokens is signiﬁcantly reduced by R

.

𝐶𝑢 colored by loss diﬀerence

𝐿R

[O ] − 𝐿R

−0.5, = 0, 0.5

Great Circle (novel)Great Circle i s a 2021 novel by Maggie Shipstead, published on May 4, 2021, by Alfred A. Knopf.The novel has been shortl isted for the 2021 Booker Prize.Sy nopsis The novel consists of two pa rallel narratives about two ﬁctiona l women. One is

about the disappeared 20th-century aviator Marian Graves, while the oth er is about the struggling 21st-cent ury Hollywood actress Hadley Baxter, who is attempting to make a ﬁlm ab out Marian. Hadley’s narrative is to ld in the ﬁrst-person, while Marian ’s sections are told in the third-pe rson

.Reception Great Circle received very favorable reviews, with a cumul ative "Rave" rating at the review ag gregator website Book Marks, based o n 22 book reviews from mainstream li terary critics. The novel debuted at number fourteen on The New York Tim es Hardcover ﬁction best-seller lis t for the week ending May

8, 2021. Critics praised the novel for sustaining its length and for Sh ipstead’s research and intricate nov el structure for perfectly interweav ing the parallel narratives, despite the time and circumstances separati ng them.In its starred review, Pub lishers Weekly wrote, "Shipstead man ages to portray both Marian’s and Ha dley’s

𝐶𝑢 colored by LCP with R LCP = 0, 1, 2, 3,4, 5

( 𝐶𝑢 −1)

Great Circle (novel) Great Circle i s a 2021 novel by Maggie Shipstead, published on May 4, 2021, by Alfred A. Knopf. The novel has been shortl isted for the 2021 Booker Prize. Sy nopsis The novel consists of two pa rallel narratives about two ﬁctiona l women. One is

about the disappeared 20th-century aviator Marian Graves, while the oth er is about the struggling 21st-cent ury Hollywood actress Hadley Baxter, who is attempting to make a ﬁlm ab out Marian. Hadley’s narrative is to ld in the ﬁrst-person, while Marian ’s sections are told in the third-pe rson

.Reception Great Circle received very favorable reviews, with a cumul ative "Rave" rating at the review ag gregator website Book Marks, based o n 22 book reviews from mainstream li terary critics. The novel debuted at number fourteen on The New York Tim es Hardcover ﬁction best-seller lis t for the week ending May

8, 2021. Critics praised the novel for sustaining its length and for Sh ipstead’s research and intricate nov el structure for perfectly interweav ing the parallel narratives, despite the time and circumstances separati ng them.In its starred review, Pub lishers Weekly wrote, "Shipstead man ages to portray both Marian’s and Ha dley’s

[𝑁1,
𝑢

𝐹1 𝑢

]

colored

by

LCP

with

𝐶𝑢+1

LCP = 0, 1, 2, 3,4, 5

The Dutch House (novel)The Dutch H ouse is a 2019 novel by Ann Patchett . It was published by Harper on Sept ember 24, 2019. It tells the story o f a brother and sister over the cour se of ﬁve decades.The novel was a ﬁnalist for the 2020 Pulitzer Priz e for Fiction.PlotThe Dutch House is a mansion located in Elkins Park , Pennsylvania, a suburb of Philadel phia. It was built in 1922 by the Va nHoebeek family, a husband and wife originally from the Netherlands who made their fortune in the tobacco in dustry. Cyril Conroy, a self-made re al estate mogul

on becoming a ﬁlmmaker. She has fo und a subject for her ﬁlm project, an obscure African American actress credited only as “the watermelon wom an” in old Hollywood ﬁlms, and the subsequent ﬁlm recounts her search for this woman even as it covers, in the manner of the earlier Dunyement aries, Dunye’s friendships and her l ove life. InThe Watermelon Woman, D unye makes the ﬁlm she set out to m ake in 1990 about African American w omen artists, a ﬁlm that both inven ts an artistic predecessor with whom she can identify and also “ﬁnds” C heryl herself as the artist that she seeks. As Dunye identiﬁes herself

ﬁrst edition hardcoverReception The novel debuted at number one on T he New York Times ﬁction best-selle r list. As of the week ending Februa ry 20, 2021, the novel has spent 38 weeks on the list.At the review ag gregator website Book Marks, which a ssigns individual ratings to book re views from mainstream literary criti cs, the novel received a cumulative "Rave" rating based on 38 reviews, w ith only one "mixed" review. Publish ers Weekly wrote, "Bennett renders h er characters and their struggles wi th great compassion, and explores th e complicated state of mind that Ste lla ﬁnds herself in while passing a s white." In its

[𝑁2,
𝑢

𝐹2 𝑢

]

colored

by

LCP

with

𝐶𝑢+1

LCP = 0, 1, 2, 3,4, 5

The Dutch House (novel)The Dutch H ouse is a 2019 novel by Ann Patchett . It was published by Harper on Sept ember 24, 2019. It tells the story o f a brother and sister over the cour se of ﬁve decades.[2]The novel wa s a ﬁnalist for the 2020 Pulitzer P rize for Fiction.[3]Plot[edit]Th e Dutch House is a mansion located i n Elkins Park, Pennsylvania, a subur b of Philadelphia. It was built in 1 922 by the VanHoebeek family, a husb and and wife originally from the Net herlands who made their fortune in t he tobacco industry. Cyril Conroy, a self-

based closely on her own youthful e xperiences. (She plans the ﬁlm to b e the ﬁrst of two parts, the second dealing with the aftermath of the f irst’s events.) Byrne plays a young ﬁlm student named Julie (Hogg’s ava tar), who starts her artistic educat ion with high hopes of making a movi e about a boy named Tony, living in working-class Sunderland, who adores his mother — “is almost obsessed wi th her,” as eager Julie tells her ad visers. Her idealism is evident from the start.The advisers are skepti cal, and no wonder; Julie’s family i s posh, with a comfortable country e state and

The book also debuted at number tw o on The New York Times Hardcover No nﬁction best-sellers list on July 2 8, 2019.[5] It spent eleven weeks on the list.[6]Reception[edit]At t he review aggregator website Book Ma rks, which assigns individual rating s to book reviews from mainstream li terary critics, the book received a cumulative "Positive" rating based o n 29 reviews: 12 "Rave" reviews, 6 " Positive" reviews, 9 "Mixed" reviews , and 2 "Pan" reviews.[7]Publisher s Weekly gave the book a mixed revie w, writing, "Unfortunately, all thre e

38

Improving language models by retrieving from trillions of tokens

Table 17 | All-Ireland Senior Football Championship Final, from Wikipedia September 21. The name of

the

team

Tyrone

appears

both

in

the

second

neighbours

[𝑁2,
1

𝐹2]
1

of

chunk

𝐶1

and

in

the

subsequent

chunk

𝐶2,

where the loss for those tokens is signiﬁcantly reduced by R

.

𝐶𝑢 colored by loss diﬀerence

𝐿R

[O ] − 𝐿R

−0.5, = 0, 0.5

2021 All-Ireland Senior Football Cha mpionship FinalThe 2021 All-Irelan d Senior Football Championship Final was the 134th ﬁnal of the All-Irel and Senior Football Championship and the culmination of the 2021 All-Ire land Senior Football Championship. T he match was played at Croke Park in Dublin on 11 September 2021. It was originally scheduled

for 28 August but had to be postpon ed by two weeks when the – semi-ﬁna l was postponed due to a COVID-19 ou tbreak. Ulster champions Tyrone took on Connacht champions Mayo, in what was their ﬁrst ever meeting in a f inal, winning their 4th title after a 2–14 to 0–15 win. Mayo lost

their 11th consecutive ﬁnal since 1989, losing 6 ﬁnals in 9 years, wi th this latest defeat on an identica l scoreline to 2020, when Mayo lost to Dublin.Background were aiming to win their fourth title and ﬁrst All-Ireland since 1951. Since then, they had lost ten ﬁnals (1989, 1996 , 1997, 2004, 2006,
2012, 2013, 2016, 2017, 2020). app eared in their seventh ﬁnal, winnin g on three occasions in 2003, 2005 a nd 2008.This ﬁnal was the ﬁfth to be contested by county teams from C onnacht and Ulster, the other ﬁnals were 1925 (Galway beat Cavan), 1943 (Roscommon beat Cavan), 1948 (Cavan beat

𝐶𝑢 colored by LCP with R LCP = 0, 1, 2, 3,4, 5

( 𝐶𝑢 −1)

2021 All-Ireland Senior Football Cha mpionship Final The 2021 All-Irelan d Senior Football Championship Final was the 134th ﬁnal of the All-Irel and Senior Football Championship and the culmination of the 2021 All-Ire land Senior Football Championship. T he match was played at Croke Park in Dublin on 11 September 2021. It was originally scheduled

for 28 August but had to be postpon ed by two weeks when the – semi-ﬁna l was postponed due to a COVID-19 ou tbreak. Ulster champions Tyrone took on Connacht champions Mayo, in what was their ﬁrst ever meeting in a f inal, winning their 4th title after a 2–14 to 0–15 win. Mayo lost

their 11th consecutive ﬁnal since 1989, losing 6 ﬁnals in 9 years, wi th this latest defeat on an identica l scoreline to 2020, when Mayo lost to Dublin.Background were aiming to win their fourth title and ﬁrst All-Ireland since 1951. Since then, they had lost ten ﬁnals (1989, 1996 , 1997, 2004, 2006,
2012, 2013, 2016, 2017, 2020). app eared in their seventh ﬁnal, winnin g on three occasions in 2003, 2005 a nd 2008.This ﬁnal was the ﬁfth to be contested by county teams from C onnacht and Ulster, the other ﬁnals were 1925 (Galway beat Cavan), 1943 (Roscommon beat Cavan), 1948 (Cavan beat

[𝑁1,
𝑢

𝐹1 𝑢

]

colored

by

LCP

with

𝐶𝑢+1

LCP = 0, 1, 2, 3,4, 5

2018 All-Ireland Senior Football Cha mpionship FinalThe 2018 All-Irelan d Senior Football Championship Final was the 131st ﬁnal of the All-Irel and Senior Football Championship and the culmination of the 2018 All-Ire land Senior Football Championship in Gaelic football. The match was play ed at Croke Park in Dublin on 2 Sept ember 2018.[3]It was the second ti me the teams had met in the ﬁnal; D ublin won the ﬁrst encounter in 199 5.The ﬁnal was shown live in Irel
and on RTÉ Two as part of The Sunday Game live programme, presented by M ichael Lyster from Croke Park, with studio analysis from Joe Brolly,

game 23–23 after extra time, howeve r Ulster progressed under the compet ition rules as they scored three tir es in the match against Leinster’s t wo. The semi-ﬁnals took place in mi d November and saw both the away tea ms win, as Ulster beat Glasgow and E dinburgh beat Connacht. The ﬁnal wa s held on Saturday December 20 at Mu rrayﬁeld Stadium and saw Ulster bea t Edinburgh 21–27 to win the Celtic Cup.2004–05 seasonThe format of the competition was changed for the second edition of the competition. T he competition was moved to April an d May to run after the conclusion of the Celtic League competition, with only eight
1-16 to 0-15 winners to qualify for their 10th league ﬁnal in the past 13 years.They have won seven of t heir previous league ﬁnals under Co dy since 2002, losing the other two to Waterford (2007 ) and Dublin (201 1 ).Despite the defeat there were some distinct positives from a Galwa y perspective- most notably the soli d displays of Daithí Burke at centre -back, Joseph Cooney at wing-back an d Ronan Burke at full-back. Colm Cal lanan continued his excellent form i n goal and also hit a stunning free from distance.Indeed it was not th e Galway defence that was the proble m

[𝑁2,
𝑢

𝐹2 𝑢

]

colored

by

LCP

with

𝐶𝑢+1

LCP = 0, 1, 2, 3,4, 5

2018 All-Ireland Senior Football Cha mpionship FinalThe 2018 All-Irelan d Senior Football Championship Final was the 131st ﬁnal of the All-Irel and Senior Football Championship and the culmination of the 2018 All-Ire land Senior Football Championship in Gaelic football. The match was play ed at Croke Park in Dublin on 2 Sept ember 2018.It was the second time the teams had met in the ﬁnal; Dubl in won the ﬁrst encounter in 1995. It was the third consecutive year th
at a team qualiﬁed under the system of second chances introduced in 200 1; Tyrone qualiﬁed despite defeat i n its provincial championship.Dubl in won the ﬁnal by a margin of six points

with a last-ditch plan of action – play the Munster/Ulster Semi-Final o n March 16th, with the winners to pl ay Connacht in the following day’s F inal.On March 16th then Munster ha d an easy win over Ulster (9-07 to 0 -00) but thankfully for the Munster players, the pitch cut up so badly d uring the game, it was decided to po stpone the following day’s hurling F inal (until Easter Sunday) with the football Final going ahead on its ow n on St. Patrick’s Day.Less than a week later, on March 23rd, seven

which Dublin won by 0-12 to 0-9.D ublin are going for an unprecedented fourth successive Championship win over Kerry. Prior to their current r un, which started with the 2011 AllIreland ﬁnal, they had only managed two consecutive victories over them on two separate occasions - 1909 an d ’24, 1976 and ’77.The longest wi nning sequence in the rivalry was se t by Kerry between 1941 and 1975, wh en they won each of the six Champion ship meetings. Kerry went nine games unbeaten between 1978 and 2009, wit h four victories either side of a dr amatic draw at the quarter-ﬁnal sta ge in Thurles in 2001.Sunday will mark their 11th

39

Improving language models by retrieving from trillions of tokens

Table 18 | 2020 Summer Paralympics, from Wikipedia September 21. The original dates of the event,

25

August

to

6

September

2020,

appears

both

in

the

neighbors

[𝑁1, 𝐹1],
11

[𝑁2, 𝐹2]
11

of

chunk

𝐶1

and

in

the

subsequent chunk 𝐶2, where the loss for those tokens is signiﬁcantly reduced by R

. Interestingly, in this

case, the neighbors were written at a time when the event hadn’t yet been postponed.

𝐶𝑢 colored by loss diﬀerence

𝐿R

[O ] − 𝐿R

−0.5, = 0, 0.5

2020 Summer ParalympicsThe , brand ed as the Tokyo 2020 Paralympic Game s, was an international multi-sport parasports event held from 24 August to 5 September 2021 in Tokyo, Japan . They were the 16th Summer Paralymp ic Games as organized by the Interna tional Paralympic Committee (IPC).

Originally scheduled to take place f rom 25 August to 6 September 2020, i n March 2020 both the 2020 Summer Ol ympics and Paralympics were postpone d by one year due to the COVID-19 pa ndemic, with the rescheduled Games s till referred to as Tokyo 2020 for m arketing and branding purposes. As with the Olympics, the Games were la rgely held behind
closed doors with no outside specta tors due to a state of emergency in the Greater Tokyo Area and other pre fectures. The Games were the second Summer Paralympics hosted by Tokyo s ince 1964, and the third Paralympics held in Japan overall since the 199 8 Winter Paralympics in Nagano. Th e Games featured
539 medal events in 22 sports, with badminton and taekwondo both making their Paralympic debut to replace f ootball 7-a-side and sailing. China topped the medal table for the ﬁfth consecutive Paralympics, with 96 go lds and 207 total medals. Great Brit ain ﬁnished second for the ninth t ime,

𝐶𝑢 colored by LCP with R LCP = 0, 1, 2, 3,4, 5

( 𝐶𝑢 −1)

2020 Summer Paralympics The , brand ed as the Tokyo 2020 Paralympic Game s, was an international multi-sport parasports event held from 24 August to 5 September 2021 in Tokyo, Japan . They were the 16th Summer Paralymp ic Games as organized by the Interna tional Paralympic Committee (IPC).

Originally scheduled to take place f rom 25 August to 6 September 2020, i n March 2020 both the 2020 Summer Ol ympics and Paralympics were postpone d by one year due to the COVID-19 pa ndemic, with the rescheduled Games s till referred to as Tokyo 2020 for m arketing and branding purposes. As with the Olympics, the Games were la rgely held behind
closed doors with no outside specta tors due to a state of emergency in the Greater Tokyo Area and other pre fectures. The Games were the second Summer Paralympics hosted by Tokyo s ince 1964, and the third Paralympics held in Japan overall since the 199 8 Winter Paralympics in Nagano. Th e Games featured
539 medal events in 22 sports, with badminton and taekwondo both making their Paralympic debut to replace f ootball 7-a-side and sailing. China topped the medal table for the ﬁfth consecutive Paralympics, with 96 go lds and 207 total medals. Great Brit ain ﬁnished second for the ninth t ime,

[𝑁1,
𝑢

𝐹1 𝑢

]

colored

by

LCP

with

𝐶𝑢+1

LCP = 0, 1, 2, 3,4, 5

pics Games.* The 2020 Summer Paraly mpics are an upcoming major internat ional multi-sport event for athletes with disabilities governed by the I nternational Paralympic Committee. S cheduled as the 16th Summer Paralymp ic Games, it is planned to be held i n Tokyo, Japan from 25 August to 6 S eptember 2020.3. 2019 BWF Para-Bad minton World Championships- The 20 19 BWF Para-Badminton World Champion ships was held from 20 to 25 August 2019 in Basel, Switzerland.- Men’s event: Gold Medal: Pramod Bhagat in Singles SL3 Event and Pramod Bhagat and Manoj

once submitted.This process was u ndertaken following the postponement of the Tokyo 2020 Games due to the COVID-19 pandemic, with both the Oly mpics and Paralympics pushed back a year.Now, the Tokyo 2020 Olympics are scheduled for July 23 to August 8 while the Paralympics are due to f ollow from August 24 to September 5. The refund process is separate for ticketholders outside of Japan, who purchased tickets through authorise d ticket resellers (ATR).Each ATR has its own individual refund proced ure.Early ﬁgures from the refund process for the Tokyo 2020 Olympics stated that around 18 per cent
has been rescheduled to May 1-4 bec ause of travel restrictions under th e current state of emergency in Toky o and other 10 prefectures across Ja pan.The Tokyo 2020 organizing comm ittee announced that the ﬁrst of 18 test events for the Olympic and Par alympic Games will involve wheelchai r rugby, which will be held in Yoyog i National Stadium from April 3 to 4 .The FINA Diving World Cup will fo llow from April 18 to 23 at the Toky o Aquatics Centre, which will also s erve as an Olympic qualifying event. The spread of the COVID-19 pandemi c has slowed down in Tokyo three wee ks after the Japanese capital entere d a state of emergency on

[𝑁2,
𝑢

𝐹2 𝑢

]

colored

by

LCP

with

𝐶𝑢+1

LCP = 0, 1, 2, 3,4, 5

2020 Summer ParalympicsThe are an upcoming major international multisport event for athletes with disabi lities governed by the International Paralympic Committee. Scheduled as the 16th Summer Paralympic Games, th ey are scheduled to be held in Tokyo , Japan between 24 August and 5 Sept ember 2021. Originally due to take p lace between 25 August and 6 Septemb er 2020. On 24 March 2020, the IOC a nd the Tokyo Organizing Committee of ﬁcially announced that the 2020 Sum mer Olympics and 2020 Summer Paralym pics would be postponed to 2021, due to the COVID-19 pandemic, marking t he ﬁrst time that the Paralympics h as been postponed. They will still b e publicly marketed as
Olympiad, have now been postponed a nd rescheduled for 23 July to 8 Augu st 2021 in Tokyo, Japan. The Games were postponed in March 2020 as a re sult of the worldwide Covid-19 pande mic, although they will still keep t he name Tokyo 2020 for marketing and branding purposes. This will be th e ﬁrst time the Olympic Games have been postponed rather than cancelled .

Olympic Games, when Tokyo became th e ﬁrst city in Asia to host the Oly mpic and Paralympic Games, but unfor tunately strong winds made it an imp ossible task this time around.Memb ers of the Tokyo Organising Committe e of the Olympic and Paralympic Game s (Tokyo 2020), Tokyo Metropolitan G overnment oﬃcials, Tokyo 2020 Torc h Relay Oﬃcial Ambassadors and rep resentatives from Miyagi Prefecture joined the arrival ceremony.FLAME OF RECOVERYThe Olympic ﬂame will now be put on display at various loc ations in the Tohoku region, to high light the message of hope in the are as worst aﬀected by the 2011 Great East Japan Earthqu

40

Improving language models by retrieving from trillions of tokens

Table 19 | Daniel Radcliﬀe, from Wikitext103Valid, retrieval data from c4. The chunks 𝐶2 and 𝐶3 are almost

entirely retrieved from neighbours [𝑁1, 𝐹1] and [𝑁2, 𝐹2] respectively, up to formatting diﬀerences, which

dramatically reduces the loss for these tokens. This example illustrates that when training data leaks into

evaluation sets despite deduplication, our R

model can directly exploit this leakage.

𝐶𝑢 colored by loss diﬀerence

𝐿R

[O ] − 𝐿R

−0.5, = 0, 0.5

= Daniel Radcliﬀe =Daniel Jacob R adcliﬀe ( born 23 July 1989 ) is an English actor who rose to prominenc e as the title character in the Harr y Potter ﬁlm series. He made his ac ting debut at 10 years of age in BBC One’s 1999 television ﬁlm David Co pperﬁeld, followed by his cinematic debut

in 2001’s The Tailor of Panama. At age 11, he was cast as Harry Potter in the ﬁrst Harry Potter ﬁlm, and starred in the series for 10 years u ntil the release of the eighth and f inal ﬁlm in 2011.Radcliﬀe began to branch out to stage acting in 200 7, starring in the London and New

York productions of Equus, and in t he 2011 Broadway revival of the musi cal How to Succeed in Business Witho ut Really Trying. He starred in the 2012 horror ﬁlm The Woman in Black, and played beat poet Allen Ginsberg in the 2013 independent ﬁlm Kill Y our <unk>.He has contributed to ma ny charities,
including <unk> Hospice Care for Ch ildren, and The Trevor Project for s uicide prevention among LGBTQ youth, which gave him its Hero Award in 20 11.= = Early life = =Radcliﬀe w as born in West London, England. He is the only child of Alan George Rad cliﬀe, a literary agent, and

𝐶𝑢 colored by LCP with R LCP = 0, 1, 2, 3,4, 5

( 𝐶𝑢 −1)

= Daniel Radcliﬀe = Daniel Jacob R adcliﬀe ( born 23 July 1989 ) is an English actor who rose to prominenc e as the title character in the Harr y Potter ﬁlm series. He made his ac ting debut at 10 years of age in BBC One’s 1999 television ﬁlm David Co pperﬁeld, followed by his cinematic debut

in 2001’s The Tailor of Panama. At age 11, he was cast as Harry Potter in the ﬁrst Harry Potter ﬁlm, and starred in the series for 10 years u ntil the release of the eighth and f inal ﬁlm in 2011.Radcliﬀe began to branch out to stage acting in 200 7, starring in the London and New

York productions of Equus, and in t he 2011 Broadway revival of the musi cal How to Succeed in Business Witho ut Really Trying. He starred in the 2012 horror ﬁlm The Woman in Black, and played beat poet Allen Ginsberg in the 2013 independent ﬁlm Kill Y our <unk>.He has contributed to ma ny charities,
including <unk> Hospice Care for Ch ildren, and The Trevor Project for s uicide prevention among LGBTQ youth, which gave him its Hero Award in 20 11.= = Early life = =Radcliﬀe w as born in West London, England. He is the only child of Alan George Rad cliﬀe, a literary agent, and

[𝑁1,
𝑢

𝐹1 𝑢

]

colored

by

LCP

with

𝐶𝑢+1

LCP = 0, 1, 2, 3,4, 5

Daniel Jacob Radcliﬀe (born 23 July 1989) is an English actor who rose to prominence as the title character in the Harry Potter ﬁlm series. He made his acting debut at 10 years o f age in BBC One’s 1999 television f ilm David Copperﬁeld, followed by h is cinematic debut in 2001’s The Tai lor of Panama. At age 11, he was cas t as Harry Potter in the ﬁrst Harry Potter ﬁlm, and starred in the ser ies for 10 years until the release o f the eighth and ﬁnal ﬁlm in 2011. Radcliﬀe began to branch out to s tage acting in 2007, starring in the London and New York productions of Equus, and

in 2001’s The Tailor of Panama. At age 11, he was cast as Harry Potter in the ﬁrst Harry Potter ﬁlm, and starred in the series for 10 years u ntil the release of the eighth and f inal ﬁlm in 2011.Radcliﬀe began to branch out to stage acting in 200 7, starring in the London and New Yo rk productions of Equus, and in the 2011 Broadway revival of the musical How to Succeed in Business Without Really Trying. He starred in the 201 2 horror ﬁlm The Woman in Black, an d played beat poet Allen Ginsberg in the 2013 independent ﬁlm Kill Your Darlings.He has contributed to ma ny charities

York productions of Equus, and in t he 2011 Broadway revival of the musi cal How to Succeed in Business Witho ut Really Trying. He starred in the 2012 horror ﬁlm The Woman in Black, and played beat poet Allen Ginsberg in the 2013 independent ﬁlm Kill Y our Darlings.He has contributed to many charities, including Demelza H ouse Children’s Hospice and The Trev or Project. He also made public serv ice announcements for the latter. In 2011, he was awarded the Trevor Pro ject’s "Hero Award."Sources disagr ee about Radcliﬀe’s personal wealth ; he was reported to have earned £1 million for the ﬁrst Harry Potter

[𝑁2,
𝑢

𝐹2 𝑢

]

colored

by

LCP

with

𝐶𝑢+1

LCP = 0, 1, 2, 3,4, 5

Daniel Jacob Radcliﬀe (born 23 July 1989) is an English actor who rose to prominence as the title character in the Harry Potter ﬁlm series. He made his acting debut at 10 years o f age in BBC One’s 1999 television m ovie David Copperﬁeld, followed by his ﬁlm debut in 2001’s The Tailor of Panama. At age 11, he was cast as Harry Potter in the ﬁrst Harry Pot ter ﬁlm, and starred in the series for 10 years until the release of th e eighth and ﬁnal ﬁlm in 2011. Rad cliﬀe began to branch out to stage acting in 2007, starring in the Lond on and New York productions of Equus , and in the

of Panama. At age 11, he was cast a s Harry Potter in the ﬁrst Harry Po tter ﬁlm, and starred in the series for 10 years until the release of t he eighth and ﬁnal ﬁlm in 2011.R adcliﬀe began to branch out to stag e acting in 2007, starring in the Lo ndon and New York productions of Equ us, and in the 2011 Broadway revival of the musical How to Succeed in Bu siness Without Really Trying. He sta rred in the 2012 horror ﬁlm The Wom an in Black, and played beat poet Al len Ginsberg in the 2013 independent ﬁlm Kill Your Darlings. He has con tributed to many charities, includin g Demelza House Children’s

in the 2011 Broadway revival of the musical How to Succeed in Business Without Really Trying. He starred in the 2012 horror ﬁlm The Woman in B lack, and played beat poet Allen Gin sberg in the 2013 independent ﬁlm K ill Your Darlings. He has contribute d to many charities, including Demel za House Children’s Hospice and The Trevor Project. He also made public service announcements for the latter . In 2011, he was awarded the Trevor Project’s "Hero Award."

41

Improving language models by retrieving from trillions of tokens

Table 20 | Sample - Déclaration des droits de l’homme: Article premier. The R

[O ] sample has

correct syntax and is almost plausible but is hallucinated. The R

[O ] sample is correctly copied from

neighbour data, and robustly re-formated according to our prompt.

Prompt and sample of R

[O ]

Article premier - Les hommes naissent et demeurent libres e t égaux en droits. Les distinc tions sociales ne peuvent être fondées que sur l’utilité com mune. Article 2. - Le but de toute association politique e st la conservation des droits naturels et

imprescriptibles de l’homme, et par conséquent la garantie à chacun des droits suivants : Article 3. - La propriété est un droit inviolable et sa cré. Toute personne a le droit de procéder à sa propre cons ervation. Article 4. - Le

but de toute association est la défense des droits de l’hom me et du citoyen. Tout citoye n a le droit de participer à l a direction des aﬀaires publi ques. Article 5. - L’impuni té n’a jamais été et ne sera j amais une ﬁn en elle-même. L’ imp
unité, comme le despotisme, s ’est toujours révélée être un instrument d’oppression. La ty rannie qui s’est élue juge su prême de la conscience des aut res ne peut être jugée. La jus tice se trouve dans la consci ence de chaque citoyen,

Prompt and sample of R

[O ]

colored by LCP with R (𝐶𝑢−1)

LCP = 0, 1, 2, 3,4, 5

Article premier - Les hommes naissent et demeurent libres e t égaux en droits. Les distinc tions sociales ne peuvent être fondées que sur l’utilité com mune. Article 2. - Le but de toute association politique e st la conservation des droits naturels et

imprescriptibles de l’homme. Ces droits sont la liberté, la propriété, la sûreté et la ré sistance à l’oppression.Arti cle 3.- Le principe de toute souveraineté réside essentiel lement dans la nation. Nul cor ps, nul individu ne peut exerc er d’autorité qui n

’en émane expressément.Artic le 4.- La liberté consiste à pouvoir faire tout ce qui ne nuit pas à autrui : ainsi, l’e xercice des droits naturels de chaque homme n’a de bornes qu e celles qui assurent aux autr es membres de la société la jo uissance de ces mêmes

droits. Ces bornes ne peuvent être déterminées que par la l oi.Article 5.- La loi n’a le droit de défendre que les a ctions nuisibles à la société. Tout ce qui n’est pas défendu par la loi ne peut être empêc hé, et nul ne peut être

[𝑁1,
𝑢

𝐹1 𝑢

]

colored

by

LCP

with

𝐶𝑢+1

LCP = 0, 1, 2, 3,4, 5
de l’homme et du citoyen.Ar ticle 1erLes hommes naissent et demeurent libres et égaux en droits. Les distinctions so ciales ne peuvent être fondées que sur l’utilité commune.A rticle 2Le but de toute asso ciation politique est la conse rvation des droits naturels et imprescriptibles de l’homme. Ces droits sont la liberté, la propriété, la sûreté, et la r ésistance à l’oppression.Art icle 3Le principe de toute s ouveraineté réside essentielle ment dans la nation. Nul corps , nul individu ne peut exercer d’autorité qui n’en

criptibles del’homme. Ces dro its sont la liberté, la propri été, la sûretéet la résistanc e à l’oppression.Article 3 Le principe de toute souverai neté résideessentiellement da ns la Nation. Nul corps, nul i ndividu nepeut exercer d’auto rité qui n’en émane expresséme nt.Article 4 - La liberté co nsiste à pouvoir faire tout ce quine nuit pas à autrui : ai nsi, l’exercice des droits nat urelsde chaque homme n’a de b ornes que celles qui assurent auxautres membres de la socié té la jouissance de

mane expressément.Article 4 - La liberté consiste à pouvoi r faire tout ce qui ne nuit pa s à autrui : ainsi, l’exercice des droits naturels de chaque homme n’a de bornes que celle s qui assurent aux autres memb res de la société la jouissanc e de ces mêmes droits. Ces bor nes ne peuvent être déterminée s que par la loi.Article 5 La loi n’a le droit de défend re que les actions nuisibles à la société. Tout ce qui n’est pas défendu par la loi ne peu t être empêché, et nul ne peut être contraint à faire ce qu’ elle n

[𝑁2,
𝑢

𝐹2 𝑢

]

colored

by

LCP

with

𝐶𝑢+1

LCP = 0, 1, 2, 3,4, 5
Les hommes naissent et demeur ent libres et égaux en droits. Les distinctions sociales ne peuvent être fondées que sur l ’utilité commune.Art. 2. Le but de toute association po litique est la conservation de s droits naturels et imprescri ptibles de l’Homme. Ces droits sont la liberté, la propriété , la sûreté, et la résistance à l’oppression.Art. 3. -Le principe de toute Souverainet é réside essentiellement dans la Nation. Nul corps, nul indi vidu ne peut exercer d’autorit é qui n’en émane expressément. Art

et imprescriptibles de l’homm e. Ces droits sont la liberté, la propriété, la sûreté et la résistance à l’oppression.A rticle 3 - Le principe de tout e souveraineté réside essentie llement dans la Nation. Nul co rps, nul individu ne peut exer cer d’autorité qui n’en émane expressément.Article 4 - La liberté consiste à pouvoir fai re tout ce qui ne nuit pas à a utrui : ainsi, l’exercice des droits naturels de chaque homm e n’a de bornes que celles qui assurent aux autres membres d e la société la jouissance de ces mêmes droits. Ces bornes

mane expressément.Article 4 - La liberté consiste à pouvoi r faire tout ce qui ne nuit pa s à autrui : ainsi, l’exercice des droits naturels de chaque homme n’a de bornes que celle s qui assurent aux autres memb res de la société la jouissanc e de ces mêmes droits. Ces bor nes ne peuvent être déterminée s que par la loi.Article 5 La loi n’a le droit de défend re que les actions nuisibles à la société. Tout ce qui n’est pas défendu par la loi ne peu t être empêché, et nul ne peut être contraint à faire ce qu’ elle n

42

Improving language models by retrieving from trillions of tokens

Table 21 | Sample - Decimals of 𝜋. The R

[O ] sample quickly diverges two digits after the end

of the prompt whereas R

[O ] correctly outputs a large number of 𝜋 digits, directly copied from the

neighbours data.

Prompt and sample of R

[O ]

Pi = 3. 1415926535 8979323846 2643383279 5028841971 69399375 10 5820974944 5923078164 06286 20899 8628034825 3421170679

8294049602 8988496069 9858349 065 9873246379 9644789435 8628 730709 6540159079 5944069810 5 992965913 7095378412 69378359
10 6940372045 7088679512 85612 30857 9046461290 9276642155 56 54603269 5656128798 6366475705 6294954741 5886335339 57657

76345 5770886953 7988876910 79 66169745 6493974637 6345801550 6663542854 6333764630 6356284 271 7885339804 5672434

Prompt and sample of R

[O ]

colored by LCP with R (𝐶𝑢−1)

LCP = 0, 1, 2, 3,4, 5

Pi = 3. 1415926535 8979323846 2643383279 5028841971 69399375 10 5820974944 5923078164 06286 20899 8628034825 3421170679

8214808651 3282306647 0938446 095 5058223172 53594081284811 174502 8410270193 8521105559 6 446229489 5493038196442881097 5 6659334461 284
7564823 3786783165 2712019091 4564856692 3460348610 45432664 82 1339360726 024914127372458 70066 0631558817 4881520920 96 28292540 91715
364367892590360 0113305305 48 82046652 1384146951 9415116094 3305727036 5759591953 0921861 173 8193261179 31051185480744 623799 6274

[𝑁1,
𝑢

𝐹1 𝑢

]

colored

by

LCP

with

𝐶𝑢+1

LCP = 0, 1, 2, 3,4, 5
“1415926535 8979323846 26433 83279 5028841971 693993751058 20974944 5923078164 0628620899 8628034825 34211706798214808 651 3282306647 0938446095 5058 223172 53594081284811174502 8 410270193 8521105559 644622948 9 54930381964428810975 665933 4461 2847564823 3786783

651 3282306647 0938446095 5058 223172 5359408128 4811174502 8410270193 8521105559 64462294 89 54930381964428810975 66593 34461 2847564823 3786783165 27 12019091 4564856692 346034861 0 4543266482 1339360726 024914 12737245870066 0631558817 488 1520920 9628292540 91715364
23 3786783165 2712019091 4564 856692 3460348610 4543266482 1 339360726 0249141273724587006 6 0631558817 4881520920 962829 2540 9171536436 7892590360 01 13305305 4882046652 1384146951 94151160943305727036 5759591 953 0921861173 8193261179 3105 118548 0744623799 627495

[𝑁2,
𝑢

𝐹2 𝑢

]

colored

by

LCP

with

𝐶𝑢+1

LCP = 0, 1, 2, 3,4, 5
46 2643383279 5028841971 69399 37510 5820974944 592307816406 28620899 8628034825 3421170679 8214808651 3282306647 0938446 095 50582231725359408128 4811 174502 8410270193 8521105559 6 446229489 5493038196 442881097 56659334461 2847564823 378678 3165 2712019091 4564856692 346 0

47 0938446095 5058223172 53594 081284811174502 8410270193 85 21105559 6446229489 5493038196 4428810975 6659334461 2847564 823 3786783165 27120190914564 856692 3460348610 4543266482 1 339360726 0249141273724587006 6 0631558817 4881520920 962829 2540 91715364367892590360

165 27120190914564856692 3460 348610 4543266482 1339360726 0 2491412737245870066 063155881 7 4881520920 9628292540 917153 64367892590360 0113305305 488 2046652 1384146951 9415116094 3305727036 5759591953 09218611 73 8193261179 310511854807446 23799 6274956735 1885752724 89 1227

43

