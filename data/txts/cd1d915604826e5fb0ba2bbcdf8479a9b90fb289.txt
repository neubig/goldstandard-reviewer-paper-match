Optimal Sequential Wireless Relay Placement
on a Random Lattice Path
Abhishek Sinha∗, Arpan Chattopadhyay∗, K. P. Naveen∗, Marceau Coupechoux† and Anurag Kumar∗ ∗Dept. of Electrical Communication Engineering, Indian Institute of Science, Bangalore 560012, India. Email: {abhishek.sinha.iisc, arpanc.ju}@gmail.com, {naveenkp, anurag}@ece.iisc.ernet.in
†Telecom ParisTech and CNRS LTCI, Dept. of Informatique et Re´seaux, 23, avenue d’Italie, 75013 Paris, France. Email: marceau.coupechoux@telecom-paristech.fr

arXiv:1207.6318v1 [cs.NI] 26 Jul 2012

Abstract—Our work is motivated by the need for impromptu (or “as-you-go”) deployment of relay nodes (for establishing a packet communication path with a control centre) by ﬁremen/commandos while operating in an unknown environment. We consider a model, where a deployment operative steps along a random lattice path whose evolution is Markov. At each step, the path can randomly either continue in the same direction or take a turn “North” or “East,” or come to an end, at which point a data source (e.g., a temperature sensor) has to be placed that will send packets to a control centre at the origin of the path. A decision has to be made at each step whether or not to place a wireless relay node. Assuming that the packet generation rate by the source is very low, and simple link-by-link scheduling, we consider the problem of relay placement so as to minimize the expectation of an end-to-end cost metric (a linear combination of the sum of convex hop costs and the number of relays placed). This impromptu relay placement problem is formulated as a total cost Markov decision process. First, we derive the optimal policy in terms of an optimal placement set and show that this set is characterized by a boundary beyond which it is optimal to place. Next, based on a simpler alternative one-step-look-ahead characterization of the optimal policy, we propose an algorithm which is proved to converge to the optimal placement set in a ﬁnite number of steps and which is faster than the traditional value iteration. We show by simulations that the distance based heuristic, usually assumed in the literature, is close to the optimal provided that the threshold distance is carefully chosen.
Index Terms—Relay placement, Sensor networks, Markov decision processes, One-step-look-ahead.
I. INTRODUCTION
Wireless networks, such as cellular networks or multihop ad hoc networks, would normally be deployed via a planning and design process. There are situations, however, that require the impromptu (or “as-you-go”) deployment of a multihop wireless packet network. For example, such an impromptu approach would be required to deploy a wireless sensor network for situational awareness in emergency situations such as those faced by ﬁremen or commandos (see [1], [2]). For example, as they attack a ﬁre in a building, ﬁremen might wish to place temperature sensors on ﬁre-doors to monitor the spread of ﬁre, and ensure a route for their own retreat; or commandos attempting to ﬂush out terrorists might wish to place acoustic or passive infra-red sensors to monitor the movement of people in the building. As-you-go deployment may also be of interest when deploying a multi-hop wireless sensor network over a large terrain (such as a dense forest)

Fig. 1. A wireless network being deployed as a person steps along a random lattice path. Inverted V: location of the deployment person; solid line: path already covered; circles: deployed relays; thick dashed path: a possible evolution of the remaining path. The sensor to be placed at the end is also shown as the black rectangle.
in order to obtain a ﬁrst-cut deployment which could then be augmented to a network with desired properties (connectivity and quality-of-service).
With the above larger motivation in mind, in this paper we are concerned with the rigorous formulation and solution of a problem of impromptu deployment of a multihop wireless network along a random lattice path, see Fig. 1. The path could represent the corridor of a large building, or even a trail in a forest. The objective is to create a multihop wireless path for packet communication from the end of the path to its beginning. The problem is formulated as an optimal sequential decision problem. The formulation gives rise to a total cost Markov decision process, which we study in detail in order to derive structural properties of the optimal policy. We also provide an efﬁcient algorithm for calculating the optimal policy.
A. Related Work
Our study is motivated by “ﬁrst responder” networks, a concept that has been around at least since 2001. In [2], Howard et al. provide heuristic algorithms for the problem of incremental deployment of sensors (such as surveillance cameras) with the objective of covering the deployment area. Their problem is related to that of self-deployment of autonomous robot teams and to the art-gallery problem. Creation of a communication

2

network that is optimal in some sense is not an objective in [2]. In a somewhat similar vein, the work of Loukas et al. [3] is concerned with the dynamic locationing of robots that, in an emergency situation, can serve as wireless relays between the infrastructure and human-carried wireless devices. The problem of impromptu deployment of static wireless networks has been considered in [4], [5], [6], [7]. In [4], Naudts et al. provide a methodology in which, after a node is deployed, the next node to be deployed is turned on and begins to measure the signal strength to the last deployed node. When the signal strength drops below a predetermined level, the next node is deployed and so on. Souryal et al. provide a similar approach in [5], [6], where an extensive study of indoor RF link quality variation is provided, and a system is developed and demonstrated. The work reported in [7] is yet another example of the same approach for relay deployment. More recently, Liu et al. [8] describe a “breadcrumbs” system for aiding ﬁreﬁghters inside buildings, and is similar to our present paper in terms of the class of problems it addresses. In a survey article [1], Fischer et al. describe various localization technologies for assisting emergency responders, thus further motivating the class of problems we consider.
In our earlier work (Mondal et al. [9]) we took the ﬁrst steps towards rigorously formulating and addressing the problem of impromptu optimal deployment of a multihop wireless network on a line. The line is of unknown length but prior information is available about its probability distribution; at each step, the line can come to an end with probability p, at which point a sensor has to be placed. Once placed, the sensor sends periodic measurement packets to a control centre near the start of the line. It is assumed that the measurement rate at the sensor is low, so that (with a very high probability) a packet is delivered to the control centre before the next packet is generated at the sensor. This so called “lone packet model” is realistic for situations in which the sensor makes a measurement every few seconds.
The objective of the sequential decision problem is to minimise a certain expected per packet cost (e.g., end-to-end delay or total energy expended by a node), which can be expressed as the sum of the costs over each hop, subject to a constraint on the number of relays used for the operation. It has been proved in [9] that an optimal placement policy solving the above mentioned problem is a threshold rule, i.e., there is a threshold r∗ such that, after placing a relay, if the operative has walked r∗ steps without the path ending, then a relay must be placed at r∗.
B. Outline and Our Contributions
In this paper, while continuing to assume (a) that a single operative moves step-by-step along a path, deciding to place or to not place a relay, (b) that the length of the path is a geometrically distributed random multiple of the step size, (c) that a source of packets is placed at the end of the path, (d) that the lone packet trafﬁc model applies, and (e) that the total cost of a deployment is a linear combination of the sum of convex hop costs and the number of nodes placed, we extend

Source node Sink node Relay node NLOS link Random path

rN r3 r2

r1 r0 (0,0)

Fig. 2. A depiction of relay deployment along a random lattice path with NLOS propagation.
the work presented in [9] to the two-dimensional case. At each step, the line can take a right angle turn either to the “East” or to the “North” with known ﬁxed probabilities. We assume a Non-Line-Of-Sight (NLOS) propagation model, where a radio link exists between two nodes placed anywhere on the path, see Fig. 2. The lone packet model is a natural ﬁrst assumption, and would be useful in low-duty cycle monitoring applications. Once the network has been deployed, an analytical technique such as that presented in [10] can be used to estimate the actual packet carrying capacity of the network.
We will formally describe our system model and problem formulation in Section II. The following are our main contributions:
• We formulate the problem as a total cost Markov decision process (MDP), and characterize the optimal policies in terms of placement sets. We show that these optimal policies are threshold policies and thus the placement sets are characterized by boundaries in the two-dimensional lattice (Section III). Beyond these boundaries, it is optimal to place a relay.
• Noticing that placement instants are renewal points in the random process, we recognize and prove the One-StepLook-Ahead (OSLA) characterization of the placement sets (Section IV).
• Based on the OSLA characterization, we propose an iterative algorithm, which converges to the optimal placement set in a ﬁnite number of steps (Section V). We have observed that this algorithm converges much faster than value iteration.
• In Section VII we provide several numerical results that illustrate the theoretical development. The relay placement approach proposed in [4], [5], [6], [7] would suggest a distance threshold based placement rule. We numerically obtain the optimal rule in this class, and ﬁnd that the cost of this policy is numerically indistinguishable from that of the overall optimal policy provided by our theoretical development. It suggests that it might sufﬁce to utilize a distance threshold policy. However, the distance threshold should be carefully designed taking into account the system parameters and the optimality objective.
For the ease of presentation we have moved most of the proofs to the Appendix.

3

II. SYSTEM MODEL
We consider a deployment person, whose stride length is 1 unit, moving along a random path in the two-dimensional lattice, placing relays at some of the lattice points of the path and ﬁnally a source node at the end of the path. Once placed, the source node periodically generates measurement packets which are forwarded by the successive relays in a multihop fashion to the control centre located at (0, 0); see Fig. 2.

A. Random Path
Let Z+ denote the set of nonnegative integers, and Z2+ the nonnegative orthant of the two dimensional integer lattice. We will refer to the x direction as East and to the y direction as North. Starting from (0, 0) there is a lattice path that takes random turns to the North or to the East (this is to avoid the path folding back onto itself, see Fig 2). Under this restriction, the path evolves as a stochastic process over Z2+. When the deployment person has reached some lattice point, the path continues for one more step and terminates with probability p, or does not terminate with probability 1 − p. In either case, the next step is Eastward with probability q and Northward with probability 1 − q. Thus, for instance, (1 − p)q is the probability that the path proceeds Eastwards without ending. The person deploying the relays is assumed to keep a count of m and n, the number of steps taken in the x direction and in y direction, repectively, since the previous relay was placed. He is also assumed to know the probabilities p and q.

B. Cost Deﬁnition

In our model, we assume NLOS propagation, i.e., packet

transmission can take place between any two successive relays

even if they are not on the same straight line segment of the

lattice path. In the building context, this would correspond to

the walls being radio transparent. The model is also suitable

when the deployment region is a thickly wooded forest where

the deployment person is restricted to move only along some

narrow path (lattice edges in our model).

For two successive relays separated by a distance r, we

assign a cost of d(r) which could be the average delay

incurred over that hop (including transmission overheads and

retransmission delays), or the power required to get a packet

across the hop. For instance, in our numerical work we use the power cost, d(r) = Pm + γrη, where Pm is the minimum

power required, γ represents an SNR constraint and η is the

path-loss exponent. Now suppose N relays are placed such that

the successive inter-relay distances are r0, r1, · · · , rN (r0 is

the distance from the control centre at (0, 0) and the ﬁrst relay,

and rN is the distance from the last relay to the sensor placed

at the end of the path) then the total cost of this placement is

the sum of the one-hop costs C =

N i=0

d(ri).

The

total

cost

being the sum of one-hop costs can be justiﬁed for the lone

packet model since when a packet is being forwarded there is

no other packet transmission taking place.

We now impose a few technical conditions on the one-hop

cost function d(·): (C1) d(0) > 0, (C2) d(r) is convex and

increasing in r, and (C3) for any r and δ > 0 the difference d(r + δ) − d(r) increases to ∞.
(C1) is imposed considering the fact that it requires a nonzero amount of delay or power for transmitting a packet between two nodes, however close they may be. (C2) and (C3) are properties we require to establish our results on the optimal policies. They are satisﬁed by the power cost, Pm + γrη , and also by the mean hop delay (see [11]).
We will overload the notation d(·) by denoting the one-hop cost between the locations (0, 0) and (x, y) ∈ 2 as simply d(x, y) instead of d(||(x, y) − (0, 0)||). Using the condition on d(r) we prove the following convexity result of d(x, y).
Lemma 1: The function d(x, y) is convex in (x, y), where (x, y) ∈ R2.
Proof: This follows from the fact that d(·) is convex, non-decreasing in its argument. For a formal proof, see Appendix A-A. We further impose the following condition on d(x, y) where (x, y) ∈ 2. We allow a general cost-function d(x, y) endowed with the following property: (C4) The function d(x, y) is positive, twice continuously partially differentiable in variables x and y and ∀x, y ∈ R+,

dxx(x, y) > 0, dxy(x, y) > 0, dyy(x, y) > 0,

(1)

where dxy(x, y) = ∂2∂dx(∂xy,y) . These properties also hold for the mean delay and the power functions mentioned earlier.
Finally deﬁne, for (m, n) ∈ Z2+, ∆1(m, n) = d(m+1, n)− d(m, n) and ∆2(m, n) = d(m, n + 1) − d(m, n).
Lemma 2: ∆1(m, n) and ∆2(m, n) are non-decreasing in both the coordinates m and n.
Proof: This follows directly from (1). See Appendix A-B
for details.

C. Deployment Policies and Problem Formulation
A deployment policy π is a sequence of mappings (µk : k ≥ 0), where at the k-th step of the path (provided that the path has not ended thus far) µk allows the deployment person to decide whether to place or not to place a relay where, in general, randomization over these two actions is allowed. The decision is based on the entire information available to the deployment person at the k-th step, namely the set of vertices traced by the path and the location of the previous vertices where relays were placed. Let Π represent the set of all policies. For a given policy π ∈ Π, let Eπ represent the expectation operator under policy π. Let C denote the total cost incurred and N the total number of relays used. We are interested in solving the following problem,

min EπC + λEπN,

(2)

π∈Π

where λ > 0 may be interpreted as the cost of a relay. Solving the problem in (2) can also help us solve the following constrained problem,

min

Eπ C

π∈Π

Subject to: EπN ≤ ρavg,

(3)

4

where ρavg > 0 is a contraint on the average number of relays (we will describe this procedure in Section VI). First, in Sections III to V, we work towards obtaining an efﬁcient solution to the problem in (2).

III. MDP FORMULATION AND SOLUTION
In this section we formulate the problem in (2) as a total cost inﬁnite horizon MDP and derive the optimal policy in terms of optimal placement set. We show that this set is characterized by a two-dimensional boundary, upon crossing which it is optimal to place a relay.

A. States, Actions, State-Transitions and Cost Structure
We formulate the problem as a sequential decision process starting at the origin of the lattice path. The decision to place or not place a relay at the k-th step is based on ((Mk, Nk), Zk), where (Mk, Nk) denotes the coordinates of the deployment person with respect to the previous relay and Zk ∈ {e, c}; Zk = e means that at step k the random lattice path has ended and Zk = c means that the path will continue in the same direction for at least one more step. Thus, the state space is given by:

S = (m, n, z) : (m, n) ∈ Z2+, z ∈ {e, c} ∪ {φ}, (4)

where φ denotes the cost-free terminal state, i.e., the state after the end of the path has been discovered. The action taken at step k is denoted Uk ∈ {0, 1}, where Uk = 1 is the action to place a relay, and Uk = 0 is the action of not placing a relay. When the state is (m, n, c) and when action u is taken, the transition probabilities are given by:
• If u is 0 then, (i) (m, n, c) −→ (m + 1, n, c) w.p. (1 − p)q (ii) (m, n, c) −→ (m + 1, n, e) w.p. pq (iii) (m, n, c) −→ (m, n + 1, c) w.p. (1 − p)(1 − q) (iv) (m, n, c) −→ (m, n + 1, e) w.p. p(1 − q).
• If u is 1 then (i) (m, n, c) −→ (1, 0, c) w.p. (1 − p)q (ii) (m, n, c) −→ (1, 0, e) w.p. pq (iii) (m, n, c) −→ (0, 1, c) w.p. (1 − p)(1 − q) (iv) (m, n, c) −→ (0, 1, e) w.p. p(1 − q).
If Zk = e then the only allowable action is u = 1 and we enter into the state φ. If the current state is φ, we stay in the same cost-free termination state irrespective of the control u. The one step cost when the state is s ∈ S is given by:

 d(m, n)  c(s, u) = λ + d(m, n) 0

if s = (m, n, e), if u = 1 and s = (m, n, c), if u = 0 or s = φ.

For simplicity we write the state (m, n, c) as simply (m, n).

B. Optimal Placement Set Pλ
Let Jλ(m, n) denote the optimal cost-to-go when the current state is (m, n). When at some step the state is (m, n) the deployment person has to decide whether to place or not place

a relay at the current step. Jλ is the solution of the Bellman equation [12, Page 137, Prop. 1.1],

Jλ(m, n) = min{cp(m, n), cnp(m, n)},

(5)

where cp(m, n) and cnp(m, n) denote the expected cost incurred when the decision is to place and not place a relay, respectively. cp(m, n) is given by

cp(m, n) = λ + d(m, n) + (1 − p)(1 − q)Jλ(0, 1)

+(1 − p)qJλ(1, 0) + pd(1).

(6)

The term λ + d(m, n) in the above expression is the one step cost which is ﬁrst incurred when a relay is placed. The remaining terms are the average cost-to-go from the next step. The term (1 − p)(1 − q)Jλ(0, 1) can be understood as follows: (1−p)(1−q) is the probability that the path proceeds Eastward without ending. Thus the state at the next step is (0, 1, c) w.p. (1 − p)(1 − q), the optimal cost-to-go from which is, Jλ(0, 1). Similarly for the term (1 − p)qJλ(1, 0), (1 − p)q is the probability that the path will proceed, without ending, towards the North (thus the next state is (1, 0, c)) and Jλ(1, 0) is the cost-to-go from the next state. Finally, in the term pd(1), p is the probability that the path will end, either proceeding East or North, at the next step and d(1) is the cost of the last link. Following a similar explanation, the expression for cnp(m, n) can be written as:

cnp(m, n) =

(1 − p)qJλ(m + 1, n) + (1 − p)(1 − q)Jλ(m, n + 1)

+pqd(m + 1, n) + p(1 − q)d(m, n + 1).

(7)

We deﬁne the optimal placement set Pλ as the set of all lattice points (m, n), where it is optimal to place rather than to not place a relay. Formally,

Pλ = (m, n) : cp(m, n) ≤ cnp(m, n) .

(8)

In this deﬁnition, if the costs of placing and not-placing are
the same, we have arbitrarily chosen to place at that point.
The above result yields the following main theorem of this
section which characterizes the optimal placement set Pλ in terms of a boundary.
Theorem 1: The optimal placement set Pλ is characterized by a boundary, i.e., there exist mappings m∗ : Z+ → Z+ and n∗ : Z+ → Z+ such that:

Pλ =

{(m, n) : m ≥ m∗(n)}

(9)

n∈Z+

=

{(m, n) : n ≥ n∗(m)}.

(10)

m∈Z+

Proof Outline: The proof utilizes the conditions C2 and C3 imposed on the cost function d(·). First, using (6) and (7) in (8) and rearranging we alternatively write Pλ as, Pλ = {(m, n) : F (m, n) ≥ K}, where K is a constant and F (·, ·) is some function of m and n. Then, we complete the proof by showing that F (m, n) is non-decreasing in both m and n. This requires us to prove (using an induction argument) that

5

Hλ(m, n) := Jλ(m, n) − d(m, n) is non-decreasing in m and n. Also, Lemma 2 has to be used here. For a formal proof see
Appendix B.
Remark: Though the optimal placement set Pλ was characterized nicely in terms of a boundary m∗(·) and n∗(·), a naive
approach of computing this boundary, using value iteration to obtain Jλ(m, n) (for several values of (m, n) ∈ Z2+), would be computationally intensive. Our effort in the next section
(Section IV) is towards obtaining an alternate simpliﬁed representation for Pλ using which we propose an algorithm in Section V, which is guaranteed to return Pλ in a ﬁnite (in practice, small) number of steps.

IV. OPTIMAL STOPPING FORMULATION
We observe that the points where the path has not ended, and a relay is placed, are renewal points of the decision process. This motivates us to think of the decision process after a relay is placed as an optimal stopping problem with termination cost Jλ(0, 0) (which is the optimal cost-to-go from a relay placement point). Let Pλ denote the placement set corresponding to the OSLA rule (to be deﬁned next). In this section we prove our next main result that Pλ = Pλ.
A. One-Step-Look-Ahead Stopping Set Pλ Under the OSLA rule, a relay is placed at state (m, n, c)
if and only if the “cost c1(m, n) of stopping (i.e., placing a relay) at the current step” is less than the “cost c2(m, n) of continuing (without placing relay at the current step) for one more step, and then stopping (i.e., placing a relay at the next step)”. The expressions for the costs c1(m, n) and c2(m, n) can be written as:
c1(m, n) = λ + d(m, n) + Jλ(0, 0)
and
c2(m, n) = pq(d(m + 1, n) + p(1 − q)d(m, n + 1)) + (1 − p)
qd(m + 1, n) + (1 − q)d(m, n + 1) + λ + Jλ(0, 0) .

Then we deﬁne the OSLA placement set Pλ as:

Pλ

=

{(m,

n)

∈

2
Z+

:

c1(m,

n)

≤

c2(m,

n)}.

Substituting for c1(m, n) and c2(m, n) and simplifying we obtain:

Pλ =

(m,

n)

∈

2
Z+

:

p(λ

+

Jλ(0,

0))

≤

∆q (m,

n)

,

(11)

where ∆q(m, n) = q∆1(m, n) + (1 − q)∆2(m, n). Theorem 2: The OSLA rule is a threshold policy, i.e., there
exist mappings m¯ : Z+ → Z+ and n¯ : Z+ → Z+, which deﬁne the one-step placement set Pλ as follows,

Pλ =

{(m, n) : m ≥ m¯ (n)}

(12)

n∈Z+

=

{(m, n) : n ≥ n¯(m)}.

(13)

m∈Z+

Proof: Noticing that in (11) ∆q(m, n) is non-decreasing in (m, n) and p(λ + Jλ(0, 0)) is a constant, the proof follows along the lines of the proof of Theorem 1.
Now, we present the main theorem of this section. Theorem 3:

Pλ = Pλ.

Proof: See Appendix C. Remark: The characterization in (11) is much simpler than the one in (20) once the value of Jλ(0, 0) is given. In the following subsection, we deﬁne a function g(·) and express Jλ(0, 0) as the minimum value of this function.

B. Computation of Jλ(0, 0)
Let us start by deﬁning a collection of placement sets indexed by h ≥ 0:

P (h)

=

{(m,

n)

∈

2
Z+

:

p(λ

+

h)

≤

∆q (m,

n)}.

(14)

Referring to (11), note that P(Jλ(0, 0)) = Pλ. Let g(h) denote the cost-to-go, starting from (0, 0), if the placement set P(h) is employed. Then, since Jλ(0, 0) is the optimal cost-to-go and Pλ ∈ {P(h)}h≥0, we have Jλ(0, 0) = minh≥0 g(h).
To compute g(h), we proceed by deﬁning the boundary B(h) of P(h) as follows:

B(h) = {(m, n) ∈ P(h) : (m − 1, n) ∈ Pc(h) or

(m, n − 1) ∈ Pc(h)},

(15)

where Pc(h) := Z2+ − P(h). Suppose the corridor ends at some (m, n) ∈ Pc(h) ∪ B(h),
then only a cost of d(m, n) is incurred. Otherwise (i.e., if the corridor reaches some (m, n) ∈ B(h) and continues), using a renewal argument, a cost of d(m, n) + λ + g(h) is incurred, where d(m, n) + λ is the cost of placing a relay and g(h) is
the future cost-to-go. We can thus write:

g(h) =

P((m, n), e)d(m, n) +

(m,n)∈P c (h)∪B(h)

P((m, n), c)(g(h)+λ+d(m, n)), (16)
(m,n)∈B(h)

where P((m, n), e) is the probability of the corridor ending at (m, n) and P((m, n), c) is the probability of the corridor reaching the boundary and continuing. Solving for g(h), we obtain:

1

g(h) =

×

1 − (m,n)∈B(h) P((m, n), c)

P((m, n), e)d(m, n) +
(m,n)∈P c (h)∪B(h)

P((m, n), c)(λ + d(m, n)) . (17)
(m,n)∈B(h)
The above expression is extensively used in our algorithm proposed in the next section.

6

North Co−ordinates (n)

10

Pc(h)

Bw(h)

8

Bs(h)

Bnull(h)

6

4

2

0

0

2

4

6

8

10

East Co−ordinates (m)

Fig. 3. Example of placement set of the form in (14): ’o’ denotes lattice points outside the placement set; lattice points on the boundary can be partitioned into three sets according to the direction, from which they can be reached.

We conclude this subsection by deriving the expression for the probabilities P((m, n), e) and P((m, n), c). Let us partition the boundary B(h) into three mutually disjoint sets:
Bw(h) = {(m, n) ∈ B(h) : (m − 1, n) ∈ B(h)} Bs(h) = {(m, n) ∈ B(h) : (m, n − 1) ∈ B(h)} Bnull(h) = {(m, n) ∈ B(h) : (m − 1, n) ∈/ B(h) and
(m, n − 1) ∈/ B(h)}.

For a depiction of the various boundary points, see Fig. 3. Now, P((m, n), e) can be written as:

P((m, n), e) =

 mm+n p(1 − p)m+n−1qm(1 − q)n

 

if (m, n) ∈ Pc(h) ∪ Bnull(h)

 m+mn−1 p(1−p)m+n−1qm(1−q)n if (m, n) ∈ Bw(h)  mm+−n−1 1 p(1−p)m+n−1qm(1−q)n if (m, n) ∈ Bs(h).

This can be understood as follows. Any point (m, n) ∈ Pc(h) ∪ Bnull(h) can be reached from West or South. mm+n is the number of possible paths for reaching (m, n). Each such path has to go m times Eastwards (thus the term qm) and n times Northwards (thus the term (1 − q)n) and ﬁnally ending at (m, n) (thus the term p(1 − p)m+n−1). Any point (m, n) ∈ Bw(h) can be reached only from South point
(m, n − 1). The probability of reaching (m, n − 1) without ending is m+mn−1 (1 − p)m+n−1qm(1 − q)n−1. Then, the corridor reaches (m, n) and ends with probability p(1 − q). P((m, n), e) for (m, n) ∈ Bs(h) can be obtained analogously.
Similarly, P((m, n), c) can be written as:

P((m, n), c) =

 mm+n (1 − p)m+nqm(1 − q)n

 

if (m, n) ∈ Pc(h) ∪ Bnull(h)

 m+mn−1 (1 − p)m+nqm(1 − q)n if (m, n) ∈ Bw(h)  mm+−n−1 1 (1 − p)m+nqm(1 − q)n if (m, n) ∈ Bs(h).

V. OSLA BASED FIXED POINT ITERATION ALGORITHM

In this section, we present an efﬁcient ﬁxed point iteration algorithm (Algorithm 1) using the OSLA rule in (11) for ob-

taining the optimal placement set, Pλ, and the optimal cost-togo, Jλ(0, 0). There are two advantages of our algorithm over the naive approach of directly trying to minimize the function g(·) to obtain Jλ(0, 0) (recall that Jλ(0, 0) = minh≥0 g(h)):
• On the theoretical side, this iterative algorithm avoids explicit optimization altogether, which, otherwise would be performed numerically over a continuous range. Without any structure on the objective function, direct numerical minimization of g(·) is difﬁcult and often unsatisfactory, as it invariably uses some sort of heuristic search over this continuous range.
• On the practical side, this algorithm is proved to converge within a ﬁnite number of iterations and observed to be extremely fast (requires 3 to 4 iterations typically).
The following is our Algorithm which we refer to as the OSLA Based Fixed Point Iteration Algorithm.

Algorithm 1 OSLA Based Fixed Point Iteration Algorithm

Require: 0 < p < 1, 0 ≤ q ≤ 1, λ ≥ 0 1: k = 0, h(k) = 0

2: while 1 do 3: P(h(k)) ← {(m, n) ∈ Z2+ : p(λ + h(k)) ≤ ∆q(m, n)} 4: Compute g(h(k)) using (17) 5: if g(h(k)) == h(k) then

6:

Break;

7: end if 8: h(k+1) ← g(h(k))

9: k ← k + 1

10: end while 11: return g(h(k)), P(h(k))

We now prove the correctness and ﬁnite termination properties of our algorithm. First, we deﬁne g∗ := Jλ(0, 0) = minh≥0 g(h). Now consider a sample plot of the function g(h) in Fig. 4. From Fig. 4(a) observe that whenever h > g∗ (which
is around 150), h > g(h). Also, Fig. 4(b) (where we have
plotted the functions g(h) and l(h) = h) suggests that g(h)
has a unique ﬁxed point. We formally prove these results. Lemma 3: If h > g∗ then h > g(h).
Proof: This follows from the manipulation of (17). See
Appendix D for details. Lemma 4: g(h) has a unique ﬁxed point.
Proof: From (14) and (11), we observe that
P(Jλ(0, 0)) = Pλ. From Theorem 3, Pλ is the optimal placement set and thus the cost-to-go of using P(Jλ(0, 0)) is Jλ(0, 0), i.e., g(Jλ(0, 0)) = Jλ(0, 0). Hence, Jλ(0, 0) = g∗ is a ﬁxed point of g(·). Now, any h > g∗ cannot be a ﬁxed
point since, in this case, h > g(h) from Lemma 3. On the other hand, any h < g∗ is such that h < g∗ ≤ g(h) because g∗ is the optimal cost-to-go. Hence, g∗ is the unique ﬁxed
point of g(·).
We are now ready to prove the convergence property of our
Algorithm. Lemma 5: 1) The sequence {h(k)}k≥1 (in Algorithm 1) is non-increasing, i.e., h(k+1) ≤ h(k), with the equality sign holding if and only if h(k) = g∗.

7

g(h)

195 190 185 180 175 170 165 160 155 150
0

50 100 150 200 250 300 350 400
h
(a)

400

350

g(h)

l(h)=h
300

250

200

150

100

50

0 0 50 100 150 200 250 300 350 400
h

(b)

Fig. 4. (a) Cost-to-go g(h) as a function of h (b) Zoom on the cost-to-go g(h) as a function of h. These plots are for p = 0.02, q = 0.5, and λ = 41.

2) The sequence {Pc(h(k))}k≥1 is non-increasing, i.e., Pc(h(k+1)) ⊆ Pc(h(k)), where the containment is strict whenever Pc(h(k+1)) Pλc.
Proof: 1) Note ﬁrst that h(k) ≥ g∗ for k ≥ 1 because h(k) = g(h(k−1)) ≥ g∗. Then, for k ≥ 1, we have either h(k) = g∗ or h(k) > g∗. In the ﬁrst case h(k+1) = g(h(k)) = g(g∗) = g∗ = h(k) and we can stop, whereas in the second case, from Lemma 3 we have h(k+1) = g(h(k)) < h(k).
2) From (14), h2 > h1 implies Pc(h1) ⊆ Pc(h2). Hence, as {h(k)}k≥1 is non-increasing (from Part 1)), {Pc(h(k))}k≥1
is also non-increasing.
Suppose Pc(h(k+1)) = Pc(h(k)) then g(h(k+1)) = g(h(k)) = h(k+1) (second equality is by the deﬁnition of {h(k)}), which implies h(k+1) = g∗ (since g(·) has a unique ﬁxed point, see Lemma 4). Thus, Pc(h(k+1)) = Pλc.
Theorem 4: Algorithm 1 returns g∗ and Pλc in a ﬁnite
number of steps.
Proof: Noting that h(1) = g(h(0)) ≥ g∗ and using (14), we have Pλc ⊆ Pc(h(1)). Either Pλc = Pc(h(1)), in which case the algorithm stops. Otherwise, note that both sets, Pλc and Pc(h(1)) contain a ﬁnite number of lattice points (from the deﬁnition of P(h) in (14)). Using Lemma 5, Pc(h(k)) converges to Pλc in at most |Pc(h(1)) − Pλc| < ∞ iterations. Once Pc(h(k)) converges to Pλ, the algorithm stops and returns the optimal cost-to-go g∗.

VI. SOLVING THE CONSTRAINED PROBLEM
In this section, we devise a method to solve the constrained problem in (3) using the solution of the unconstrained problem (2) provided by Algorithm 1. This method is applied in Section VII-B where, imposing a constraint on the average number of relays, we compare the performance of a distance based heuristic with the optimal.
We begin with the following standard result which relates the solutions of the problems in (2) and (3).
Lemma 6: Let πλ∗ ∈ Π be an optimal policy for the unconstrained problem in (2) such that Eπ∗ N = ρavg. Then
λ
πλ∗ is also optimal for the constrained problem in (3). However, the above lemma is useful only when we are able to exhibit a λ such that Eπ∗ N = ρavg. The subsequent
λ
development in this section is towards obtaining the solution to the more general case.
The expected number of relays used by the optimal policy, πλ∗, which uses the optimal placement set Pλ, can be computed as:
Eπ∗ N = (m,n)∈Bλ P((m, n), c) , (18) λ 1 − (m,n)∈Bλ P((m, n), c)
where P((m, n), c) is the reaching probability corresponding to Pλ and Bλ is the boundary of Pλ. A plot of Eπ∗ N vs. λ
λ
is given in Fig. 5. We make the following observations about Eπ∗ N .
λ
1) Eπ∗ N decreases with λ; this is as expected, since as each λ
relay becomes “costlier” fewer relays are used on the average.
2) Even when λ = 0, Eπ∗ N is ﬁnite. This is because d(0) > λ
0, i.e., there is a positive cost for a 0 length link. Deﬁne the value of Eπ∗ N with λ = 0 to be ρmax.
λ
3) Eπ∗ N vs. λ is a piecewise constant function. This occurs λ
because the relay placement positions are discrete. For a range of values of λ the same threshold is optimal. This structure is also evident from the results based on the optimal stopping formulation and the OSLA rule in Section IV. It follows that for a value of λ at which there is a step in the plot, there are two optimal deterministic policies, π and π, for the relaxed problem. Let ρ = EπN and ρ = EπN .
We have the following structure of the optimal policy for the constrained problem:
Theorem 5: 1) For ρavg ≥ ρmax the optimal placement set is obtained for λ = 0, i.e., is P0.
2) For ρavg < ρmax, if there is a λ such that (a) Eπ∗ N = λ ρavg then the optimal policy is πλ∗, or (b) ρ < ρavg < ρ then the optimal policy is obtained by mixing π and π.
Proof: 1) is straight forward. For proof of 2)-(a), see Lemma 6. Considering now 2)-(b), deﬁne 0 < α < 1 such that (1 − α)ρ + αρ¯ = ρavg. We obtain a mixing policy πm by choosing π w.p. 1 − α and π¯ w.p. α at the beginning of the deployment. For any policy π we have the following standard

8

Avg. Number of Relays, E *N
π
λ

30 200

25

180

160

20

140

120
15 100

80 10
60

λ 5

40

5

10

15

20

25

30

Avg. Power Cost, E *C
π
Avg. Total Cost, J (0,0)
λ

280 270 260 250 240 230 220
0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8
q

Fig. 5. Average number of relays Eπ∗ N (left) and average power cost λ
Eπ∗ C (right) as a function of λ (p = 0.002, q = 0.5 and η = 2). λ

Fig. 7. Average total cost Jλ(0, 0) as a function of q (p = 0.002 and η = 2).

Avg. Total Cost, J (0,0)
λ

North Coordinate (n)

50

350

Boundary for η=2

Boundary for η=2.5

300

40

Boundary for η=3

Boundary for η=4

250
30

200
20
150

100 10

50

5

10

15

20

25

30

λ

0

0

10

20

30

40

50

East Coordinate (m)

Fig. 6. Average total cost Jλ(0, 0) as a function of λ (p = 0.002, q = 0.5 and η = 2).

Fig. 8. Boundaries for various values of the path-loss exponent η (p = 0.002, q = 0.5).

argument:

Eπm C + λEπm N

= (1 − α)(EπC + λρ) + α(Eπ¯ C + λρ¯)

≤ (1 − α)(EπC + λEπN ) + α(EπC + λEπN )

= EπC + λEπN.

(19)

The inequality is because π and π are both optimal for the problem (2) with relay price λ. Thus, we have shown that πm is also optimal for the relaxed problem. Using this along with Eπm N = ρavg in Lemma 6, we conclude the proof.

VII. NUMERICAL WORK
For our numerical work we use the one-hop power function d(r) = Pm + γrη, with Pm = 0.1, γ = 0.01. We ﬁrst study the effect of parameter variation on the various costs. Next, we compare the performance of a distance based heuristic with the optimal.

A. Effect of Parameter Variation

In Fig. 3, we have already shown an optimal placement

boundary for p = 0.002, q = 0.5, and η = 3. Since q = 0.5

the boundary is symmetric about the m = n line.

In Fig. 5, we plot Eπ∗ N and Eπ∗ C vs. λ. The plot of

λ

λ

Jλ(0, 0) vs. λ is in Fig. 6. These plots are for p = 0.002

and q = 0.5. Since λ is the cost per relay, as expected,

Eπ∗ N decreases as λ increases. We observe that Eπ∗ C and

λ

λ

the optimal total cost Jλ(0, 0) increase as λ increases. A

close examination of Fig. 5 reveals that both the plots are

step functions. This is due to the discrete placement at lattice

points, which results in the same placement boundary being

optimal for a range of λ values. Thus, as seen in Section VI, at

the λ values, where there is jump in Eπ∗ N , a random mixture λ
of two policies is needed.

Fig. 7 shows the variation of the total optimal cost Jλ(0, 0) with q. The variation is symmetric about q = 0.5. For a given probability p of the path ending, q = 0.5 results in the path folding frequently. In such a case, since NLOS propagation is permitted, and the path-loss is isotropic, fewer relays are required to be placed. On the other hand, when q is close to 0 or to 1 the path takes fewer turns and more relays are needed, leading to larger values of the total cost.

In Fig. 8 we show the variation of optimal boundaries with η. As η, the path-loss exponent, increases the hop cost increases for a given hop distance. This results in relays needing to be placed more frequently. As can be seen the placement boundaries shrink with increasing η. We also notice that the placement boundary for η = 2 is a straight line; indeed this provable result holds for η = 2 for any values of p and q.

9

Fig. 9. Boundary of the optimal placement set (OSLA boundary) and boundary derived from the heuristic policy (p = 0.002, q = 0.5 and η = 2).

200 q=0.5, Optimal

180

q=1, Optimal

q=0.5, Distance Threshold

160

Avg. Total Power

140

120

100

80

60

40

10

15 ρ 20

25

30

avg

Fig. 10. Average total power as a function of ρ for the optimal policy (q = 0.5 and q = 1, which corresponds to the straight line) and for the heuristic (q = 0.5) for p = 0.002 and η = 2.
B. Comparison with the Distance based Heuristic
We recall from the literature survey in Section I that prior work invariably proposed the policy of placing a relay after the RF signal strength from the previous relay dropped below a threshold. For isotropic propagation (as we have assumed in this paper), this is equivalent to placing the relay after a circular boundary is crossed. With this in mind, we obtained the optimal constant distance placement policy (called the heuristic hereafter) numerically in a manner similar to what is described in Section IV-B. A sample result is provided in Fig. 9, for the parameters p = 0.002, q = 0.5 and η = 2. We observe that if the path were to evolve roughly Eastward or Northward then the heuristic will result in many more relays being placed. On the other hand, if the path evolves diagonally (which has higher probability) then the two placement boundaries will result in similar placement decisions.
This observation shows up in Fig. 10, where we show the cost incurred by the optimal policy (for q = 0.5 and for q = 1, which corresponds to a straight line corridor) and the heuristic (q = 0.5) vs. ρ for the constrained problem. As expected, the cost is much larger for q = 1 since the path does not fold. We ﬁnd that for q = 0.5 the optimal placement boundary and the heuristic provide costs that are almost indistinguishable at this scale. We have performed simulations by varying the system parameters and observed the same good performance of the optimal constant distance placement policy.

This suggests that the heuristic policy performs well provided that the threshold distance is optimally chosen with respect to the system parameters.
VIII. CONCLUSION
We considered the problem of placing relays on a random lattice path to optimize a linear combination of average power cost and average number of relays deployed. The optimal placement policy was proved to be of threshold nature (Theorem 1). We further proved the optimality of the OSLA rule (in Theorem 3). We have also devised an OLSA based ﬁxed point iteration algorithm (Algorithm 1), which we have proved to converge to the optimal placement set in a ﬁnite number of steps. Through numerical work we observed that the performance (in terms of average power incurred for a given relay constraint) of the optimal policy is closed to that of the distance threshold policy provided that the threshold distance is optimally chosen with respect to the system parameters.
REFERENCES
[1] C. Fischer and H. Gellersen, “Location and Navigation Support for Emergency Responders: A Survey,” IEEE Pervasive Computing, vol. 9, no. 1, pp. 38–49, Jan.-Mar. 2010.
[2] A. Howard, M. J. Mataric´, and S. Sukhat Gaurav, “An Incremental Self-Deployment Algorithm for Mobile Sensor Networks,” Kluwer Autonomous Robots, vol. 13, no. 2, pp. 113–126, Sept. 2002.
[3] G. Loukas, S. Timotheou, and E. Gelenbe, “Robotic Wireless Network Connection of Civilians for Emergency Response Operations,” in Proc. of the IEEE International Symposium on Computer and Information Sciences (ISCIS), Istanbul, Turkey, Oct. 2008.
[4] D. Naudts, S. Bouckaert, J. Bergs, A. Schouttcet, C. Blondia, I. Moerman, and P. Demeester, “A Wireless Mesh Monitoring and Planning Tool for Emergency Services,” in Proc. of the IEEE Workshop on End-toEnd Monitoring Techniques and Services (E2EMON), Munich, Germany, May 2007.
[5] M. R. Souryal, J. Geissbuehler, L. E. Miller, and N. Moayeri, “RealTime Deployment of Multihop Relays for Range Extension,” in Proc. of the ACM International Conference on Mobile Systems, Applications and Services (MobiSys), San Juan, Puerto Rico, June 2007.
[6] M. R. Souryal, A. Wapf, and N. Moayeri, “Rapidly-Deployable Mesh Network Testbed,” in Proc. of the IEEE Conference on Global Telecommunications (GLOBECOM), Honolulu, Hawai, USA, Nov. 2009.
[7] T. Aurisch and J. To¨lle, “Relay Placement for Ad-hoc Networks in Crisis and Emergency Scenarios,” in Proc. of the Information Systems and Technology Panel (IST) Symposium. Bucharest, Romania: NATO Science and Technology Organization, May 2009.
[8] H. Liu, J. Li, Z. Xie, S. Lin, K. Whitehouse, J. A. Stankovic, and D. Siu, “Automatic and Robust Breadcrumb System Deployment for Indoor Fireﬁghter Applications,” in Proc. of the ACM International Conference on Mobile Systems, Applications and Services (MobiSys), San Francisco, California, USA, June 2010.
[9] P. Mondal, K. P. Naveen, and A. Kumar, “Optimal Deployment of Impromptu Wireless Sensor Networks,” in Proc. of the IEEE National Conference on Communications (NCC), Kharagpur, India, Feb. 2012.
[10] R. Srivastava and A. Kumar, “Performance Analysis of Beacon-Less IEEE 802.15.4 Multi-Hop Networks,” in Proc. of the IEEE International Conference on Communication Systems and Networks (COMSNETS), Bangalore, India, Jan. 2012.
[11] P. Mondal, “Optimal Deployment of Impromptu Wireless Sensor Networks,” Master’s thesis, Indian Institute of Science, Bangalore, 2011.
[12] D. P. Bertsekas, Dynamic Programming and Optimal Control, Vol-II, 3rd Edition. Athena Scientiﬁc, Belmont, Massachusetts, 1995.
[13] S. Boyd and L. Vandenberghe, Convex Optimization. Cambridge University Press, 2004.

10

APPENDIX A PROOF OF LEMMAS IN SECTION II
A. Proof of Lemma 1
Proof: Any norm is convex so that the function g(x, y) ≡ x2 + y2 is convex in (x, y). The delay function d(·) is also assumed to be convex and non-decreasing in its argument. Hence by using the composition rule [13, Section 3.2.4], we conclude that the function d(x, y) ≡ d( x2 + y2) is convex in (x, y) ∈ R2.

B. Proof of Lemma 2
Proof: It is easier to prove the lemma allowing the arguments m and n take values from the Real line. We have,

∆1(x, y) = d(x + δ, y) − d(x, y)

Partially differentiating both sides w.r.t. x, we get
∂∆1(x, y) = dx(x + δ, y) − dx(x, y) ∂x = δdxx(ζ, y) where x < ζ < x + δ > 0,

where the equality follows from the application of Lagrange’s Mean Value Theorem to the function dx(., y) and the inequality is due to assumption in (1). The above proves the fact that ∆1(x, y) is non-decreasing in x.
To prove that ∆1(x, y) is non-decreasing in y, we partially differentiate ∆1(x, y) w.r.t. y and obtain
∂∆1(x, y) = dy(x + δ, y) − dy(x, y) ∂y = δdxy(η, y) where x < η < x + δ
> 0,

where the equality follows from the application of Lagrange’s Mean Value Theorem to the function dy(., y) and the inequality is due to assumption in (1). This shows that the function ∆1(x, y) is non-decreasing in both the coordinates x and y. In a similar way it can also be shown that ∆2(x, y) is nondecreasing in x and y under the assumption made in (1). This completes the proof.

APPENDIX B PROOF OF THEOREM 1
We begin by deﬁning Hλ(m, n) := Jλ(m, n) − d(m, n). Substituting for cp(m, n) and cnp(m, n) (from (6) and (7), respectively) into (8) and rearranging we obtain (recall the deﬁnitions of ∆1(m, n) and ∆2(m, n) from Section II):

Pλ =

(m, n) : (1−p)(qHλ(m+1, n)+(1−q)Hλ(m, n+1))

+p(q∆1(m, n) + (1 − q)∆2(m, n)) ≥ λ +

(20)

(1 − p)qJλ(1, 0) + (1 − p)(1 − q)Jλ(0, 1) + pd(1) .

Lemma 7: For a ﬁxed λ, Hλ(m, n) is non-decreasing in both m ∈ Z+ and n ∈ Z+.

Proof: Consider a sequential relay placement problem where we have K steps to go. The corridor length is the minimum of K and of a geometric random variable with parameter p. The problem be formulated as a ﬁnite horizon MDP with horizon length K. For any given (m, n), JK(m, n), K ≥ 2 is obtained recursively:
JK (m, n) = min{cp(m, n), cnp(m, n)} = min{λ + d(m, n) + (1 − p)qJK−1(1, 0) + pqd(1) + (1 − p)(1 − q)JK−1(0, 1) + p(1 − q)d(1), (1 − p)qJK−1(m + 1, n) + pqd(m + 1, n) + (1−p)(1−q)JK−1(m, n+1)+p(1−q)d(m, n+1)}.
For K = 1, since a sensor must be placed at the next step, we have J1(m, n) = min{λ + d(m, n) + d(1), qd(m + 1, n) + (1 − q)d(m, n + 1)}. Therefore,
H1(m, n) := J1(m, n) − d(m, n) = min{λ + d(1), q∆1(m, n) + (1 − q)∆2(m, n)}.
From Lemma 2, it follows that H1(m, n) is non-decreasing in both m and n. Now we make the induction hypothesis and assume that HK−1(m, n) is non-decreasing in m and n. We have:
HK (m, n) = JK (m, n) − d(m, n) = min{λ + (1 − p)qJK−1(1, 0) + pqd(1) + (1 − p)(1 − q)JK−1(0, 1) + p(1 − q)d(1), (1 − p) (qHK−1(m + 1, n) + (1 − q)HK−1(m, n + 1)) + q∆1(m, n) + (1 − q)∆2(m, n)}.
By the induction hypothesis and Lemma 2, it follows that HK(m, n) is non-decreasing in both m and n. The proof is complete by taking the limit as K → ∞.
We are now ready to prove Theorem 1. Proof of Theorem 1: Referring to (20), utilizing Lemma 7
and the Lemma 2, it follows that for a ﬁxed n ∈ Z+, the LHS (Left Hand Side) of (20), describing the placement set Pλ is an increasing function of m, while the RHS (Right Hand Side) is a ﬁnite constant. Also, because of the assumed properties of the function d(.), ∆1(m, n) → ∞ as m → ∞, for any ﬁxed n. Hence it follows that there exists an m∗(n) ∈ Z+ such that (m, n) ∈ Pλ ∀m ≥ m∗(n). Hence we may write Pλ = n∈Z+ {(m, n)|m ≥ m∗(n)}. The second characterization follows by similar arguments.
APPENDIX C PROOF OF THEOREM 3
We require the following lemmas to prove Theorem 3. Lemma 8: Pλ ⊂ Pλ
Proof: Suppose that (m, n) ∈ Pλ. Then from (9) (m + 1, n) ∈ Pλ and from (10), (m, n + 1) ∈ Pλ. Since (m, n) ∈

11

Pλ, we have from (6), (7) and (8) that

λ+d(m, n)+(1−p)qJλ(1, 0)+pqd(1)+(1−p)(1−q)× Jλ(0, 1)+p(1−q)d(1) ≤ (1−p)qJλ(m+1, n)+ pq× d(m+1, n)+(1−p)(1−q)Jλ(m, n+1)+p(1−q)d(m, n+1). (21)

Also we may argue that at the state (0, 0), it is optimal not to place. Indeed, if it had been optimal to place at the state (0, 0), at the next step, we return to the same state, viz., (0, 0). Now, because of the stationarity of the optimal policy, we would keep placing relays at the same point, and since “relay-cost” λ > 0 and d(0, 0) > 0, the expected cost for this policy would be ∞. Hence,

Jλ(0, 0) = (1 − p)qJλ(1, 0) + pqd(1)+ (1 − p)(1 − q)Jλ(0, 1) + p(1 − q)d(1). (22)

Since (m+1, n) ∈ Pλ and (m, n+1) ∈ Pλ, we have (noticing that it is optimal to place at these points and utilizing (6) and (22)),

Jλ(m + 1, n) = λ + d(m + 1, n) + Jλ(0, 0) (23) Jλ(m, n + 1) = λ + d(m, n + 1) + Jλ(0, 0). (24)

Now, using (22), (23) and (24) in (21), we obtain:

p(λ+Jλ(0, 0)) ≤ q∆1(m, n)+(1−q)∆2(m, n). (25)
This proves that (m, n) ∈ P¯λ and hence Pλ ⊂ Pλ Using the above Lemma and from (9), (10), (12), (13) we
can conclude that:

n∗(m) ≥ n(m) ∀m ∈ Z+

(26)

m∗(n) ≥ m(n) ∀n ∈ Z+.

(27)

Lemma 9: If (m, n) ∈ Pλ is such that (m, n + 1) ∈ Pλ and (m + 1, n) ∈ Pλ, then (m, n) ∈ Pλ
Proof: Since (m, n) ∈ P¯λ, we have from (11),

p(λ + Jλ(0, 0)) ≤ q∆1(m, n) + (1 − q)∆2(m, n). (28)

Now (m, n + 1) ∈ Pλ, and (m + 1, n) ∈ Pλ, hence we have from (23) and (24):

Jλ(m + 1, n) = λ + d(m + 1, n) + Jλ(0, 0) Jλ(m, n + 1) = λ + d(m, n + 1) + Jλ(0, 0).

The expression (22) is always true. Now using (22) and the above two equations in inequality (28), we obtain (21), which proves that (m, n) ∈ Pλ.
Lemma 10: If (m, n) ∈ Pλ (resp. Pλ), then (m + k, n) ∈ Pλ (resp. Pλ) and (m, n+k) ∈ Pλ (resp. Pλ) for any k ∈ Z+.
Proof: The proof follows easily because the LHS of (20) is increasing in both m and n while the RHS is a constant. Similarly, the RHS of (11) is increasing in both m and n while the LHS is a constant.
We can now prove the main theorem. Proof of Theorem 3: We need to show that inequalities
in (26) and (27) are equalities. For any m ∈ Z+, suppose

that in (26) n∗(m) > n∗(m) − 1 ≥ n¯(m). Then we have the following inclusions:

(m, n∗(m)) ∈ Pλ

(m, n∗(m) − 1) ∈ Pλ

(m, n∗(m) − 1) ∈/ Pλ.

(29)

Let us index the collection of lattice-points (m + i, n∗(m) −1) by Ni, i ∈ Z+. Since (m, n∗(m) − 1) ∈ Pλ, from Lemma 10, it follows that Ni ∈ Pλ. From (29), N0 ∈/ Pλ.
Then, the optimal policy being a threshold policy, we know
that there exists a ﬁnite k > 0, s.t. Nk ∈ Pλ, i.e.,

(m + k, n∗(m) − 1) ∈ Pλ.

(30)

Again from Lemma 10, since (m, n∗(m)) ∈ Pλ, we have for any k > 0:

(m + k − 1, n∗(m)) ∈ Pλ.

(31)

Now we see that for the point Nk−1, the conditions of Lemma 9 are satisﬁed. Hence Nk−1 ∈ Pλ. If k = 1, we already have a contradiction since N0 ∈/ Pλ. Otherwise for k > 1, using Lemma 10 and Nk−1 ∈ Pλ, we can show that Nk−2 is subject to the conditions of Lemma 9 implying that Nk−2 ∈ Pλ. By iteration, we ﬁnally obtain that N0 ∈ Pλ, which contradicts (29) and proves the result.

APPENDIX D PROOF OF LEMMA 3
We start by showing the following lemma. Lemma 11: For any placement set P(h) of the form in (14), we have:

r(m, n) ∆q(m, n) − p(λ + g(h))
(m,n)∈P c (h)

+d(0, 0) + λ = 0, (32)

where r(m, n) = (1 − p)m+n mm+n qm(1 − q)n. Proof: We ﬁrst introduce some notations and deﬁnitions.
Let us deﬁne a path σ as a possible realization of the
corridor, starting from (0, 0) and let P(σ) be the probability
of such a path. The set of all paths is denoted by Σ. Let Σmn denote the set of all paths that end at (m, n) ∈ Pc(h) ∪ B(h)
and Σmn(c) the set of all paths that hit (m, n) ∈ B(h) and continue.
Let us denote the set of edges whose both end vertices belong to the set Pc(h) ∪ B(h) by E. A path σ is completely
characterized by its edge set Eσ. The reaching probability, r(m, n), of a point (m, n) is
deﬁned as the probability that a random path σ reaches the
point (m, n) and continues for at least one step. Hence, r(m, n) = (1 − p)m+n mm+n qm(1 − q)n.
The incremental cost function δ : E −→ R+ is deﬁned as follows:

d(m + 1, n) − d(m, n) = ∆1(m, n) 



 

if e = {(m, n), (m + 1, n)}

δ(e) =

(33)

d(m, n + 1) − d(m, n) = ∆2(m, n)







if e = {(m, n), (m, n + 1)}.

12

For (m, n) ∈ σ, the incremental cost function allows us to write:

d(m, n) =

δ(e) + d(0, 0).

(34)

e∈Eσ ∩E

Now consider

P((m, n), e)d(m, n) + P((m, n), c)d(m, n)

P c (h)∪B(h)

B(h)

=

P(σ)

δ(e) + d(0, 0) +

Pc(h)∪B(h) σ∈Σmn

e∈Eσ

P(σ)

δ(e) + d(0, 0)

B(h) σ∈Σmn(c)

e∈Eσ ∩E

=

δ(e)

P(σ) + d(0, 0)

e∈E

σ∈Σ:e∈Eσ

=

δ(e)t(e) + d(0, 0),

(35)

e∈E

where by t(e) we denote the probability that a random path goes through the edge e ∈ E.
Now if e is horizontal, i.e., e = {(m, n), (m + 1, n)}, (m, n) ∈ Pc(h), we have t(e) = qr(m, n) and δ(e) = ∆1(m, n). Similarly if e is vertical, i.e., e = {(m, n), (m, n + 1)}, (m, n) ∈ Pc(h), we have t(e) = (1 − q)r(m, n) and δ(e) = ∆2(m, n). Using these relations, we may rewrite (35) as follows:

r(m, n) q∆1(m, n) + (1 − q)∆2(m, n)
P c (h)

=

r(m, n)∆q(m, n) + d(0, 0).

P c (h)

+ d(0, 0) (36)

Now consider the probability (m,n)∈B(h) P((m, n), c). It is the probability that a random path continues beyond the
boundary B(h). Hence we may write

P((m, n), c) = 1 −

P((m, n), e)

B(h)

P c (h)∪B(h)

= 1 − r(m, n)p.

(37)

P c (h)

Using (36) and (37) in (17) and simplifying, we obtain the result.
Proof of Lemma 3: We recall the deﬁnition of Pc(h).

P c (h)

=

{(m,

n)

∈

2
Z+

:

p(λ

+

h)

>

∆q (m,

n)}.

(38)

Since h > g∗, we immediately conclude that Pλc ⊂ Pc(h). From (32) in Lemma 11, we may write for the optimal placement set Pλ:

r(m, n)∆q(m, n) = p(λ + g∗) r(m, n)

Pλ c

Pλ c

−(d(0, 0) + λ).

(39)

We may similarly write for the placement set P(h):

r(m, n)∆q(m, n) = p(λ + g(h)) r(m, n)

P c (h)

P c (h)

−(d(0, 0) + λ).

(40)

Now, since Pλc ⊂ Pc(h), we may expand the LHS of (40) as follows:

r(m, n)∆q(m, n)
P c (h)

=

r(m, n)∆q(m, n) +

r(m, n)∆q(m, n)

Pλc

P c (h)\Pλc

<

r(m, n)∆q(m, n) + p(λ + h)

r(m, n)

Pλc

P c (h)\Pλc

= p(λ + g∗) r(m, n) − (d(0, 0) + λ)

Pλc

+ p(λ + h)

r(m, n),

(41)

P c (h)\Pλc

where, for the inequality, we used (38) and for (41), we have substituted the value for the quantity from (39). We may alternatively write the RHS of (40) as:

p(λ + g(h)) r(m, n) − (d(0, 0) + λ)
P c (h)

= p(λ + g(h))

r(m, n) +

r(m, n)

Pλ c

P c (h)\Pλ c

− (d(0, 0) + λ).

(42)

Now comparing (41) and (42) and rearranging, we may write:

p(g(h)−g∗) r(m, n) < p(h−g(h))

r(m, n) (43)

Pλ c

P c (h)\Pλ c

Now Pc(h)\Pλc r(m, n) = 0 if and only if Pc(h)\Pλc = ∅, i.e., P(h) = Pλ. In this case we get g(h) = g∗ < h. On the
other hand, if Pc(h)\Pλc r(m, n) > 0, since g∗ ≤ g(h), from the inequality (43), we conclude that h > g(h).

