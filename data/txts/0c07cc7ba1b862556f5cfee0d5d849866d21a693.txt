Fundamental Limits on Communication for Oblivious Updates in Storage Networks
Preetum Nakkiran, Nihar B. Shah, K. V. Rashmi Department of EECS, University of California, Berkeley {preetum,nihar,rashmikv}@berkeley.edu

arXiv:1409.1666v1 [cs.IT] 5 Sep 2014

Abstract—In distributed storage systems, storage nodes intermittently go ofﬂine for numerous reasons. On coming back online, nodes need to update their contents to reﬂect any modiﬁcations to the data in the interim. In this paper, we consider a setting where no information regarding modiﬁed data needs to be logged in the system. In such a setting, a ‘stale’ node needs to update its contents by downloading data from already updated nodes, while neither the stale node nor the updated nodes have any knowledge as to which data symbols are modiﬁed and what their value is. We investigate the fundamental limits on the amount of communication necessary for such an oblivious update process.
We ﬁrst present a generic lower bound on the amount of communication that is necessary under any storage code with a linear encoding (while allowing non-linear update protocols). This lower bound is derived under a set of extremely weak conditions, giving all updated nodes access to the entire modiﬁed data and the stale node access to the entire stale data as side information. We then present codes and update algorithms that are optimal in that they meet this lower bound. Next, we present a lower bound for an important subclass of codes, that of linear MaximumDistance-Separable (MDS) codes. We then present an MDS code construction and an associated update algorithm that meets this lower bound. These results thus establish the capacity of oblivious updates in terms of the communication requirements under these settings.
I. INTRODUCTION
In recent years, there has been a tremendous increase in the amount of digital data stored. This has lead to the popular paradigm of distributed storage wherein the data to be stored is partitioned into fragments and stored across multiple storage nodes connected through a network. This includes peer-topeer storage systems [1]–[4], globally distributed storage systems [5], [6], data-center based storage systems [7], [8], and caching networks [9]. These distributed storage systems store data in a redundant fashion, using either replication or erasure coding, in order to ensure reliability and availability in the face of frequent unavailability events. Under replication, multiple copies of the fragments are stored on different nodes, for example, the Google File System and the Hadoop Distributed File System use 3-replication as the default strategy for introducing redundancy. Under erasure coding, the data fragments are encoded using erasure codes such as Reed-Solomon codes and the encoded fragments are stored on different nodes [10].
The storage nodes in the system can go ofﬂine for certain intervals of time for various reasons. For instance, there is frequent node churn in peer-to-peer networks as nodes join and leave the network at their will; software issues, maintenance shutdowns, reboots, etc. cause nodes to go ofﬂine in distributed
IEEE Global Communications Conference (GLOBECOM) 2014.

storage systems [11], [12]; machines are switched off for certain intervals of time for power savings in some data centers [13].
We consider the setting of mutable data where the data may be modiﬁed during its lifetime (as opposed to immutable data which is read-only). When data gets modiﬁed, all stored fragments pertaining to this data (either the replicas or the encoded fragments) need to be updated to reﬂect this modiﬁcation. When a node comes back online, its contents need to be updated to reﬂect any modiﬁcations to the data that occurred when the node was ofﬂine. We term such a node as a stale node.
One approach towards enabling stale nodes to update their contents is to centrally track all modiﬁcations to the data. Under such a complete-information approach [14]–[17], the data in a stale node is updated via communication with a central node which provides the precise value of the updated fragments to the stale node. However, this approach has the drawback of requiring the system to centrally keep a log of every modiﬁcation of the data. This paper, on the other hand, considers an entirely distributed approach in which the system does not store any information regarding the modiﬁed data. Here, a stale node needs to update its contents by communicating and downloading data from other updated storage nodes present in the system. Neither the stale node nor the updated nodes are aware of what data was modiﬁed and what its updated value is. We term such an update process as an oblivious update. In this paper, we seek to establish the fundamental limits on the amount of communication required to perform oblivious updates.
In a distributed system, one could constantly store and maintain, in every storage node, a log of all updates. When required to update a stale node, one could use these logs to identify and transmit the updated data. Oblivious updates, on the other hand, do not necessitate any such additional storage, and also help avoid logistical issues in maintaining any logs. As we will show later in the paper, the amount of communication required to perform an oblivious update is, in fact, not much larger than the amount of communication required for updates in the complete-information setting.
A related line of work is that on maintaining consistency in databases [18], [19] in the presence of modiﬁcations to the data. The primary problems here are of ensuring that read requests are served from up-to-date data, and maintaining availability of the data. The problem of set reconciliation [20] also has similarities with the problem of oblivious updates.

2

node 1 node 2 node 3

3a’ + b + 10d 4a’ + 8b + 8d 5a’ + 6b + 6d

3b + c + 10e 4b + 8c + 8e 5b + 6c + 6e

node 4 a + 6b + 5d

b + 6c + 5e

3d + e 4d + 8e 5d + 6e
d `+ 6e

1

x! 6 5

3a’ +

x!

1 6

4a’ +

8b + 6

5

10b + c + 3d

4c + 6d + 10e

Update Decoder

a’ + 6b + 5d

b + 6c + 5e

d + 6e

Fig. 1. A code and an update algorithm that performs optimal oblivious updates. The code operates over the ﬁnite ﬁeld F11. The symbol a was modiﬁed to a during a period when node 4 was temporarily unavailable/ofﬂine. Upon returning, node 4 updates its stored data despite all nodes being oblivious to the
identity and the value of the modiﬁed symbol. The update protocol downloads a total of 2 log2 11 bits (i.e., one symbol of F11 each from any two of the updated nodes), which is the minimum possible.

The set reconciliation problem involves two entities, each of whom has some set of values, and the goal is to enable these two entities to learn the difference between their sets with the minimum amount of communication.
Following the literature on classical complete-information updates [14]–[17], in this paper we study the case when at most a single symbol is modiﬁed. Here, a ‘symbol’ refers to the smallest granularity of data that can be modiﬁed. The case of a single-symbol update is a stepping stone to the more general case of multiple symbol-updates. Further, motivated by practical considerations, we restrict our attention to linear codes, i.e., where the encoding process for storage is linear. Although the storage codes are linear, the update protocol is allowed to involve non-linear computations as well, thereby leading to more general bounds.
In this paper we investigate the fundamental limits on the amount of data that needs to be communicated to perform oblivious update of a stale node when a single message symbol is modiﬁed. We show that under any code that has a linear encoding (over a ﬁnite ﬁeld of size q), including the special case of ‘replication’, a stale node needs to download at least 2 log2 q bits when any one of the message symbols is modiﬁed (Section III). This lower bound is obtained via a geniebased argument under a set of extremely weak conditions allowing inﬁnite connectivity for the stale node and giving the entire modiﬁed data to all the updated nodes and the entire stale data to the stale node as side information. We then present codes and update algorithms that, perhaps surprisingly, meet these lower bounds on communication (Section IV). Here, oblivious updates are preformed by having a stale node download only 2 log2 q bits, while the amount of data stored in the node may be arbitrarily large. These codes are also optimal with respect to the ‘storage-bandwidth tradeoff’ for distributed storage [21]. We then investigate the class of codes that are ‘Maximum-Distance-Separable’ (MDS). MDS codes are a popular choice for distributed storage since they provide maximum reliability with minimum storage overheads. When the linear code is restricted to be MDS, we establish a lower bound on the amount of communication required for oblivious update (Section V), and additionally, present an MDS code and

an update algorithm that meets this lower bound (Section VI). These results thus establish the capacity of the communication requirements for oblivious updates under linear codes.
The next section formalizes the problem setting and presents an illustrative example.
II. PROBLEM DESCRIPTION
A. Problem Setting
Consider B symbols of data, termed the message, that are to be stored across n storage nodes. Each symbol of data is assumed to belong to some ﬁnite ﬁeld Fq of size q. Each node has a capacity of storing A ≥ 2 symbols over Fq. The data is stored across the nodes using a code that is linear over Fq. Now suppose some storage node, say node s, was busy or ofﬂine for some period of time. In this period, suppose one of the B message symbols was updated. The remaining nodes now store (encodings of) the updated data. However, node s still contains stale data, and we will call this node as the the stale node. Now, when node s comes back up, its contents must be updated to reﬂect the updated message. To this end, the stale node connects to one or more of the other nodes, and downloads some functions of the data stored in them. The goal is to minimize this amount of download.
In the setup we consider, none of the nodes are required to store any information about the identity or the value of the symbol that was updated. The update of the stale node’s data is thus oblivious of the update in the message. We do assume, however, that the stale node knows that at most a single symbol was updated. We also assume that the code is linear, i.e., each nodes stores A linear combinations of the B message symbols. Note that we only assume that the underlying encoding of the stored data is linear, and the data passed during an update operation may comprise arbitrary (linear or non-linear) functions of the data stored in the updated nodes.
The second half of the paper considers a very popular subclass of codes known as Maximum-Distance-Separable (MDS) codes. MDS codes satisfy the two following properties: (a) The entire message of B symbols can be recovered from the data stored in any k of the n nodes, for some pre-deﬁned

3

parameter k. This ensures that the storage system can tolerate the failure of any arbitrary (n − k) of the n nodes, and furthermore, ensures high availability of the data since it can be recovered from any k nodes. (b) The storage requirement at each node is A = Bk , which is the minimum possible when satisfying the ﬁrst property. Again, the goal is to minimize the amount of download required to perform an oblivious update.
Notational conventions: For vectors v1 and v2 of equal lengths, dH (v1, v2) will denote the Hamming distance between them. For any positive integer r, [r] will denote the set {1, . . . , r}. Vectors will be column vectors by default.
B. Example
We illustrate the problem setting with an example of a storage code and an update algorithm that are optimal. The code, shown in Fig. 1, operates in the ﬁnite ﬁeld F11 of size 11. The message comprises B = 5 symbols {a, b, c, d, e}, each drawn from F11. The message is encoded and stored across n = 4 storage nodes as shown in the ﬁgure. One can verify that the entire message is recoverable from any two of the four nodes, thus making the storage system tolerant to the failure of any two of the four nodes.
Now suppose node 4 was unavailable for some period of time, during which message symbol a was updated to a . The three other nodes store the updated data, and (‘stale’) node 4 must update its own data by downloading data from the three other nodes. The nodes do not keep any record of what is updated and by how much, i.e., do not know that symbol a was updated and that its new value is a . The update protocol is thus required to be oblivious of the update.
The lower bounds derived subsequently in Section III dictate the necessity of downloading at least 2 log2 11 bits for the update. The following update protocol meets this lower bound, with the stale node downloading one symbol of F11 each from two arbitrary updated nodes. The stale node contacts any two other nodes, say nodes 1 and 2, and asks for the inner product of their respective data with [1 6 5]. The two nodes return the values of (3a + 8b + 6c + 3d + 10e) and (4a + 10b + 4c + 6d) respectively. Of course, the stale node does not know that this received data is computed with a and not a. Next, the stale node computes an inner product of its own data with [3 1 10] to get the value of (3a + 8b + 6c + 3d + 10e), and an inner product of its own data with [4 8 8] to get the value of (4a + 10b + 4c + 6d). Subtracting these from the data received from the two other nodes, the stale node obtains the values of {3(a − a), 4(a − a)}. If both these values are zero, then no symbol was updated, and the algorithm terminates. If not, then the algorithm continues in the following manner. Since the identity of the updated symbol is not known, from the perspective of the stale node, these two values could correspond to either {3(a −a), 4(a −a)} or {8(b −b), 10(b − b)} or {6(c − c), 4(c − c)} or {3(d − d), 6(d − d)} or {10(e − e), 0(e − e)}. The stale node now takes the ratio of the two values; this ratio 3 : 4 uniquely identiﬁes that symbol a was updated. Multiplying the ﬁrst value 3(a − a) by 3−1 gives the value of the update (a −a). This amount is added to the ﬁrst symbol of the stale node, and the result (a + 6b + 5d) is stored as the updated ﬁrst symbol of the stale node.

This storage code and update protocol are generalized to arbitrary system parameters in Section IV-A.
III. LOWER BOUNDS FOR ARBITRARY LINEAR CODES
This section derives lower bounds on the amount of download for oblivious update under any arbitrary code with linear encoding. Note that although we consider the encoding to be linear, we allow the update operation to be executed via any arbitrary (linear or non-linear) functions.
Theorem 1: Consider a scenario where the stale node is allowed to connect to any arbitrary number of updated nodes. Furthermore, suppose a genie provides all updated nodes with all the updated message symbols and the stale node with all the stale message symbols as side information (the nodes still do not know the identity or value of the symbol that was updated). In order to update the data stored in the stale node, it must download a total of at least 2 log2 q bits.
Proof: Let m denote the vector of the B stale symbols, and let m denote the vector of the B updated symbols, with dH (m, m ) ≤ 1. Let Gs denote the (A × B) generator matrix of the stale node, i.e., the stale node stores Gsm, and wants Gsm . Assume without loss of generality that the A rows of Gs are linearly independent. Note that our genie has also provided the entire stale message m to the stale node.
Since the genie has provided each updated node with all the updated message symbols m , one can assume without loss of generality that the stale node connects to only one updated node. On being contacted by the stale node, the updated node must return some function of the data: let f denote this function, i.e., the updated node returns f (m ) to the stale node. We will now show that the cardinality of the range of f cannot be less than q2, thus necessitating a download of at least 2 log2 q bits. We employ a contradiction-based argument, for which we assume that the cardinality of the range of f is strictly smaller than q2.
The linear independence of the A rows of Gs implies existence of A coordinates 1, . . . , A ∈ [B] of m such that for every ﬁxed value of m\{m 1 , . . . , m A }, the map (m 1 , . . . , m A ) → Gsm is a bijection. Without loss of generality, let i = i ∀i ∈ [A]. Consider the set of q2 messages of the form [m1, m2, 0 . . . , 0]. Since the range of f contains strictly fewer than q2 values, there must exist some two distinct messages, say m(a) and m(b), in the aforementioned set of q2 messages, for which f (m(a)) = f (m(b)).
Now we know that m(a) = m(b), f (m(a)) = f (m(b)), Gsm(a) = Gsm(b), and dH (m(a), m(b)) ≤ 2. The last property implies existence of some m(c) ∈ (Fq)B such that dH (m(c), m(a)) ≤ 1 and dH (m(c), m(b)) ≤ 1. Finally, suppose m(c) is the stale message. Now, m(a) and m(b) are two possible candidates for the updated message. The stale node has access to the same data in both cases: Gsm(c) as its own stale data, and f (m(a)) = f (m(b)) downloaded from the updated node. This prevents the stale node from distinguishing between m(a) and m(b) as the updated message. However, the updated data at the stale node must be different (since Gsm(a) = Gsm(b)), making it necessary to distinguish between the two cases. This causes a contradiction.

4

IV. CODES ACHIEVING LOWER BOUNDS
The lower bound derived in Theorem 1 is in the presence of a very helpful genie. This section presents codes and update algorithms that meet this bound in the absence of this genie. These upper bounds are obtained by proving the existence of codes meeting these bounds, and towards this, we employ the product-matrix framework of [22]. Interestingly, the proposed codes are also optimal with respect to the storage-bandwidth tradeoff derived in [21]. The update algorithms presented here require the stale node to connect to any two updated nodes.

A. Encoding

The code is associated to an additional parameter k ∈

[n − 1], and has the property that the entire message can be

recovered from any k of the nodes. Assume that B is divisible

by k(n − 1) − k(k−1) .1 Let P :=

B

.

2

(

k

(n

−1)

−

k

(k−1) 2

)

Under the proposed code, each node is required to store A =

(n − 1)P symbols over Fq. The value of q will be speciﬁed

later.

Construct P symmetric matrices {Mp}p∈[P ], each of size ((n − 1) × (n − 1)), in the following manner. In each matrix

{Mp}p∈[P ], set the bottom-right ((n − 1 − k) × (n − 1 − k))

submatrix to zero. Each of these (symmetric) matrices now

have k(n − 1) − k(k2−1) free elements remaining. Partition

the B message symbols into P sets of k(n − 1) − k(k2−1)

symbols each. For each p ∈ [P ], populate the remaining free

elements of matrix Mp with the message symbols of the pth

set.

Construct vectors {ψ } ∈[n], each of length (n − 1), and scalars {η ,p} ∈[n],p∈[P ] that satisfy: (a) every submatrix of [ψ1 · · · ψn] is of full rank (b) for every (u1, u2, s) ∈ [n]3 such that u1 = u2 = s, and every (p, i, j) ∈ [P ]×[(n−1)]2 and (p , i , j ) ∈ [P ]×[(n−1)]2

such that (p, i, j) = (p , i , j ),

ηu1,pγu1,s(i, j)ηu2,p γu2,s(i , j ) = ηu1,p γu1,s(i , j )ηu2,pγu2,s(i, j) ,

where

γu,s(i, j) :=

ψu,iψs,j + ψu,j ψs,i ψu,iψs,i

if i = j (1)
otherwise .

Each of these requirements is equivalent to showing that a
product of polynomials is non-zero. One can see that each
of these polynomials individually is a non-zero polynomial.
The Schwartz-Zippel lemma ensures that there exist values of {ψ } ∈[n] and {η ,p} ∈[n],p∈[P ] satisfying all the desired conditions when the size q of the underlying ﬁnite ﬁeld Fq is large enough. Finally, for every ∈ [n], node stores the data

ψT Mp

.

p∈[P ]

Condition (a) will help in recovery of the entire message from any k of the nodes, and condition (b) will help in performing the oblivious updates.

1If not, then append an appropriate number of zeros to the message. Since the amount of data B is typically much larger than n and k, this operation is relatively inexpensive.

B. Oblivious Update Algorithm and Performance
Theorem 2: In the code constructed in Section IV-A, any stale node can perform an oblivious update by downloading one symbol each from any two updated nodes when at most one symbol has changed.
Proof: Let {Mp}p∈[P ] be the matrices comprising the stale message, as constructed in Section IV-A. The construction is such that no two matrices in {Mp}p∈[P ] have any element in common. As a result, the update of a single element causes a change in only one of these matrices. Let {Mp}p∈[P ] be the matrices comprising the updated message. Algorithm 1 updates the data of a stale node by connecting to any two updated nodes and downloading only one symbol from each. Recall that the notation γ·,·(·, ·) used Step 2 onwards is deﬁned in (1). Step 6 employs condition (b) of the encoding which guarantees ηu1,pγu1,s(i, j) = 0.

Algorithm 1 Optimal Oblivious Update

Stale node s contacts any two updated nodes u1 and u2 Updated Nodes: Node ui (i ∈ {1, 2}), which stores up-
dated data {ψTui Mp}p∈[P ], returns the single symbol Pp=1 ηui,pψTui Mpψs

Stale Node: Stale node s, which stores stale data

ψ

T s

M

p

, receives the two symbols

p∈[P ]

P
r1 := ηu1,pψTu1 Mpψs ,
p=1

P
r2 := ηu2,pψTu2 Mpψs.
p=1

It performs the following operations. 1) From its stale data, compute:

P
r1 := ηu1,pψTu1 Mpψs ,
p=1

P
r2 := ηu2,pψTu2 Mpψs
p=1

2) Subtract these from the received symbols to get d1 := r1 − r1 and d2 := r2 − r2 If the changed symbol is at location (i, j) of matrix Mp, and its value has been changed by δ, then d1 = ηu1,pγu1,s(i, j)δ and d2 = ηu2,pγu2,s(i, j)δ
3) If d1 = d2 = 0 then the stale node already has the updated data; exit
4) Compute the ratio d1 : d2 = ηu1,pγu1,s(i, j) : ηu2,pγu2,s(i, j)
5) Condition (b) ensures that this ratio is different for
different (p, i, j), so use the ratio to identify changed
location (i0, j0) and p0. 6) Compute δ = (ηu1,p0 γu1,s(i0, j0))−1d1 7) Construct an ((n − 1) × (n − 1)) matrix ∆ with value
δ at locations (i0, j0) and (j0, i0) and zeros elsewhere; in the stale node, update data ψTs Mp0 to ψTs Mp0 as ψTs Mp0 = ψTs Mp0 + ψTs ∆

Theorem 3: In the code constructed in Section IV-A, the message can be recovered from the data stored in any k nodes. Furthermore, the code is optimal with respect to the storage-

5

bandwidth tradeoff of [21]. Proof: The code falls under the ‘product-matrix MBR’
framework of [22, Section IV] from which it derives these properties.
V. LOWER BOUNDS FOR LINEAR MDS CODES
In this section, we consider the class of codes that are ‘Maximum-Distance-Separable (MDS)’ (recall deﬁnition from the last paragraph of Section II-A). We provide lower bounds on the amount of download for arbitrary MDS codes with linear encoding. Although we consider the encoding to be linear, we allow the update operation to be executed via any arbitrary (linear or non-linear) functions.
Theorem 4: Under any MDS code with linear encoding, a stale node must contact at least k updated nodes. Upon contacting k nodes, the stale node must download at least 2 log2 q bits from each them.
Proof: We will ﬁrst show that an oblivious update cannot be performed by contacting just (k −1) nodes. The proof is by contradiction for which we will assume existence of some (k− 1) nodes from which some stale node can be updated. Suppose the entire data stored in these (k − 1) nodes is made available to the stale node. Since the code is MDS, there exists exactly one message whose encoding equals the data currently stored in these (k − 1) updated nodes and the stale node. The stale node will thus be unable to distinguish between the two cases: (a) this message as the stale message and no update, and (b) the actual stale and updated messages. The updated data at the stale node must be different in the two cases, thus necessitating it to distinguish the two cases. This yields a contradiction.
Now assume the stale node connects to some k nodes. We now show that it must download at least 2 log2 q bits from each of these k nodes. It sufﬁces to show that the last of these k updated nodes must pass 2 log2 q bits, since any of these k nodes may be deﬁned as the last node. To this end, consider a genie who provides the entire data stored in the ﬁrst (k − 1) updated nodes to the stale node, and furthermore, provides the entire updated message to the last updated node.
Let m ∈ (Fq)B be the stale message, and m ∈ (Fq)B be the modiﬁed message (with dH (m, m ) ≤ 1). Let Gs denote the (A × B) generator matrix of the stale node, i.e., the stale node stores Gsm under message m. Assume without loss of generality that the A rows of Gs are linearly independent. Upon being contacted by the stale node, the last updated node (to whom the genie has provided all the updated data) must send some function of the data: let f denote this function, i.e., the updated node returns f (m ) to the stale node. We will now show that the range of f must contain at least q2 elements, thus necessitating a download of at least 2 log2 q bits.
The linear independence of the A rows of Gs implies existence of A coordinates 1, . . . , A ∈ [B] of m such that for every ﬁxed value of m\{m 1 , . . . , m A }, the map (m 1 , . . . , m A ) → Gsm is a bijection. Without loss of generality, let i = i ∀i ∈ [A].
Let S denote the set of all qA messages of the form [m1, . . . , mA, 0 . . . , 0]. Construct a second set S from S in the following manner. For each m ∈ S , ﬁnd the unique

vector m ∈ (Fq)B such that Gsm = Gsm and the encoding of m in the ﬁrst (k − 1) updated nodes is zero. Since the code is MDS, for each m , there exists exactly one such m . Set S as the collection of these vectors m .
Partition the set S , of size qA, into sets that map onto identical values in the range of f . Since the range of f has a cardinality strictly smaller than q2, at least one of these sets must have a cardinality strictly greater than qA−2. Let us call this set R .
Now consider the original elements R ⊆ S which were transformed into R . In this set R , of size greater than qA−2, there must exist some two messages m(a) and m(b) which match on the ﬁrst (A − 2) coordinates. It follows that there exists m(c) ∈ (Fq)B such that dH (m(a) , m(c) ) ≤ 1 and dH (m(b) , m(c) ) ≤ 1. Next, let m(a) and m(b) respectively be the (distinct) constituents of R that are derived from m(a) and m(b) respectively.
Finally, consider the following scenario. Suppose the original message was (m(a) − m(a) + m(c) ), and this was updated to m(a) . This constitutes the update of at most one symbol since dH (m(a) − m(a) + m(c) , m(a) ) = dH (m(a) , m(c) ) ≤ 1. We claim that this scenario is indistinguishable from the scenario of the original message being (m(b) − m(b) + m(c) ) and the updated message being m(b) . To this end, ﬁrst observe that the latter situation also constitutes the update of at most one symbol since dH (m(b) − m(b) + m(c) , m(b) ) = dH (m(b) , m(c) ) ≤ 1. Furthermore, since Gsm(a) = Gsm(a) and Gsm(b) = Gsm(b) , it must be that the encoding Gs(m(a) − m(a) + m(c) ) of (m(b) −m(b) +m(c) ) at the stale node is identical to the encoding Gs(m(b) −m(b) +m(c) ) of (m(b) −m(b) +m(c) ) in the stale node. The data stored in the stale node thus provides no information pertaining to distinguishing these two scenarios. As discussed above, the encoding of m(a) and m(b) both result in zeros at the ﬁrst (k−1) helper nodes. Furthermore, m(a) , m(b) ∈ R =⇒ f (m(a) ) = f (m(b) ) which makes the data downloaded from the last updated node identical in the two cases. An accurate update is thus impossible in this situation, thus proving our claim.
VI. MDS CODES ACHIEVING LOWER BOUNDS
In this section, we present upper bounds on the amount of download required for oblivious updates under MDS codes, that meet the lower bounds established in Theorem 4.
A. Encoding
Each node has a storage capacity of A := Bk symbols. Let m be a B-length vector consisting of the B message symbols. Let Γ be an arbitrary (nA × B) matrix with the property that every submatrix of Γ is of full rank. For instance, one can choose Γ as a Cauchy matrix. Construct n matrices {Γ } ∈[n], each of size (A × B), by partitioning Γ into n blocks of A rows each. Finally, for every ∈ [n], node stores the data
Γm.

6

B. Oblivious Update Algorithm and Performance
Theorem 5: In the code constructed in Section VI-A, any stale node can perform an oblivious update by downloading 2 log2 q bits each from any k updated nodes when at most one symbol has changed.
Proof: Let m ∈ (Fq)B be the stale message and let m ∈ (Fq)B be the updated message, with dH (m, m ) ≤ 1. For every ∈ [n], let Γ(1) and Γ(2) be the ﬁrst and second rows of Γ , respectively. Further, for any m ∈ {1, 2} and any j ∈ [B], let (Γ(m))j denote the jth element of Γ(m).
Algorithm 2 updates the data of a stale node by connecting to any k updated nodes and downloading exactly two symbols from each. Steps 5 and 6 of Algorithm 2 employ the fact that every submatrix of Γ is of full rank.

Algorithm 2 Optimal Oblivious Update in an MDS Code

Stale node s contacts any k updated nodes u1, . . . , uk.

Updated Nodes: For i ∈ {1, 2}, deﬁne A-length vectors ξ ,i ∈[k] as

Γu1 −1 ξT1,i · · · ξTk,i := Γ(si)  ... 
Γuk

Updated node u ( ∈ [k]), which stores the updated data Γu m , returns the two symbols:

ξT,1Γu m

and ξT,2Γu m

Stale Node: Stale node s, which stores stale data Γsm, performs the following operations.

1) From the set of 2k received symbols, compute

k =1

ξT,1Γu

m

= Γ(s1)m

and

k =1

ξT,2Γu

m

=

Γ(s2)m

2) Given the stale stored data, containing Γ(s1)m and

Γ(s2)m, take differences to obtain d1 := Γ(s1)(m − m)

and d2 := Γ(s2)(m − m)

If the changed symbol is at location j in the message

vector, and its value has been changed by δ, then d1 = (Γ(s1))j δ and d2 = (Γ(s2))j δ

3) If d1 = d2 = 0 then the stale node already has the

updated data; exit 4) Compute the ratio d1 : d2 = (Γ(s1))j : (Γ(s2))j

5) By construction, this ratio is unique for different

values of j, so use the ratio to identify the location

j0 of the change. 6) Compute δ = ((Γ(s1))j0 )−1d1

7) Construct a B-length vector δ with value δ at loca-

tion j0 and zeros elsewhere; update the stale data by

computing Γsm = Γsm + Γsδ

Theorem 6: The code constructed in Section VI-A is
maximum-distance-separable (MDS). Proof: Each node stores only Bk symbols, and since every
submatrix of Γ is of full rank, the entire message is recoverable
from any k of the nodes.

VII. SUMMARY AND OPEN PROBLEMS
This paper considered the problem of oblivious updates wherein the data stored in a storage node needs to be updated by downloading data from already updated nodes in the storage network, but with none of the nodes knowing the identity or the value of the modiﬁed data symbols. Oblivious updates allow the system to ensure that all nodes have the updated data (even after being ofﬂine/unavailable) without having to keep a log of modiﬁcations. We established the fundamental limits on the communication required for performing such oblivious updates, when a single message symbol is modiﬁed, by deriving genie-aided lower bounds and designing storage codes and update algorithms meeting these bounds. Our goal for the future is to extend the characterization of the fundamental limits in multiple directions, such as considering oblivious updates for multiple symbol modiﬁcations, nonlinear codes, and interactive update protocols. In addition, to complement the theoretical standpoint of this paper, we also plan to investigate the questions that arise in practical implementations of oblivious update protocols, such as the design of explicit codes, and quantiﬁcation of the minimal state that needs to be maintained for realizing the update algorithms.
REFERENCES
[1] R. Bhagwan et al., “Total recall: System support for automated availability management,” in NSDI, 2004.
[2] A. Rowstron and P. Druschel, “Storage management and caching in PAST, a large-scale, persistent peer-to-peer storage utility,” in ACM SIGOPS, 2001.
[3] “Crashplan,” 2014. [Online]. Available: code42.com/crashplan [4] “Space monkey,” 2014. [Online]. Available: spacemonkey.com [5] J. Kubiatowicz et al., “Oceanstore: An architecture for global-scale
persistent storage,” ACM Sigplan Notices, 2000. [6] “Cleversafe,” 2014. [Online]. Available: cleversafe.com [7] S. Ghemawat, H. Gobioff, and S. Leung, “The Google ﬁle system,” in
ACM SOSP, 2003. [8] K. Shvachko, H. Kuang, S. Radia, and R. Chansler, “The Hadoop
distributed ﬁle system,” in Proc. IEEE MSST, 2010. [9] B. Tang, H. Gupta, and S. Das, “Beneﬁt-based data caching in ad hoc
networks,” IEEE Trans. Mob. Computing, 2008. [10] D. Borthakur, “HDFS architecture guide,” 2008. [Online]. Available:
http://hadoop.apache.org/common/docs/current/hdfsdesign.pdf [11] D. Ford et al., “Availability in globally distributed storage systems,” in
USENIX OSDI, Oct. 2010. [12] K. V. Rashmi et al., “A solution to the network challenges of data
recovery in erasure-coded distributed storage systems: A study on the Facebook warehouse cluster,” in Proc. USENIX HotStorage, Jun. 2013. [13] M. Lin, A. Wierman, L. Andrew, and E. Thereska, “Dynamic right-sizing for power-proportional data centers,” IEEE/ACM Trans. Nw., 2013. [14] M. Blaum and R. Roth, “On lowest density MDS codes,” IEEE Trans. Inf. Th., 1999. [15] L. Xu, V. Bohossian, J. Bruck, and D. Wagner, “Low-density MDS codes and factors of complete graphs,” IEEE Trans. Inf. Th., 1999. [16] J. S. Plank, “The RAID-6 liber8tion code,” International Journal of High Performance Computing Applications, vol. 23, no. 3, pp. 242–251, 2009. [17] I. Tamo, Z. Wang, and J. Bruck, “Access vs. bandwidth in codes for storage,” in ISIT, Jul. 2012. [18] W. Vogels, “Eventually consistent,” Comm. of the ACM, 2009. [19] A. Demers et al., “The Bayou architecture: Support for data sharing among mobile users,” in Proc. IEEE MCSA Workshop, 1994. [20] Y. Minsky, A. Trachtenberg, and R. Zippel, “Set reconciliation with nearly optimal communication complexity,” IEEE Trans. Inf. Th., 2003. [21] A. Dimakis et al., “Network coding for distributed storage systems,” IEEE Trans. Inf. Th., Sep. 2010. [22] K. V. Rashmi, N. B. Shah, and P. V. Kumar, “Optimal exact-regenerating codes for the MSR and MBR points via a product-matrix construction,” IEEE Trans. Inf. Th., Aug. 2011.

