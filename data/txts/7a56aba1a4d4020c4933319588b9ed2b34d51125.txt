Secure Computation for Machine Learning With SPDZ

arXiv:1901.00329v1 [cs.CR] 2 Jan 2019

Valerie Chen Yale University v.chen@yale.edu

Valerio Pastro Yale University valerio.pastro@yale.edu

Mariana Raykova Yale University
mariana.raykova@yale.edu

Abstract
Secure Multi-Party Computation (MPC) is an area of cryptography that enables computation on sensitive data from multiple sources while maintaining privacy guarantees. However, theoretical MPC protocols often do not scale efﬁciently to real-world data. This project investigates the efﬁciency of the SPDZ framework [1], which provides an implementation of an MPC protocol with malicious security, in the context of popular machine learning (ML) algorithms. In particular, we chose applications such as linear regression and logistic regression, which have been implemented and evaluated using semi-honest MPC techniques [2, 7]. We demonstrate that the SPDZ framework outperforms these previous implementations while providing stronger security.
1 Introduction
Many machine learning techniques, including regression analysis, aim to build a model that ﬁts a set of predictors to a dependent variable. Such techniques are widely used to model and analyze big data. In many settings, however, the input data for such ML analysis tools is partitioned among different parties, which have strict privacy policies. For example, if the Center for Disease Control is interested in identifying disease outbreak, they might want to incorporate patient data from many individual hospitals. The problem is that openly sharing this data for prediction or model-building purposes is against modern day privacy laws as it would leak private individual data. This is one of many real-world applications that could beneﬁt from MPC, which allows parties to evaluate the output of the analysis without revealing more about the private inputs.
1.1 Multi-Party Computation
Secure MPC addresses the above problem by providing a mechanism through which different parties can run a joint computation over their private inputs with guarantees that the only thing revealed about the inputs is the output of the computation and whatever can be inherently inferred from it. There are two main types of MPC protocols in terms of their security guarantees: semi-honest and malicious protocols [8, 4]. In semi-honest security, it is assumed that the parties will follow the protocol as speciﬁed, but they can try to infer information about the input from the protocol messages. In malicious security, dishonest parties may attempt to deviate from the speciﬁed protocol, and the protocol must guarantee that these parties cannot learn about the inputs. Since malicious protocols have to satisfy stronger guarantees in general, such construction are less efﬁcient than semi-honest protocols.
Two recent works [2, 7] propose efﬁcient implementation of several central machine learning building blocks including conjugate gradient decent (CGD) and stochastic gradient descent (SGD) as well as their applications in linear and logistic regression. The work of Gascon et al. [2] uses the framework for semi-honest computation Obliv-C [9] and proposes several different methods for solving systems
32nd Conference on Neural Information Processing Systems (NIPS 2018), Montréal, Canada.

of linear equations. Their main premise is to use an iterative method such as CGD and demonstrate trade-offs that saves computation and hence efﬁciency for the MPC in return for a small accuracy loss. They further propose a modiﬁcation of CGD that has stable behavior using ﬁxed-point arithmetic because emulating ﬂoating point with the underlying MPC representation introduces substantial efﬁciency overhead.
The work of Mohassel and Zhang [7] utilizes stochastic gradient descent as a method for linear regression and logistic regression with the incorporation of different activation functions. The authors consider arithmetic representation for the computation and propose new secure computation techniques for matrix computation, which generalizes the approach for generating multiplicative triples in a preprocessing step. Similarly to the work of Gascon et al. [2], this paper considers techniques for approximation that save computation. For example, they use a piece-wise approximation of the logistic function. The authors also propose new techniques for more efﬁcient approximate computation of ﬁxed-point encodings.
The techniques in both of the above works are restricted to the setting of two party computation. We selected the SPDZ [1, 5, 6] framework for our experiments since it is one of the main and most comprehensive implementations for multiparty computation protocols, which provide malicious security and support more than two parties.
2 ML Functionalities
For our implementation we consider the same algorithms and functionalities as in the above two papers. Next we provide a brief overview of these classic algorithms (details can be found in [3]).
2.1 Direct vs. Iterative Decomposition for Solving a Linear System
Solving a system of linear equations, which underlies linear regression learning, can be done using techniques for direct and indirect decomposition. LDLT and Cholesky are both variants of direct decomposition methods which decompose a Hermitian, positive-deﬁnite matrix into a lower triangular matrix and its conjugate transpose. The algorithms are cubic in complexity with asymptotic run time of O(d3), where d is the dimension of the input matrix. The difference between LDLT and Cholesky is that Cholesky requires a square root. The representation of square root computation as an arithmetic circuit used in the MPC computation in SPDZ introduces considerable overhead. That is why we used the iterative Newton method as a way of approximating the square root computation. It computes xi, where x2i = S, with repetition of the following update function xn+1 = 12 (xn + S/xn). In terms of an iterative approach to regression, we used the approach proposed by Gascon et al. [2], which uses a normalized version of CGD that preserves stability and convergence rate with ﬁxed-point number representation. Similarly to other MPC implementations using ﬂoating point representation in SPDZ introduces substantial efﬁciency overhead.
2.2 Stochastic Gradient Descent
Stochastic gradient descent is an iterative approximation method that converges to the global minimum for convex problems, like linear and logistic regression. It is also a driving mechanism for non-convex problems like neural networks. An SGD iteration updates a weight vector w using a randomly selected sample from the training input as follows: wj := wj − α(∂Ci(w)/∂wj) with learning rate α. In this update Ci is the cost function, which can be instantiated with different concrete functions to obtain computation for linear regression and logistic regression. A common technique for SGD computation is called mini-batch – instead of selecting one sample per iteration, a small batch of size B samples are selected and the update function is performed averaging the partial derivatives across all samples. We use the mini-batch SGD in our implementation to obtain accuracy beneﬁts. While the work of Mohassel and Zhang [7] has optimizations for matrix computation, which can be used with mini-batch, for SPDZ this does not lead to additional savings.
2.2.1 Linear and Non-Linear Activation Functions
To obtain a solution for linear regression using SGD, we instantiate the update function of a learned weight as wj = wj − α(Xi · w ∗ −yi)Xij, where X is the input matrix and y is the input vector.
2

In this update function, the weights are adjusted element-wise by the error from the predicted and expected value at a rate determined by α.

Logistic regression is a classiﬁcation algorithm for modeling a binary dependent variable. Logistic

regression

ﬁts

the

logistic

function

f (u)

=

1 1+e− u

to

the

input.

The

corresponding

update

function

for mini-batched SGD for logistic regression is w = w − |B1 | αXBT × f (XB × w − YB), where f maps

the predicted value into the binary output space. Mohassel and Zhang [8] proposed the following

piecewise function as approximation for f :

0  f (u) = u + 0.5
1

if u < −0.5 if −0.5 ≤ u ≤ 0.5 if u > 0.5

We compare the results of this MPC-friendly piecewise function to a more standard approximation approach of taking the Taylor Series expansion to varying degrees.

3 Experiments
3.1 Experimental Setup
For our evaluation, we implemented all algorithms both in the SPDZ framework as well as in python as a plaintext veriﬁcation of the algorithm. The main metrics of evaluations were the latency of the MPC computation and the accuracy error, and we aimed to explore the trade-offs between accuracy and efﬁciency. We varied the precision after the decimal point depending on what was used in the works that we compared against (32 and 64 bits for the linear regression, less for SGD).
We evaluated our methods on both real-world datasets (MNIST, Arcene, and 9 other UCI open-source datasets) as well as synthetically generated data. These real-world datasets allow us to compare the accuracy results to existing works and to demonstrate that SPDZ can be used in practical settings. We used synthetic data in order to explore larger ranges of data characteristics such as dimension (d = 10, 20, 50, 100, 200, 500), condition number (cd = [1,10]), and number of examples (n = 1000, 100000).
Most of our experiments were ran using machines on the same local area network where there is no network latency. We performed tests where both parties were deployed on separate Amazon EC2 m4.large instances (see Figure 4). We also ran experiment with up to four parties (see Figure 3).
3.2 Results
In this section we present empirical results for our SPDZ implementations evaluated with real and synthetically generated databases. We compare the ﬁve different algorithms in terms of accuracy and run time for various parameters.
For LDLT, Cholesky and various iterations of CGD, we evaluated on synthetically generated data of varying sizes and condition numbers. The larger the condition number is, the larger the error in approximations of the solution is. The direct decomposition methods grew exponentially in run time as input size increases, which is shown in the left column of Figure 1 – this unlikely to be suitable for large size real data. Alternatively, the iterative CGD runtime increases at a much slower rate. In the middle column of Figure 2, we ﬁnd that about 20 iterations are sufﬁcient to reach maximum accuracy given the number of allocated bits even with varying condition numbers. Particularly for the 64-bit case, shown on the bottom right, the accuracy is identical for CGD after 15 iterations and Cholesky/LDLT.
Figure 2 compares SGD on MNIST and Arcene results. It shows that the number of bits of precision needed to get good accuracy is highly dependent on the dataset. For MNIST, 13 bits was sufﬁcient to match plaintext accuracy, but 28 bits were needed for Arcene. The MNIST data contains only 784 features while there are 10,000 in the Arcene data, 3,000 of which are considered "probes" with no predictive power, which could explain the lower overall accuracy of [7]. While the numbers in the MNIST data ranged from 0 to 9, Mohassel and Zhang [7] only used 0s and 1s labels from the dataset, reducing it to a binary problem. We replicated this approach and present the results below. We did run the computation to predict all 10 digits, but found that SGD only achieved a much lower accuracy of

3

Figure 1: (Left) Run time as a function of input dimension. (Middle) Condition number as a function of accuracy. (Right) Accuracy as a function of the input dimension. (Top) Fixed-point with 60 bits of precision. (Bottom) Fixed-point with 28 bits of precision

Figure 2: Comparing accuracy of privacy preserving linear regression with various ﬁxed point precisions and plaintext training on ﬂoating point for MNIST (left) and Arcene (right).

about 19%. We also compared the root mean squared error (RMSE) of SGD on 9 UCI open-sourced datasets of ranging sizes to results in [2]. Our results in the SPDZ secure setting typically increased RMSE by about 5 − 20% compared to plaintext computation, but still outperformed RMSE results from [2] in both CGD and SGD.
In terms of logistic regression, for SPDZ, we did not ﬁnd that the new activation function was a better alternative to taking a Taylor Series approximation for the exponential function as shown in Table 1. We found that for SPDZ, which is based on arithmetic circuits, the extra time to take a few extra degrees in the approximation was negligible.

Table 1: Comparing the validation accuracy for different activation functions for logistic regression.

MNIST Arcene

Plaintext
99.9% 72.0%

New Activation function
95% 44.0%

Polynomial Approximation degree 2 degree 5 degree 7

97%

85%

91%

44.0% 44.5% 65%

degree 10
99.5% 72%

3.3 Conclusion

SPDZ was able to achieve comparable accuracy for LDLT, Cholesky, and CGD when compared to Obliv-C with runtime faster by an order of magnitude on larger matrix sizes even in a distributed machine setting. SPDZ also achieved lower RMSE than Obliv-C using SGD. SPDZ was able to

4

match accuracy and latency results for SecureML on SGD and Logistic Regression. This result is promising for SPDZ to be extended to more complex algorithms including neural networks with hidden layers.
References
[1] Ivan Damgård, Valerio Pastro, Nigel P. Smart, and Sarah Zakarias. Multiparty computation from somewhat homomorphic encryption. In Advances in Cryptology - CRYPTO 2012 - 32nd Annual Cryptology Conference, Santa Barbara, CA, USA, August 19-23, 2012. Proceedings, pages 643–662, 2012.
[2] Adrià Gascón, Phillipp Schoppmann, Borja Balle, Mariana Raykova, Jack Doerner, Samee Zahur, and David Evans. Privacy-preserving distributed linear regression on high-dimensional data. PoPETs, 2017(4):345–364, 2017.
[3] Trevor Hastie, Robert Tibshirani, and Jerome H. Friedman. The elements of statistical learning: data mining, inference, and prediction, 2nd Edition. Springer series in statistics. Springer, 2009.
[4] Carmit Hazay and Yehuda Lindell. A note on the relation between the deﬁnitions of security for semi-honest and malicious adversaries ?, 2010.
[5] Marcel Keller, Valerio Pastro, and Dragos Rotaru. Overdrive: Making SPDZ great again. In Advances in Cryptology - EUROCRYPT 2018 - 37th Annual International Conference on the Theory and Applications of Cryptographic Techniques, Tel Aviv, Israel, April 29 - May 3, 2018 Proceedings, Part III, pages 158–189, 2018.
[6] Marcel Keller, Peter Scholl, and Nigel P. Smart. An architecture for practical actively secure mpc with dishonest majority. In Proceedings of the 2013 ACM SIGSAC Conference on Computer &#38; Communications Security, CCS ’13, 2013.
[7] Payman Mohassel and Yupeng Zhang. Secureml: A system for scalable privacy-preserving machine learning. In 2017 IEEE Symposium on Security and Privacy, SP 2017, San Jose, CA, USA, May 22-26, 2017, pages 19–38, 2017.
[8] Goldreich Oded. Foundations of Cryptography: Volume 2, Basic Applications. Cambridge University Press, New York, NY, USA, 1st edition, 2009.
[9] Samee Zahur and David Evans. Obliv-c: A language for extensible data-oblivious computation. Cryptology ePrint Archive, Report 2015/1153, 2015. https://eprint.iacr.org/2015/ 1153.
5

Supplementary Material
3.4 Three and four party runtimes In addition to the 2 player case, we also ran experiments with 3 and 4 players on the local network, where the input was vertically partitioned between parties.
Figure 3: Run time results for 3 and 4 players in 32 bits. (Left) 3 Players. (Right) 4 Players.
3.5 EC2 runtimes We deployed 2 AWS EC2 Instances that ran the SPDZ protocol. The EC2 runtime results are comparable to the local network results for smaller matrix sizes but increases at a faster rate for larger matrix sizes. Figure 4: Run time results for 2 players deployed on EC2 instances averaged over 15 runs. (Left) 32 bits. (Right) 64 bits.
3.6 Activation function runtime comparison To determine the difference in efﬁciency in the two activation functions, the new one proposed by [7] and the other method which they claimed to be inefﬁcient, we ran results for SPDZ on two different datasets for a few different variations of the activation functions. The compile and run times correspond to the ofﬂine and online phase for SPDZ respectively.
6

Table 2: Comparison of efﬁciency for the proposed activation function in [7] and Taylor Series approximation in SPDZ.

New Activation Function 2 Polynomial 5 Polynomial 7 Polynomial 10 Polynomial

MNIST

Compile 26.01 27.79 30.32 31.99 34.24

Run 18.8 19.28 19.8 20.65 20.71

Arcene

Compile 220.14 222.85 225.33 228.33 230.81

Run 224.47 239.98 241.59 239.11 240.79

3.7 RMSE results

SGD was also evaluated on 9 different datasets selected from the UCI repository. Further details about the speciﬁc datasets, including the regularization parameter used, are detailed in [2]. The dimensions of the problems ranged from 7 to 384 with the number of examples ranging from over 200 to almost 3 million.
Table 3: SGD Results for 9 open sourced UCI datasets.

Dataset Name
Student Performance Auto MPG Communities and Crime Wine Quality Bike Sharing Blog Feedback CT Slices Year Prediction MSD Gas Sensor Array

SGD Plaintext
0.11 0.56 0.06 0.18 0.23 0.04 0.22 0.06 0.20

SPDZ (28 bit)

Error

Time

0.12 (+8.34%) 0.68 (+21.4%) 0.17 (+183%) 0.19 (+5.55%) 0.24 (+4.34%) 0.04 (+0.0%) 0.22 (+0.0%) 0.06 (+0.0%) 0.36 (+20.0%)

2.174 0.663 10.352 0.809 0.910 9.455 16.458 7.146 1.151

SPDZ (13 bit)

Error

Time

0.12(+8.34%) 0.68(+21.4%) 0.19 (+216%) 0.19 (+5.55%) 0.25 (+8.69%) 0.04 (+0.0%) 0.22 (+0.0%) 0.06 (+0.0%) 0.36 (+20.0%)

2.616 0.704 12.363 0.969 1.097 9.091 16.295 8.513 1.559

7

