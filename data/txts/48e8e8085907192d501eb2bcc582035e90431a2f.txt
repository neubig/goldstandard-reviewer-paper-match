Multi-Task Cross-Lingual Sequence Tagging from Scratch
Zhilin Yang Ruslan Salakhutdinov William Cohen School of Computer Science Carnegie Mellon University
{zhiliny,rsalakhu,wcohen}@cs.cmu.edu

arXiv:1603.06270v2 [cs.CL] 9 Aug 2016

Abstract
We present a deep hierarchical recurrent neural network for sequence tagging. Given a sequence of words, our model employs deep gated recurrent units on both character and word levels to encode morphology and context information, and applies a conditional random ﬁeld layer to predict the tags. Our model is task independent, language independent, and feature engineering free. We further extend our model to multi-task and crosslingual joint training by sharing the architecture and parameters. Our model achieves state-of-the-art results in multiple languages on several benchmark tasks including POS tagging, chunking, and NER. We also demonstrate that multi-task and cross-lingual joint training can improve the performance in various cases.
1 Introduction
Sequence tagging is a fundamental problem in natural language processing which has many wide applications, including part-of-speech (POS) tagging, chunking, and named entity recognition (NER). Given a sequence of words, sequence tagging aims to predict a linguistic tag for each word such as the POS tag. Recently progress has been made on neural sequence-tagging models which make only minimal assumptions about the language, task, and feature set (Collobert et al., 2011)
This paper explores an important potential advantage of these task-independent, languageindependent and feature-engineering free models: their ability to be jointly trained on multiple tasks. In particular, we explore two types of joint training. In multi-task joint training, a model is jointly trained to perform multiple sequence-

tagging tasks in the same language—e.g., POS tagging and NER for English. In cross-lingual joint training, a model is trained to perform the same task in multiple languages—e.g., NER in English and Spanish.
Multi-task joint training can exploit the fact that different sequence tagging tasks in one language share language-speciﬁc regularities. For example, models of English POS tagging and English NER might beneﬁt from using similar underlying representations for words, and in past work, certain sequence-tagging tasks have beneﬁtted by leveraging the underlying similarity of related tasks (Ando and Zhang, 2005). Currently, however, the best results on speciﬁc sequence-tagging tasks are usually achieved by approaches that target only one speciﬁc task, either POS tagging (Søgaard, 2011; Toutanova et al., 2003), chunking (Shen and Sarkar, 2005), or NER (Luo et al., 2015; Passos et al., 2014). Such approaches employ separate model development for each individual task, which makes joint training difﬁcult. In other work, some recent neural approaches have been proposed to address multiple sequence tagging problems in a uniﬁed framework (Huang et al., 2015). Though gains have been shown using multi-task joint training, the prior models that beneﬁt from multi-task joint training did not achieve state-ofthe-art performance (Collobert et al., 2011); thus the question of whether joint training can improve over strong baseline methods is still unresolved.
Cross-lingual joint training typically uses word alignments or parallel corpora to improve the performance on different languages (Kiros et al., 2014; Gouws et al., 2014). However, many successful approaches in sequence tagging rely heavily on feature engineering to handcraft languagedependent features, such as character-level morphological features and word-level N-gram patterns (Huang et al., 2015; Toutanova et al., 2003;

Sun et al., 2008), making it difﬁcult to share latent representations between different languages. Some multilingual taggers that do not rely on feature engineering have also been presented (Lample et al., 2016; dos Santos et al., 2015), but while these methods are language-independent, they do not study the effect of cross-lingual joint training.
In this work, we focus on developing a general model that can be applied in both multi-task and cross-lingual settings by learning from scratch, i.e., without feature engineering or pipelines. Given a sequence of words, our model employs deep gated recurrent units on both character and word levels, and applies a conditional random ﬁeld layer to make the structured prediction. On the character level, the gated recurrent units capture the morphological information; on the word level, the gated recurrent units learn N-gram patterns and word semantics.
Our model can handle both multi-task and cross-lingual joint training in a uniﬁed manner by simply sharing the network architecture and model parameters between tasks and languages. For multi-task joint training, we share both character and word level parameters between tasks to learn language-speciﬁc regularities. For crosslingual joint training, we share the character-level parameters to capture the morphological similarity between languages without use of parallel corpora or word alignments.
We evaluate our model on ﬁve datasets of different tasks and languages, including POS tagging, chunking and NER in English; and NER in Dutch and Spanish. We achieve state-of-the-art results on several standard benchmarks: CoNLL 2000 chunking (95.41%), CoNLL 2002 Dutch NER (85.19%), CoNLL 2003 Spanish NER (85.77%), and CoNLL 2003 English NER (91.20%). We also achieve very competitive results on Penn Treebank POS tagging (97.55%, the second best result in the literature). Finally, we conduct experiments to systematically explore the effectiveness of multi-task and cross-lingual joint training on several tasks.
2 Related Work
Ando and Zhang (2005) proposed a multi-task joint training framework that shares structural parameters among multiple tasks, and improved the performance on various tasks including NER. Collobert et al. (2011) presented a task indepen-

dent convolutional network and employed multitask joint training to improve the performance of chunking. However, there is still a gap between these multi-task approaches and the state-of-theart results on individual tasks. Furthermore, it is unclear whether these approaches can be effective in a cross-lingual setting.
Multilingual resources were extensively used for cross-lingual sequence tagging through various ways, such as cross-lingual feature extraction (Darwish, 2013), text categorization (Virga and Khudanpur, 2003), and Bayesian parallel data prediction (Snyder et al., 2008). Parallel corpora and word alignments are also used for training crosslingual distributed word representations (Kiros et al., 2014; Gouws et al., 2014; Zhou et al., 2015). Unlike these approaches, our method mainly focuses on using morphological similarity for crosslingual joint training.
Several neural architectures based on recurrent networks were proposed for sequence tagging. Huang et al. (2015) used word-level Long ShortTerm Memory (LSTM) units based on handcrafted features; dos Santos et al. (2015) employed convolutional layers on both character and word levels; Chiu and Nichols (2015) applied convolutional layers on the character level and LSTM units on the word level; Gillick et al. (2015) employed a sequence-to-sequence LSTM with a novel tagging scheme. We show that our architecture gives better performance experimentally than these approaches in Section 5.
Most similar to our work is the recent approach independently developed by Lample et al. (2016) (published two weeks before our submission), which employs LSTM on both character and word levels. However, there are several crucial differences. First, we study cross-lingual joint training and show improvement over their approach in various cases. Second, while they mainly focus on NER, we generalize our model to other sequence tagging tasks, and also demonstrate the effectiveness of multi-task joint training. There are also differences in the technical aspect, such as the cost-sensitive loss function and gated recurrent units used in our work.
3 Model
In this section, we present our model for sequence tagging based on deep hierarchical gated recurrent units and conditional random ﬁelds. Our recurrent

Figure 1: The architecture of our hierarchical GRU network with CRF, when Lc = Lw = 1 (only one layer for word-level
and character-level GRUs respectively). We only display the character-level GRU for the word Mike and omit others.

networks are hierarchical since we have multiple layers on both word and character levels in a hierarchy.
3.1 Gated Recurrent Unit
A gated recurrent unit (GRU) network is a type of recurrent neural networks ﬁrst introduced for machine translation (Cho et al., 2014). A recurrent network can be represented as a sequence of units, corresponding to the input sequence (x1, x2, · · · , xT ), which can be either a word sequence in a sentence or a character sequence in a word. The unit at position t takes xt and the previous hidden state ht−1 as input, and outputs the current hidden state ht. The model parameters are shared between different units in the sequence.
A gated recurrent unit at position t has two gates, an update gate zt and a reset gate rt. More speciﬁcally, each gated recurrent unit can be expressed as follows
rt = σ(Wrxxt + Wrhht−1)
zt = σ(Wzxxt + Wzhht−1) h˜t = tanh(Whxxt + Whh(rt ht−1)) ht = zt ht−1 + (1 − zt) h˜t,
where W ’s are model parameters of each unit, h˜t is a candidate hidden state that is used to compute ht, σ is an element-wise sigmoid logistic function deﬁned as σ(x) = 1/(1 + e−x), and denotes element-wise multiplication of two vectors. Intuitively, the update gate zt controls how much the unit updates its hidden state, and the reset gate rt determines how much information from the previous hidden state needs to be reset.

Since a recurrent neural network only models the information ﬂow in one direction, it is usually helpful to use an additional recurrent network that goes in the reverse direction. More speciﬁcally, we use bidirectional gated recurrent units, where given a sequence of length T , we have one GRU going from 1 to T and the other from T to 1. Let →− ←− h t and h t denote the hidden states at position t of the forward and backward GRUs respectively. We concatenate the two→−hidd←−en states to form the ﬁnal hidden state ht = [ h t, h t].

We stack multiple recurrent layers together to

form a deep recurrent network (Sutskever et al.,

2014). Each layer learns a more effective repre-

sentation taking the hidden states of the previous

layer as input. Let hl,t denote the hidden state at

position t in layer l. The forward GRU at posi-

→−

→−

tion t in layer l computes h l,t using h l,t−1 and

hl−1,t as input, and the backward GRU performs

similar operations but in a reverse direction.

3.2 Hierarchical GRU
Our model employs a hierarchical GRU that encodes both word-level and character-level sequential information.
The input of our model is a sequence of words (x1, x2, · · · , xT ) of length T , where xt is a oneof-K embedding of the t-th word. The word at each position t also has a character-level representation, denoted as a sequence of length St, (ct,1, ct,2, · · · , ct,St) where ct,s is the one-of-K embedding of the s-th character in the t-th word.

3.2.1 Character-Level GRU
Given a word, we ﬁrst employ a deep bidirectional GRU to learn useful morphological representation from the character sequence of the word. Suppose the character-level GRU has Lc layers, we then
←− obtain forward and backward hidden states h Lc,s
→− and h Lc,s at each position s in the character sequence. Since recurrent networks usually tend to memorize more short-term patterns, we concatenate the ﬁrst hidden state of the backward GRU and the last hidden state of the forward GRU to encode character-level morphology in both preﬁxes and sufﬁxes. We further concatenate the characterlevel representation with the one-of-K word embedding xt to form the ﬁnal representation hwt for the t-th word. More speciﬁcally, we have
hwt = [→−h Lc,St , ←h−Lc,1, xt],
where hwt is a representation of the t-th word, which encodes both character-level morphology and word-level semantics, as shown in Figure 1.
3.2.2 Word-Level GRU
The character-level GRU outputs a sequence of word representations hw = (hw1 , hw2 , · · · , hwT ). We employ a word-level deep bidirectional GRU with Lw layers on top of these word representations. The word-level GRU takes the sequence hw as input, and computes a sequence of hidden states h = (h1, h2, · · · , hT ).
Different from the character-level GRU, the word-level GRU aims to extract the context information in the word sequence, such as N-gram patterns and neighbor word dependencies. Such information is usually encoded using handcrafted features. However, as we show in our experimental results, the word-level GRU can learn the relevant information without being language-speciﬁc or task-speciﬁc. The hidden states h output by the word-level GRU will be used as input features for the next layers.
3.3 Conditional Random Field
The goal of sequence tagging is to predict a sequence of tags y = (y1, y2, · · · , yT ). To model the dependencies between tags in a sequence, we apply a conditional random ﬁeld (Lafferty et al., 2001) layer on top of the hidden states h output by the word-level GRU (Huang et al., 2015). Let Y(h) denote the space of tag sequences for h. The conditional log probability of a tag sequence y,

given the hidden state sequence h, can be written as

log p(y|h) = f (h, y) − log

exp f (h, y ),

y ∈Y(h)
(1) where f is a function that assigns a score for each pair of h and y.
To deﬁne the function f (h, y), for each position t, we multiply the hidden state hwt with a parameter vector wyt that is indexed by the the tag yt, to obtain the score for assigning yt at position t. Since we also need to consider the correlation be-
tween tags, we impose ﬁrst order dependency by adding a score Ayt−1,yt at position t, where A is a parameter matrix deﬁning the similarity scores
between different tag pairs. Formally, the function f can be written as

T

T

f (h, y) = wyTt hwt + Ayt−1,yt ,

t=1

t=1

where we set y0 to be a START token. It is possible to directly maximize the condi-
tional log likelihood based on Eq. (1). However, this training objective is usually not optimal since each possible y contributes equally to the objective function. Therefore, we add a cost function between y and y based on the max-margin principle that high-cost tags y should be penalized more heavily (Gimpel and Smith, 2010). More speciﬁcally, the objective function to maximize for each training instance y and h is written as

f (h, y) − log

exp(f (h, y ) + cost(y, y )).

y ∈Y(h)
(2)

In our work, the cost function is deﬁned as

the tag-wise Hamming loss between two tag se-

quences multiplied by a constant. The objective

function on the training set is the sum of Eq. (2)

over all the training instances. The full architec-

ture of our model is illustrated in Figure 1.

3.4 Training
We employ mini-batch AdaGrad (Duchi et al., 2011) to train our neural network in an end-toend manner with backpropagation. Both the character embeddings and word embeddings are ﬁnetuned during training. We use dynamic programming to compute the normalizer of the CRF layer in Eq. (2). When making prediction, we again use dynamic programming in the CRF layer to decode the most probable tag sequence.

(a) Multi-Task Joint Training
(b) Cross-Lingual Joint Training
Figure 2: Network architectures for multi-task and cross-
lingual joint training. Red boxes indicate shared architecture and parameters. Blue boxes are task/language speciﬁc components trained separately. Eng, Span, Char, and Emb refer to English, Spanish, Character and Embeddings.
4 Multi-Task and Cross-Lingual Joint Training
In this section we study joint training of multiple tasks and multiple languages. On one hand, different sequence tagging tasks in the same language share language-speciﬁc regularities. For example, POS tagging and NER in English should learn similar underlying representation since they are in the same language. On the other hand, some languages share character-level morphologies, such as English and Spanish. Therefore, it is desirable to leverage multi-task and cross-lingual joint training to boost model performance.
Since our model is generally applicable to different tasks in different languages, it can be naturally extended to multi-task and cross-lingual joint training. The basic idea is to share part of the architecture and parameters between tasks and languages, and to jointly train multiple objective functions with respect to different tasks and languages.
We now discuss the details of our joint training

algorithm in the multi-task setting. Suppose we have D tasks, with the training instances of each task being (X1, X2, · · · , XD). Each task d has a set of model parameters Wd, which is divided into two sets, task speciﬁc parameters and shared parameters, i.e.,
Wd = Wd,spec ∪ Wshared,
where shared parameters Wshared are a set of parameters that are shared among the D tasks, while task speciﬁc parameters Wd,spec are the rest of the parameters that are trained for each task d separately.
During joint training, we are optimizing the average over all objective functions of D tasks. We iterate over each task d, sample a batch of training instances from Xd, and perform a gradient descent step to update model parameters Wd. Similarly, we can derive a cross-lingual joint training algorithm by replacing D tasks with D languages.
The network architectures we employ for joint training are illustrated in Figure 2. For multi-task joint training, we share all the parameters below the CRF layer including word embeddings to learn language-speciﬁc regularities shared by the tasks. For cross-lingual joint training, we share the parameters of the character-level GRU to capture the morphological similarity between languages. Note that since we do not consider using parallel corpus in this work, we mainly focus on joint training between languages with similar morphology. We leave the study of cross-lingual joint training by sharing word semantics based on parallel corpora to future work.
5 Experiments
In this section, we use several benchmark datasets for multiple tasks in multiple languages to evaluate our model as well as the joint training algorithm.
5.1 Datasets and Settings
We use the following benchmark datasets in our experiments: Penn Treebank (PTB) POS tagging, CoNLL 2000 chunking, CoNLL 2003 English NER, CoNLL 2002 Dutch NER and CoNLL 2002 Spanish NER. The statistics of the datasets are described in Table 1.
We construct the POS tagging dataset with the instructions described in Toutanova et al. (2003). Note that as a standard practice, the POS tags are extracted from the parsed trees.

Benchmark Task

Table 1: Dataset Statistics Language # Training Tokens # Dev Tokens # Test Tokens

PTB (2003) CoNLL 2000 CoNLL 2003 CoNLL 2002 CoNLL 2002

POS Tagging Chunking NER NER NER

English English English Dutch Spanish

912,344 211,727 204,567 202,931 207,484

131,768 -
51,578 37,761 51,645

129,654 47,377 46,666 68,994 52,098

Table 2: Comparison with state-of-the-art results on
CoNLL 2003 English NER when trained with training set only. † means using handcrafted features. ‡ means being
task-speciﬁc.

Model

F1 (%)

Chieu et al. (2002)†‡ Florian et al. (2003)†‡ Ando and Zhang (2005)† Lin and Wu (2009)†‡
Collobert et al. (2011) Huang et al. (2015)†
Ours

88.31 88.76 89.31 90.90 89.59 90.10 90.94

For the task of CoNLL 2003 English NER, we follow previous works (Collobert et al., 2011; Huang et al., 2015; Chiu and Nichols, 2015) to append one-hot gazetteer features to the input of the CRF layer for fair comparison.1
We set the hidden state dimensions to be 300 for the word-level GRU. We set the number of GRU layers to Lc = Lw = 2 (two layers for the wordlevel and character-level GRUs respectively). The learning rate is ﬁxed at 0.01. We use the development set to tune the other hyperparameters of our model. Since the CoNLL 2000 chunking dataset does not have a development set, we hold out one ﬁfth of the training set for parameter tuning.
We truncate all words whose character sequence length is longer than a threshold (17 for English, 35 for Dutch, and 20 for Spanish). We replace all numeric characters with “0”. We also use the BIOES (Begin, Inside, Outside, End, Single) tagging scheme (Ratinov and Roth, 2009).
5.2 Pre-Trained Word Embeddings
Since the training corpus for a sequence tagging task is relatively small, it is difﬁcult to train ran-
1Although gazetteers are arguably a type of feature engineering, we note that unlike most feature engineering techniques they are straightforward to include in a model. We use only the gazetteer ﬁle provided by the CoNLL 2003 shared task, and do not use gazetteers for any other tasks or languages described here.

Table 3: Comparison with state-of-the-art results on
CoNLL 2003 English NER when trained with both training and dev sets. † means using handcrafted features. ‡ means being task-speciﬁc. ∗ means not using gazetteer lists.

Model

F1 (%)

Ratinov and Roth (2009)†‡ Passos et al. (2014)†‡
Chiu and Nichols (2015) Luo et al. (2015)†‡ Lample et al. (2016)∗
Ours Ours − no gazetteer∗
Ours − no char GRU
Ours − no word embeddings

90.80 90.90 90.77 91.2 90.94 91.20 90.96 88.00 77.20

domly initialized word embeddings to accurately capture the word semantics. Therefore, we leverage word embeddings pre-trained on large-scale corpora. All the pre-trained embeddings we use are publicly available.
On the English datasets, following previous works that are based on neural networks (Collobert et al., 2011; Huang et al., 2015; Chiu and Nichols, 2015), we use the 50-dimensional SENNA embeddings2 trained on Wikipedia. For Spanish and Dutch, we use the 64-dimensional Polyglot embeddings3 (Al-Rfou et al., 2013), which are trained on Wikipedia articles of the corresponding languages. We use pre-trained word embeddings as initialization, and ﬁne-tune the embeddings during training.
5.3 Performance
In this section, we report the results of our model on the benchmark datasets and compare to the previously-reported state-of-the-art results.
2http://ronan.collobert.com/senna/ 3https://sites.google.com/site/rmyeid/ projects/polyglot 4We note that this number is often mistakenly cited as 95.23, which is actually the score on base NP chunking rather than CoNLL 2000.

Table 4: Comparison with state-of-the-art results on
CoNLL 2002 Dutch NER. † means using handcrafted features. ‡ means being task-speciﬁc.

Model

F1 (%)

Carreras et al. (2002)†‡ Nothman et al. (2013)†‡ Gillick et al. (2015) Lample et al. (2016) Ours Ours + joint training Ours − no char GRU Ours − no word embeddings

77.05 78.6 82.84 81.74 85.00 85.19 77.76 67.36

Table 5: Comparison with state-of-the-art results on
CoNLL 2002 Spanish NER. † means using handcrafted features. ‡ means being task-speciﬁc.

Model

F1 (%)

Carreras et al. (2002)†‡ dos Santos et al. (2015) Gillick et al. (2015) Lample et al. (2016) Ours Ours + joint training Ours − no char GRU Ours − no word embeddings

81.39 82.21 82.95 85.75 84.69 85.77 83.03 73.34

For English NER, there are two evaluation methods used in the literature. Some models are trained with both the training and development set, while others are trained with the training set only. We report our results in both cases. In the ﬁrst case, we tune the hyperparameters by training on the training set and testing on the development set.
Besides our standalone model, we experimented with multi-task and cross-lingual joint training as well, using the architecture described in Section 4. For multi-task joint training, we jointly train all tasks in English, including POS tagging, chunking and NER. For cross-lingual joint training, we jointly train NER in English, Dutch and Spanish. We also remove the word embeddings and the character-level GRU respectively to analyze the contribution of different components.
The results are shown in Tables 2, 3, 4, 5, 6 and 7. We achieve state-of-the-art results on English NER, Dutch NER, Spanish NER and English chunking. Our model outperforms the best previously-reported results on Dutch NER and English chunking by 2.35 points and 0.95 points respectively. We also achieve the second best re-

Figure 3: 2-dimensional t-SNE visualization of the
character-level GRU output for country names in English and Spanish. Black words are English and red ones are Spanish. Note that all corresponding pairs are nearest neighbors in the original embedding space.

Table 6: Comparison with state-of-the-art results on
CoNLL 2000 English chunking. † means using handcrafted features. ‡ means being task-speciﬁc.

Model

F1 (%)

Kudo and Matsumoto (2001)†‡ Shen and Sarkar (2005)†‡ Sun et al. (2008)†‡
Collobert et al. (2011) Huang et al. (2015)†
Ours Ours + joint training Ours − no char GRU Ours − no word embeddings

93.91 94.014 94.34 94.32 94.46 94.66 95.41 94.44 88.13

sult on English POS tagging, which is 0.23 points worse than the current state-of-the-art.
Joint training improves the performance on Spanish NER, Dutch NER and English chunking by 1.08 points, 0.19 points and 0.75 points respectively, and has no signiﬁcant improvement on English POS tagging and English NER.
On POS tagging, the best result is 97.78% reported by Ling et al. (2015). However, the embeddings they used are not publicly available. To demonstrate the effectiveness of our model, we slightly revise our model to reimplement their model with the same parameter settings described in their original paper. We use SENNA embeddings to initialize the reimplemented model for fair comparison, and obtain an accuracy of 97.41% that is 0.14 points worse than our result, which indicates that our model is more effective and the main difference lies in using different pre-trained embeddings.
By comparing the results without the character-

Table 7: Comparison with state-of-the-art results on PTB
POS tagging. † means using handcrafted features. ‡ means being task-speciﬁc. ∗ indicates our reimplementation (using
SENNA embeddings).

Model

Accuracy (%)

Toutanova et al. (2003)†‡ Shen et al. (2007)†‡ Søgaard et al. (2011)†‡
Collobert et al. (2011) Huang et al. (2015)†
Ling et al. (2015) Ling et al. (2015) (SENNA)∗
Ours (SENNA) Ours − no char GRU Ours − no word embeddings

97.24 97.33 97.50 97.29 97.55 97.78 97.41 97.55 96.69 95.43

level GRU and without word embeddings, we can observe that both components contribute to the ﬁnal results. It is also clear that word embeddings have signiﬁcantly more contribution than the character-level GRU, which indicates that our model largely depends on memorizing the word semantics. Character-level morphology, on the other hand, has relatively smaller but still critical contribution.
5.4 Joint Training
In this section, we analyze the effectiveness of multi-task and cross-lingual joint training in more detail. In order to explore possible gains in performance of joint training for resource-poor languages or tasks, we consider joint training of various task pairs and language pairs where differentsized subsets of the actual labeled corpora are made available. Given a pair of tasks of languages, we jointly train one task with full labels and the other with partial labels. In particular, we introduce a labeling rate r, and sample a fraction r of the sentences in the training set, discarding the rest. Evaluation is based on the partially-labeled task. The results are reported in Table 8.
We observe that the performance of a speciﬁc task with relatively lower labeling rates (0.1 and 0.3) can usually beneﬁt from other tasks with full labels through multi-task or cross-lingual joint training. The performance gain can be up to 1.99 points when the labeling rate of the target task is 0.1. The improvement with 0.1 labeling rate is on average 0.37 points larger than with 0.3 labeling rate, which indicates that the improvement of joint training is more signiﬁcant when the target

Table 8: Multi-task and cross-lingual joint training. We
compare the results obtained by a standalone model and joint training with another task or language. The number following a task is the labeling rate (0.1 or 0.3). Eng and NER both refer to English NER, Span means Spanish. In the column titles, Task is the target task, J. Task is the jointly-trained task with full labels, Sep. is the F1/Accuracy of the target task trained separately, Joint is the F1/Accuracy of the target task with joint training, and Delta is the improvement.

Task

J. Task Sep. Joint Delta

Span 0.1 Span 0.3 Eng 0.1 Eng 0.3 POS 0.1 POS 0.3 NER 0.1 NER 0.3 Chunk 0.1 Chunk 0.3

Eng Eng Span Span NER NER POS POS NER NER

74.53 80.81 86.21 88.54 96.59 97.03 86.21 88.54 90.65 92.51

76.52 80.20 86.51 88.79 96.79 97.14 87.02 89.16 91.16 92.87

+1.99 +0.61 +0.30 +0.25 +0.20 +0.11 +0.81 +0.62 +0.51 +0.36

task has less labeled data.
We also use t-SNE (Van der Maaten and Hinton, 2008) to obtain a 2-dimensional visualization of the character-level GRU output for the country names in English and Spanish, shown in Figure 3. We can clearly see that our model captures the morphological similarity between two languages through joint training, since all corresponding pairs are nearest neighbors in the original embedding space.

6 Conclusion
We presented a new model for sequence tagging based on gated recurrent units and conditional random ﬁelds. We explored multi-task and crosslingual joint training through sharing part of the network architecture and model parameters. We achieved state-of-the-art results on various tasks including POS tagging, chunking, and NER, in multiple languages. We also demonstrated that joint training can improve model performance in various cases.
In this work, we mainly focus on leveraging morphological similarities for cross-lingual joint training. In the future, an important problem will be joint training based on cross-lingual word semantics with the help of parallel data. Furthermore, it will be interesting to apply our joint training approach to low-resource tasks and languages.

Acknowledgements
This work was funded by the NSF under grant IIS1250956.
References
[Al-Rfou et al.2013] Rami Al-Rfou, Bryan Perozzi, and Steven Skiena. 2013. Polyglot: Distributed word representations for multilingual nlp. In ACL.
[Ando and Zhang2005] Rie Kubota Ando and Tong Zhang. 2005. A framework for learning predictive structures from multiple tasks and unlabeled data. JMLR, 6:1817–1853.
[Carreras et al.2002] Xavier Carreras, Lluis Marquez, and Llu´ıs Padro´. 2002. Named entity extraction using adaboost. In CoNLL, pages 1–4.
[Chieu and Ng2002] Hai Leong Chieu and Hwee Tou Ng. 2002. Named entity recognition: a maximum entropy approach using global information. In COLING, pages 1–7.
[Chiu and Nichols2015] Jason PC Chiu and Eric Nichols. 2015. Named entity recognition with bidirectional lstm-cnns. arXiv preprint arXiv:1511.08308.
[Cho et al.2014] Kyunghyun Cho, Bart van Merrie¨nboer, Dzmitry Bahdanau, and Yoshua Bengio. 2014. On the properties of neural machine translation: Encoder-decoder approaches. In ACL.
[Collobert et al.2011] Ronan Collobert, Jason Weston, Le´on Bottou, Michael Karlen, Koray Kavukcuoglu, and Pavel Kuksa. 2011. Natural language processing (almost) from scratch. JMLR, 12:2493–2537.
[Darwish2013] Kareem Darwish. 2013. Named entity recognition using cross-lingual resources: Arabic as an example. In ACL, pages 1558–1567.
[dos Santos et al.2015] Cıcero dos Santos, Victor Guimaraes, RJ Nitero´i, and Rio de Janeiro. 2015. Boosting named entity recognition with neural character embeddings. In Proceedings of NEWS 2015 The Fifth Named Entities Workshop, page 25.
[Duchi et al.2011] John Duchi, Elad Hazan, and Yoram Singer. 2011. Adaptive subgradient methods for online learning and stochastic optimization. JMLR, 12:2121–2159.
[Florian et al.2003] Radu Florian, Abe Ittycheriah, Hongyan Jing, and Tong Zhang. 2003. Named entity recognition through classiﬁer combination. In HLT-NAACL, pages 168–171.
[Gillick et al.2015] Dan Gillick, Cliff Brunk, Oriol Vinyals, and Amarnag Subramanya. 2015. Multilingual language processing from bytes. arXiv preprint arXiv:1512.00103.

[Gimpel and Smith2010] Kevin Gimpel and Noah A Smith. 2010. Softmax-margin crfs: Training loglinear models with cost functions. In NAACL, pages 733–736.
[Gouws et al.2014] Stephan Gouws, Yoshua Bengio, and Greg Corrado. 2014. Bilbowa: Fast bilingual distributed representations without word alignments. In ICML.
[Huang et al.2015] Zhiheng Huang, Wei Xu, and Kai Yu. 2015. Bidirectional lstm-crf models for sequence tagging. arXiv preprint arXiv:1508.01991.
[Kiros et al.2014] Ryan Kiros, Richard Zemel, and Ruslan R Salakhutdinov. 2014. A multiplicative model for learning distributed text-based attribute representations. In NIPS, pages 2348–2356.
[Kudo and Matsumoto2001] Taku Kudo and Yuji Matsumoto. 2001. Chunking with support vector machines. In NAACL, pages 1–8.
[Lafferty et al.2001] John Lafferty, Andrew McCallum, and Fernando CN Pereira. 2001. Conditional random ﬁelds: Probabilistic models for segmenting and labeling sequence data. In ICML.
[Lample et al.2016] Guillaume Lample, Miguel Ballesteros, Sandeep Subramanian, Kazuya Kawakami, and Chris Dyer. 2016. Neural architectures for named entity recognition. arXiv preprint arXiv:1603.01360.
[Lin and Wu2009] Dekang Lin and Xiaoyun Wu. 2009. Phrase clustering for discriminative learning. In ACL, pages 1030–1038.
[Ling et al.2015] Wang Ling, Tiago Lu´ıs, Lu´ıs Marujo, Ramo´n Fernandez Astudillo, Silvio Amir, Chris Dyer, Alan W Black, and Isabel Trancoso. 2015. Finding function in form: Compositional character models for open vocabulary word representation. In EMNLP.
[Luo et al.2015] Gang Luo, Xiaojiang Huang, ChinYew Lin, and Zaiqing Nie. 2015. Joint named entity recognition and disambiguation. In ACL.
[Nothman et al.2013] Joel Nothman, Nicky Ringland, Will Radford, Tara Murphy, and James R Curran. 2013. Learning multilingual named entity recognition from wikipedia. Artiﬁcial Intelligence, 194:151–175.
[Passos et al.2014] Alexandre Passos, Vineet Kumar, and Andrew McCallum. 2014. Lexicon infused phrase embeddings for named entity resolution. In ACL.
[Ratinov and Roth2009] Lev Ratinov and Dan Roth. 2009. Design challenges and misconceptions in named entity recognition. In CoNLL, pages 147– 155.

[Shen and Sarkar2005] Hong Shen and Anoop Sarkar. 2005. Voting between multiple data representations for text chunking. Springer.
[Shen et al.2007] Libin Shen, Giorgio Satta, and Aravind Joshi. 2007. Guided learning for bidirectional sequence classiﬁcation. In ACL, pages 760–767.
[Snyder et al.2008] Benjamin Snyder, Tahira Naseem, Jacob Eisenstein, and Regina Barzilay. 2008. Unsupervised multilingual learning for pos tagging. In EMNLP, pages 1041–1050.
[Søgaard2011] Anders Søgaard. 2011. Semisupervised condensed nearest neighbor for part-of-speech tagging. In ACL, pages 48–52.
[Sun et al.2008] Xu Sun, Louis-Philippe Morency, Daisuke Okanohara, and Jun’ichi Tsujii. 2008. Modeling latent-dynamic in shallow parsing: a latent conditional model with improved inference. In COLING, pages 841–848.
[Sutskever et al.2014] Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014. Sequence to sequence learning with neural networks. In NIPS, pages 3104– 3112.
[Toutanova et al.2003] Kristina Toutanova, Dan Klein, Christopher D Manning, and Yoram Singer. 2003. Feature-rich part-of-speech tagging with a cyclic dependency network. In NAACL, pages 173–180.
[Van der Maaten and Hinton2008] Laurens Van der Maaten and Geoffrey Hinton. 2008. Visualizing data using t-sne. JMLR, 9(2579-2605):85.
[Virga and Khudanpur2003] Paola Virga and Sanjeev Khudanpur. 2003. Transliteration of proper names in cross-lingual information retrieval. In Proceedings of the ACL 2003 workshop on Multilingual and mixed-language named entity recognition-Volume 15, pages 57–64.
[Zhou et al.2015] Huiwei Zhou, Long Chen, Fulin Shi, and Degen Huang. 2015. Learning bilingual sentiment word embeddings for cross-language sentiment classiﬁcation. In ACL.

