Published as a conference paper at ICLR 2018

arXiv:1711.02173v2 [cs.CL] 24 Feb 2018

SYNTHETIC AND NATURAL NOISE BOTH BREAK NEURAL MACHINE TRANSLATION

Yonatan Belinkov∗ Computer Science and Artiﬁcial Intelligence Laboratory, Massachusetts Institute of Technology
belinkov@mit.edu

Yonatan Bisk∗ Paul G. Allen School of Computer Science & Engineering, University of Washington
ybisk@cs.washington.edu

ABSTRACT
Character-based neural machine translation (NMT) models alleviate out-ofvocabulary issues, learn morphology, and move us closer to completely end-toend translation systems. Unfortunately, they are also very brittle and easily falter when presented with noisy data. In this paper, we confront NMT models with synthetic and natural sources of noise. We ﬁnd that state-of-the-art models fail to translate even moderately noisy texts that humans have no trouble comprehending. We explore two approaches to increase model robustness: structure-invariant word representations and robust training on noisy texts. We ﬁnd that a model based on a character convolutional neural network is able to simultaneously learn representations robust to multiple kinds of noise.
1 INTRODUCTION
Humans have surprisingly robust language processing systems that can easily overcome typos, misspellings, and the complete omission of letters when reading (Rawlinson, 1976). A particularly extreme and comical exploitation of our robustness came years ago in the form of a popular meme:
“Aoccdrnig to a rscheearch at Cmabrigde Uinervtisy, it deosn’t mttaer in waht oredr the ltteers in a wrod are, the olny iprmoetnt tihng is taht the frist and lsat ltteer be at the rghit pclae.”
A person’s ability to read this text comes as no surprise to the psychology literature. Saberi & Perrott (1999) found that this robustness extends to audio as well. They experimented with playing parts of audio transcripts backwards and found that it did not affect comprehension. Rayner et al. (2006) found that in noisier settings reading comprehension only slowed by 11%. McCusker et al. (1981) found that the common case of swapping letters could often go unnoticed by the reader. The exact mechanisms and limitations of our understanding system are unknown. There is some evidence that we rely on word shape (Mayall et al., 1997), that we can switch between whole word recognition and piecing together words from letters (Reicher, 1969; Pelli et al., 2003), and there appears to be no evidence that the ﬁrst and last letter positions are required to stay constant for comprehension.1
In stark contrast, neural machine translation (NMT) systems, despite their pervasive use, are immensely brittle. For instance, Google Translate produces the following unintelligible translation for a German version of the above meme:2
“After being stubbornly deﬁant, it is clear to kenie Rlloe in which Reiehnfogle is advancing the boulders in a Wrot that is integral to Sahce, as the utterance and the lukewarm boorstbaen stmimt.”
While typos and noise are not new to NLP, our systems are rarely trained to explicitly address them, as we instead hope that the relevant noise will occur in the training data.
Despite these weaknesses, the move to character-based NMT is important. It helps us tackle the long tailed distribution of out-of-vocabulary words in natural language, as well as reduce computation
∗Equal contribution. Ordering determined by bartender’s coin: https://youtu.be/BFSc2HnpYtA 1One caveat we feel is important to note is that most of the literature in psychology has focused on English. 2Retrieved on February 2, 2018.
1

Published as a conference paper at ICLR 2018

0

Swap Real Swap Real

Nematus Swap

Natural

34.22

0 34.22

27.16 5.2 29.86

70 21.7780
d 15.73 11.45

10.4 90 15.3
20.6

25.51900 21.56
17.91

8.49 25.9 14.51

5.28 30.3 12.22

3.19 35.8 9.49

1.87
wap0.84 wap0.29

40.9 7.05
45N.7 atu5r.3a6l 51N.1 atu3r.3a9l

0 34.22 3.7 31.27 7.6 28.52 11.4 25.42 15.2 22.60 18.8 20.44 22.6 17.62 26.2 16.52 30.1 13.92 34.0 12.02 37.8 10.68

Nematus

Random

Swap

Natural

Nematus

Random Swap Natural

load of dealing with 0larg34e.22wor0d 3e4m.22 bedd0ing34.2m2 atrices. 4N0 MT models based on characters and other

7.7

27.16 5.2 29.86

3.7 31.27

sub-word units are a1b5.3le to21.7e7xt1r0.a4 ct2s5.5t9em a7n.6d 2m8.5o2 rphological information to generalize to unseen words

and conjugations. 2T3.2hey15.p73er1f5o.3 rm21.5v6 ery11.w4 e2l5l.42in practic3e0 on a range of languages (Sennrich et al.,

BLEU

2016a; Wu et al., 2300.18 6).11.4I5n many 20.6 17.91case15s.2, t2h2.6e0se models actually discover an impressive amount of

38.0

8.49 25.9 14.51

18.8 20.44

morphological infor46m.3 atio5.n28 about a 30.3 12.22 lan2g2.6uag17e.62 (Belinkov20 et al., 2017a). Unfortunately, training (and

testing) on clean da5t3a.6 ma3k.1e9 s 3m5.8od9e.4l9s br2i6t.2tle16a.5n2 d, arguably, unﬁt for broad deployment.

61.5

1.87 40.9 7.05

30.1 13.92

Figure 1 shows how69t.h1 e p0e.8r4fo4r5.m7 an5.c36e of34t.w0 o12s.0t2ate-of-the1-0art NMT systems degrades when translating German to English a76s.7a fu0n.29cti5o1.1n o3f.3t9he p37e.8rce10n.68t of German words modiﬁed. Here we show three types

of noise: 1) Random permutation of the word, 2) Swapp0ing a pair of adjacent letters, and 3) Natural

0

20

40

60

80

human errors.

We

discuss these char2char

types

of

noise

and

others

in

depth

i%n

tsoekcetnisonch4an.2g.edThe

important

thing to note is thRaatndeomven smSawlalp amountNsatuoralf noise lead to substantial drops in performance.

Nematus
40
30
20
10

0 29.97
R7a.7ndo2m4.33

15.3 19.76

23.2 14.96

30.8 10.99

38.0

8.36

46.3

5.22

53.6

3.40

61.5

1.94

69.1

1.03

76.7

0.28

0 29.97
5S.2wap26.85

10.4

23.8

15.3 21.04

20.6 18.73

25.9 15.91

30.3 13.57

35.8 11.65

40.9

9.39

45.7

7.47

51.1

5.68

0 29.97
N3a.7tura28l .15
7.6 25.59 11.4 24.04 15.2 21.38 18.8 20.23 22.6 18.20 26.2 16.79 30.1 15.33 34.0 14.00 37.8 12.68

BBLLEEUU

NCehmaart2uCshar
740

Random

Swap

Natural

523.50

3250

171.50

BLEU

char2char Swap

Natural

0 0

0

20

40

60

80

0

20

40

60

80

% tokens changed

% twookrednsscchhaannggeedd

29.97 24.33 19.76 14.96 10.99
8.36 5.22 60 3.40
d 1.94
1.03 0.28

0 29.97

5.2 26.85

10.4

23.8

15.3 21.04

20.6 18.73

25.9 15.91

30.3 13.57 80
35.8 11.65

40.9

9.39

45.7

7.47

51.1

5.68

0 29.97 FiguCreha1r:2CDhaergradaRtainodnomof NeSmwaatpus (NSaetnunrarlich et al.,Ch2a0r127C)haarnd char2char (Lee et al., 2017)

3.7 28.15 perf4o0 rmance as noise Nienmcatruseases.

70.0

7.6 25.59

11.4 24.04

Random

Swap

Natural

Linear

y = (-68.2/100)

15.2 21.38 To a3d0 dress these trends and investigate the effects of noise 5x2+.568.2 on NMT, we explore two simple strategies

18.8 22.6

20.23 18.20

for increasing mode0l rob68.u2 stn0ess6:8.2using0 st6r8u.2 cture-in0varia6n8.2t representations and robust training on

7.7

61.0 5.2 64.3

3.7 65.6

10

61.38

BLEU

BLEU

26.2 16.79 nois2y0 data, a form of15.3 adv55.e8 rs1a0.4rial59t.9raini7n.6g (6S2.7zegedy20e3t5.0al5.4,.562014; Goodfellow et al., 2015). We ﬁnd

3304..10 1154..3030 that a character CN23N.2 rep49r.6es1e5.n3 tat5i5o.7 n tr1a1.4ine5d9.6on an e30nsem47b.74le of noise types is robust to all kinds of

37.8 12.68 noise. We shed som30.8e lig4h4.3t on20.6 the52.0mod15e.2l ab56i.7lity to l4e0 arn 4r0.o92bust representations to multiple types of

10

38.0

38.5 25.9 48.8

18.8 53.6

50 17.5 34.1

noise, and point to 4r6.e3 mai33n.0in3g0.3dif4ﬁ5.6culti2e2.6s in51.h3 andlin6g0 nat2u7.r28al noise. Our goal is two fold: 1) initiate

a conversation on r5o3.6bust27t.4rai3n5.8ing41a.6nd m26.2ode49l.3ing tech70niqu2e0.s46 in NMT, and 2) promote the creation of

0

61.5

22.8 40.9 38.0

30.1 46.1

80 0.0 13.64

better 0and more2l0in6g9.u1 isti1c7.a470ll4y5.7acc34u.3ra60te34a.0rtiﬁ43c.5ia80l nois90e to0b6.e82 applied to new languages and tasks.

%76.7toke1n3.s8 c5h1a.1nge3d0.5 37.8 40.8

100

0

% words changed

2 ADVERSARIAL EXAMPLES

ematus Swap

68.2

0

61.0 5.2

55.8 10.4

49.6 15.3

44.3 20.6

38.5 25.9

33.0 30.3

27.4 35.8

22.8 40.9

17.7 45.7

13.8 51.1

ar2char Swap

66.0

0

60.6

5.2

55.3

10.4

49.5

15.3

43.6

20.6

38.3

25.9

33.3

30.3

27.9

35.8

23.2

40.9

18.5

45.7

14.1

51.1

Natural

68.2

0

64.3

3.7

59.9

7.6

55.7

11.4

52.0

15.2

48.8

18.8

45.6

22.6

41.6

26.2

38.0

30.1

34.3

34.0

30.5

37.8

Natural

66.0

0

63.3

3.7

60.2

7.6

57.3

11.4

54.2

15.2

51.5

18.8

48.3

22.6

45.3

26.2

42.2

30.1

39.4

34.0

35.8

37.8

Linear
68.2 65.6 62.7 59.6 56.7 53.6 51.3 49.3 46.1 43.5 40.8

The growing literaturcehaon r2char adversarial examples has demonstrated how dangerous it can be to use

britytl=e

machine

leRaanrdonming

sysSwteapms

so

peNartvuraal sively

in the real Linear

y = (-66/100

world

(Biggio

et

al.,

2012;

Szegedy

et

al.,

(-68.2/100)
201x4+6;8.2Goodfellow

et

al.,

2015;

Mei

&

Zhu,

2015).

S)xm+ 6a6ll

changes

to

the

input

can

lead

to

dramatic

0

66.0

0

66.0

0

66.0

0

66

fai0lures68.o2 f deep lea7r.7ning60.6mod5e.2 ls (6S3.3zege3.d7 y e6t4.2al., 21001459;.4Goodfellow et al., 2015). In the machine

10

61.38

vi2s0 ion 5ﬁ4.5e6 ld, chang1e5s.3 to 5t5h.3 e in10p.4 ut i6m0.2 age7.6that62a.4re in20dist5i2n.8guishable by humans can lead to misclas-

si3ﬁ0 cati4o7.7n4. This lea2d3.2s to49p.5 ote1n5.3tial 5f7o.3 r m11a.4licio60.u3 s at3t0acks46.2using adversarial examples. An important

30.8

43.6

20.6

54.2

15.2

58.0

40

39.6

di4s0 tinc4t0i.9o2 n is often 3d8.r0awn38.3betw25.e9 en 5w1.5hite18-.b8 ox5a6.7ttack5s0 , wh3e3 re adversarial examples are generated with

50

34.1

ac60cess27t.o28 the mode4l6.3para33m.3 ete3r0s.3, an48d.3 bla2c2.6k-bo54x.7 atta6c0 ks,26w.4 here examples are generated without such

53.6

27.9

35.8

45.3

26.2

52.5

70

19.8

ac70cess20(.P46apernot et61a.5l., 2230.216a4;0.9201472.2; Na30r.1ody5t0s.7ka &80Kas13i.2viswanathan, 2017; Liu et al., 2017).

80

13.64

69.1

18.5

45.7

39.4

34.0

48.6

90

6.6

W90hile m6.82ore comm7o6.n7 in14t.1he v51i.s1 ion35d.8 om3a7.i8n, r4e6.3cent10w0 ork 0has started exploring adversarial examples

100

0

for NLP. A few white-box attacks have employed the fast gradient sign method (Goodfellow et al.,

2015) or other techniques to ﬁnd important text edit operations (Papernot et al., 2016b; Samanta &

Mehta, 2017; Liang et al., 2017; Ebrahimi et al., 2017). Others have considered black-box adversar-

Lineairalye=xamples for text classiﬁcation (Gao et al., 2018) or NLP evaluation (Jia & Liang, 2017). Heigold (-66/100 et a)xl+.66(2017) evaluated character-based models on several types of noise in morphological tagging

66.0 a0nd M66T, and observed similar trends to our ﬁndings. Finally, Sakaguchi et al. (2017) designed a

64.2

10

59.4

62.4 c20hara52c.8ter-level recurrent neural network that can better handle the particular kind of noise present

60.3 i3n0 the46.2meme mentioned above by modeling spelling correction. Here we devise simple methods

58.0 f4o0 r g3e9.n6 erating adversarial examples for NMT. We do not assume any access to the NMT models’

56.7

50

33

54.7 g60radi2e6.n4 ts, instead relying on synthetic and naturally occurring language errors to generate noise.

52.5

70

19.8

50.7

80

13.2

48.6

90

6.6

46.3

100

0

2

BLEU

BLEU

Nematus
70
52.5
35
17.5
0 0
Char2Char
70.0
52.5
35.0
17.5
0.0 0

% words % words

Published as a conference paper at ICLR 2018
The other side of the coin is to improve models’ robustness to adversarial examples (Globerson & Roweis, 2006; Cretu et al., 2008; Rubinstein et al., 2009; Chan et al., 2017). Adversarial training – including adversarial examples in the training data – can improve a model’s ability to cope with such examples at test time (Szegedy et al., 2014; Goodfellow et al., 2015). This kind of defense is sensitive to the type of adversarial examples seen in training, but can be made more robust by ensemble adversarial training – training on examples transfered from multiple pre-trained models (Trame`r et al., 2017). We explore ensemble training by combining multiple types of noise at training time, and observe similar increased robustness in the machine translation scenario.
Training on and for adversarial noise is an important extension of earlier work on creating robustness in neural networks by incorporating noise to a network’s representations, data, or gradients. Training with noise can provide a form of regularization (Bishop, 1995) and ensure the model is exposed to samples outside the training distribution (Matsuoka, 1992).
3 MT SYSTEMS
The rise of end-to-end models in neural machine translation has led to recent interest in understanding how these models operate. Several studies investigated the ability of such models to learn linguistic properties at morphological (Vylomova et al., 2016; Belinkov et al., 2017a; Dalvi et al., 2017), syntactic (Shi et al., 2016; Sennrich, 2017), and semantic levels (Belinkov et al., 2017b). The use of characters or other sub-word units emerges as an important component in these models. Our work complements previous studies by presenting such NMT systems with noisy examples and exploring methods for increasing their robustness.
We experiment with three different NMT systems with access to character information at different levels. First, we use the fully character-level model of Lee et al. (2017). This is a sequence-tosequence model with attention (Sutskever et al., 2014; Bahdanau et al., 2014) that is trained on characters to characters (char2char). It has a complex encoder with convolutional, highway, and recurrent layers, and a standard recurrent decoder. See Lee et al. (2017) for architecture details. This model was shown to have excellent performance on the German→English and Czech→English language pairs. We use the pre-trained German/Czech→English models.
Second, we use Nematus (Sennrich et al., 2017), a popular NMT toolkit that was used in topperforming contributions in shared MT tasks in WMT (Sennrich et al., 2016b) and IWSLT (JunczysDowmunt & Birch, 2016). It is another sequence-to-sequence model with several architecture modiﬁcations, especially operating on sub-word units using byte-pair encoding (BPE) (Sennrich et al., 2016a). We experimented with both their single best and ensemble BPE models, but saw no significant difference in their performance under noise, so we report results with their single best WMT models for German/Czech→English.
Finally, we train an attentional sequence-to-sequence model with a word representation based on a character convolutional neural network (charCNN). This model retains the notion of a word but learns a character-dependent representation of words. It was shown to perform well on morphologically-rich languages (Kim et al., 2015; Belinkov & Glass, 2016; Costa-jussa` & Fonollosa, 2016; Sajjad et al., 2017), thanks to its ability to learn morphologically-informative representations (Belinkov et al., 2017a). The charCNN model has two long short-term memory (Hochreiter & Schmidhuber, 1997) layers in the encoder and decoder. A CNN over characters in each word replaces the word embeddings on the encoder side (for simplicity, the decoder is word-based). We use 1000 ﬁlters with a width of 6 characters. The character embedding size is set to 25. The convolutions are followed by Tanh and max-pooling over the length of the word (Kim et al., 2015). We train charCNN with the implementation in Kim (2016); all other settings are kept to default values.
4 DATA
4.1 MT DATA
We use the TED talks parallel corpus prepared for IWSLT 2016 (Cettolo et al., 2012) for testing all of the NMT systems, as well as for training the charCNN models. We follow the ofﬁcial training/development/test splits. All texts are tokenized with the Moses tokenizer. Table 1 summarizes statistics on the TED talks corpus.
3

Published as a conference paper at ICLR 2018

Table 1: Statistics for the source-side of French/German/Czech→English parallel corpora.

French Train Dev Test

German Train Dev Test

Czech Train Dev Test

Sentences Words

235K 2.5K 0.8K 5.2M 55K 16K

210K 2.5K 1.4K 4M 50K 26K

122K 20K 1K 2.1M 35K 15K

Table 2: Average number of available edits per word in natural noise datasets and the corresponding token recall of those edits on the training and test splits.

French Words Errors Train Test

German Words Errors Train Test

Czech Words Errors Train Test

65,156 2.7 40% 41%

1,344 2.5 37% 40%

6,036 2.6 46% 51%

4.2 NOISE: NATURAL AND ARTIFICIAL
We insert noise into the source-side of the parallel MT data by utilizing naturally occurring errors and generating synthetic ones. In order to facilitate future work on noise in NMT, we release code and data for generating the noise used in our experiments.3

4.2.1 NATURAL NOISE
Since we do not have access to a parallel corpus with natural noise, we instead harvest naturally occurring errors (typos, misspellings, etc.) from available corpora of edits to build a look-up table of possible lexical replacements. In this work, we restrict ourselves to single word replacements, but several of the corpora below also provide access to phrase replacements.
French Max & Wisniewski (2010) collected Wikipedia edit histories to form the Wikipedia Correction and Paraphrase Corpus (WiCoPaCo). They found the bulk of edits were due to incorrect diacritics, choosing the wrong homophone, and incorrect grammatical conjugation.
German Our German data combines two projects: RWSE Wikipedia Revision Dataset (Zesch, 2012) and The MERLIN corpus of language learners (Wisniewski et al., 2013). These corpora were created to measure spelling difﬁculty and test models of contextual ﬁtness. Unfortunately, the datasets are quite small so we have combined them here.
Czech Our Czech errors come from manually annotated essays written by non-native speakers (Sˇ ebesta et al., 2017). Here, the authors found an incredibly diverse set of errors, and therefore phenomena of interest: capitalization, incorrectly replacing voiced and voiceless consonants (e.g. z/s, g/k), missing palatalization (matkˇe/matce), error in valence, pronominal reference, inﬂection, colloquial forms, and so forth. Their analysis gives us the best insight into how difﬁcult it would be to synthetically generate truly natural errors. We found similarly rich errors in German (Section 7.2).
We insert these errors into the source-side of the parallel data by replacing every word in the corpus with an error if one exists in our dataset. When there is more than one possible replacement to choose we sample uniformly. Words for which there is no error are kept as is. Table 2 shows the number of words for which we were able to collect errors in each language, and the average number of errors per word. Despite the small size of the German and Czech datasets, we are able to replace up to half of the words in the corpus with errors. Due to the small size of the German and Czech datasets these percentages decrease for longer words (> 4 characters) to 25% and 32%, respectively.

4.2.2 SYNTHETIC NOISE
In addition to naturally collected sources of error, we also experiment with four types of synthetic noise: Swap, Middle Random, Fully Random, and Keyboard Typo.
3https://github.com/ybisk/charNMT-noise

4

Published as a conference paper at ICLR 2018

Table 3: The effect of Natural (Nat) and synthetic noise (Swap swap, Middle Random Mid, Fully Random Rand, and Keyboard Typo Key) on models trained on clean (Vanilla) texts.

Synthetic Vanilla Swap Mid Rand Key Nat

French charCNN

42.54 10.52 9.71 1.71 8.26 17.42

German

charCNN char2char Nematus

34.79 29.97 34.22

9.25 8.37 5.68 5.46 3.39 5.16

1.02 6.40 0.28 2.96 0.29 0.61

14.02 12.68 10.68

Czech

charCNN char2char Nematus

25.99 25.71 29.65

6.56 6.67 3.90 4.24 2.94 4.09

1.50 7.13 0.25 2.88 0.66 1.41

10.20 11.42 11.88

Input
Human char2char Nematus charCNN

Table 4: An example noisy text with human and machine translations.
Luat eienr Stduie der Cambrdige Unievrstit speilt es kenie Rlloe in welcehr Reiehnfogle die Buhcstbaen in eniem Wrot vorkmomen, die eingzie whctige Sahce ist, dsas der ertse und der lettze Buhcstbaen stmimt .
According to a study from Cambridge university, it doesn’t matter which order letters in a word are, the only important thing is that the ﬁrst and the last letter appear in their correct place.
Cambridge Universttte is one of the most important features of the Cambridge Universttten , which is one of the most important features of the Cambridge Universttten . Luat eienr Stduie der Cambrant Unievrstilt splashed it kenie Rlloe in welcehr Reiehnfogle the Buhcstbaen in eniem Wred vorkmomen, die eingzie whcene Sahce ist, DSAs der ertse und der lettze Buhcstbaen stmimt . According to the <unk> of the Cambridge University , it ’s a little bit of crude oil in a little bit of recycling , which is a little bit of a cool cap , which is a little bit of a strong cap , that the fat and the <unk> bites is consistent .

Swap : Swap The simplest source of noise is swapping two letters (e.g. noise→nosie). This is common when typing quickly and is easily implemented. We perform one swap per word, but do not alter the ﬁrst or last letters. For this reason, this noise is only applied to words of length ≥ 4.
Middle Random : Mid Following the claims of the previously discussed meme, we randomize the order of all the letters in a word except for the ﬁrst and last (noise→nisoe). Again, by necessity, this means we do not alter words shorter than four characters.
Fully Random : Rand As we are unaware of any strong results on the importance of the ﬁrst and last letters we also include completely randomized words (noise→iones). This is a particularly extreme case, but we include it for completeness. This type of noise is applied to all words.
Keyboard Typo : Key Finally, using the traditional keyboards for our languages, we randomly replace one letter in each word with an adjacent key (noise→noide). This type of error should be much easier than the random settings as most of the word is left intact, but does introduce a completely new character which will often break the templates a system has learned to rely on.

5 FAILURES TO TRANSLATE NOISY TEXTS
Table 3 shows BLEU scores of models trained on clean (Vanilla) texts and tested on clean and noisy texts. All models suffer a signiﬁcant drop in BLEU when evaluated on noisy texts. This is true for both natural noise and all kinds of synthetic noise. The more noise in the text, the worse the translation quality, with random scrambling producing the lowest BLEU scores.
The degradation in translation quality is especially severe in light of humans’ ability to understand noisy texts. To illustrate this, consider the noisy text in Table 4. Humans are quite good at understanding such scrambled texts in a variety of languages.4 We also veriﬁed this by obtaining a
4Matt Davis has a wide collection of translations of this text in multiple languages: https://www.mrc-cbu.cam.ac.uk/personal/matt.davis/Cmabrigde/.

5

Published as a conference paper at ICLR 2018

Table 5: Google Translate’s performance with natural errors and the gains from using spell checking.

French Vanilla Nat Spelling

German Vanilla Nat Spelling

Czech Vanilla Nat Spelling

43.3 16.7 21.4

38.7 18.6 25.0

26.5 12.3 11.2

Table 6: Results of meanChar models trained and tested on different noise conditions: Scrambled (Scr), Keyboard Typo (Key), and Natural (Nat).

Test Train

French Scr Key Nat

German Scr Key Nat

Czech Scr Key Nat

Vanilla

34.26 4.27 12.58 27.53 3.34 9.41 3.73 2.06 3.25

Key

31.88 29.75 13.16 10.04 8.84 4.45 2.03 1.9 1.42

Nat

26.94 5.30 27.49 15.65 3.06 26.26 1.66 1.52 1.58

Rand + Key

13.60 11.09 6.12 26.59 22.41 11.07 9.97 7.48 4.21

Rand + Nat

28.28 5.10 20.40 13.87 3.73 12.74 4.89 2.82 3.42

Key + Nat

31.30 26.94 24.24 6.62 5.41 5.75 1.62 1.68 1.58

Rand + Key + Nat 3.10 3.28 2.76 8.02 5.79 6.36 1.73 1.74 1.66

translation from a German native-speaker, unfamiliar with the meme. As shown in the table, the speaker had no trouble understanding and translating the sentence properly. In contrast, the state-ofthe-art systems (char2char and Nematus) fail on this text.
One natural question is if robust spell checkers trained on human errors are sufﬁcient to address this performance gap. To test this, we ran texts with and without natural errors through Google Translate. We then used Google’s spell-checkers to correct the documents. We simply accepted the ﬁrst suggestion for every detected mistake detected, and report results in Table 5.
We found that in French and German, there was often only a single predicted correction and this corresponds to roughly +5 or more in BLEU. In Czech, however, there was often a large list of possible conjugations and changes, likely indicating that a rich grammatical model would be necessary to predict the correction. It is also important to note the substantial drops from vanilla text even with spell check. This suggests that natural noise cannot be easily addressed by existing tools.

6 DEALING WITH NOISE
6.1 STRUCTURE INVARIANT REPRESENTATIONS
The three NMT models are all sensitive to word structure. The char2char and charCNN models both have convolutional layers on character sequences, designed to capture character n-grams. The model in Nematus is based on sub-word units obtained with BPE. It thus relies on character order within and across sub-word units. All these models are therefore sensitive to types of noise generated by character scrambling (Swap, Mid, and Rand). Can we improve model robustness by adding invariance to these kinds of noise? Perhaps the simplest such model is to take the average character embedding as a word representation. This model, referred to as meanChar, ﬁrst generates a word representation by averaging character embeddings, and then proceeds with a word-level encoder similar to the charCNN model. The meanChar model is by deﬁnition insensitive to scrambling, although it is still sensitive to other kinds of noise (Key and Nat).
Table 6 (ﬁrst row) shows the results of meanChar models trained on vanilla texts and tested on noisy texts (the results on vanilla texts are by deﬁnition equal to those on scrambled texts). Overall, the average character embedding proves to be a pretty good representation for translating scrambled texts: while performance drops by about 7 BLEU points below charCNN on vanilla French and German, it is much better than charCNN’s performance on scrambled texts (compare to Table 3). The results of meanChar on Czech are much worse, possibly due to its more complex morphology. However, the meanChar model performance degrades quickly on other kinds of noise as the model trained on vanilla texts was not designed to handle Nat and Key types of noise.

6

Published as a conference paper at ICLR 2018

Table 7: Results of charCNN models trained and tested on different noise conditions.

Test Train

Vanilla Swap Mid Rand Key Nat Ave

French

Swap Mid Rand Key Nat Rand + Key Rand + Nat Key + Nat Rand + Key + Nat

39.01 42.46 39.53 38.49 28.77 39.23 36.86 38.47 36.97

42.56 42.19 39.46 10.56 12.45 38.85 38.95 17.33 36.92

33.64 42.17 39.13 8.69 8.39 38.89 38.44 10.54 36.65

2.72 3.36 39.73 1.08 1.03 39.13 38.63 1.52 36.64

4.85 6.20 3.11 38.88 6.61 38.22 6.67 38.62 35.25

16.43 18.22 16.63 16.86 36.00 18.71 33.89 34.66 31.77

23.20 25.77 29.60 19.10 15.54 35.51 32.24 23.52 35.70

German

Swap Mid Rand Key Nat Rand + Key Rand + Nat Key + Nat Rand + Key + Nat

32.66 34.32 33.65 32.87 25.79 32.03 32.37 30.39 31.29

34.76 34.26 33.44 10.13 8.20 31.57 32.40 13.51 30.93

29.03 34.27 33.75 8.39 5.73 31.32 31.91 8.99 30.54

2.19 3.50 33.56 1.16 0.93 31.58 32.11 1.53 30.04

4.78 5.08 3.00 33.28 4.80 31.23 4.77 32.23 29.81

13.37 14.43 14.47 13.88 34.59 15.59 33.00 33.46 31.60

19.47 20.98 25.31 16.62 13.34 28.89 27.76 20.02 30.70

Czech

Swap Mid Rand Key Nat Rand + Key Rand + Nat Key + Nat Rand + Key + Nat

24.22 23.81 23.44 23.15 18.04 21.46 20.59 19.55 21.30

24.90 24.52 23.31 7.06 5.36 20.81 21.56 6.59 21.33

18.72 24.08 23.24 6.04 4.48 20.90 20.49 5.72 20.38

2.72 3.96 23.47 1.56 1.47 20.59 20.53 1.40 19.94

6.00 6.34 3.70 22.80 6.71 19.48 5.89 21.31 19.25

9.03 9.54 8.10 10.16 21.64 8.72 18.39 19.54 18.38

14.27 15.38 17.54 11.80
9.62 18.66 17.91 12.35 20.10

6.2 BLACK-BOX ADVERSARIAL TRAINING
To increase model robustness we follow a black-box adversarial training scenario, where the model is presented with adversarial examples that are generated without direct access to the model (Papernot et al., 2016a; 2017; Liu et al., 2017; Narodytska & Kasiviswanathan, 2017; Jia & Liang, 2017). We replace the original training set with a noisy training set, where noise is introduced according to the description in Section 4.2. The noisy training set has exactly the same number of sentences and words as the training set. We have one ﬁxed noisy training set per each noise type.5
As shown in Table 6 (second block), training on noisy text can lead to improved performance. The meanChar models trained on Key perform well on Key in French, but not in the other languages. The models trained on Nat perform well in French and German, but not in Czech. Overall, training the meanChar model on noisy text does not appear to consistently increase its robustness to different kinds of noise. The meanChar model however was not expected to perform well on nonscrambling types of noise. Next we test whether the more complicated charCNN model is more robust to different kinds of noise, by training on noisy texts. The results are shown in Table 7.
In general, charCNN models that are trained on a speciﬁc kind of noise perform well on the same kind of noise at test time (results in bold). All models also maintain a fairly good quality on vanilla texts. The robust training is sensitive to the kind of noise. Among the scrambling methods (Swap/Mid/Rand), more noise helps in training: models trained on random noise can still translate Swap/Mid noise, but not vice versa. The three broad classes of noise (scrambling, Key,
5When replacing words in the input, we inevitably make some of the same replacements on both the training and test sets. We verify this does not decrease the percent of unseen words in testing. Conversely, we found it increases for all synthetic noise types and is similar for the vanilla and natural noise conditions.

7

Published as a conference paper at ICLR 2018

Keyboard

Natural

Random

Ensemble

Variance

Language
Figure 2: Variances of charCNN weights when trained on only Key, Natural, Random noise and on a mix of all three are shown in red, green, blue, and white, respectively
Nat) are not mutually-beneﬁcial. Models trained on one do not perform well on the others. In particular, only models trained on natural noise can1 reasonably translate natural noise at test time. We ﬁnd this result indicates an important difference between computational models and human performance, since humans can decipher random letter orderings without explicit training of this form.
Next, we test whether we can increase training robustness by exposing the model to multiple types of noise during training. Our motivation is to see if models can perform well on more than one kind of noise. We therefore mix up to three kinds of noise by sampling a noise method uniformly at random for each sentence. We then train a model on the mixed noisy training set and test it on both vanilla and (unmixed) noisy versions of the test set. We ﬁnd that models trained on mixed noise are slightly worse than models trained on unmixed noise. However, the models trained on mixed noise are robust to the speciﬁc types of noise they were trained on. In particular, the model trained on a mix of Rand, Key, and Nat noise is robust to all noise kinds. Even though it is not the best on any one kind of noise, it achieves the best result on average.
This model is also able to translate the scrambled meme reasonably well:
“According to a study of Cambridge University, it doesn’t matter which technology in a word is going to get the letters in a word that is the only important thing for the ﬁrst and last letter.”
7 ANALYSIS
7.1 LEARNING MULTIPLE KINDS OF NOISE IN C H A RCNN
The charCNN model was able to perform well on all kinds of noise by training on a mix of noise types. In particular, it performed well on scrambled characters even though its convolutions should be sensitive to the character order, as opposed to meanChar which is by deﬁnition invariant to character order. How then can charCNN learn to be robust to multiple kinds of noise at the same time? We speculate that different convolutional ﬁlters learn to be robust to different kinds of noise. A convolutional ﬁlter can in principle capture a mean (or sum) operation by employing equal or close to equal weights.
To test this, we analyze the weights learned by charCNN models trained under four conditions: three models trained each on completely scrambled words (Rand), keyboard typos (Key), and natural human errors (Nat), as well as an ensemble model trained on a mix of Rand+Key+Nat kinds of noise. For each model, we compute the variance across the ﬁlter width (6 characters) for each one of the 1000 ﬁlters and for each one out of 25 character embedding dimensions. Intuitively, this variance captures how much a particular ﬁlter learns a uniform vs. non-uniform combination of characters. Then we average the variances across the 1000 ﬁlters. This yields 25 averaged variances, one for each character embedding dimension. Low average variance means that different ﬁlters tend to learn similar behaviors, while high average variance means that they learn different patterns.
Figure 2 shows a box plot of these averages for our three languages and four training conditions. Clearly, the variances of the weights learned by the Rand model are much smaller than those of the weights learned by any other setting. This makes sense as with random scrambling there are no
8

Published as a conference paper at ICLR 2018

patterns to detect in the data, so ﬁlters resort to close to uniform weights. In contrast, the Key and Nat settings introduce a large set of new patterns for the CNNs to try and learn, leading to high variances. Finally, the ensemble model trained on mixed noise appears to be in the middle as it tries to capture both the uniform relationships of Rand and the more diverse patterns of Nat + Key.
Moreover, the variance of variances (size of the box) is smallest in the Rand setting, larger in the mixed noise model, and largest in Key and Nat. This indicates that ﬁlters for different character embedding dimensions are more different from one another in Key and Nat models. In contrast, in the Rand model, the variance of variances is close to zero, indicating that in all character embedding dimensions the learned weights are of small variance; they do similar things, that is, the model learned to reproduce a representation similar to the meanChar model. The ensemble model again seems to ﬁnd a balance between Rand and Key/Nat.
7.2 RICHNESS OF NATURAL NOISE
Natural noise appears to be very different from synthetic noise. None of the models that were trained only on synthetic noise were able to perform well on natural noise. We manually analyzed a small sample (~40 examples) of natural noise from the German dataset. We found that the most common sources of noise are phonetic or phonological phenomena in the language (34%) and character omissions (32%). The rest are incorrect morphological conjugations of verbs, key swaps, character insertions, orthographic variants, and other errors. Table 8 shows examples of these kinds of noise.
The most common types of natural noise – phonological and omissions – are not directly captured by our synthetic noise generation, and demonstrate that good synthetic errors will likely require more explicit phonemic and linguistic knowledge. This discrepancy helps explain why the models trained on synthetic noise were not particularly successful in translating natural noise.

Error type
Phonetic
Omission Morphological Key swap Other

Table 8: Examples of natural noise from the German errors dataset.
Examples
Tut/Tud (devoicing of ﬁnal stops), sieht/zieht (s = /z/ before vowel), Trotzdem/Trozdem (tz = /z/), gekriegt/gekrigt (vowel length), Natu¨rlich/Naturlich/Na¨turlich (diacritics) erfahren/erfaren, Babysitter/Babysiter, selbst/sebst, Hausschuhe/Hausschue wohnt/wonnen, fortsetzt/forzusetzen, wu¨nsche/wu¨nchen Eltern/Eltren, Deine/Diene, nichts/nichst, Bahn/Bhan Agglomerationen/Agromelationen (omission + letter swap), Hausaufgabe/Hausausgabe, Thema/Temer, Detailhandelsfachfrau/Deitellhandfachfrau

8 CONCLUSION
In this work, we have shown that character-based NMT models are extremely brittle and tend to break when presented with both natural and synthetic kinds of noise. We investigated methods for increasing their robustness by using a structure-invariant word representation and by ensemble training on adversarial examples of different kinds. We found that a character-based CNN can learn to address multiple types of errors that are seen in training. However, we observed rich characteristics of natural human errors that cannot be easily captured by existing models. Future work might investigate using phonetic and syntactic structure to generate more realistic synthetic noise. We believe that more work is necessary in order to immune NMT models against natural noise. As corpora with natural noise are limited, another approach to future work is to design better NMT architectures that would be robust to noise without seeing it in the training data. New psychology results on how humans cope with natural noise might point to possible solutions to this problem.
ACKNOWLEDGEMENTS
This work beneﬁted from discussions with Frank Keller. This work was supported by the Qatar Computing Research Institute (QCRI) and Samsung Research.
9

Published as a conference paper at ICLR 2018
REFERENCES
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural Machine Translation by Jointly Learning to Align and Translate. arXiv preprint arXiv:1409.0473, 2014.
Yonatan Belinkov and James Glass. Large-Scale Machine Translation between Arabic and Hebrew: Available Corpora and Initial Results. In Proceedings of the Workshop on Semitic Machine Translation, pp. 7–12, Austin, Texas, November 2016. Association for Computational Linguistics.
Yonatan Belinkov, Nadir Durrani, Fahim Dalvi, Hassan Sajjad, and James Glass. What do Neural Machine Translation Models Learn about Morphology? In Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pp. 861–872, Vancouver, Canada, July 2017a.
Yonatan Belinkov, Llu´ıs Ma`rquez, Hassan Sajjad, Fahim Dalvi, Nadir Durrani, and James Glass. Evaluating Layers of Representation in Neural Machine Translation on Part-of-Speech and Semantic Tagging Tasks. In Proceedings of the 8th International Joint Conference on Natural Language Processing (Volume 1: Long Papers), Taipei, Taiwan, November 2017b. Association for Computational Linguistics.
Battista Biggio, Blaine Nelson, and Pavel Laskov. Poisoning Attacks Against Support Vector Machines. In Proceedings of the 29th International Coference on International Conference on Machine Learning, ICML’12, pp. 1467–1474, USA, 2012. Omnipress. ISBN 978-1-4503-1285-1. URL http://dl.acm.org/citation.cfm?id=3042573.3042761.
Christopher Bishop. Training with noise is equivalent to Tikhonov regularization. Neural Computation, 7:108–116, January 1995.
Mauro Cettolo, Christian Girardi, and Marcello Federico. WIT3: Web Inventory of Transcribed and Translated Talks. In Proceedings of the 16th Conference of the European Association for Machine Translation (EAMT), pp. 261–268, Trento, Italy, May 2012.
Patrick P. K. Chan, Zhi-Min He, Hongjiang Li, and Chien-Chang Hsu. Data sanitization against adversarial label contamination based on data complexity. International Journal of Machine Learning and Cybernetics, Jan 2017. ISSN 1868-808X. doi: 10.1007/s13042-016-0629-5. URL https://doi.org/10.1007/s13042-016-0629-5.
Marta R. Costa-jussa` and Jose´ A. R. Fonollosa. Character-based Neural Machine Translation. In Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics (Volume 2: Short Papers), pp. 357–361, Berlin, Germany, August 2016. Association for Computational Linguistics. URL http://anthology.aclweb.org/P16-2058.
Gabriela F. Cretu, Angelos Stavrou, Michael E. Locasto, Salvatore J. Stolfo, and Angelos D. Keromytis. Casting out Demons: Sanitizing Training Data for Anomaly Sensors. In Proceedings of the 2008 IEEE Symposium on Security and Privacy, SP ’08, pp. 81–95, Washington, DC, USA, 2008. IEEE Computer Society. ISBN 978-0-7695-3168-7. doi: 10.1109/SP.2008.11. URL https://doi.org/10.1109/SP.2008.11.
Fahim Dalvi, Nadir Durrani, Hassan Sajjad, Yonatan Belinkov, and Stephan Vogel. Understanding and Improving Morphological Learning in the Neural Machine Translation Decoder. In Proceedings of the 8th International Joint Conference on Natural Language Processing (Volume 1: Long Papers), Taipei, Taiwan, November 2017. Association for Computational Linguistics.
Javid Ebrahimi, Anyi Rao, Daniel Lowd, and Dejing Dou. HotFlip: White-Box Adversarial Examples for NLP. arXiv preprint arXiv:1712.06751, 2017.
Ji Gao, Jack Lanchantin, Mary Lou Soffa, and Yanjun Qi. Black-box Generation of Adversarial Text Sequences to Evade Deep Learning Classiﬁers. arXiv preprint arXiv:1801.04354, 2018.
Amir Globerson and Sam Roweis. Nightmare at Test Time: Robust Learning by Feature Deletion. In Proceedings of the 23rd International Conference on Machine Learning, ICML ’06, pp. 353– 360, New York, NY, USA, 2006. ACM. ISBN 1-59593-383-2. doi: 10.1145/1143844.1143889. URL http://doi.acm.org/10.1145/1143844.1143889.
10

Published as a conference paper at ICLR 2018
Ian J Goodfellow, Jonathon Shlens, and Christian Szegedy. Explaining and Harnessing Adversarial Examples. In International Conference on Learning Representations (ICLR), 2015.
Georg Heigold, Gu¨nter Neumann, and Josef van Genabith. How Robust Are Character-Based Word Embeddings in Tagging and MT Against Wrod Scramlbing or Randdm Nouse? arXiv preprint arXiv:1704.04441, 2017.
Sepp Hochreiter and Ju¨rgen Schmidhuber. Long short-term memory. Neural Computation, 9(8): 1735–1780, 1997.
Robin Jia and Percy Liang. Adversarial Examples for Evaluating Reading Comprehension Systems. In Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing, pp. 2011–2021, Copenhagen, Denmark, September 2017.
Marcin Junczys-Dowmunt and Alexandra Birch. The University of Edinburgh’s systems submission to the MT task at IWSLT. In Proceedings of the First Conference on Machine Translation, Seattle, USA, 2016.
Yoon Kim. Seq2seq-attn. https://github.com/harvardnlp/seq2seq-attn, 2016.
Yoon Kim, Yacine Jernite, David Sontag, and Alexander M Rush. Character-aware Neural Language Models. arXiv preprint arXiv:1508.06615, 2015.
Jason Lee, Kyunghyun Cho, and Thomas Hofmann. Fully Character-Level Neural Machine Translation without Explicit Segmentation. Transactions of the Association for Computational Linguistics (TACL), 2017.
Bin Liang, Hongcheng Li, Miaoqiang Su, Pan Bian, Xirong Li, and Wenchang Shi. Deep Text Classiﬁcation Can be Fooled. arXiv preprint arXiv:1704.08006, 2017.
Yanpei Liu, Xinyun Chen, Chang Liu, and Dawn Song. Delving into Transferable Adversarial Examples and Black-box Attacks. 2017.
K. Matsuoka. Noise injection into inputs in back-propagation learning. IEEE Transactions on Systems, Man, and Cybernetics, 22(3):436–440, May 1992.
Aurlien Max and Guillaume Wisniewski. Mining Naturally-occurring Corrections and Paraphrases from Wikipedias Revision History. In Proceedings of the Seventh conference on International Language Resources and Evaluation (LREC’10), Valletta, Malta, may 2010. European Language Resources Association (ELRA). ISBN 2-9517408-6-7. URL https://wicopaco.limsi. fr.
K. Mayall, G.W. Humphreys, and A. Olson. Disruption to word or letter processing? The origins of case-mixing effects. Journal of Experimental Psychology: Learning, Memory, & Cognition, 23: 1275 – 1286, 1997.
L. X. McCusker, P. B. Gough, and R. G. Bias. Word recognition inside out and outside in. Journal of Experimental Psychology: Human Perception and Performance, 7(3):538 – 551, 1981.
Shike Mei and Xiaojin Zhu. Using Machine Teaching to Identify Optimal Training-set Attacks on Machine Learners. In Proceedings of the Twenty-Ninth AAAI Conference on Artiﬁcial Intelligence, AAAI’15, pp. 2871–2877. AAAI Press, 2015. ISBN 0-262-51129-0. URL http://dl.acm.org/citation.cfm?id=2886521.2886721.
N. Narodytska and S. Kasiviswanathan. Simple Black-Box Adversarial Attacks on Deep Neural Networks. In 2017 IEEE Conference on Computer Vision and Pattern Recognition Workshops (CVPRW), pp. 1310–1318, July 2017. doi: 10.1109/CVPRW.2017.172.
Nicolas Papernot, Patrick McDaniel, and Ian Goodfellow. Transferability in Machine Learning: from Phenomena to Black-Box Attacks using Adversarial Samples. arXiv preprint arXiv:1605.07277, 2016a.
Nicolas Papernot, Patrick McDaniel, Ananthram Swami, and Richard Harang. Crafting Adversarial Input Sequences for Recurrent Neural Networks. In Military Communications Conference, MILCOM 2016-2016 IEEE, pp. 49–54. IEEE, 2016b.
11

Published as a conference paper at ICLR 2018
Nicolas Papernot, Patrick McDaniel, Ian Goodfellow, Somesh Jha, Z. Berkay Celik, and Ananthram Swami. Practical Black-Box Attacks Against Machine Learning. In Proceedings of the 2017 ACM on Asia Conference on Computer and Communications Security, ASIA CCS ’17, pp. 506–519, New York, NY, USA, 2017. ACM. ISBN 978-1-4503-4944-4. doi: 10.1145/3052973.3053009. URL http://doi.acm.org/10.1145/3052973.3053009.
D. G. Pelli, B. Farell, and D.C. Moore. The remarkable inefﬁciency of word recognition. Nature, 423:752 – 756, 2003.
G. E. Rawlinson. The signiﬁcance of letter position in word recognition. PhD thesis, 1976.
Keith Rayner, Sarah J. White, Rebecca L. Johnson, and Simon P. Liversedge. Raeding Wrods With Jubmled Lettres: There Is a Cost. Psychological Science, 17(3):192 – 193, 2006.
G. M. Reicher. Perceptual recognition as a function of meaningfulness of stimulus material. Journal of Experimental Psychology, 81(2):275 – 280, 1969.
Benjamin I.P. Rubinstein, Blaine Nelson, Ling Huang, Anthony D. Joseph, Shing-hon Lau, Satish Rao, Nina Taft, and J. D. Tygar. ANTIDOTE: Understanding and Defending Against Poisoning of Anomaly Detectors. In Proceedings of the 9th ACM SIGCOMM Conference on Internet Measurement, IMC ’09, pp. 1–14, New York, NY, USA, 2009. ACM. ISBN 978-1-60558-771-4. doi: 10. 1145/1644893.1644895. URL http://doi.acm.org/10.1145/1644893.1644895.
Kourosh Saberi and David R. Perrott. Cognitive restoration of reversed speech. Nature, 398(760), April 1999.
Hassan Sajjad, Fahim Dalvi, Nadir Durrani, Ahmed Abdelali, Yonatan Belinkov, and Stephan Vogel. Challenging Language-Dependent Segmentation for Arabic: An Application to Machine Translation and Part-of-Speech Tagging. In Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, Vancouver, Canada, July 2017. Association for Computational Linguistics.
Keisuke Sakaguchi, Kevin Duh, Matt Post, and Benjamin Van Durme. Robsut Wrod Reocginiton via Semi-Character Recurrent Neural Network. In Proceedings of the Thirty-First AAAI Conference on Artiﬁcial Intelligence, February 4-9, 2017, San Francisco, California, USA., pp. 3281–3287. AAAI Press, 2017. URL http://aaai.org/ocs/index.php/AAAI/AAAI17/paper/ view/14332.
Suranjana Samanta and Sameep Mehta. Towards Crafting Text Adversarial Samples. arXiv preprint arXiv:1707.02812, 2017.
Karel Sˇ ebesta, Zuzanna Bedˇrichova´, Kateˇrina Sˇ ormova´, Barbora Sˇ tindlova´, Milan Hrdlicˇka, Tereza Hrdlicˇkova´, Jiˇr´ı Hana, Vladim´ır Petkevicˇ, Toma´sˇ Jel´ınek, Svatava Sˇ kodova´, Petr Janesˇ, Kateˇrina Lunda´kova´, Hana Skoumalova´, Sˇ imon Sla´dek, Piotr Pierscieniak, Dagmar Toufarova´, Milan Straka, Alexandr Rosen, Jakub Na´plava, and Marie Pola´cˇkova´. CzeSL grammatical error correction dataset (CzeSL-GEC). Technical report, LINDAT/CLARIN digital library at the Institute of Formal and Applied Linguistics, Charles University, 2017. URL https://lindat.mff. cuni.cz/repository/xmlui/handle/11234/1-2143.
Rico Sennrich. How Grammatical is Character-level Neural Machine Translation? Assessing MT Quality with Contrastive Translation Pairs. In Proceedings of the 15th Conference of the European Chapter of the Association for Computational Linguistics: Volume 2, Short Papers, pp. 376–382. Association for Computational Linguistics, 2017. URL http://aclweb.org/ anthology/E17-2060.
Rico Sennrich, Barry Haddow, and Alexandra Birch. Neural Machine Translation of Rare Words with Subword Units. In Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pp. 1715–1725. Association for Computational Linguistics, 2016a. doi: 10.18653/v1/P16-1162. URL http://aclanthology.coli. uni-saarland.de/pdf/P/P16/P16-1162.pdf.
Rico Sennrich, Barry Haddow, and Alexandra Birch. Edinburgh Neural Machine Translation Systems for WMT 16. In Proceedings of the First Conference on Machine Translation, pp. 371–376, Berlin, Germany, August 2016b. Association for Computational Linguistics.
12

Published as a conference paper at ICLR 2018
Rico Sennrich, Orhan Firat, Kyunghyun Cho, Alexandra Birch, Barry Haddow, Julian Hitschler, Marcin Junczys-Dowmunt, Samuel La¨ubli, Antonio Valerio Miceli Barone, Jozef Mokry, and Maria Nadejde. Nematus: a Toolkit for Neural Machine Translation. In Proceedings of the Software Demonstrations of the 15th Conference of the European Chapter of the Association for Computational Linguistics, pp. 65–68, Valencia, Spain, April 2017. Association for Computational Linguistics. URL http://aclweb.org/anthology/E17-3017.
Xing Shi, Inkit Padhi, and Kevin Knight. Does String-Based Neural MT Learn Source Syntax? In Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing, pp. 1526–1534, Austin, Texas, November 2016. Association for Computational Linguistics. URL https://aclweb.org/anthology/D16-1159.
Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. Sequence to Sequence Learning with Neural Networks. In Advances in neural information processing systems, pp. 3104–3112, 2014.
Christian Szegedy, Wojciech Zaremba, Ilya Sutskever, Joan Bruna, Dumitru Erhan, Ian Goodfellow, and Rob Fergus. Intriguing properties of neural networks. In International Conference on Learning Representations (ICLR), 2014.
Florian Trame`r, Alexey Kurakin, Nicolas Papernot, Dan Boneh, and Patrick McDaniel. Ensemble Adversarial Training: Attacks and Defenses. arXiv preprint arXiv:1705.07204, 2017.
Ekaterina Vylomova, Trevor Cohn, Xuanli He, and Gholamreza Haffari. Word Representation Models for Morphologically Rich Languages in Neural Machine Translation. arXiv preprint arXiv:1606.04217, 2016.
Katrin Wisniewski, Karin Schne, Lionel Nicolas, Chiara Vettori, Adriane Boyd, Detmar Meurers, Andrea Abel, and Jirka Hana. MERLIN: An online trilingual learner corpus empirically grounding the European Reference Levels in authentic learner data, 10 2013. URL https://www. ukp.tu-darmstadt.de/data/spelling-correction/rwse-datasets.
Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang Macherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. Google’s neural machine translation system: Bridging the gap between human and machine translation. arXiv preprint arXiv:1609.08144, 2016.
Torsten Zesch. Measuring Contextual Fitness Using Error Contexts Extracted from the Wikipedia Revision History. In Proceedings of the 13th Conference of the European Chapter of the Association for Computational Linguistics, pp. 529–538, Avignon, France, April 2012. Association for Computational Linguistics.
13

