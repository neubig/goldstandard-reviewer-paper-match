A COMPARATIVE STUDY ON TRANSFORMER VS RNN IN SPEECH APPLICATIONS
Shigeki Karita1, (Alphabetical Order) Nanxin Chen3, Tomoki Hayashi5,6, Takaaki Hori7, Hirofumi Inaguma8, Ziyan Jiang3,
Masao Someki5, Nelson Enrique Yalta Soplin2, Ryuichi Yamamoto4, Xiaofei Wang3, Shinji Watanabe3, Takenori Yoshimura5,6, Wangyou Zhang9
1NTT Communication Science Laboratories, 2Waseda University, 3Johns Hopkins University, 4LINE Corporation, 5Nagoya University, 6Human Dataware Lab. Co., Ltd.,
7Mitsubishi Electric Research Laboratories, 8Kyoto University, 9Shanghai Jiao Tong University

arXiv:1909.06317v2 [cs.CL] 28 Sep 2019

ABSTRACT
Sequence-to-sequence models have been widely used in end-toend speech processing, for example, automatic speech recognition (ASR), speech translation (ST), and text-to-speech (TTS). This paper focuses on an emergent sequence-to-sequence model called Transformer, which achieves state-of-the-art performance in neural machine translation and other natural language processing applications. We undertook intensive studies in which we experimentally compared and analyzed Transformer and conventional recurrent neural networks (RNN) in a total of 15 ASR, one multilingual ASR, one ST, and two TTS benchmarks. Our experiments revealed various training tips and signiﬁcant performance beneﬁts obtained with Transformer for each task including the surprising superiority of Transformer in 13/15 ASR benchmarks in comparison with RNN. We are preparing to release Kaldi-style reproducible recipes using open source and publicly available datasets for all the ASR, ST, and TTS tasks for the community to succeed our exciting outcomes.
Index Terms— Transformer, Recurrent Neural Networks, Speech Recognition, Text-to-Speech, Speech Translation
1. INTRODUCTION
Transformer is a sequence-to-sequence (S2S) architecture originally proposed for neural machine translation (NMT) [1] that rapidly replaces recurrent neural networks (RNN) in natural language processing tasks. This paper provides intensive comparisons of its performance with that of RNN for speech applications; automatic speech recognition (ASR), speech translation (ST), and text-tospeech (TTS).
One of the major difﬁculties when applying Transformer to speech applications is that it requires more complex conﬁgurations (e.g., optimizer, network structure, data augmentation) than the conventional RNN based models. Our goal is to share our knowledge on the use of Transformer in speech tasks so that the community can fully succeed our exciting outcomes with reproducible open source tools and recipes.
Currently, existing Transformer-based speech applications [2]– [4] still lack an open source toolkit and reproducible experiments while previous studies in NMT [5], [6] provide them. Therefore, we work on an open community-driven project for end-to-end speech applications using both Transformer and RNN by following the success of Kaldi for hidden Markov model (HMM)-based ASR [7]. Speciﬁcally, our experiments provide practical guides for tuning Transformer in speech tasks to achieve state-of-the-art results.

In our speech application experiments, we investigate several aspects of Transformer and RNN-based systems. For example, we measure the word/character/regression error from the ground truth, training curve, and scalability for multiple GPUs.
The contributions of this work are:
• We conduct a larges-scale comparative study on Transformer and RNN with signiﬁcant performance gains especially for the ASR related tasks.
• We explain our training tips for Transformer in speech applications: ASR, TTS and ST.
• We provide reproducible end-to-end recipes and models pretrained on a large number of publicly available datasets in our open source toolkit ESPnet [8]1.

Related studies
As Transformer was originally proposed as an NMT system [1], it has been widely studied on NMT tasks including hyperparameter search [9], parallelism implementation [5] and in comparison with RNN [10]. On the other hand, speech processing tasks have just provided their preliminary results in ASR [2], [11], ST [3] and TTS [4]. Therefore, this paper aims to gather the previous basic research and to explore wider topics (e.g., accuracy, speed, training tips) in our experiments.

2. SEQUENCE-TO-SEQUENCE RNN

2.1. Uniﬁed formulation for S2S

S2S is a variant of neural networks that learns to transform a source sequence X to a target sequence Y [12]. In Fig. 1, we illustrate a common S2S structure for ASR, TTS and ST tasks. S2S consists of two neural networks: an encoder

X0 = EncPre(X),

(1)

Xe = EncBody(X0),

(2)

and a decoder

Y0[1 : t − 1] = DecPre(Y [1 : t − 1]),

(3)

Yd[t] = DecBody(Xe, Y0[1 : t − 1]),

(4)

Ypost[1 : t] = DecPost(Yd[1 : t]),

(5)

where X is the source sequence (e.g., a sequence of speech features (for ASR and ST) or characters (for TTS)), e is the number of layers

1https://github.com/espnet/espnet

Encoder

ASR: Linear (CTC)
EncBody
Bi-directional × RNN / Self Attention

EncPre

0

ASR/ST: Subsample TTS: Pre-net

Loss
ASR: CE, CTC ST: CE
TTS: L1, L2, BCE [ ]

Decoder DecPost

post [ ]

ASR/ST: Linear (CE) TTS: Post-net

DecBody

[1 : − 1]

Source Attention

+

Uni-directional

×

RNN / Self Attention

DecPre

0 [1 : − 1]

ASR/ST: Embed TTS: Pre-net

[1 : − 1]

Source Sequence

Target Sequence

Fig. 1. Sequence-to-sequence architecture in speech applications.

in EncBody, d is the number of layers in DecBody, t is a target frame index, and all the functions in the above equations are implemented by neural networks. For the decoder input Y [1 : t − 1], we use a ground-truth preﬁx in the training stage, while we use a generated preﬁx in the decoding stage. During training, the S2S model learns to minimize the scalar loss value

L = Loss(Ypost, Y )

(6)

between the generated sequence Ypost and the target sequence Y .
The remainder of this section describes RNN-based universal modules: “EncBody” and “DecBody”. We regard “EncPre”, “DecPre”, “DecPost” and “Loss” as task-speciﬁc modules and we describe them in the later sections.

2.2. RNN encoder
EncBody(·) in Eq. (2) transforms a source sequence X0 into an intermediate sequence Xe. Existing RNN-based EncBody(·) implementations [13]–[15] typically adopt a bi-directional long short-term memory (BLSTM) that can perform such an operation thanks to its recurrent connection. For ASR, an encoded sequence Xe can also be used for source-level frame-wise prediction using connectionist temporal classiﬁcation (CTC) [16] for joint training and decoding [17].

3. TRANSFORMER
Transformer learns sequential information via a self-attention mechanism instead of the recurrent connection employed in RNN. This section describes the self-attention based modules in Transformer in detail.

3.1. Multi-head attention

Transformer consists of multiple dot-attention layers [18]:

qkv

XqXk

v

att(X , X , X ) = softmax √

X,

(7)

datt

where Xk, Xv ∈ Rnk×datt and Xq ∈ Rnq×datt are inputs for this attention layer, datt is the number of feature dimensions, nq is the length of Xq, and nk is the length of Xk and Xv. We refer to XqXk
as the “attention matrix”. Vaswani et al. [1] considered these inputs Xq, Xk and Xv to be a query and a set of key-value pairs, respec-
tively.
In addition, to allow the model to deal with multiple attentions
in parallel, Vaswani et al. [1] extended this attention layer in Eq. (7)
to multi-head attention (MHA):

MHA(Q, K, V ) = [H1, H2, . . . , Hdhead ]W head,

(8)

Hh = att(QWhq, KWhk, V Whv),

(9)

where K, V ∈ Rnk×datt and Q ∈ Rnq×datt are inputs for this MHA layer, Hh ∈ Rnq×datt is the h-th attention layer output (h = 1, . . . , dhead), Whq, Whk, Whv ∈ Rdatt×datt and W head ∈ Rdattdhead×datt are learnable weight matrices and dhead
is the number of attentions in this layer.

3.2. Self-attention encoder

We deﬁne Transformer-based EncBody(·) used for Eq. (2) unlike the RNN encoder in Section 2.2 as follows:

Xi = Xi + MHAi(Xi, Xi, Xi),

Xi+1 = Xi + FFi(Xi),

(10)

where i = 0, . . . , e − 1 is the index of encoder layers, and FFi is the i-th two-layer feedforward network:

FF(X[t]) = ReLU(X[t]W1ff + bf1f)W2ff + bf2f,

(11)

where X[t] ∈ Rdatt is the t-th frame of the input sequence X,

W1ff ∈ Rdatt×dff , W2ff ∈ Rdff ×datt are learnable weight matrices,

and bf1f

∈

dff
R

,

bf2f

∈

Rdatt

are learnable bias vectors.

We refer to

MHAi(Xi, Xi, Xi) in Eq. (10) as “self attention”.

2.3. RNN decoder
DecBody(·) in Eq. (4) generates a next target frame with the encoded sequence Xe and the preﬁx of target preﬁx Y0[1 : t − 1]. For sequence generation, the decoder is mostly unidirectional. For example, uni-directional LSTM with an attention mechanism [13] is often used in RNN-based DecBody(·) implementations. That attention mechanism emits source frame-wise weights to sum the encoded source frames Xe as a target frame-wise vector to be transformed with the preﬁx Y0[0 : t−1]. We refer to this type of attention as “encoder-decoder attention”.

3.3. Self-attention decoder

Transformer-based DecBody(·) used for Eq. (4) consists of two attention modules:

Yj [t] = Yj [t] + MHAsjelf (Yj [t], Yj [1 : t], Yj [1 : t]), Yj = Yj + MHAsjrc(Yj , Xe, Xe),

Yj+1 = Yj + FFj (Yj ),

(12)

where j = 0, . . . , d − 1 is the index of the decoder layers. We refer
to the attention matrix between the decoder input and the encoder output in MHAsjrc(Yj , Xe, Xe) as “encoder-decoder attention’ as

same as the one in RNN in Sec 2.3. Because the unidirectional decoder is useful for sequence generation, its attention matrices at the t-th target frame are masked so that they do not connect with future frames later than t. This masking of the sequence can be done in parallel using an elementwise product with a triangular binary matrix. Because it requires no sequential operation, it provides a faster implementation than RNN.

3.4. Positional encoding

To represent the time location in the non-recurrent model, Transformer adopts sinusoidal positional encoding:

sin

t att

if t is even,

PE[t] =

10000t/d t

(13)

cos 10000t/datt if t is odd.

The input sequences X0, Y0 are concatenated with (PE[1], PE[2], . . . ) before EncBody(·) and DecBody(·) modules.

4. ASR EXTENSIONS
In our ASR framework, the S2S predicts a target sequence Y of characters or SentencePiece [19] from an input sequence Xfbank of logmel ﬁlterbank speech features.

4.1. ASR encoder architecture
The source X in ASR is represented as a sequence of 83-dim log-mel ﬁlterbank frames with pitch features [20]. First, EncPre(·) transforms the source sequence X into a subsampled sequence X0 ∈ Rnsub×datt by using two-layer CNN with 256 channels, stride size 2 and kernel size 3 in [2], or VGG-like max pooling in [21], where nsub is the length of the output sequence of the CNN. This CNN corresponds to EncPre(·) in Eq. (1). Then, EncBody(·) transforms X0 into a sequence of encoded features Xe ∈ Rnsub×datt for the CTC and decoder networks.

4.2. ASR decoder architecture
The decoder network receives the encoded sequence Xe and the preﬁx of a target sequence Y [1 : t − 1] of token IDs: characters or SentencePiece [19]. First, DecPre(·) in Eq. (3) embeds the tokens into learnable vectors. Next, DecBody(·) and single-linear layer DecPost(·) predicts the posterior distribution of the next token prediction Ypost[t] given Xe and Y [1 : t − 1].

4.3. ASR training and decoding

During ASR training, both the decoder and the CTC module predict the frame-wise posterior distribution of Y given corresponding source X: ps2s(Y |X) and pctc(Y |X), respectively. We simply use the weighted sum of those negative log likelihood values:
LASR = −α log ps2s(Y |X) − (1 − α) log pctc(Y |X), (14)

where α is a hyperparameter. In the decoding stage, the decoder predicts the next token given
the speech feature X and the previous predicted tokens using beam search, which combines the scores of S2S, CTC and the RNN language model (LM) [22] as follows:

Yˆ = argmax {λ log ps2s(Y |Xe) + (1 − λ) log pctc(Y |Xe)
Y ∈Y∗

+ γ log plm(Y )},

(15)

where Y∗ is a set of hypotheses of the target sequence, and γ, λ are hyperparameters.
5. ST EXTENSIONS
In ST, S2S receives the same source speech feature and target token sequences in ASR but the source and target languages are different. Its modules are also deﬁned in the same ways as in ASR. However, ST cannot cooperate with the CTC module introduced in Section 4.3 because the translation task does not guarantee the monotonic alignment of the source and target sequences unlike ASR [23].
6. TTS EXTENSIONS
In the TTS framework, the S2S generates a sequence of log-mel ﬁlterbank features and predicts the probabilities of the end of sequence (EOS) given an input character sequence [15].
6.1. TTS encoder architecture
The input of the encoder in TTS is a sequence of IDs corresponding to the input characters and the EOS symbol. First, the character ID sequence is converted into a sequence of character vectors with an embedding layer, and then the positional encoding scaled by a learnable scalar parameter is added to the vectors [4]. This process is a TTS implementation of EncPre(·) in Eq. (1). Finally, the encoder EncBody(·) in Eq. (2) transforms this input sequence into a sequence of encoded features for the decoder network.
6.2. TTS decoder architecture
The inputs of the decoder in TTS are a sequence of encoder features and a sequence of log-mel ﬁlterbank features. In training, ground-truth log-mel ﬁlterbank features are used with an teacherforcing manner while in inference, predicted ones are used with an autoregressive manner.
First, the target sequence of 80-dim log-mel ﬁlterbank features is converted into a sequence of hidden features by Prenet [15] as a TTS implementation of DecPre(·) in Eq. (3). This network consists of two linear layers with 256 units, a ReLU activation function, and dropout followed by a projection linear layer with datt units. Since it is expected that the hidden representations converted by Prenet are located in the similar feature space to that of encoder features, Prenet helps to learn a diagonal encoder-decoder attention [4]. Then the decoder DecBody(·) in Eq. (4), whose architecture is the same as the encoder, transforms the sequence of encoder features and that of hidden features into a sequence of decoder features. Two linear layers are applied for each frame of Yd to calculate the target feature and the probability of the EOS, respectively. Finally, Postnet [15] is applied to the sequence of predicted target features to predict its components in detail. Postnet is a ﬁve-layer CNN, each layer of which is a 1d convolution with 256 channels and a kernel size of 5 followed by batch normalization, a tanh activation function, and dropout. These modules are a TTS implementation of DecPost(·) in Eq. (5).
6.3. TTS training and decoding
In TTS training, the whole network is optimized to minimize two loss functions in TTS; 1) L1 loss for the target features and 2) binary cross entropy (BCE) loss for the probability of the EOS. To address

the issue of class imbalance in the calculation of the BCE, a constant weight (e.g. 5) is used for a positive sample [4].
Additionally, we apply a guided attention loss [24] to accelerate the learning of diagonal attention to only the two heads of two layers from the target side. This is because it is known that the encoderdecoder attention matrices are diagonal in only certain heads of a few layers from the target side [4]. We do not introduce any hyperparameters to balance the three loss values. We simply add them all together.
In inference, the network predicts the target feature of the next frame in an autoregressive manner. And if the probability of the EOS becomes higher than a certain threshold (e.g. 0.5), the network will stop the prediction.

7.1. Dataset

7. ASR EXPERIMENTS

In Table 1, we summarize the 15 datasets we used in our ASR experiment. Our experiment covered various topics in ASR including recording (clean, noisy, far-ﬁeld, etc), language (English, Japanese, Mandarin Chinese, Spanish, Italian) and size (10 - 960 hours). Except for JSUT [25] and Fisher-CALLHOME Spanish, our data preparation scripts are based on Kaldi’s “s5x” recipe [7]. Technically, we tuned all the conﬁgurations (e.g., feature extraction, SentencePiece [19], language modeling, decoding, data augmentation [26], [27]) except for the training stage to their optimum in the existing RNN-based system. We used data augmentation for several corpora. For example, we applied speed perturbation [27] at ratio 0.9, 1.0 and 1.1 to CSJ, CHiME4, Fisher-CALLHOME Spanish, HKUST, and TED-LIUM2/3, and we also applied SpecAugment [26] to Aurora4, LibriSpeech, TED-LIUM2/3 and WSJ.2

7.2. Settings
We adopted the same architecture for Transformer in [41] (e = 12, d = 6, dff = 2048, dhead = 4, datt = 256) for every corpus except for the largest, LibriSpeech (dhead = 8, datt = 512). For RNN, we followed our existing best architecture conﬁgured on each corpus as in previous studies [17], [42].
Transformer requires a different optimizer conﬁguration from RNN because Transformer’s training iteration is eight times faster and its update is more ﬁne-grained than RNN. For RNN, we followed existing best systems for each corpus using Adadelta [43] with early stopping. To train Transformer, we basically followed the previous literature [2] (e.g., dropout, learning rate, warmup steps). We did not use development sets for early stopping in Transformer. We simply ran 20 – 200 epochs (mostly 100 epochs) and averaged the model parameters stored at the last 10 epochs as the ﬁnal model.
We conducted our training on a single GPU for larger corpora such as LibriSpeech, CSJ and TED-LIUM3. We also conﬁrmed that the emulation of multiple GPUs using accumulating gradients over multiple forward/backward steps [5] could result in similar performance with those corpora. In the decoding stage, Transformer and RNN share the same conﬁguration for each corpus, for example, beam size (e.g., 20 – 40), CTC weight λ (e.g., 0.3), and LM weight γ (e.g., 0.3 – 1.0) introduced in Section 4.3.
2We chose datasets to apply these data augmentation methods by preliminary experiments with our RNN-based system.

1.0

0.9

Validation accuracy

0.8 0.7 0.6 0.5 0
Fig. 2.

ASR

100000
training

Transformer 1GPU (best acc 0.930060) Transformer 2GPU (best acc 0.931801) Transformer 4GPU (best acc 0.948303) RNN 1GPU (best acc 0.905068) RNN 2GPU (best acc 0.885973) RNN 4GPU (best acc 0.895651)

200000

300000

Time [sec]

400000

500000

curve with LibriSpeech dataset. Minibatches

had the maximum number of utterances for each models on GPUs.

7.3. Results

Table 2 summarizes the ASR results in terms of character/word error rate (CER/WER) on each corpora. It shows that Transformer outperforms RNN on 13/15 corpora in our experiment. Although our system has no pronunciation dictionary, part-of-speech tag nor alignment-based data cleaning unlike Kaldi, our Transformer provides comparable CER/WERs to the HMM-based system, Kaldi on 7/12 corpora. We conclude that Transformer has ability to outperform the RNN-based end-to-end system and the DNN/HMM-based system even in low resource (JSUT), large resource (LibriSpeech, CSJ), noisy (AURORA4) and far-ﬁeld (REVERB) tasks. Table 3 also summarizes the LibriSpeech ASR benchmark with ours and other reports because it is one of the most competitive task. Our transformer results are comparable to the best performance in [26], [44], [45].
Fig. 2 shows an ASR training curve obtained with multiple GPUs on LibriSpeech. We observed that Transformer trained with a larger minibatch became more accurate while RNN did not. On the other hand, when we use a smaller minibatch for Transformer, it typically became under-ﬁtted after the warmup steps. In this task, Transformer achieved the best accuracy provided by RNN about eight times faster than RNN with a single GPU.

7.4. Discussion
We summarize the training tips we observed in our experiment:
• When Transformer suffers from under-ﬁtting, we recommend increasing the minibatch size because it also results in a faster training time and better accuracy simultaneously unlike any other hyperparameters.
• The accumulating gradient strategy [5] can be adopted to emulate the large minibatch if multiple GPUs are unavailable.
• While dropout did not improve the RNN results, it is essential for Transformer to avoid over-ﬁtting.
• We tried several data augmentation methods [26], [27]. They greatly improved both Transformer and RNN.
• The best decoding hyperparameters γ, λ for RNN are generally the best for Transformer.
Transformer’s weakness is decoding. It is much slower than Kaldi’s system because the self-attention requires O(n2) in a naive implementation, where n is the speech length. To directly compare the performance with DNN-HMM based ASR systems, we need to develop a faster decoding algorithm for Transformer.

8. MULTILINGUAL ASR EXPERIMENTS
This section compares the ASR performance of RNN and Transformer in a multilingual setup given the success of Transformer for

Table 1. ASR dataset description. Names listed in “test sets” correspond to ASR results in Table 2. We enlarged corpora marked with (*) by the external WSJ train si284 dataset (81 hours).

dataset

language hours

speech

test sets

AISHELL [28]

zh

AURORA4 [29] (*)

en

CSJ [30]

ja

CHiME4 [31] (*)

en

CHiME5 [32]

en

Fisher-CALLHOME Spanish

es

HKUST [33]

zh

JSUT [25]

ja

LibriSpeech [34]

en

REVERB [35] (*)

en

SWITCHBOARD [36]

en

TED-LIUM2 [37]

en

TED-LIUM3 [38]

en

VoxForge [39]

it

WSJ [40]

en

170

read

dev / test

15

noisy read

(dev 0330) A / B / C / D

581

spontaneous

eval1 / eval2 / eval3

108

noisy far-ﬁeld multi-ch read

dt05 simu / dt05 real / et05 simu / et05 real

40 noisy far-ﬁeld multi-ch conversational

dev worn / kinect

170

telephone conversational

dev / dev2 / test / devtest / evltest

200

telephone conversational

dev

10

read

(our split)

960

clean/noisy read

dev clean / dev other / test clean / test other

124

far-ﬁeld multi-ch read

et near / et far

260

telephone conversational

(eval2000) callhm / swbd

118

spontaneous

dev / test

452

spontaneous

dev / test

16

read

(our split)

81

read

dev93 / eval92

Table 2. ASR results of char/word error rates. Results marked with (*) were evaluated in our environment because the ofﬁcial results were not provided. Kaldi ofﬁcial results were retrieved from the version “c7876a33”.

dataset

token error

Kaldi (s5)

ESPnet RNN (ours)

ESPnet Transformer (ours)

AISHELL

char CER

N/A / 7.4

6.8 / 8.0

6.0 / 6.7

AURORA4

char WER (*) 3.6 / 7.7 / 10.0 / 22.3

3.5 / 6.4 / 5.1 / 12.3

3.3 / 6.0 / 4.5 / 10.6

CSJ

char CER

(*) 7.5 / 6.3 / 6.9

6.6 / 4.8 / 5.0

5.7 / 4.1 / 4.5

CHiME4

char WER

6.8 / 5.6 / 12.1 / 11.4

9.5 / 8.9 / 18.3 / 16.6

9.6 / 8.2 / 15.7 / 14.5

CHiME5

char WER

47.9 / 81.3

59.3 / 88.1

60.2 / 87.1

Fisher-CALLHOME Spanish char WER

N/A 27.9 / 27.8 / 25.4 / 47.2 / 47.9 27.0 / 26.3 / 24.4 / 45.3 / 46.2

HKUST

char CER

23.7

27.4

23.5

JSUT

char CER

N/A

20.6

18.7

LibriSpeech

BPE WER

3.9 / 10.4 / 4.3 / 10.8

3.1 / 9.9 / 3.3 / 10.8

2.2 / 5.6 / 2.6 / 5.7

REVERB

char WER

18.2 / 19.9

24.1 / 27.2

15.5 / 19.0

SWITCHBOARD

BPE WER

18.1 / 8.8

28.5 / 15.6

18.1 / 9.0

TED-LIUM2

BPE WER

9.0 / 9.0

11.2 / 11.0

9.3 / 8.1

TED-LIUM3

BPE WER

6.2 / 6.8

14.3 / 15.0

9.7 / 8.0

VoxForge

char CER

N/A

12.9 / 12.6

9.4 / 9.1

WSJ

char WER

4.3 / 2.3

7.0 / 4.7

6.8 / 4.4

Table 3. Comparison of the Librispeech ASR benchmark

dev clean dev other test clean test other

RWTH (E2E) [44]

2.9

8.8

3.1

9.8

RWTH (HMM) [45]

2.3

5.2

2.7

5.7

Google SpecAug. [26]

N/A

N/A

2.5

5.8

ESPnet Transformer (ours)

2.2

5.6

2.6

5.7

the monolingual ASR tasks in the previous section. In accordance with [46], we prepared 10 different languages, namely WSJ (English), CSJ (Japanese) [30], HKUST [33] (Mandarin Chinese), and VoxForge (German, Spanish, French, Italian, Dutch, Portuguese, Russian). The model is based on a single multilingual model, where the parameters are shared across all the languages and whose output units include the graphemes of all 10 languages (totally 5,297 graphemes and special symbols). We used a default setup for both RNN and Transformer introduced in Section 7.2 without RNNLM shallow fusion [21].
Figure 3 clearly shows that our Transformer signiﬁcantly outperformed our RNN in 9 languages. It realized a more than 10% relative improvement in 8 languages and with the largest value of 28.0% for relative improvement in VoxForge Italian. When compared with the RNN result reported in [46], which used a deeper BLSTM (7 layer) and RNNLM, our Transformer still provided superior performance in 9 languages. From this result, we can conclude that Transformer also outperforms RNN in multilingual end-to-end ASR.

Watanabe et al. RNN 50.0

ESPnet RNN (ours)

ESPnet Transformer (ours)

40.0

Character Error Rate (%)

30.0

20.0

10.0

0.0

German EnglishSpanish French

Italian anese Jap

Dutch guese ssian darin erage rtu Ru Man Av
Po

Fig. 3. Comparison of multilingual end-to-end ASR with the RNN

in Watanabe et al. [46], ESPnet RNN, and ESPnet Transformer.

9. SPEECH TRANSLATION EXPERIMENTS
Our baseline end-to-end ST RNN is based on [23], which is similar to the RNN structure used in our ASR system, but we did not use a convolutional LSTM layer in the original paper. The conﬁguration of our ST Transformer was the same as that of our ASR system.
We conducted our ST experiment on the Fisher-CALLHOME English–Spanish corpus [47]. Our Transformer improved the BLEU score to 17.2 from our RNN baseline BLEU 16.5 on the CALLHOME “evltest” set. While training Transformer, we observed more serious under-ﬁtting than with RNN. The solution for this is to use the pretrained encoder from our ASR experiment since the ST dataset contains Fisher-CALLHOME Spanish corpus used in our

L1 loss

1.0

T(1acGoPtUro,nB2evstalliodsast=io0n.3lo2s9s)

0.8

T(1raGnPsUfo,rBmeesrt vloaslisd=a0ti.o3n20lo)ss

0.6

T(3raGnPsUfosr,mBeerstvalolisdsa=ti0o.n31lo6s)s

0.4

0 20000 40000Time [sec]60000 80000 100000

Fig. 4. TTS training curve on M-AILABS.

1.0

T(1acGoPtUro,nB2evstalliodsast=io0n.3lo9s0s)

0.8

T(3raGnPsUfosr,mBeerstvalolisdsa=ti0o.n39lo8s)s

0.6

0.4
0 20000 40000Time [sec]60000 80000 100000
Fig. 5. TTS training curve on LJSpeech.

L1 loss

ASR experiment.
10. TTS EXPERIMENTS
10.1. Settings
Our baseline RNN-based TTS model is Tacotron 2 [15]. We followed its model and optimizer setting. We reuse existing TTS recipes including those for data preparation and waveform generation that we conﬁgured to be the best for RNN. We conﬁgured our Transformer-based conﬁgurations introduced in Section 3 as follows: e = 6, d = 6, datt = 384, dff = 1536, dhead = 4. The input for both systems was the sequence of characters.
10.2. Results
We compared Transformer and RNN based TTS using two corpora: M-AILABS [48] (Italian, 16 kHz, 31 hours) and LJSpeech [49] (English, 22 kHz, 24 hours). A single Italian male speaker (Riccardo) was used in the case of M-AILABS. Figures 4 and 5 show training curves in the two corpora. In these ﬁgures, Transformer and RNN provide similar L1 loss convergence. As seen in ASR, we observed that a larger minibatch results in better validation L1 loss for Transformer and faster training, while it has a detrimental effect on the L1 loss for RNN. We also provide generated speech melspectrograms in Fig. 6 and 73. We conclude that Transformer-based TTS can achieve almost the same performance as RNN-based.
10.3. Discussion
Our lessons for training Transformer in TTS are as follows:
• It is possible to accelerate TTS training by using a large minibatch as well as ASR if a lot of GPUs are available.
• The validation loss value, especially BCE loss, could be overﬁtted more easily with Transformer. We recommend monitoring attention maps rather than the loss when checking its convergence.
• Some heads of attention maps in Transformer are not always diagonal as found with Tacotron 2. We needed to select where to apply the guided attention loss [24].
3Our audio samples generated by Tacotron 2, Transformer, and FastSpeech are available at https://bit.ly/329gif5

60 40 20 0

60 40 20 0

60

40

20

00

50

100

150

200

Time [frame]

Fig. 6. Samples of mel-spectrograms on M-AILABs. (top) ground-

truth, (middle) Tacotron 2 sample, (bottom) Transformer sample. The input text is “E PERCHE` SUBITO VIENE IN MENTE CHE IDDIO NON PUO` AVER FATTO UNA COSA INGIUSTA”.

60 40 20 0

60 40 20 0

60

40

20

00

100

200

300

400

500

Time [frame]

Fig. 7. Samples of mel-spectrograms on LJSpeech. (top) ground-

truth, (middle) Tacotron 2 sample, (bottom) Transformer sample.

The input text is “IS NOT CONSISTENT WITH THE STANDARDS

WHICH THE RESPONSIBILITIES OF THE SECRET SERVICE RE-

QUIRE IT TO MEET.”.

• Decoding ﬁlterbank features with Transformer is also slower than with RNN (6.5 ms vs 78.5 ms per frame, on CPU w/ single thread). We also tried FastSpeech [50], which realizes nonautoregressive Transformer-based TTS. It greatly improves the decoding speed (0.6 ms per frame, on CPU w/ single thread) and generates comparable quality of speech with the autoregressive Transformer.
• A reduction factor introduced in [51] was also effective for Transformer. It can greatly reduce training and inference time but slightly degrades the quality.
As future work, we need further investigation of the trade off between training speed and quality, and the introduction of ASR techniques (e.g., data augmentation, speech enhancement) for TTS.

11. SUMMARY
We presented a comparative study of Transformer and RNN in speech applications with various corpora, namely ASR (15 monolingual + one multilingual), ST (one corpus), and TTS (two corpora). In our experiments on these tasks, we obtained the promising results including huge improvements in many ASR tasks and explained how we improved our models. We believe that the reproducible recipes, pretrained models and training tips described in this paper will accelerate Transformer research directions on speech applications.

12. REFERENCES
[1] A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones, A. Gomez, L. Kaiser, and I. Polosukhin, “Attention is all you need,” in Advances in Neural Information Processing Systems 30, 2017, pp. 5998–6008.
[2] L. Dong, S. Xu, and B. Xu, “Speech-transformer: A norecurrence sequence-to-sequence model for speech recognition,” in ICASSP, 2018, pp. 5884–5888.
[3] L. Cross Vila, C. Escolano, J. A. R. Fonollosa, and M. R. Costa-Jussa`, “End-to-end speech translation with the transformer,” in Proc. IberSPEECH 2018, 2018, pp. 60–63.
[4] N. Li, S. Liu, Y. Liu, S. Zhao, M. Liu, and M. T. Zhou, “Neural speech synthesis with transformer network,” in The AAAI Conference on Artiﬁcial Intelligence (AAAI), 2019.
[5] M. Ott, S. Edunov, D. Grangier, and M. Auli, “Scaling neural machine translation,” in Proceedings of the Third Conference on Machine Translation: Research Papers, 2018, pp. 1–9.
[6] A. Vaswani, S. Bengio, E. Brevdo, F. Chollet, A. Gomez, S. Gouws, L. Jones, Ł. Kaiser, N. Kalchbrenner, N. Parmar, R. Sepassi, N. Shazeer, and J. Uszkoreit, “Tensor2Tensor for neural machine translation,” in Proceedings of the 13th Conference of the Association for Machine Translation in the Americas, 2018, pp. 193–199.
[7] D. Povey, A. Ghoshal, G. Boulianne, L. Burget, O. Glembek, N. Goel, M. Hannemann, P. Motlicek, Y. Qian, P. Schwarz, J. Silovsky, G. Stemmer, and K. Vesely, “The Kaldi speech recognition toolkit,” in IEEE 2011 Workshop on Automatic Speech Recognition and Understanding, 2011.
[8] S. Watanabe, T. Hori, S. Karita, T. Hayashi, J. Nishitoba, Y. Unno, N. Enrique Yalta Soplin, J. Heymann, M. Wiesner, N. Chen, A. Renduchintala, and T. Ochiai, “ESPnet: End-toend speech processing toolkit,” in Proc. Interspeech, 2018, pp. 2207–2211.
[9] M. Popel and O. Bojar, “Training tips for the transformer model,” Prague Bull. Math. Linguistics, vol. 110, pp. 43–70, 2018.
[10] S. M. Lakew, M. Cettolo, and M. Federico, “A comparison of transformer and recurrent neural networks on multilingual neural machine translation,” in Proceedings of the 27th International Conference on Computational Linguistics, 2018, pp. 641–652.
[11] S. Zhou, L. Dong, S. Xu, and B. Xu, “Syllable-based sequence-to-sequence speech recognition with the transformer in Mandarin Chinese,” in Proc. Interspeech, 2018, pp. 791–795.
[12] I. Sutskever, O. Vinyals, and Q. V. Le, “Sequence to sequence learning with neural networks,” in Advances in Neural Information Processing Systems 27, Z. Ghahramani, M. Welling, C. Cortes, N. D. Lawrence, and K. Q. Weinberger, Eds., 2014, pp. 3104–3112.
[13] D. Bahdanau, K. Cho, and Y. Bengio, “Neural machine translation by jointly learning to align and translate,” International Conference on Learning Representations, 2015.
[14] W. Chan, N. Jaitly, Q. Le, and O. Vinyals, “Listen, attend and spell: A neural network for large vocabulary conversational speech recognition,” ICASSP, vol. 2016-May, pp. 4960– 4964, 2016.

[15] J. Shen, R. Pang, R. J. Weiss, M. Schuster, N. Jaitly, Z. Yang, Z. Chen, Y. Zhang, Y. Wang, R. Ryan, R. A. Saurous, Y. Agiomyrgiannakis, and Y. Wu, “Natural TTS synthesis by conditioning wavenet on MEL spectrogram predictions,” in ICASSP, 2018, pp. 4779–4783.
[16] A. Graves, S. Ferna´ndez, F. J. Gomez, and J. Schmidhuber, “Connectionist temporal classiﬁcation: Labelling unsegmented sequence data with recurrent neural networks,” in ICML, ser. ACM International Conference Proceeding Series, vol. 148, 2006, pp. 369–376.
[17] T. Hori, J. Cho, and S. Watanabe, “End-to-end speech recognition with word-based rnn language models,” in 2018 IEEE Spoken Language Technology Workshop, SLT 2018, Athens, Greece, December 18-21, 2018, 2018, pp. 389–396.
[18] T. Luong, H. Pham, and C. D. Manning, “Effective approaches to attention-based neural machine translation,” in Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing, 2015, pp. 1412–1421.
[19] T. Kudo and J. Richardson, “SentencePiece: A simple and language independent subword tokenizer and detokenizer for neural text processing,” in Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing: System Demonstrations, 2018, pp. 66–71.
[20] P. Ghahremani, B. BabaAli, D. Povey, K. Riedhammer, J. Trmal, and S. Khudanpur, “A pitch extraction algorithm tuned for automatic speech recognition,” in ICASSP, 2014, pp. 2494–2498.
[21] T. Hori, S. Watanabe, Y. Zhang, and W. Chan, “Advances in joint CTC-attention based end-to-end speech recognition with a deep CNN encoder and RNN-LM,” in Proc. Interspeech, 2017, pp. 949–953.
[22] T. Mikolov, M. Karaﬁat, L. Burget, J. Cernocky, and S. Khudanpur, “Recurrent neural network based language model,” Proc. Interspeech, pp. 1045–1048, 2010.
[23] R. J. Weiss, J. Chorowski, N. Jaitly, Y. Wu, and Z. Chen, “Sequence-to-sequence models can directly translate foreign speech,” in Proc. Interspeech, 2017, pp. 2625–2629.
[24] H. Tachibana, K. Uenoyama, and S. Aihara, “Efﬁciently trainable text-to-speech system based on deep convolutional networks with guided attention,” in ICASSP, IEEE, 2018, pp. 4784–4788.
[25] R. Sonobe, S. Takamichi, and H. Saruwatari, “JSUT corpus: Free large-scale japanese speech corpus for end-to-end speech synthesis,” CoRR, vol. abs/1711.00354, 2017.
[26] D. S. Park, W. Chan, Y. Zhang, C. Chiu, B. Zoph, E. D. Cubuk, and Q. V. Le, “SpecAugment: A simple data augmentation method for automatic speech recognition,” in ArXiv, 2019.
[27] T. Ko, V. Peddinti, D. Povey, and S. Khudanpur, “Audio augmentation for speech recognition,” in Sixteenth Annual Conference of the International Speech Communication Association, 2015.
[28] H. Bu, J. Du, X. Na, B. Wu, and H. Zheng, “AISHELL1: An open-source Mandarin speech corpus and a speech recognition baseline,” in 2017 20th Conference of the Oriental Chapter of the International Coordinating Committee on Speech Databases and Speech I/O Systems and Assessment (O-COCOSDA), 2017, pp. 1–5.

[29] D. Pearce and J. Picone, “Aurora working group: Dsr front end lvcsr evaluation au/384/02,” Inst. for Signal & Inform. Process., Mississippi State Univ., Tech. Rep, 2002.
[30] K. Maekawa, H. Koiso, S. Furui, and H. Isahara, “Spontaneous speech corpus of Japanese,” in Proceedings of the Second International Conference on Language Resources and Evaluation (LREC’00), 2000.
[31] J. Barker, R. Marxer, E. Vincent, and S. Watanabe, “The third CHiME speech separation and recognition challenge: Analysis and outcomes,” Computer Speech & Language, vol. 46, pp. 605–626, 2017.
[32] J. Barker, S. Watanabe, E. Vincent, and J. Trmal, “The ﬁfth ’CHiME’ speech separation and recognition challenge: Dataset, task and baselines,” in Proc. Interspeech, 2018, pp. 1561–1565.
[33] Y. Liu, P. Fung, Y. Yang, C. Cieri, S. Huang, and D. Graff, “HKUST/MTS: A very large scale mandarin telephone speech corpus,” in Chinese Spoken Language Processing, 2006, pp. 724–735.
[34] V. Panayotov, G. Chen, D. Povey, and S. Khudanpur, “LibriSpeech: An ASR corpus based on public domain audio books,” in ICASSP, 2015, pp. 5206–5210.
[35] K. Kinoshita, M. Delcroix, S. Gannot, E. A. P. Habets, R. Haeb-Umbach, W. Kellermann, V. Leutnant, R. Maas, T. Nakatani, B. Raj, A. Sehr, and T. Yoshioka, “The REVERB challenge: A benchmark task for reverberation-robust asr techniques,” in New Era for Robust Speech Recognition: Exploiting Deep Learning, 2017, pp. 345–354.
[36] J. Godfrey, E. Holliman, and J. McDaniel, “SWITCHBOARD: Telephone speech corpus for research and development,” in ICASSP, vol. 1, 1992, pp. 517–520.
[37] A. Rousseau, P. Deleglise, and Y. Esteve, “TED-LIUM: An automatic speech recognition dedicated corpus,” in Proceedings of the Eighth International Conference on Language Resources and Evaluation (LREC’12), 2012.
[38] F. Hernandez, V. Nguyen, S. Ghannay, N. Tomashenko, Y. Esteve, O. Jokisch, and R. Potapova, “TED-LIUM 3: Twice as much data and corpus repartition for experiments on speaker adaptation,” in Speech and Computer, 2018, pp. 198–208.
[39] VoxForge, http://www.voxforge.org.
[40] D. B. Paul and J. M. Baker, “The design for the Wall Street Journal-based CSR corpus,” in Proceedings of the Workshop on Speech and Natural Language, ser. HLT ’91, 1992, pp. 357–362.
[41] S. Karita, N. E. Y. Soplin, S. Watanabe, M. Delcroix, A. Ogawa, and T. Nakatani, “Improving Transformer-Based End-to-End Speech Recognition with Connectionist Temporal Classiﬁcation and Language Model Integration,” in Proc. Interspeech, 2019, pp. 1408–1412.
[42] A. Zeyer, K. Irie, R. Schluter, and H. Ney, “Improved training of end-to-end attention models for speech recognition,” in Proc. Interspeech, 2018, pp. 7–11.
[43] M. D. Zeiler, “Adadelta: An adaptive learning rate method,” CoRR, vol. abs/1212.5701, 2012.

[44] K. Irie, A. Zeyer, R. Schlu¨ter, and H. Ney, “Language modeling with deep transformers,” ArXiv preprint arXiv:1905.04226, 2019.
[45] C. Lu¨scher, E. Beck, K. Irie, M. Kitza, W. Michel, A. Zeyer, R. Schlu¨ter, and H. Ney, “RWTH ASR systems for LibriSpeech: Hybrid vs attention-w/o data augmentation,” ArXiv preprint arXiv:1905.03072, 2019.
[46] S. Watanabe, T. Hori, and J. R. Hershey, “Language independent end-to-end architecture for joint language identiﬁcation and speech recognition,” in IEEE Automatic Speech Recognition and Understanding Workshop (ASRU), IEEE, 2017, pp. 265–271.
[47] M. Post, G. Kumar, A. Lopez, D. Karakos, C. CallisonBurch, and S. Khudanpur, “Improved speech-to-text translation with the Fisher and Callhome Spanish–English speech translation corpus,” in Proceedings of the International Workshop on Spoken Language Translation (IWSLT), 2013.
[48] I. Solak, The M-AILABS speech dataset, https://www. caito . de / 2019 / 01 / the - m - ailabs - speech dataset/, 2019.
[49] K. Ito, The LJ Speech dataset, https : / / keithito . com/LJ-Speech-Dataset/, 2017.
[50] Y. Ren, Y. Ruan, X. Tan, T. Qin, S. Zhao, Z. Zhao, and T.-Y. Liu, “FastSpeech: Fast, robust and controllable text to speech,” ArXiv e-prints, arXiv:1905.09263, arXiv:1905.09263, 2019.
[51] Y. Wang, R. Skerry-Ryan, D. Stanton, Y. Wu, R. J. Weiss, N. Jaitly, Z. Yang, Y. Xiao, Z. Chen, S. Bengio, Q. Le, Y. Agiomyrgiannakis, R. Clark, and R. A. Saurous, “Tacotron: Towards End-to-End Speech Synthesis,” in Proc. Interspeech, 2017, pp. 4006–4010.

