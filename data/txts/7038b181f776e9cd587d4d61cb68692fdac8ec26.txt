1
Koopman Operator Applications in Signalized Trafﬁc Systems
Esther Ling, Student Member, IEEE, Liyuan Zheng, Student Member, IEEE, Lillian J. Ratliff, Member, IEEE, and Samuel Coogan, Member, IEEE

arXiv:1902.11289v1 [math.DS] 28 Feb 2019

Abstract—This paper proposes Koopman operator theory and the related algorithm dynamical mode decomposition (DMD) for analysis and control of signalized trafﬁc ﬂow networks. DMD provides a model-free approach for representing complex oscillatory dynamics from measured data, and we study its application to several problems in signalized trafﬁc. We ﬁrst study a single signalized intersection, and we propose applying this method to infer trafﬁc signal control parameters such as phase timing directly from trafﬁc ﬂow data. Next, we propose using the oscillatory modes of the Koopman operator, approximated with DMD, for early identiﬁcation of unstable queue growth that has the potential to cause cascading congestion. Then we demonstrate how DMD can be coupled with knowledge of the trafﬁc signal control status to determine trafﬁc signal control parameters that are able to reduce queue lengths. Lastly, we demonstrate that DMD allows for determining the structure and the strength of interactions in a network of signalized intersections. All examples are demonstrated using a case study network instrumented with high resolution trafﬁc ﬂow sensors.
Index Terms—Koopman Operator, big data, time-series, dynamic mode decomposition, queue modeling, signal and phase estimation, instability detection, trafﬁc prediction
I. INTRODUCTION
Trafﬁc sensors at signalized intersections are becoming ubiquitous as more cities move towards enabling intelligent transportation systems. Developing real-time event monitoring and forecasting systems remains an open problem, with the large data streams presenting a rich source to mine. In this regard, trafﬁc forecasting has been well studied, ranging from auto-regressive integrated moving average (ARIMA) models [1], [2], partial least-squares regression [3], [4], neural networks [5], [6] and multi-variable state-space methods [7]. Other than predicting future ﬂow, a good forecasting model also provides insight into trafﬁc patterns. Understanding the effect of propagation patterns can inform strategies on addressing bottlenecks and congestion. Some studies that focus on such qualitative analysis include [8], [9] and [10]. In this paper, we pursue both avenues by using a model that
This work was funded in part by the National Science Foundation under Awards 1749357 and 1736582
E. Ling is with the School of Electrical and Computer Engineering, Georgia Institute of Technology, Atlanta, GA 30332 USA (e-mail: lingesther@gatech.edu).
S. Coogan is with the School of Electrical and Computer Engineering and the School of Civil and Environmental Engineering, Georgia Institute of Technology, Atlanta, GA 30332 USA (e-mail: sam.coogan@gatech.edu).
L. Zheng and L. Ratliff are with the Department of Electrical Engineering, University of Washington, Seattle, WA, 98195 USA (e-mail: liyuanz8@uw.edu; ratlifﬂ@uw.edu).

makes quantitative predictions as well as provides qualitative information on characteristics of the intersection.
A major difﬁculty in modeling trafﬁc is its nonlinear behavior [11]. This nonlinearity is especially pronounced at signalized intersections due to large short-term ﬂuctuations induced by trafﬁc signaling and unstable conditions arising from congestion [7]. According to [12], higher oscillations in arterials decrease forecasting accuracy of models by 10%20%. This suggests a need for developing new approaches that especially leverage high resolution measurements for signalized trafﬁc.
Inspired by recent advances in data-driven modeling of nonlinear and oscillatory dynamical systems, we propose using the Koopman operator framework for studying both quantitative and qualitiative properties of signalized trafﬁc networks using high-resolution—in both space and time—data. The Koopman operator framework jointly captures the ideas of (i) quantitative prediction, by modeling the underlying nonlinear dynamics via a corresponding linear operator that exactly captures the dynamics but operates in an inﬁnite dimensional space; and (ii) qualitative understanding, by studying the spectral properties of (ﬁnite-dimensional approximations) of this linear operator. Postulated by Koopman in 1931 [13], recent advances in applied Koopman Operator theory [14], [15] have led to a renewed interest in the theory, with applications in the ﬁelds of power systems [15], [16], [17], [18], image processing [19], quantitative ﬁnance [20], disease modeling [21] and neuro-science [22]. This paper aims to leverage Koopman Operator theory and its promising applications for large data in disparate domains to address quantitative and qualitative problems in signalized trafﬁc.
The main contributions of this paper are as follows. First, we provide an analysis of the structure of the Koopman operator learned from trafﬁc ﬂow data using the numerical technique of dynamic mode decomposition. We then show that, from this operator, we are able to extract Koopman modes that provide information about an intersection’s timing plan and phasesplits. Next, we propose a Koopman-based instability analysis technique for automated detection of prolonged growth in trafﬁc queues. Lastly, we highlight new analysis in modeling queues under modiﬁed timing parameters.
The remainder of the paper is organized as follows. Section II presents preliminary notation and deﬁnitions. In Section III, we provide brief theoretical background on the Koopman Operator and dynamic mode decomposition (DMD) and a review of Koopman Operator applications in other domains. In the next three sections, we highlight three applications of the

2

Koopman Operator to signalized trafﬁc at a single intersection: in Section IV, we demonstrate Koopman Mode analysis for the problem of inferring signal and phase timing information from trafﬁc ﬂow data. In particular, we explain how to recover cycle times, phase sequence and green-splits from measured vehicle ﬂows. In Section V, we use Koopman Eigenvalues for identifying extended growth in queue dynamics. In Section VI, we model queue dynamics using signal phases as exogenous input using dynamic mode decomposition with control. We show the effect of varying green times on the reconstructed queue at a particular leg. In Section VII, we consider a network of intersections and examine how the operator learned by DMD can be used to infer structural properties of the underlying network, drawing comparisons with ARIMA methods for multi-step prediction. Finally, we provide concluding remarks and future directions in Section VIII.

II. PRELIMINARIES
This paper considers networks of signalized intersections equipped with in-lane sensors that measure trafﬁc ﬂow. We will also sometimes assume direct access to queue measurements at the intersections, which are obtained by integrating the difference of the ﬂow at upstream and downstream sensors. We assume an intersection consists of up to four legs: SouthBound (SB), North-Bound (NB), East-Bound (EB) and WestBound (WB). Each leg has up to three movements: Left-Turn (LT), Through (T) and Right-Turn (RT). Therefore, collectively, an intersection may have up to 12 turn-movements. A phase consists of a collection of movements. Trafﬁc ﬂow at an intersection is governed by phase-splits or green-splits which allocate green time for each phase. The cycle time is the total time allotted to complete all phases once. The phase sequence is the relative ordering of each phase. Multiple phases can be active at once, and a barrier separates a group of phases with non-conﬂicting movements that are allowed to be simultaneously active; for example, the phases for {NBT, SBT} might form a valid barrier.
A. Dataset
As a running case study, this paper considers data collected from a seven intersection network in Maryland. Each intersection is equipped with sensors in incoming and outgoing lanes that detect the presence of vehicles. Vehicle detection events are recorded at the millisecond level, allowing high resolution measurements of trafﬁc ﬂow. In addition, sensors positioned upstream in incoming lanes allow for accurate realtime computation of queue lengths. In the applications below, we will consider both trafﬁc ﬂow and queue lengths as the particular data under consideration. In addition, the trafﬁc light status data is collected, e.g., the currently active phases are known at each time instant. Flow and queue data from a single intersection are used for the Koopman Operator applications in Sections IV and Sections V. These data are augmented with the trafﬁc signal status information for the application presented in Section VI. Flow data from all intersections in the network are used for the structural inference presented in Section VII.

Fig. 1. (Top) A case study trafﬁc network in Maryland consisting of 7 intersections is the basis for the case studies presented below. (Bottom) An example schematic of the sensors at one intersection. Sensors positioned at incoming and outgoing lanes provide high resolution information about vehicle ﬂow rates and queue lengths.
B. Notation
Using the above case study, in the sequel, we will often consider various data collected over certain lengths of time. In all cases, the data is aggregated into discrete time-steps, usually on the order of several seconds. Let xk ∈ Rd1 be the state data variable representing vehicle ﬂows or queues at time k where d1 is the number of sensors or measurement points in the (sub)-network under study. Given N measurement times, X1 ∈ Rd1×(N−1) is a data matrix constructed such that xk is the k-th column of X1 for k = 1, . . . , N − 1, i.e., The matrix X1 = x1 · · · xN−1 . X2 is constructed similarly with measurements k = 2, . . . , N , i.e, X2 is a time-shifted version of X1 containing observations X2 = x2 · · · xN .
Similarly, let uk ∈ {0, 1}d2 be the binary input variable representing the signal phases at time k where d2 is the number of possible phases in the (sub)network under consideration. If the i-th entry of uk is 0 (resp., 1), then the i-th phase is red (resp., green) at time k. Periods when the phase is in yellow or amber is considered part of the green time. U is the input data matrix whose columns are the input vectors uk so that U = u1 . . . uN−1 .
III. BACKGROUND THEORY AND REVIEW
A. Koopman Operator
Consider a discrete-time system that evolves according to a nonlinear law given by
zk+1 = T (zk) (1)
xk = f (zk)
where zk ∈ Rn is the state of the system at time k, T : Rn → Rn is a nonlinear vector map describing the evolution

3

of state trajectories, xk ∈ RM is the measured output, and f : Rn → RM is an observation function, also known as the output function, that maps states to measurements.
Given T , the Koopman operator K acts on scalar-valued
functions of the observation and is given by

(Kg)(zk) = g ◦ T = g(zk+1).

(2)

That is, K is the composition map that composes the function g with the state update map T . Observe that K is linear, although inﬁnite-dimensional. A function φj : Rn → R along with value λj ∈ C satisfying Kφj = λjφj is called an eigenfunction of K, and λj is the associated eigenvalue.
Assuming each component of the observation function f lies in the span of the these eigenfunctions, f can be written in terms of the spectral decomposition of K as

∞

∞

f (xk) = (Kkf )(x0) = φj(xk)ψj = λkj φj(x0)ψj (3)

j=1

j=1

where ψj ∈ CM is the Koopman mode corresponding to the Koopman eigenvalue λj belonging to the particular observable f . Also, since xk is vector-valued, we can isolate a particular spatial component and view it in terms of a basis expansion:

∞

f (xk(i)) = φj(xk(i))ψj(i),

(4)

j=1

= φ(xk(i))T ψ(i), ∀i = {1, ..., M }. (5)

We see that λj describes the temporal behaviour of ψj, where growth or decay is governed by |λj| and frequency of oscillation by ∠λj. Moreover, from (5), we view |ψj(i)| representing the weight of a variable i in a particular mode j. On the other hand, ∠ψj(i) describes the relative phase of oscillation of the variable.

B. Dynamic Mode Decomposition

The expansion (5) considers an inﬁnite number of terms

because, in general, K is inﬁnite-dimensional. However, from

a computational perspective, it is impractical to consider an

inﬁnite expansion of K. Moreover, it has been observed

that many high-dimensional systems may be approximated

well using a lower-dimensional subspace [23]. Data-driven

algorithms seek a ﬁnite-dimensional subspace on which to

approximate K [14]. The two main data-driven algorithms that

have been connected to approximating K are dynamic mode

decomposition (DMD) [24] and the Arnoldi algorithm [14]. In

this paper, we use DMD; for a recent book on this method,

see [25].

Schmid and Sesterhenn developed DMD in the context of

extracting coherent structures in high-dimensional ﬂuid data

[26], [27]. It is formulated as follows: given a sequence of N measurement vectors x1, x2, . . . , xN with each xk ∈ RM ,
form a pair of time-shifted data matrices X1 and X2 of dimension RM×(N−1):

|

|

|

|

X1 = x1 . . . xN−1 X2 = x2 . . . xN  . (6)









|

|

|

|

where N is the total number of snapshots. The next step is to ﬁnd a best ﬁt linear operator A that
minimizes the squared Frobenius norm between the two timeshifted matrices in (6), that is, ﬁnd A solving

min||X2 − AX1||2F .

(7)

A

It is known that the minimizing A ∈ RM×M is a ﬁnitedimensional approximation of K [28]. The minimization (7) has a closed form solution that employs the singular value decomposition (SVD) of X1 given by

A = X2X1† = X2V Σ−1U T

(8)

where † indicates the pseudo-inverse. Since rank(X1) = r ≤ min(M, N − 1), we have U ∈ RM×r, Σ ∈ Rr×r, V ∈ R(N−1)×r. If M is large, computing the eigen-decomposition of A directly is computationally intensive. To ameliorate this, DMD approximates the eigen-decomposition of a rankreduced A˜ ∈ Rr×r given by
A˜ = U T AU = U T X2V Σ−1. (9)

Further computational gains can be made if there is low-

rank structure in the dynamics. In this case, the number of

singular values in the SVD of X1 can be truncated to some

r˜ ≤ r so that

A˜ = U˜ T X2V˜ Σ˜ −1

(10)

where U˜ ∈ RM×r˜, Σ˜ ∈ Rr˜×r˜ and V˜ ∈ R(N−1)×r˜. The parameter r˜ is a design parameter chosen by, e.g., studying the decay of the singular values.
Given its historical origins, DMD was originally developed for the case when the spatial dimension M of the observation function is much greater than the number of observations N . If the converse is true, i.e. N M , then the original DMD formulation is inadequate for capturing the nonlinear dynamics fully [28], [29].
One common method to overcome this deﬁciency is to enrichen the observables by appending h time-shifted observations to the data matrices [25]. In this case, we construct matrices

|

|

|

|

x1 . . . xN−h 





 x2 . . . xN−h+1





 | |   |

| 





x2 . . . xN−h+1









 x3 . . . xN−h+2





X˜1

=

 

|



 

...



|





 X˜2 = 

|





...

 

 

...





| 



...

 



 

|

|

 

 

|

|

 





xh . . . xN−1 





 xh+1 . . . 

 xN 


|

|

|

|

(11)

with X˜1, X˜2 ∈ RhM×(N−h). The parameter h is chosen so that hM (N − h).

4

C. Adding Control

Including the effects of inputs can be critical for systems subject to control, as is the case with trafﬁc networks. In [30], DMD is extended to allow for an exogenous control input, and this technique is called dynamic mode decomposition with control (DMDc). DMDc considers the case of a dynamical system with input uk ∈ RQ acting on the system in time-step k.
DMDc ﬁrst collects inputs into a matrix U according to

|

|

U = u1 . . . uN−1 ,

(12)





|

|

and then computes A and B so that

X2 = AX1 + BU

X1

=A B

(13)

U

= GΩ

where G ∈ RM×(M+Q) and X1 and X2 are as previously. As before, if M < N , then X˜1 and X˜2 can be substituted for X1 and X2. In this case, a matrix U˜ ∈ RhQ×(N−h) is similarly constructed from U and used in place of U. Then, G can be computed by
G = X2Ω† = X2Vˆ Σˆ −1Uˆ T (14)

where Vˆ , Σˆ and Uˆ are from the SVD of Ω with Ω = Uˆ Σˆ Vˆ T . Since the ﬁrst M components in the left singular vectors
of Uˆ come from A, while the remaining Q components are from B, A and B can be determined from G by extracting the appropriate rows in Uˆ according to
A ≈ X2Vˆ Σˆ −1Uˆ1T B ≈ X2Vˆ Σˆ −1Uˆ2T (15)
Uˆ1 where Uˆ1 ∈ RM×r, Uˆ2 ∈ RQ×r and Uˆ = Uˆ2 .

D. Overview of Applications
Here, we provide a brief overview of Koopman Operator theory in various domains, which draw mainly from the ideas of model reduction [14] and modal decomposition. The basis for these ideas can be brieﬂy explained as follows: suppose that the ﬁrst R ≤ M Koopman modes capture a sufﬁcient amount of the system’s dynamics. Then, a reduced-order model can be approximated as

R

f (zk) = λkj φj (z0)ψj .

(16)

j=1

This idea of a constructing a reduced-order model using a partial set of the ﬁrst R terms leads to the idea of “separability”

in modes. Then, one could also group terms, for example, based on frequency of oscillation:

R1

R2

f (xk) = λkj φj (x0)ψj +

λkj φj(x0)ψj + ... (17)

j=1

j =R1 +1

This is called modal decomposition, i.e., partitioning of the system based on the frequency of the modes. Raak et. al [18] test this methodology to partition a power system network. Brunton et. al [19] separate foreground and background segments in a video, relating slow frequency modes with the background, and fast modes with the foreground.
The notion of growth and decaying modes has also been used in quantitative ﬁnance and power systems. In [20], the presence of growth or decay modes is used to assess proﬁtable periods for making a trade. In [17], the number density of unstable Koopman eigenvalues is used to demonstrate shortterm stability detection, using data from the 2006 European grid disturbance.
Clustering of modes oscillating at similar frequencies also leads to the idea of coherency analysis. In a power system, maintaining generators at the same synchronous frequency is crucial to the stability of the system. In [16], Koopman modes are used to identify groups of generators oscillating at coherent frequencies. In a disease modeling application, [21] use DMD to study how ﬂu and measles spread.
Koopman Operator applications to trafﬁc are limited, with one study involving freeway data [31] that compares dominant modes in morning and evening trafﬁc as a means of differentiating the dynamics in those two periods. Drawing from the applications in other domains reviewed here, we demonstrate three novel applications for signalized trafﬁc in this paper. Some preliminary results have been reported in [32].

IV. INTERPRETING MODES FOR SIGNAL AND PHASE TIMING ESTIMATION
In many cases, it is desirable to estimate trafﬁc signal control parameters such as phase timing directly from trafﬁc ﬂow data. For example, if a legacy trafﬁc control network is retroﬁtted with wireless sensors, the sensing infrastructure may not be connected to the trafﬁc control hardware and therefore may not have direct access to the status of the trafﬁc controller. In this section, we employ Koopman operator theory to estimate signal and phase timing parameters. These estimates can be used to, e.g., improve energy efﬁciency of vehicles [33] and [34].
Koopman Mode analysis is related to use of Koopman Modes to understand the spatio-temporal relationships in a system. In the case of a signalized intersection, the most interpretable spatio-temporal relationship would be the one induced by the phase-split. We apply Koopman Modes for the problem of signal and phase timing estimation, of which motivating examples can be found in [33] and [34]. In particular, we show how cycle time, phase sequence and green-splits can be recovered using Koopman Modes.
Our technique is tailored for the standard intersection with 8 phases as shown in Fig. 2, however, our basic approach can be generalized to other phase sequencing. We assume the phases

5

in Fig. 2 are governed by the timing plan in Table I, where each vertical pair of phases have the same green-split. This timing plan is assumed unknown, and we seek to estimate the parameters from trafﬁc ﬂow data. Let a, b, c and d represent the green-splits to be estimated so that a = p1 = p5s, b = p2 = p6s, c = p3 = p7s and d = p4 = p8s. We ﬁrst propose a method for estimating the cycle time C = a + b = c + d from a certain dominant Koopman eigenvalue. Then we propose a method for estimating the phase sequence.

Fig. 2. Ring and Barrier Diagram for Montrose Pkwy & E Jefferson St denoting the phase sequence. Each column of phases is active simultaneously.

Let λ1, λ2, . . . , λr and ψ1, ψ2, . . . , ψr denote a collection of DMD eigenvalues and DMD modes obtained from the trafﬁc ﬂow data as described above.
a) Estimating Cycle Time: Let λθ be the DMD eigenvalue with the largest real part and non-zero imaginary part. Then the cycle time C, in seconds, can be estimated according to

2π∆t

C=

.

(18)

Im(ln(λθ ))

b) Relative Phase Sequencing and Timing: Given λθ used for the cycle time estimation, consider its accompanying mode ψθ. Recall that ψθ is complexvalued and {∠ψθ(1), ..., ∠ψθ(M )} provide relative temporal information for each spatial component. We propose using these spatial components to estimate phase sequencing. First, the angles can be converted from radians to seconds by

αθ(i) = mod ∠ψθ(i) C, C . (19) 2π
for each i = 1, . . . , M where mod denotes the modulo operator. The modulo operation removes the possibility of αθ(i) obtaining a negative value. Thus, αθ(i) is a measure of the timing of phase i within the overall cycle length C.

TABLE I Weekday green-splits for Montrose Pkwy & E Jefferson St (courtesy MCDOT). (Left) 150s cycle from 0600-1000. (Right) 120s cycle from
1000-1500.

Phase

p1 p2 p3 p4

Length (s) 26 53 21 50

Phase

p5 p6 p7 p8

Length (s) 26 53 21 50

Phase

p1 p2 p3 p4

Length (s) 16 30 35 39

Phase

p5 p6 p7 p8

Length (s) 16 30 35 39

c) Green-Splits: Given the relative phase timing αθ(i), we are now in a position to compute the green-splits. From the relative temporal information in ψθ, the following set of computations are possible: (1) difference between through (T) movements from opposing barriers to compute b + c and d + a, (2) difference between left-turn (LT) movements from opposing barriers to compute a+b and c+d, and (3) difference between LT and T movements within the same barrier to compute a and c. Multiple estimations using different subset combinations can be averaged to determine a, b, c, and d.
Since the angles are relative to one another, there is some ambiguity to determine whether smaller angles precede larger angles, or vice versa. To address this, we assume that protected left-turns precede through movements within a leg. Given that the LT angles are larger than the T angles (Fig. 3), we infer that larger angles precede smaller angles sequentially.
Making use of this information, to compute the difference between movements from opposing barriers, we apply the max(·) operator on movements from the same barrier. For example, given that both the SBT and NBT movements are green concurrently, as are the EBT and WBT phases, the time difference between T movements can be computed using max(αθ(SBT ), αθ(N BT )) − max(αθ(W BT ), αθ(EBT )). (Note that if the LT angles are smaller than T angles, then we would instead apply the min(·) operator).
To ensure that the differences are appropriately computed while accounting for αθ wrapping around with a periodicity of C, we check for conditions when one movement is positive while its corresponding movement is negative. For example, if the cycle time is 150s and αθ(SBT ) = 60 while αθ(N BT ) = −55, the difference αθ(SBT ) − αθ(N BT ) would be incorrectly computed as 115. Noting that 60 is equivalent to −90, we can adjust αθ(SBT ) = −mod(−αθ(SBT ), C), and then αθ(SBT )−αθ(N BT ) would be returned as 35. The converse could also be true, where αθ(N BT ) = −55 is converted to 95. To disambiguate between the two possibilities, we check if the phases in the opposing barrier are mostly positive or negative. To be precise, denote the two sets B1 and B2 as:
B1 = {αθ(EBT ), αθ(EBLT ), αθ(W BT ), αθ(W BLT )}
B2 = {αθ(N BT ), αθ(N BLT ), αθ(SBT ), αθ(SBLT )}. (20)
Then, if |{B1|B1 > 0}| > 2, we would assume that most of the movements in the East-West barrier are positive, and so we would set αθ(SBT ) = −90. If the converse is true, then we would set αθ(N BT ) = 95. We summarize this in Alg. 1.
A. Case Study
We demonstrate the above estimation technique for cycle time, phase sequence, and green split timing on a case study using vehicle ﬂows at the Montrose Pkwy & E Jefferson St Intersection. Based on the timing plan for this intersection, on weekdays, it is known that there are two cycle times: 120s (for the hours 1000-1500 and 1900-0000) and 150s (for the hours 0600-1000 and 1500-1900), while during weekends, there is only a 120s cycle. Our goal is to estimate these cycle times, and the accomponing phase sequences and green splits, using

6

Algorithm 1 Adjust Angles

1: if αθ(SBT ) − αθ(N BT ) ≥ C/2 then

2: if |{B1|B1 > 0}| > 2 then

3:

αθ(SBT ) = −mod(−αθ(SBT ), C)

4: else

5:

αθ(N BT ) = mod(αθ(N BT ), C)

6: end if

7: else if αθ(SBT ) − αθ(N BT ) ≤ −C/2 then

8: if |{B1|B1 > 0}| > 2 then

9:

αθ(N BT ) = −mod(αθ(−N BT ), C)

10: else

11:

αθ(SBT ) = mod(αθ(SBT ), C)

12: end if

13: end if

14: Repeat steps 1-13 for SBLT and NBLT

15: Repeat steps 1-13 for WBT and EBT

16: Repeat steps 1-13 for WBLT and EBLT

Fig. 3. Phase-splits, in seconds, of the 150s mode for vehicle ﬂow from 0900-0930 on 14 February 2017 computed using angles obtained from the corresponding Koopman Mode.

First, we run an experiment on a test week of 12-18 February 2018, making hourly predictions of the cycle time rounded to the nearest integer, from 0600-2200 using N = 360 (Table II). The cycle time is correctly estimated within a tolerance of ±3 seconds with high accuracy on all the days. Here, we ﬁnd that low and inconsistent vehicle ﬂow affects the accuracy of the prediction, where the incorrect cycles beyond a tolerance of ±3 seconds frequently occur during the 0600-0700 time. Also, trafﬁc ﬂow on weekends tend to be inconsistent and of lower volume, and so they have a lower number of predicted cycles returned to the exact value compared to weekdays.
Next, we interpret phase sequence from α˜θ. We plot αθ and α˜θ in Fig. 3. We additionally overlay α˜θ in a Google Map of the intersection (Fig. 4). Referring to this ﬁgure, the phase sequence can be inferred as: (SBLT and NBLT) → (SBT and NBT) → WBLT → WBT → EBLT → EBT, which matches the Ring and Barrier Diagram in Fig. 2. We note that using this method, turn-movements associated with multiple phases (e.g. LT movements in permissive-protected mode) may appear immediately before, during, or immediately after its associated Through movement in the sequence, depending on the arrival of vehicles. For example, if no vehicles are present during the protected mode of the LT and arrive only during the permissive phase, then the LT and T phases would have approximately the same color. Conversely, if vehicles arrive during the protected mode of the LT, then the LT phase would have a color that is sequentially before the T phase. For this time period we observe the latter case, as all the LT’s precede the T’s. RT’s are ignored in the analysis, since they are typically allowed on red lights.
We next estimate the green-split for the 1000-1500 time (120s cycle), applying Alg. 2 using N = 360, and average the results made from applying a sliding window of 10s in each test interval. Also, we choose h to be an integer multiple of C with a minimum of 2 cycles, such that h = 24 for the 120s cycle. We omit each iteration where the estimated cycle time is not exactly 120s. A table of the results is provided in Tab. III, which show reasonable accuracy. We highlight that despite using vehicle ﬂows binned at 10s, the algorithm is able to recover the green-splits at second-level precision.

Fig. 4. Phase-splits, in seconds, corresponding to the 150s mode, when running DMD using samples from 0900-0930. Lines indicate direction, e.g. the lines farthest left are the EB movements, with the top line as the EB-LT movement, while the bottom line on the farthest right is the WB-LT movement.

Algorithm 2 Estimate Green-Split Lengths
1: LT’s from opposing barriers: 2: κ = max(αθ(SBLT ), αθ(N BLT )) − max(αθ(EBLT ), αθ(W BLT )) 3: c + d = mod(κ, C) 4: a + b = C − (c + d) 5: T’s from opposing barriers: 6: κ = max(αθ(SBT ), αθ(N BT )) − max(αθ(EBT ), αθ(W BT )) 7: b + c = mod(κ, C) 8: d + a = C − (b + c) 9: LT and T within E-W barrier: 10: a˜ = max(αθ(EBLT ), αθ(W BLT )) − min(αθ(EBT ), αθ(W BT )) 11: a = mod(a˜, C) 12: LT and T within N-S barrier: 13: c˜ = max(αθ(SBLT ), αθ(N BLT )) − min(αθ(SBT ), αθ(N BT )) 14: c = mod(c˜, C)

only trafﬁc ﬂow data. To achieve this, we perform DMD on vehicle ﬂows binned at 10s from the Montrose Pkwy & E Jefferson St. intersection.

To summarize this section, we have demonstrated Koopman Modes for analyzing spatio-temporal relationships at a trafﬁc intersection, in particular, for signal and phase timing recovery.

7

TABLE II Accuracy for recovering cycle time in hourly intervals from 0600-2200 on a test week at the Montrose Pkwy & E Jefferson St Intersection, at different
tolerance intervals. All cycle time estimates are rounded to the nearest integer.

Day
12-Feb-2017 13-Feb-2017 14-Feb-2017 15-Feb-2017 16-Feb-2017 17-Feb-2017 18-Feb-2017

Exact (rounded to nearest integer)
9/17 13/17 14/17 13/17 10/17 12/17 6/17

Tol. +/- 1s
14/17 15/17 15/17 16/17 15/17 16/17 15/17

Tol. +/- 3s
15/17 16/17 16/17 17/17 15/17 16/17 17/17

TABLE III Error for estimated green lengths over several time intervals for 120s cycle.

Error

Time

a

b

c

d

Interval

sec 1000-1100 -7 -1 6

2

%

43.8 3.3 17.1 5.1

sec 1100-1200 -2 -1 6

-3

%

12.5 3.3 17.1 7.7

sec 1200-1300 -3 0

5

-2

%

18.8 0 14.3 5.1

sec 1300-1400 0 -1 6

-5

%

0 3.3 17.1 12.8

sec 1000-1400 -2 0

5

-3

%

12.5 0 14.3 7.7

V. INSTABILITY ANALYSIS
If trafﬁc at an intersection becomes too congested, the queues that accumulate during the red phase may not fully dissipate during the next green phase, leading to unstable queue growth. The spectral decomposition of the Koopman Operator allows for identifying and analyzing such instability. In particular, knowledge of growth modes from trafﬁc queuedynamics can supplement knowledge of existing queue lengths for anticipating congestion. In this way, while presence of high queue volumes is indicative of a trafﬁc incident, detecting sustained queue growth would serve as an early warning. We propose using DMD to learn the queue dynamics on a rolling window of queue measurements.
Let the snapshot vector xk be the queue length at a particular leg, with each increment of time-step k corresponding to ∆t = 10 s. Form the data matrices X˜1 and X˜2 according to (11), using h = 10. Then, run DMD in a rolling window fashion with a stride of k, looking back at the N most recent samples. Apply a rank truncation of r˜ = 10. Also, let λ1,k be the largest eigenvalue of A at time k, Υk the count of consecutive |λ1| > 1 at time k, and N˜ the total number of samples considered in the day. We then propose a thresholding scheme on Υk to indicate detected queue instability. Alg. 3 summarizes this process.
To demonstrate our approach, we consider data from Friday, 10 February 2017. At approximately 2.47pm on this day, there was a reported accident at the Tildenwood-Montrose Road Intersection which affected the WB and EB movements. We provide a plot of the queues at the WB movement, shown in the top subplot in Fig. 5b. (The accident data is obtained from the Maryland Open Data Portal [35]). Notice the prolonged

Algorithm 3 Instability Detection Algorithm

1: Initialize ctr = 0 and N = 180. 2: for k = N : N˜ do

3: Run DMD to learn A using observations from k − N to k.

4: if |λ1,k| > 1 then

5:

ctr = ctr + 1

6: else

7:

ctr = 0

8: end if

9: Υk = ctr.

10: if Υk > then

11:

Flag an abnormal event condition.

12: end if

13: end for

spike from the time of the accident until about 4pm, which is more severe compared to the peak hour in the morning. For comparison, we also provide queue lengths at the same movement on a normal Friday, 17 February 2017 in the top subplot in Fig. 5a.
Using Alg. 3, we compare the number of unstable eigenvalues for the normal day and the accident day. We choose N = 180, which corresponds to 30 minutes of data binned at 10s intervals. Choice of N is related to how long of a window to model the dynamics. Since accidents may have sustained growth compared to peak hour growth, a fairly long window such as 30 minutes would be appropriate.
In both Fig. 5a and Fig. 5b, the top subplot shows queue lengths at the WB leg, the middle subplot shows |λ1| obtained at each time-step, where unstable λ1 are shown in red while stable λ1 are green, and the bottom subplot shows Υk. Notice that the number of consecutive unstable eigenvalues is at least ﬁve times larger during the accident compared to normal peak hours. At k = 3420, Υ3420 ≈ 200 in Fig. 5b. To provide intuition on how to interpret Υk, since a stride of 10s is used, this corresponds to about 33 minutes of sustained queue growth as of time-step k = 3420.
The algorithm can also be used in a post-analysis study to identify recurring and/or abnormal periods of congestion. To demonstrate this, we provide a visualization of the algorithm run on the same intersection over a period of 2 weeks (Fig. 6). From the ﬁgure, two periods of increased growth can be identiﬁed as shown by the yellow regions; 10 February 2017 at around 2.40pm, and 13 February 2017 at around 7.40am. The increased growth on 10 February as described earlier is related to an accident. We are unable to ﬁnd a recorded incident for congestion on the second day, but postulate that it could be due to lane closures or simply an unusual congestion from which no record can be easily found online. Nevertheless, a record of current trafﬁc incidents could be mined from social websites such as Twitter [36], [37] and be compared against identiﬁed growth periods in the data.
VI. LEARNING DYNAMICS FOR CONTROL
In the previous section, Koopman operator theory was used to identify unstable queue growth, and it was observed that this approach can identify early stages of instability. This allows trafﬁc operators to be alerted early with the hope that appropriate adjustments can be made to signal timing in order to mitigate the instability. It is also possible to use Koopman operator theory to approximate the queueing process

8

(a) West-Bound Leg, Normal Day

(b) West-Bound Leg, Accident Day

Fig. 5. (Top Subplots) Queue Lengths. (Middle Subplots) |λ1,k| (unstable λ1,k are shown in red, while stable λ1,k are green). (Bottom Subplots) Υk, the number of consecutive unstable eigenvalues. Each data-point in the Middle and Bottom subplots corresponds to the dynamics of the previous 180 data
samples. Notice that the number of consecutive unstable eigenvalues is much larger during the accident.

Fig. 6. Consecutive unstable eigenvalues for the WB Leg at Montrose Rd & Tildenwood intersection over 2 Weeks.
under alternative control schemes. In this section, we propose using DMDc, introduced in [30] and discussed in Section III-C, to learn an approximate model of the queue dynamics using signal phases as exogenous input. Thus, in addition to assuming queue measurements, we assume access to the trafﬁc signal state at each time instant. In [32], we used DMDc with the aim of evaluating anticipated queue lengths under a different timing scheme than the pre-programed split during congestion. In this paper, we extend the analysis to study the effect of the queues under different green time percentages.
Deﬁne the input vector uk as the signal phase at each turn

movement at the affected intersection i.e.,

 uk(1) 

 uk(2) 





uk =  

..

 

.

uk (12)

where

0, if uk(i) = red uk(i) =
1, if uk(i) = green or yellow.

Let the state vector xk at time k consist of aggregated queue lengths of each leg at the intersection so that xk ∈ R4. Then, form the data matrices X˜1, X˜2 and U˜ respectively, as in (11) and (12), using h = 12. We use a rank truncation r˜ based on the number of singular values above 1e−10.
First, we estimate the A and B matrices using (15) where uk consists of the original signal phase. Here, x1 is the vector of queues at 2.30pm, xN is the vector of queues at 4pm, and similarly for u1 and uN . To validate that A and B encode an appropriate model of the queue dynamics, we reconstruct the queues in multi-step fashion using x1 as the initial condition and the original {u1, ..., uN } as in Alg. 4. The reconstructed queues for the EB and WB legs (shown in red) in Fig. 7 show
a good approximation of the dynamics of the original queues
(shown in blue).

Algorithm 4 Multi-Step Reconstruction
1: Inputs: A, B, {u1, ..., uN } and x1. 2: Returns: {x2, ..., xN } 3: for k = 1 : N do 4: xk+1 = Axk + Buk 5: end for

In preliminary results reported in [32], we have investigated the effect of modiﬁed inputs for two cases: (i) longer green-

9

(a) 0% green time for EB-WB phases

(b) 20% green time for EB-WB phases

(c) 80% green time for EB-WB phases

(d) 100% green time for EB-WB phases

Fig. 7. The effect of varying green percentages for the EB-WB phases at Montrose Rd & Tildenwood intersection. When 0% green time is allocated, the queue saturates at the queue capacity, while when 100% green time is allocated, the queue decays quickly to zero. (Green) Predicted queues under modiﬁed green-split. (Red) Predicted queues under original green-split. (Blue) Original queues.

splits for the WB-EB phases, and (ii) shorter green-splits for the WB-EB phases, using signal phases from the recorded actuations. Our main ﬁndings are that under the longer greensplit, the queues for the WB-EB legs are less severe while under the shorter green-split, there is persisted high volume of queues at the WB-EB legs.
In this paper, we investigate the effect of the signal phases on predicting queue dynamics. Examining the structure of the B matrix, we observe that B encodes the effect of the light status on the original queue dynamics. We note that there are signiﬁcant non-zero entries are in the last d1 rows of B. Let bTn denote one of the last d1 rows of B, while un denote one of the last d1 columns of U. Then, the inner product bTn un expresses the contribution of the signal phase to the queue xn, or the nth row in X2.
If un(i) = 0 (the phase is red), then it does not matter what the value of bn(i) is. However, if un(i) = 1 (the phase is green or yellow), there are 3 possible cases: (i) bn(i) > 0, where the green light contributes to an increase in queue length at leg i, (ii) bn(i) = 0, where there is no net contribution due to the light being green, and (iii) bn(i) < 0, where the green light contributes a reduction in queues at leg i. By increasing the

effective green time of a leg, there is a longer sequence of un(i) = 1, thus providing overall an increased contribution of bn(i) < 0, thus effectively reducing the queue length.
We demonstrate reconstructed queue lengths for the EB-WB leg under different green-split percentages; 0%, 20%, 80%, and 100% in Fig. 7. For these experiments, we create the input phase matrix synthetically, instead of using a sample of the signal phases from the data. When the EB-WB legs receive 0% green time, the queues grow until saturating at what could be the learned queue capacity. Conversely, under 100% green time, the queues decay quickly to 0. The queues receiving 20% and 80% green time respectively show behavior in between these two extremes.
We remark that although the reconstructed queues may not be exact, they provide qualitative insight on how the queue dynamics change under different timing schemes. Also, while the input signal phases are at turn-movement resolution, the queue lengths we have utilized are at leg-resolution.
VII. IDENTIFYING NETWORK STRUCTURE
In the previous sections we have focused on applications of DMD for single intersections. In this section we show that

10

Fig. 8. A matrix structure from DMD with 10 time-shifted data. Each data point has dimension 4 so the A matrix has dimension 40 × 40.

Fig. 9. The bottom right block of A matrix structure from DMD with 10 time-shifted data averaged over different dates of February 2018. The data that is binned at 60s. The entry with highest value on average in the matrix (the most yellow) represents the connection that SB1-SB2.

DMD can be used to infer geometric structural relationships in a network of signalized intersections. We achieve this by investigating the A matrix of DMD satisfying (7). Here, we also employ the time-shifting augmentation technique suggested in (11). Inspired by the special structure induced by this approach, we further compare this approach to vector autoregression for prediction. Our results indicate that DMD has certain advantages over vector autoregression.

A. DMD Matrix Structure

As described in Section III-B, if the spatial dimension M is much lower than the number of observations N , then it is often beneﬁcial to increase the rank of the data matrix by augmenting the system with delayed as shown in (11). In general, we may increase the number h of delay coordinates to allow a larger operator matrix A and more Koopman modes. As an example, consider queue length data from the Montrose Rd & E Jefferson St. intersection measured at each second, and let xk consist of aggregated queue lengths of each leg at the intersection at time k so that xk ∈ R4. We choose N = 1200 and h = 10, meaning that we use 1200 consecutive observations (20 minutes) to form the data matrices X˜1, X˜2, as in (11), after including nine additional time-shifted blockrows. We do not discard any modes using a rank truncation.
Figure 8 shows the heat map of the A matrix from (8). Observe that A tends to have the block structure

 0 I 0 ··· 0 

 0 0 I ··· 0 





A =  ... ... ... . . . ...  , (21)





 0 0 0 ··· I 





A1 A2 A3 · · · Ah

where there is a diagonal identity matrix and 0 everywhere else, except for the last block row. Note that the effective information is all stored in the last block row of A matrix. When we increase the number h of delay coordinates, we increase length of this block row, thus increasing the linear dependency of the next state on the previous history state.

B. Network Structure Detection
Now we show that we can leverage the same A matrix to detect the geometric network structure. In many cases it is desirable to detect network structure simply from trafﬁc ﬂow data. For example, if our data only contains real-time queue length data but lacks information on the geometric relationships of the queues, this structure detection technique would help us estimate the origin of the data and thus better predict future state or analysis stability.
In the case study we use the queue length data from the Montrose Rd & E Jefferson St. intersection and the Montrose Pkwy & E Jefferson St. intersection. We observe queue length data from 4 legs of each intersection and we would like to make inferences about the relative location of the two intersections. We stack the data of the two intersections as (NB1, SB1, WB1, EB1, NB2, SB2, WB2, EB2) so that the state vector xk ∈ R8, where NB1 represents the NB leg of the ﬁrst intersection we would like to detect. We choose N = 7200 and h = 10, meaning that we use 7200 consecutive observations (2 hours) to form the data matrices X˜1, X˜2, as in (11), after time-shifting them 10 times. We keep all the modes here as we use a rank truncation r˜ = 8 ∗ 10, the same as the dimension of A matrix.
We run an experiment for each day of February 2018 using data from 0800-1000 and show the average of the results in Fig. 9. We show the bottom right block A matrix from time-shifting DMD model, which is roughly equivalent to Ah in (22) as shown in previous observation. Basically by investigating this matrix, we want to understand how Ahxt effects xt+1. Note that the data is binned at 60s, which is about half the cycle time. This is important as there should be sufﬁcient time for the ﬂow out of one queue to enter the next connected queue. The entry with the highest value on average in Fig. 9 represents trafﬁc ﬂow from SB1 into SB2. This observation enables us to estimate that the ﬁrst intersection is on the north of the second intersection. Thus we are able to detect that they are Montrose Rd & E Jefferson St. intersection and Montrose Pkwy & E Jefferson St. intersection respectively.

11

ACKNOWLEDGMENT
The authors would like to thank Sensys Networks, Inc. for providing access to trafﬁc ﬂow data.

Fig. 10. Average Mean Square Error of prediction of queue length in the next one minute using DMD and Vector Autoregressions (VAR).

C. Comparisons with Vector Autoregressions

The last block row of (21) can be written as

h

xh+1 = Aixi.

(22)

i=1

Solving for a set of matrices Ai such that (22) is approx-

imately satisﬁed is exactly the problem considered in vector

autoregression [38], which estimates relationships between the

time series and their lagged values.

To compare the prediction accuracy between DMD with

time-shifted data and classic approaches to vector autoregres-

sion, we ﬁt a vector auto regression model according to (22)

by minimizing the least square error |xh+1 −

h i=1

Aixi|22

and

compare to the result obtain using DMD as in (21) for predic-

tion. In both the DMD and vector autogression approach, we

take N = 1200 (20 minutes) observations and use the models

to predict the next 60 states (1 minute). We uniformly sample

20 time windows in a day using queue length data at each

second from the Montrose Rd & E Jefferson St. intersection

and compute the average of the mean square error with respect

to different number h of delay coordinates. As shown in

Fig. 10, both methods tend to have better performance when

increasing h.

In general, as shown in Fig. 10, DMD outperforms vector

autoregression for prediction when considering the same the

number h of delay coordinates.

VIII. CONCLUSION
We have proposed using Koopman operator theory to study signalized trafﬁc ﬂow networks. The Koopman operator allows exactly representing a nonlinear dynamical system with a linear, but inﬁnite dimensional, operator. This operator can be approximated with a ﬁnite-dimensional linear operator, i.e., matrix, and Dynamic Mode Decomposition provides a numerical algorithm for efﬁciently computing such an approximation using measured data. Moreover, this approximation approach is model-free. We have demonstrated that this approach is applicable in a variety of applications for signalized trafﬁc ﬂow, such as inferring trafﬁc control parameters, detecting and mitigating unstable queuing dynamics, and inferring structural relationships in a network of signalized intersections.

REFERENCES
[1] W. Min and L. Wynter, “Real-time road trafﬁc prediction with spatiotemporal correlations,” Transportation Research Part C: Emerging Technologies, vol. 19, no. 4, pp. 606 – 616, 2011.
[2] X. Min, J. Hu, and Z. Zhang, “Urban trafﬁc network modeling and short-term trafﬁc ﬂow forecasting based on gstarima model,” in 13th International IEEE Conference on Intelligent Transportation Systems, Sept 2010, pp. 1535–1540.
[3] S. Coogan, C. Flores, and P. Varaiya, “Trafﬁc predictive control from low-rank structure,” Transportation Research Part B: Methodological, vol. 97, pp. 1–22, 03 2017.
[4] M. Dutreix and S. Coogan, “Quantile forecasts for trafﬁc predictive control,” in 2017 IEEE 56th Annual Conference on Decision and Control (CDC), Dec 2017, pp. 5666–5671.
[5] Z. Duan, Y. Yang, K. Zhang, Y. Ni, and S. Bajgain, “Improved deep hybrid networks for urban trafﬁc ﬂow prediction using trajectory data,” IEEE Access, vol. 6, pp. 31 820–31 827, 2018.
[6] W. Zheng, D.-H. Lee, and Q. Shi, “Short-term freeway trafﬁc ﬂow prediction: Bayesian combined neural network approach,” Journal of Transportation Engineering, vol. 132, no. 2, 02 2006.
[7] A. Stathopoulos and M. G. Karlaftis, “A multivariate state space approach for urban trafﬁc ﬂow modeling and prediction,” Transportation Research Part C: Emerging Technologies, vol. 11, no. 2, pp. 121 – 135, 2003.
[8] A. Hoﬂeitner, R. Herring, A. Bayen, Y. Han, F. Moutarde, and A. De La Fortelle, “Large scale estimation of arterial trafﬁc and structural analysis of trafﬁc patterns using probe vehicles,” in Transportation Research Board 91st Annual Meeting (TRB’2012), Washington, United States, Jan. 2012.
[9] A. Kumar, V. V. Saradhi, and T. S. Venkatesh, “Interpretable structural analysis of trafﬁc matrix.” ICML 2017 Time Series Workshop, 2017.
[10] R. Ding, N. Ujang, H. bin Hamid, M. S. A. Manan, Y. He, R. Li, and J. Wu, “Detecting the urban trafﬁc network structure dynamics through the growth and analysis of multi-layer networks,” Physica A: Statistical Mechanics and its Applications, vol. 503, pp. 800–817, 2018.
[11] Y. Kamarianakis, H. O. Gao, and P. Prastacos, “Characterizing regimes in daily cycles of urban trafﬁc using smooth-transition regressions,” Transportation Research Part C: Emerging Technologies, vol. 18, no. 5, pp. 821 – 840, 2010, applications of Advanced Technologies in Transportation: Selected papers from the 10th AATT Conference.
[12] Y. Kamarianakis, W. Shen, and L. Wynter, “Realtime road trafﬁc forecasting using regime switching space time models and adaptive lasso,” Applied Stochastic Models in Business and Industry, vol. 28, no. 4, pp. 297–315.
[13] B. O. Koopman, “Hamiltonian systems and transformation in Hilbert space,” Proceedings of the National Academy of Sciences, vol. 17, no. 5, pp. 315–318, 1931.
[14] M. Budisˇic´, R. Mohr, and I. Mezic´, “Applied Koopmanism,” Chaos: An Interdisciplinary Journal of Nonlinear Science, vol. 22, no. 4, 2012.
[15] Y. Susuki, I. Mezic, F. Raak, and T. Hikihara, “Applied Koopman operator theory for power systems technology,” Nonlinear Theory and Its Applications, IEICE, vol. 7, no. 4, pp. 430–459, 2016.
[16] Y. Susuki and I. Mezic, “Nonlinear Koopman modes and coherency identiﬁcation of coupled swing dynamics,” IEEE Transactions on Power Systems, vol. 26, no. 4, pp. 1894–1904, 11 2011.
[17] Y. Susuki and I. Mezic´, “Nonlinear Koopman modes and power system stability assessment without models,” IEEE Transactions on Power Systems, vol. 29, no. 2, pp. 899–907, 03 2014.
[18] F. Raak, Y. Susuki, and T. Hikihara, “Data-driven partitioning of power networks via Koopman mode analysis,” IEEE Transactions on Power Systems, vol. 31, no. 4, pp. 2799–2808, 07 2016.
[19] S. Brunton, J. Nathan Kutz, X. Fu, and J. Grosek, Handbook of Robust Low-Rank and Sparse Matrix Decomposition: Applications in Image and Video Processing. CRC Press, 06 2016.
[20] J. Mann and J. N. Kutz, “Dynamic mode decomposition for ﬁnancial trading strategies,” Quantitative Finance, vol. 16, no. 11, pp. 1643–1655, 2016.
[21] J. L. Proctor and P. A. Eckhoff, “Discovering dynamic patterns from infectious disease data using dynamic mode decomposition,” International Health, vol. 7, no. 2, pp. 139–145, 03 2015.

12
[22] B. W. Brunton, L. A. Johnson, J. G. Ojemann, and J. N. Kutz, “Extracting spatial–temporal coherent patterns in large-scale neural recordings using dynamic mode decomposition,” Journal of Neuroscience Methods, vol. 258, pp. 1 – 15, 2016.
[23] L. van der Maaten, E. Postma, and J. van den Herik, “Dimensionality reduction: A comparative review,” 2009. [Online]. Available: https://www.tilburguniversity.edu/upload/ 59afb3b8-21a5-4c78-8eb3-6510597382db TR2009005.pdf
[24] C. W. Rowley, I. Mezic, S. Bagheri, P. Schlatter, and D. S. Henningson, “Spectral analysis of nonlinear ﬂows,” Journal of Fluid Mechanics, vol. 641, pp. 115–127, 2009.
[25] N. J. Kutz, S. L. Brunton, B. W. Brunton, and J. L. Proctor, Dynamic Mode Decomposition: Data-Driven Modeling of Complex Systems. Society for Industrial and Applied Mathematics (SIAM), 2016.
[26] P. Schmid and J. Sesterhenn, “Dynamic Mode Decomposition of numerical and experimental data,” in APS Division of Fluid Dynamics Meeting Abstracts, 11 2008, p. MR.007.
[27] P. J. Schmid, “Dynamic mode decomposition of numerical and experimental data,” Journal of Fluid Mechanics, vol. 656, pp. 5–28, 2010.
[28] J. H. Tu, C. W. Rowley, D. M. Luchtenburg, S. L. Brunton, and J. N. Kutz, “On dynamic mode decomposition: Theory and applications,” Journal of Computational Dynamics, vol. 1, no. 2, pp. 391–421, 2014.
[29] F. Raak, Y. Susuki, I. Mezic´, and T. Hikihara, “On Koopman and dynamic mode decompositions for application to dynamic data with low spatial dimension,” in 2016 IEEE 55th Conference on Decision and Control (CDC), 12 2016, pp. 6485–6491.
[30] J. L. Proctor, S. L. Brunton, and J. N. Kutz, “Dynamic mode decomposition with control,” SIAM Journal on Applied Dynamical Systems, vol. 15, no. 1, pp. 142–161, 2016.
[31] C. Liu, B. Huang, M. Zhao, S. Sarkar, U. Vaidya, and A. Sharma, “Data driven exploration of trafﬁc network system dynamics using high resolution probe data,” in 2016 IEEE 55th Conference on Decision and Control (CDC), 12 2016, pp. 7629–7634.
[32] E. Ling, L. Ratliff, and S. Coogan, “Koopman operator approach for instability detection and mitigation in signalized trafﬁc,” in IEEE International Conference on Intelligent Transportation Systems, Nov 2018, pp. 1297–1302.
[33] A. Lawitzky, D. Wollherr, and M. Buss, “Energy optimal control to approach trafﬁc lights,” in 2013 IEEE/RSJ International Conference on Intelligent Robots and Systems, Nov 2013, pp. 4382–4387.
[34] G. Mahler and A. Vahidi, “Reducing idling at red lights based on probabilistic prediction of trafﬁc signal timings,” in 2012 American Control Conference (ACC), 06 2012, pp. 6557–6562.
[35] “Maryland open data portal,” Maryland.gov, 08 2017. [Online]. Available: https://data.maryland.gov/browse?tags=crash
[36] E. D’Andrea, P. Ducange, B. Lazzerini, and F. Marcelloni, “Real-time detection of trafﬁc from twitter stream analysis,” IEEE Transactions on Intelligent Transportation Systems, vol. 16, no. 4, pp. 2269–2283, Aug 2015.
[37] Y. Gu, Z. S. Qian, and F. Chen, “From twitter to detector: Realtime trafﬁc incident detection using social media data,” Transportation Research Part C: Emerging Technologies, vol. 67, pp. 321 – 342, 2016.
[38] H. Lu¨tkepohl, New introduction to multiple time series analysis. Springer Science & Business Media, 2005.

