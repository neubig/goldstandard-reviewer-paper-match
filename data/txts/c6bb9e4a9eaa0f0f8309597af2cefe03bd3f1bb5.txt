arXiv:2110.05266v1 [cs.LG] 11 Oct 2021

Chaos as an interpretable benchmark for forecasting and data-driven modelling
William Gilpin∗ Quantitative Biology Initiative, Harvard University Department of Physics & Oden Institute, UT Austin
wgilpin@fas.harvard.edu
Abstract
The striking fractal geometry of strange attractors underscores the generative nature of chaos: like probability distributions, chaotic systems can be repeatedly measured to produce arbitrarily-detailed information about the underlying attractor. Chaotic systems thus pose a unique challenge to modern statistical learning techniques, while retaining quantiﬁable mathematical properties that make them controllable and interpretable as benchmarks. Here, we present a growing database currently comprising 131 known chaotic dynamical systems spanning ﬁelds such as astrophysics, climatology, and biochemistry. Each system is paired with precomputed multivariate and univariate time series. Our dataset has comparable scale to existing static time series databases; however, our systems can be re-integrated to produce additional datasets of arbitrary length and granularity. Our dataset is annotated with known mathematical properties of each system, and we perform feature analysis to broadly categorize the diverse dynamics present across the collection. Chaotic systems inherently challenge forecasting models, and across extensive benchmarks we correlate forecasting performance with the degree of chaos present. We also exploit the unique generative properties of our dataset in several proof-of-concept experiments: surrogate transfer learning to improve time series classiﬁcation, importance sampling to accelerate model training, and benchmarking symbolic regression algorithms.
1 Introduction
Two trajectories emanating from distinct locations on a strange attractor will never recur nor intersect, a basic mathematical property that underlies the complex geometry of chaos. As a result, measurements drawn from a chaotic system are deterministic yet non-repeating, even at ﬁnite resolution [1, 2]. Thus, while representations of chaotic systems are ﬁnite (e.g. differential equations or discrete maps), they can indeﬁnitely generate new data, allowing the fractal structure of the attractor to be resolved in ever-increasing detail [3]. This interplay between the boundedness of the attractor and non-recurrence of the dynamics is responsible for the complexity of diverse systems, ranging from the intricate gyrations of orbiting stars to the irregular spiking of neuronal ensembles [4, 105].
Chaotic systems thus represent a unique testbed for modern statistical learning techniques. Their unpredictability challenges traditional forecasting methods, while their fractal geometry precludes concise representations [6]. While modeling and forecasting chaos remains a fundamental problem in its own right [7, 8], many prior works on general time series analysis and data-driven model inference have used speciﬁc chaotic systems (such as the Lorenz "butterﬂy" attractor) as toy problems in order to demonstrate method performance in a controlled setting [9–11, 13–20, 126]. In this context, there are several advantages to chaotic systems as benchmarks for time series analysis and data-driven
∗Dataset and benchmark available at: https://github.com/williamgilpin/dysts
Preprint. Under review.

Figure 1: Properties of the chaotic dynamical systems dataset. (A) Embeddings of 131 chaotic dynamical systems. Points correspond to average embeddings of individual systems, and shading shows ranges over many random initial conditions. Colors correspond to an unsupervised clustering, and example dynamics for each cluster are shown. (B) Distributions of key mathematical properties across the dataset.
modelling: (1) Chaotic systems have provably complex dynamics, which arise due to underlying mathematical structure, rather than complex representation of otherwise simple latent dynamics. (2) Existing time series databases contain datasets chosen primarily for availability or applicability, rather than for having innate properties (e.g. complexity, quasiperiodicity, dimensionality) that span the range of possible behaviors time series may exhibit. (3) Chaotic systems have accessible generating processes, making it possible to obtain new data and representations, and for the benchmark to be related to mechanistic details of the underlying system. These properties suggest that chaotic systems can aid in interpreting the properties of complex models [6, 106]. However, chaotic systems as benchmarks lack standardization, and prior works’ emphasis on single systems like the Lorenz attractor may undermine generalizability. Moreover, focusing on isolated systems neglects the diversity of dynamics in known chaotic systems, thereby preventing systematic quantiﬁcation and interpretation of algorithm performance relative to the mathematical properties of different systems.
Here, we present a growing database of low-dimensional chaotic systems drawn from published work in diverse domains such as meteorology, neuroscience, hydrodynamics, and astrophysics. Each system is represented by several multivariate time series drawn from the dynamics, annotations of known mathematical properties, and an explicit analytical form that can be re-integrated to generate new time series of arbitrary length, stochasticity, and granularity. We provide extensive forecasting benchmarks across our systems, allowing us to interpret the empirical performance of different forecasting techniques in the context of mathematical properties such as system chaoticity. Our dataset improves the interpretability of time series algorithms by allowing methods to be compared across time series with different intrinsic properties and underlying generating processes—thereby complementing existing interpretability methods that identify salient feature sets or time windows within single time series [22, 23]. We also consider applications to data-driven modelling in the form of symbolic regression and neural ordinary differential equations tasks, and we show the surprising result that the accuracy of a symbolic regression-derived formula can correlate with mathematical properties of the dynamics produced by the formula. Finally, we demonstrate unique applications enabled by the ability to re-integrate our dataset: we pre-train a timescale-matched feature extractor for an existing time series classiﬁcation benchmark, and we accelerate training of a forecast model by importance sampling sparse regions on the dynamical attractor.
2 Description of Datasets
Scope. The diverse dynamical systems in our dataset span astrophysics, neuroscience, ecology, climatology, hydrodynamics, and many other domains. The supplementary material contains a glossary deﬁning key terms from dynamical systems theory relevant to our dataset. Each entry in our dataset represents a single dynamical system, such as the Lorenz attractor, that takes an initial
2

condition as input and outputs a trajectory representing the input point’s location as time evolves. Systems are chosen based on prior appearance as named systems in published works. In order to provide a consistent test for time series models, we deﬁne chaos in the mathematical sense: two copies of a system prepared in inﬁnitesimally different initial states will exponentially diverge over time. We also focus particularly on chaotic systems that produce low-dimensional strange attractors, which are fractal structures that display bounded, stationary, and ergodic dynamics with quantiﬁable mathematical properties. As a result, we exclude transient chaos and chaotic repellers (chaotic regions that trajectories eventually escape) [24–26], as well as most nonchaotic strange attractors save for one paradigmatic example: a quasiperiodic two-dimensional torus [27].
Scale and structure. Our extensible collection currently comprises 131 previously-published and named chaotic dynamical systems. Each record includes a compilable implementation of the system, a citation reference, default initial conditions on the attractor, precomputed train and test trajectories from different initial conditions at both coarse and ﬁne granularities, and an optimal integration timestep and dominant timescale (used for aligning timescales across systems). For each of the 131 systems, we include 16 precomputed trajectories corresponding to all combinations of the following variations per system: coarse and ﬁne sampling granularity, train and test splits emanating from different initial conditions, multivariate and univariate views, and trajectories with and without Brownian noise inﬂuencing the dynamics. Because certain data-driven modelling methods, such as our symbolic regression task below, require gradient information, we also include with each system precomputed train and test regression datasets corresponding to trajectories and time derivatives along them.
Figure S1 shows the attractors for all systems, and Table S1 includes brief summaries of their origin and applications. While there are an inﬁnite number of possible chaotic dynamical systems, our work represents, to our knowledge, the ﬁrst effort to survey and reproduce previously-published chaotic systems. For this reason, while our dataset is readily extensible to new systems, the primary bottleneck as we expand our database is the need to manually reproduce claimed chaotic dynamics, and to identify appropriate parameter values and initial conditions based on published reports. Broadly, our work can be considered a systematization of previous studies that benchmark methods on single chaotic systems such as the Lorenz attractor [9–11, 13–20, 126].
Annotations. For each system, we calculate and include precise estimates of several standard mathematical characteristics of chaotic systems. More detailed deﬁnitions are included in the appendix.
The largest Lyapunov exponent measures the degree to which nearby trajectories diverge, a common measure of the degree of chaos present in a system.
The Lyapunov exponent spectrum determines the tendency of trajectories to locally converge or diverge across the attractor. All continuous-time chaotic systems have at least one positive exponent, exactly one zero exponent (due to time translation), and, for dissipative systems (i.e., those converging to an attractor), at least one negative exponent [28].
The correlation dimension measures an attractor’s effective fractal dimension, which informally indicates the intricacy of its geometric structure [4, 29]. Integer fractal dimensions indicate familiar geometric forms: a line has dimension one, a plane has two, and a ﬁlled solid three. Non-integer values correspond to fractals that ﬁll space in a manner intermediate to the two nearest integers.
The multiscale entropy represents the degree to which complex dynamics persist across timescales [111]. Chaotic systems have continuous power spectra, and thus high multiscale entropy.
We also include two quantities derived from the Lyapunov spectrum: the Pesin entropy bound, and the Kaplan-Yorke fractal dimension, an alternative estimator of attractor dimension based on trajectory dispersion. Each system is also annotated with various qualitative details, such as whether the system is Hamiltonian or dissipative (i.e., whether there exists conserved invariants like total energy, or whether the dynamics relax to an attractor), non-autonomous (whether the dynamical equations explicitly depend on time), bounded (all variables remain ﬁnite as time passes), and whether the dynamics are given by a delay differential equation. In addition to the 131 differential equations described here, our collection also includes several common discrete time maps; however, we exclude these from our study due to their unique properties.
3

Methods. Our dataset includes utilities for re-sampling and re-integrating each system with or without stochasticity, loading pre-computed multivariate or univariate trajectories, computing statistical properties and performing surrogate signiﬁcance testing, and running benchmarks. One shortcoming of previous studies using chaotic systems as benchmarks—as well as more generally with static time series databases—is inconsistent timescales and granularities (sampling rates). We alleviate this problem by using phase surrogate signiﬁcance testing to select optimal integration timesteps and sampling rates for all systems in our dataset, thus ensuring that dynamics are aligned across systems with respect to dominant and minimum signiﬁcant timescales [106]. We further ensure consistency across systems using several standard methods, such as testing ergodicity to ﬁnd consistent initial conditions, and integrating with continuous re-orthonormalization when computing various mathematical quantities such as Lyapunov exponents (see supplementary material).
Properties and Characterization. In order to characterize the properties of our collection, we use an off-the-shelf time series featurizer that computes a corpus of 787 common time series features (e.g. absolute change, peak count, wavelet transform coefﬁcients, etc) for each system in our dataset [113]. In addition to providing general statistical descriptors for our systems, embedding and clustering the systems based on these features illustrates the diverse dynamics present across our dataset (Figure 1). We ﬁnd that the dynamical systems naturally separate into groups displaying different types of chaotic dynamics, such as smooth scroll-like trajectories versus spiking. Additionally, we observe that our chaotic systems trace a ﬁlamentary manifold in embedding space, a property consistent with the established rarity of chaotic attractors within the space of possible dynamical systems: persistent chaos often occurs in an intermediate regime between bifurcations producing simpler dynamics, such as limit cycles or quiescence at ﬁxed points [26, 105].
2.1 Prior Work.
Data-driven modelling and control. Many techniques at the intersection of machine learning and dynamical systems theory have been evaluated on speciﬁc well-known chaotic attractors, such as the Lorenz, Rössler, double pendulum, and Chua systems [9–11, 13–20, 126]. These and several other chaotic systems used in previous machine learning studies are all included within our dataset [109, 136].
General databases of analytical mathematical models include the BioModels database of systems biology models, which currently contains 1017 curated entries, with an additional 1271 unreviewed user submissions [34]. Among these models, a subset corresponding to 491 differential equations recur within the ODEBase database [35]. For the speciﬁc task of symbolic regression, the inference of analytical equations from data, existing benchmarks include the Nguyen dataset of 12 complex mathematical expressions [36], and corpora of equations from two physics textbooks [37, 38, 104], and a recently-released suite of 252 regression problems from Penn Machine Learning Benchmark [129].
Forecasting and classiﬁcation of time series. The UCR-UEA time series classiﬁcation benchmark includes 128 univariate and 30 multivariate time series with ~101–103 timepoints [42, 44, 123, 128]. Several of these entries overlap with the UCI Machine Learning Repository, which contains 121 time series (91 multivariate) of lengths ~101–106 [45]. The M-series of time series forecasting competitions have most recently featured 106 univariate time series of length ~101–105 [46]. The recently-introduced Monash forecasting archive comprises 26 domain areas, each of which includes ~101–106 distinct time series with lengths in the range ~102–106 timepoints [121]. A recent longsequence forecasting model uses the ETT-small dataset of electricity consumption in two regions of China (70,080 datapoints at one-minute increments) [48], as well as NOAA local climatological data (~106 hourly recordings from ~103 locations) [49]. The PhysioNet database contains several hundred physiological recordings such as EEG, ECG, and blood pressure, at a wide variety of resolutions and lengths [50].
A point of differentiation between our work and existing datasets is our focus on reproducible chaotic dynamics, which sufﬁciently narrows the space of potential systems that we can manually curate and re-implement reported dynamics, and calculate key mathematical properties relevant to forecasting and physics-based model inference. These mathematical properties can be used to interpret the properties of black box models by examining their correlation with model performance across systems. Our dataset’s curation also ensures a high degree of standardization across systems, such as
4

Figure 2: Forecasting benchmarks for all chaotic dynamical systems. (A) Distribution of forecast errors for all dynamical systems and for all forecasting models, sorted by increasing median error. Dark and light hues correspond to coarse and ﬁne time series granularities. (B) Spearman correlation among forecasting models, among different forecast evaluation metrics, and between forecasting metrics and underlying mathematical properties, computed across all dynamical systems at ﬁne granularity. Columns are ordered by descending maximum cross-correlation in order to group similar models and metrics. (C) The systems with the highest, median, and lowest forecasting error across all models, annotated by largest Lyapunov exponent.
consistent integration and sampling timescales, as well as ergodicity and stationarity. Additionally, the precomputed multivariate time series in our dataset approximately match the length and size of existing time series databases. We emphasize that, unlike existing time series databases, our dataset’s size is ﬂexible due to the ability to re-integrate each system at arbitrary length, sample at any granularity, integrate from new initial conditions, change the amount of stochastic forcing, or even perturb parameters in the underlying differential equation in order to modify or control each system’s dynamics.
3 Experiments
Task 1: Forecasting
Chaotic systems are inherently unpredictable, and extensive work by the physics community has sought to quantify chaos, and to relate its properties to general features of the underlying governing equations [6, 105]. Traditionally, the predictability of a chaotic system is thought to be determined by the largest Lyapunov exponent, which measures the rate at which trajectories emanating from two inﬁnitesimally-spaced points will exponentially separate over time [28].
We evaluate this claim on our dataset by benchmarking 16 forecasting models spanning a wide variety of techniques: deep learning methods (NBEATS, Transformer, LSTM, and Temporal Convolutional Network), statistical methods (Prophet, Exponential Smoothing, Theta, 4Theta), common machine learning techniques (Random Forest), classical methods (ARIMA, AutoARIMA, Fourier transform regression), and standard naive baselines (naive mean, naive seasonal, naive drift) [117, 119–121]. Our train and test datasets correspond to differential initial conditions, and we perform separate hyperparameter tuning for each chaotic system and granularity [117, 118]. While the forecasting models are heterogenous, for each we tune whichever hyperparameter most closely corresponds to a timescale—for example, the lag order for autoregressive models, or the input chunk size for the
5

neural network models. Because all systems are aligned to the same average period, the range of values over which timescales are tuned is scaled by the granularity. Hyperparameters are tuned using held-out future values, and scores are computed on an unseen test trajectory emanating from different initial conditions.
Our results are shown in Figure 2 for all dynamical systems at coarse and ﬁne sampling granularity. We include corresponding results for systems with noise in the supplementary material. We ﬁnd the the deep learning models perform particularly well, with the Transformer and NBEATS models achieving the lowest median scores, while also appearing within the three best-performing models for nearly all systems. On many datasets, the temporal convolutional network and traditional LSTM models also achieve competitive performance. Notably, the random forest also exhibits strong performance despite the continuous nature of our datasets, and with substantially lower training cost. The relative ranking of the different forecasting models remains stable both as granularity is varied over two orders of magnitude, and as noise is increased to a level dominating the signal (see supplementary experiments). In the latter case, we observe that the performance of different models converges as their overall performance decreases. Overall, NBEATS strongly outperforms the other forecasting techniques across varied systems and granularities, and its performance persists even in the presence of noise. We speculate that NBEAT’s advantage arises from its implicit decomposition of time series into a hierarchy of basis functions [119], an approach that mirrors classical techniques for representing continuous-time chaotic systems [55].
Our results seemingly contrast with studies showing that statistical models outperform neural networks on forecasting tasks [46, 121]. However, our forecasting task focuses on long time series and prediction horizons, two areas where neural networks have previously performed well [48]. Additionally, we hypothesize that the strong performance of deep learning models on our dataset is a consequence of the smoothness of chaotic systems, which have mathematical regularity and stationarity compared to time series generated from industrial or environmental measurements. In contrast, models like Prophet are often applied to calendar data with seasonality and irregularities like holidays [56]—neither of which have a direct analogue in chaotic systems, which contain a continuous spectrum of frequencies [57]. Consistent with this intuition, we observe that among the systems in our dataset, the Prophet model performs well on the torus, a quasiperiodic system with largest Lyapunov exponent equal to zero.
Several recent works have considered the appropriate metric for determining forecast accuracy [46, 58, 59, 121]. For all forecasting models and dynamical systems we compute eight error metrics: the mean squared error (MSE), mean absolute scaled error (MASE), mean absolute error (MAE), mean absolute ranged relative error (MARRE), the magnitude of the coefﬁcient of variation (|CV |), one minus the coefﬁcient of determination (1 − r2), and the symmetric and regular mean absolute percent errors (MAPE and sMAPE). We ﬁnd that all of these potential metrics are positively correlated across our dataset, and that they can be grouped into families of strongly-related metrics (Figure 2B). We also observe that the relative ranking of different forecasting models is independent of the choice of metric. Hereafter, we report sMAPE errors when comparing models, but we include all other metrics within the benchmark.
We next evaluate the common claim that the empirical predictability of a system depends on the mathematical degree of chaos present [7]. For each system, we correlate the forecast error of the best-performing model with the various mathematical properties of each system (Figure 2B). Across all systems, we ﬁnd a high degree of correlation between the largest Lyapunov exponent and the forecast error, while other measures such as the attractor fractal dimension and entropy correlate less strongly. While this observation matches conventional wisdom, it represents (to our knowledge) the ﬁrst large-scale test of the empirical relevance of Lyapunov exponents. We consider this observation particularly noteworthy because our forecasting task spans several periods, yet the Lyapunov exponent is a purely local measure of dispersion between inﬁnitesimally-separated points.
Our results introduce several considerations for the development of time series models. The strong performance we observe for neural network models implies that the ﬂexibility of large models proves beneﬁcial for time series without obvious trends or seasonality. The consistent accuracy we observe for NBEATS, even in the presence of noise, suggests that hierarchical decomposition can improve modelling of systems with multiple timescales. Most of our best-performing methods implicitly lift the dimensionality of the input time series, implying that higher-dimensional representations create more predictable dynamics—a ﬁnding consistent with recent studies showing that certain
6

Table 1: (Upper) Forecast accuracy for LSTMs trained on full time series, random subsets, and subsets sampled proportionately to their epochwise error (medians ± standard errors across all dynamical systems). (Lower) Accuracy scores on the UCR database for classiﬁers trained on features extracted from bare time series, and from autoencoders pretrained on the full chaotic systems collection at random and task-matched timescales (medians ± standard errors across UCR tasks).

Importance Sampling Forecasting Error (sMAPE)

Full Epochs

sMAPE

1.00 ± 0.05

Runtime (sec) 190.1 ± 0.3

Random Subset
0.99 ± 0.05 77.9 ± 0.3

Importance Weighted
0.90 ± 0.05 94.6 ± 0.2

Transfer Learning Classiﬁcation Accuracy

No Transfer Learning

sMAPE

0.80 ± 0.02

Random Timescales Matched Surrogates

0.82 ± 0.01

0.84 ± 0.01

machine learning techniques implicitly learn Koopman operators, linear propagators that act on lifted representations of nonlinear systems [10, 57, 60–62]. That higher dimensional representations can linearize dynamics mirrors classical motivation for kernel methods in machine learning [122]; we thus hypothesize that classical time series representations like time-lagged embeddings can be improved through nonlinearities, either in the form of custom functions learned by neural networks, or by inductive biases in the form of ﬁxed periodic or wavelet-like kernels.
Task 2: Accelerating model training with importance sampling.
When training a forecasting model iteratively, each training batch usually samples input timepoints with equal probability. However, chaotic attractors generally possess non-uniform measure due to their fractal structure [64]. We thus hypothesize that importance sampling can accelerate training of a forecast model, by encouraging the network to oversample sparser regions of the underlying attractor [65]. We thus modify the training procedure for a forecast model by applying a simple form of importance sampling, based on the epoch-wise training losses of individual samples—an approach related to zeroth-order adaptive methods appearing in other areas [66–69]. Our procedure consists of the following: (1) We halt training every few epochs and compute historical forecasts (backtests) on the training trajectory. (2) We randomly sample timepoints proportionately to their error in the historical forecast, and then generate a set of initial conditions corresponding to random perturbations away from each sampled attractor point. (3) We simulate the full dynamical system for τ timesteps for each of these initial conditions, and we use these new trajectories as the training set for the next b epochs. We repeat this procedure for ν meta-epochs. For the original training procedure, the training time scales as ∼ B, the number of training epochs. In our modiﬁed procedure, the training time has dominant term ∼ ν b, plus an additional term proportional to τ (integration can be parallelized across initial conditions), plus a small constant cost for sampling. We thus set ν b < B, and record run times to verify that total cost has decreased.
Table 1 shows the results of our experiments for an LSTM model across all chaotic attractors. Importance sampling achieves a signiﬁcantly smaller forecast error than a baseline using the full training set in each epoch, as well as a control in which the exact importance sampling procedure was repeated without weighting random samples by error (two sided paired t-test, p < 10−6 for both tests). Notably, importance sampling requires substantially lower computation due to the reduced number of training epochs incurred. Our approach exploits that our database comprises strange attractors, because initial conditions derived from random perturbations off an attractor will produce trajectories that return to the attractor.
Task 3: Transfer learning and data augmentation.
We next explore how our dataset can assist general time series analysis, regardless of the relevance of chaos to the problem. We study an existing time series classiﬁcation benchmark, and we use our dataset to generate timescale-matched surrogate data for transfer learning.
7

Our classiﬁcation procedure broadly consists of training an autoencoder on trajectories from our database, and then using the trained encoder as a general feature extractor for time series classiﬁcation. However, unlike existing transfer learning approaches for time series [70], we train the autoencoder on a new dataset for each classiﬁcation problem: we re-integrate our entire dataset to match the dominant timescales in the classiﬁcation problem’s training data.

Our approach thus comprises several steps: (1) Across all data in the train partition, the dominant signiﬁcant Fourier frequency is determined using random phase surrogates [106]. (2) Trajectories are re-integrated for every dynamical system in our database, such that the sampling rate of the dynamics is equal to that of the training dataset. The surrogate ensemble thus corresponds to a custom set of trajectories with timescales matched to the training data of the classiﬁcation problem. (3) We train an autoencoder on this ensemble. Our encoder is a one layer causal dilated encoder with skip connections, an architecture recently shown to provide strong time series classiﬁcation performance [124]. (3) We apply the encoder to the training data of the classiﬁcation problem. (4) We apply a standard linear time series classiﬁer, following recent works [116, 128]. We featurize the time series using a library of standard featurizers [113], and then perform classiﬁcation using ridge regression [116]. Overall, our classiﬁcation approach bears conceptual similarity to other generative data augmentation techniques: we extract parameters (the dominant timescales) from the training data, and then use these parameters to construct a custom surrogate ensemble with matching timescales. In many image augmentation approaches, a prior distribution is learned from the training data (e.g. via a GAN), and the then sampled to create surrogate examples [73–76].

As baselines for our approach, we train a classiﬁer on the bare original time series, as well as a "random timescale" collection in which the time series in the surrogate ensemble have random dominant frequencies, unrelated to the timescales in the training data. The latter ablation serves to isolate the role of timescale matching, which is uniquely enabled by the ability to re-integrate our dataset at arbitrary granularity. This is necessary in light of recent work showing that transfer learning on a large collection of time series can yield informative features [70].
We benchmark classiﬁcation using the UCR time series classiﬁcation benchmark, which contains 128 realworld classiﬁcation problems spanning diverse areas like medicine, agriculture, and robotics [123]. Because we are using convolutional models, we restrict our analysis to the 91 datasets with at least 100 contiguous timepoints (these include the 85 "bakeoff" datasets benchmarked in previous studies) [42]. We compute separate benchmarks (surrogate ensembles, features, and scores) for each dataset in the archive.

0.56

Final Accuracy

0.46

0.0

Fraction of Dataset

1.0

Figure 3: Classiﬁcation accuracy on the UCR dataset EOGHorizontalSignal, across models pretrained on increasing fractions of the database. Standard errors are from bootstrapped replicates, where the dynamical systems are sampled with replacement.

Our results are shown in Table 1. Across the UCR archive we observe statistically signiﬁcant average classiﬁcation accuracy increases of 4% ± 1% compared to the raw dataset (p < 10−4, paired twosided t-test), and 2% ± 1% compared to the ablation with random surrogate timescales (p < 10−4). While these modest improvements do not comprise state-of-the-art results on the UCR database [42], they demonstrate that features learned from chaotic systems in an unsupervised setting can be used to extract meaningful general features for further analysis. On certain datasets, our results approach other recent unsupervised approaches in which a simple linear classiﬁer is trained on top of a complex unsupervised feature extractor [70, 124, 128]. Recent results have even shown that a very large number of random convolutional features can provide informative representations of time series for downstream supervised learning tasks [128]; we therefore speculate that pretraining with chaotic systems may allow more efﬁcient selection of informative convolutional kernels. Moreover, the improvement of transfer learning over the random timescale model demonstrates the advantage of re-integration. In order to verify that the diversity of dynamical systems present within our dataset contribute to the quality of the learned features, we repeat the classiﬁcation task on a single UCR dataset, corresponding to clinical eye tracking data. We train encoders on gradually increasing numbers of dynamical systems, in order to see how the ﬁnal accuracy changes as the number of

8

Error (sMAPE)
pySR DSR SINDY -poly SINDY -fou rier pySR DSR SINDY -poly SINDY -fou rier

Correlation

A 3.0
2.0 1.0 0.0

B

0.2

Lyapunov

Entropy 0.0
Fractal Dim

KY Dim -0.2

Figure 4: Symbolic regression benchmarks. (A) Error distributions on test datasets across all systems, (B) Spearman correlation between errors and mathematical properties of the underlying systems.
systems available for pretraining increases (Figure 3). We observe monotonic scaling, indicating that our dataset’s size and diversity contribute to feature quality.
Task 4: Data-driven model inference and symbolic regression
We next look beyond traditional time series analysis, and apply our database to a data-driven modelling task. A growing body of work uses machine learning methods to infer dynamical systems directly from data [77–80]. Examples include constructing effective propagators for the dynamics [57, 61, 62, 81–83], obtaining neural representations of the dynamical equations [85–87, 131], and inferring analytical governing equations via symbolic regression [37, 60, 89–93, 129, 130]. Beyond improving forecasts, these data-driven representations can discover mechanistic insights, such as symmetries or separated timescales, that might not otherwise be apparent in a time series.
We thus use our dataset for data-driven modelling in the form of a symbolic regression task. We focus on symbolic regression because of the recent emergence of widely-used benchmark models and performance desiderata for these methods [129]. However, we emphasize that our database can be used for other emerging focus areas in data-driven modelling, such as inference of empirical propagators or neural ordinary differential equations [57, 82, 94], and we include a baseline neural ordinary differential equation task in the supplementary material. For each dynamical system in our collection, we generate trajectories with sufﬁciently coarse granularity to sample all regions of the attractor. At each timepoint, we compute the value of the right hand side of the corresponding dynamical equation, and we treat the value of this time derivative as the regression target. We use this dataset to compare several recent symbolic regression approaches: (1) DSR: a recurrent neural network trained with a risk-seeking policy gradient, which produces state-of-the-art results on a variety of challenging symbolic regression tasks [130]. (2) PySR: an open-source package inspired by the popular closed-source software Eureqa, which uses genetic programming and simulated annealing [90, 92, 95]. (3,4) PySINDY: a Python implementation of the widely-used SINDY algorithm, which uses sparse regression to decompose data into linear combinations of functions [89, 96]. For PySINDY we train separate models for purely polynomial (SINDY-poly) and trigonometric (SINDY-fourier) bases. For DSR and pySR we use a standard library of binary and unary expressions, {+, −, ×, ∇·}, {sin, cos, exp, log, tanh} [130]. After ﬁtting a formula using each method, we evaluate it on an unseen test trajectory arising from different initial conditions, and we report the the sMAPE error between the formula’s prediction and the true value along the trajectory.
Our results illustrate several features of our dataset, while also illustrating properties of the different symbolic regression algorithms. All algorithms show strong performance across the chaotic systems dataset (Figure 4). The two lowest-error models, pySR and DSR, exhibit nearly-equivalent performance when accounting for error ranges, and both achieve errors near zero on many systems. We attribute this strong performance to the relatively simple algebraic construction of most published systems: named chaotic systems will inevitably favor concise, demonstrative equations over complex expressions. In fact, several systems in our dataset belong to the Sprott attractor family, which represent the algebraically simplest chaotic systems [97]. In this sense, our dataset likely has similar complexity to the Feynman equations benchmark [37].
We highlight that PySINDY with a purely polynomial basis performs very well on our dataset, especially as a linear approach that requires a median training time of only 0.01 ± 0.01 s per system on a single CPU core. In comparison, pySR had a median time of 1400 ± 60 s per system on one
9

core, while DSR on one GPU required 4300 ± 200s per system—consistent with the results of recent symbolic regression benchmark suite [129]. However, parallelization reduces the runtime of all methods.
We emphasize that the relative performance of a given symbolic regression algorithm depends on diverse factors, such as equation complexity, the library of available unary and binary operators, the amount and dynamic range of available input data, the amount of compute available for reﬁnement, and the degree of nonlinearity of the underlying system. More generally, symbolic regression algorithms exhibit a bias-variance tradeoff manifesting as Pareto front bridging accuracy and parsimony: large models with many terms will appear more accurate, but at the expense of brevity and potentially robustness and interpretability [90]. More challenging benchmarks would include nested expressions and uncommon transcendental functions; these systems may be a more appropriate setting for benchmarking state-of-the-art techniques like DSR. Additionally, we do not include measurement noise in our experiments, a scenario in which DSR performs strongly compared to other methods [129, 130].
Interestingly, DSR exhibits the strongest dependence on the mathematical properties of the underlying dynamics: more chaotic systems consistently yield higher errors (Figure 4B). We consider this result surprising, because a priori we would expect the performance of a given symbolic regression algorithm to depend purely on the syntactic complexity of the target formula, rather than the dynamics that it produces. Because DSR uses a large model to navigate a space of smaller models, we hypothesize that more chaotic systems present a broader set of possible "partial formulae" that match speciﬁc subregimes of the attractor—an effect exploited in several recent decomposition techniques for chaotic systems [9, 11]. The diversity of these local approximants would result in a more complex global search space.
4 Discussion
We have introduced an extensible collection of known chaotic dynamical systems. In addition to representing a customizable benchmark for time series analysis and data-driven modelling, we have provided examples of additional applications, such as transfer learning for general time series analysis tasks, that are enabled by the generative nature of our dataset. We note that there are several other potential applications that we have not explored here: testing feedback-based control algorithms (which require perturbing the parameters of a given dynamical system, and then re-integrating), and inferring numerical propagators (such as Koopman operators)[57, 61, 62, 81–83, 98, 99]. In the appendix, we include preliminary benchmarks for a neural ordinary differential equations task [85–87, 131]; due to the direct connections between our work and this area, we hope to further explore these methods in future studies. Our work can be seen as systematizing the common practice of testing new methods on single chaotic systems, particularly the Lorenz attractor [9–11, 13–20, 126].
More broadly, our collection seeks to improve the interpretability of data-driven modelling from time series. For example, our forecasting benchmark experiments show that the Lyapunov exponent, a popular measure of local chaoticity, correlates with the empirical predictability of a system under a variety of models—a ﬁnding that matches intuition, but which has not (to our knowledge) previously been tested extensively. Likewise, in our symbolic regression benchmark we ﬁnd that more chaotic systems are harder to model, an effect we attribute to the diverse local approximants available for complex dynamical systems. These examples demonstrate how the control and mathematical context provided by differential equations can yield mechanistic insight beyond traditional time series.
Limitations of our approach include our inclusion only of known chaotic systems that have previously appeared in published works. This limits the rate at which our collection may expand, since each new entry requires manual curation and implementation in order to verify reported dynamics. Our focus on published systems may bias the dataset towards more unusual (and thus reportable) dynamics, particularly because there are inﬁnite possible chaotic systems. Moreover, in few dimensions chaotic dynamics are rare relative to the space of all possible models [105], although chaos becomes ubiquitous as the number of coupled variables increases [100]. Nonetheless, low-dimensional chaos may represent an instructive step towards understanding complex dynamics in high-dimensional systems.
10

Acknowledgments and Disclosure of Funding
We thank Gautam Reddy, Samantha Petti, Brian Matejek, and Yasa Baig for helpful discussions and comments on the manuscript. W. G. was supported by the NSF-Simons Center for Mathematical and Statistical Analysis of Biology at Harvard University, NSF Grant DMS 1764269, and the Harvard FAS Quantitative Biology Initiative. The author declares no competing interests.
References
[1] Crutchﬁeld, J. & Packard, N. Symbolic dynamics of one-dimensional maps: Entropies, ﬁnite precision, and noise. International Journal of Theoretical Physics 21, 433–466 (1982).
[2] Cvitanovic, P. et al. Chaos: classical and quantum, vol. 69 (Niels Bohr Institute, Copenhagen, 2005). URL http://chaosbook.org/.
[3] Farmer, J. D. Information dimension and the probabilistic structure of chaos. Zeitschrift für Naturforschung A 37, 1304–1326 (1982).
[4] Grebogi, C., Ott, E. & Yorke, J. A. Chaos, strange attractors, and fractal basin boundaries in nonlinear dynamics. Science 238, 632–638 (1987).
[5] Ott, E. Chaos in Dynamical Systems (Cambridge University Press, 2002).
[6] Tang, Y., Kurths, J., Lin, W., Ott, E. & Kocarev, L. Introduction to focus issue: When machine learning meets complex systems: Networks, chaos, and nonlinear dynamics. Chaos: An Interdisciplinary Journal of Nonlinear Science 30, 063151 (2020).
[7] Pathak, J., Hunt, B., Girvan, M., Lu, Z. & Ott, E. Model-free prediction of large spatiotemporally chaotic systems from data: A reservoir computing approach. Physical review letters 120, 024102 (2018).
[8] Boffetta, G., Cencini, M., Falcioni, M. & Vulpiani, A. Predictability: a way to characterize complexity. Physics reports 356, 367–474 (2002).
[9] Nassar, J., Linderman, S., Bugallo, M. & Park, I. M. Tree-structured recurrent switching linear dynamical systems for multi-scale modeling. In International Conference on Learning Representations (2018).
[10] Champion, K., Lusch, B., Kutz, J. N. & Brunton, S. L. Data-driven discovery of coordinates and governing equations. Proceedings of the National Academy of Sciences 116, 22445–22451 (2019).
[11] Costa, A. C., Ahamed, T. & Stephens, G. J. Adaptive, locally linear models of complex dynamics. Proceedings of the National Academy of Sciences 116, 1501–1510 (2019).
[12] Gilpin, W. Deep reconstruction of strange attractors from time series. Advances in Neural Information Processing Systems 33 (2020).
[13] Greydanus, S. J., Dzumba, M. & Yosinski, J. Hamiltonian neural networks. In Advances in Neural Information Processing Systems, 2794–2803 (2019).
[14] Lu, Z., Kim, J. Z. & Bassett, D. S. Supervised chaotic source separation by a tank of water. Chaos: An Interdisciplinary Journal of Nonlinear Science 30, 021101 (2020).
[15] Yu, R., Zheng, S., Anandkumar, A. & Yue, Y. Long-term forecasting using tensor-train rnns. arXiv preprint arXiv:1711.00073 (2017).
[16] Lu, Z. et al. Reservoir observers: Model-free inference of unmeasured variables in chaotic systems. Chaos: An Interdisciplinary Journal of Nonlinear Science 27, 041102 (2017).
[17] Bellot, A., Branson, K. & van der Schaar, M. Consistency of mechanistic causal discovery in continuous-time using neural odes. arXiv preprint arXiv:2105.02522 (2021).
11

[18] Wang, Z. & Guet, C. Reconstructing a dynamical system and forecasting time series by self-consistent deep learning. arXiv preprint arXiv:2108.01862 (2021).
[19] Li, X., Wong, T.-K. L., Chen, R. T. & Duvenaud, D. Scalable gradients for stochastic differential equations. In International Conference on Artiﬁcial Intelligence and Statistics, 3870–3882 (PMLR, 2020).
[20] Ma, Q.-L., Zheng, Q.-L., Peng, H., Zhong, T.-W. & Xu, L.-Q. Chaotic time series prediction based on evolving recurrent neural networks. In 2007 international conference on machine learning and cybernetics, vol. 6, 3496–3500 (IEEE, 2007).
[21] Kantz, H. & Schreiber, T. Nonlinear time series analysis, vol. 7 (Cambridge university press, 2004).
[22] Ismail, A., Gunady, M., Bravo, H. & Feizi, S. Benchmarking deep learning interpretability in time series predictions. Advances in Neural Information Processing Systems Foundation (NeurIPS) (2020).
[23] Lim, B., Arık, S. Ö., Loeff, N. & Pﬁster, T. Temporal fusion transformers for interpretable multi-horizon time series forecasting. International Journal of Forecasting (2021).
[24] Tél, T. The joy of transient chaos. Chaos: An Interdisciplinary Journal of Nonlinear Science 25, 097619 (2015).
[25] Chen, X., Nishikawa, T. & Motter, A. E. Slim fractals: The geometry of doubly transient chaos. Physical Review X 7, 021040 (2017).
[26] Grebogi, C., Ott, E. & Yorke, J. A. Critical exponent of chaotic transients in nonlinear dynamical systems. Physical review letters 57, 1284 (1986).
[27] Grebogi, C., Ott, E., Pelikan, S. & Yorke, J. A. Strange attractors that are not chaotic. Physica D: Nonlinear Phenomena 13, 261–268 (1984).
[28] Sommerer, J. C. & Ott, E. Particles ﬂoating on a moving ﬂuid: A dynamically comprehensible physical fractal. Science 259, 335–339 (1993).
[29] Grassberger, P. & Procaccia, I. Measuring the strangeness of strange attractors. Physica D: Nonlinear Phenomena 9, 189–208 (1983).
[30] Costa, M., Goldberger, A. L. & Peng, C.-K. Multiscale entropy analysis of complex physiologic time series. Physical review letters 89, 068102 (2002).
[31] Christ, M., Braun, N., Neuffer, J. & Kempa-Liehr, A. W. Time series feature extraction on basis of scalable hypothesis tests (tsfresh–a python package). Neurocomputing 307, 72–77 (2018).
[32] Myers, A. D., Yesilli, M., Tymochko, S., Khasawneh, F. & Munch, E. Teaspoon: A comprehensive python package for topological signal processing. In NeurIPS 2020 Workshop on Topological Data Analysis and Beyond (2020).
[33] Datseris, G. DynamicalSystems.jl: A Julia software library for chaos and nonlinear dynamics. Journal of Open Source Software 3, 598 (2018).
[34] Le Novere, N. et al. Biomodels database: a free, centralized database of curated, published, quantitative kinetic models of biochemical and cellular systems. Nucleic acids research 34, D689–D691 (2006).
[35] Lüders, C., Errami, H., Neidhardt, M., Samal, S. S. & Weber, A. Odebase: an extensible database providing algebraic properties of dynamical systems. In Proceedings of the Computer Algebra in Scientiﬁc Computing Conference (CASC, 2019).
[36] Uy, N. Q., Hoai, N. X., O’Neill, M., McKay, R. I. & Galván-López, E. Semantically-based crossover in genetic programming: application to real-valued symbolic regression. Genetic Programming and Evolvable Machines 12, 91–119 (2011).
12

[37] Udrescu, S.-M. & Tegmark, M. Ai feynman: A physics-inspired method for symbolic regression. Science Advances 6, eaay2631 (2020).
[38] La Cava, W., Danai, K. & Spector, L. Inference of compact nonlinear dynamic models by epigenetic local search. Engineering Applications of Artiﬁcial Intelligence 55, 292–306 (2016).
[39] Strogatz, S. H. Nonlinear dynamics and chaos with student solutions manual: With applications to physics, biology, chemistry, and engineering (CRC press, 2018).
[40] La Cava, W. et al. Contemporary symbolic regression methods and their relative performance. arXiv preprint arXiv:2107.14351 (2021).
[41] Dau, H. A. et al. The ucr time series archive. IEEE/CAA Journal of Automatica Sinica 6, 1293–1305 (2019).
[42] Bagnall, A., Lines, J., Bostrom, A., Large, J. & Keogh, E. The great time series classiﬁcation bake off: a review and experimental evaluation of recent algorithmic advances. Data mining and knowledge discovery 31, 606–660 (2017).
[43] Dempster, A., Petitjean, F. & Webb, G. I. Rocket: exceptionally fast and accurate time series classiﬁcation using random convolutional kernels. Data Mining and Knowledge Discovery 34, 1454–1495 (2020).
[44] Bagnall, A. et al. The uea multivariate time series classiﬁcation archive, 2018. arXiv preprint arXiv:1811.00075 (2018).
[45] Asuncion, A. & Newman, D. Uci machine learning repository (2007).
[46] Makridakis, S., Spiliotis, E. & Assimakopoulos, V. The m4 competition: 100,000 time series and 61 forecasting methods. International Journal of Forecasting 36, 54–74 (2020).
[47] Godahewa, R., Bergmeir, C., Webb, G. I., Hyndman, R. J. & Montero-Manso, P. Monash time series forecasting archive. arXiv preprint arXiv:2105.06643 (2021).
[48] Zhou, H. et al. Informer: Beyond efﬁcient transformer for long sequence time-series forecasting. In Proceedings of The Thirty-Fifth AAAI Conference on Artiﬁcial Intelligence, AAAI 2021, vol. 35, 11106–11115 (AAAI Press, 2021).
[49] Young, A. H., Knapp, K. R., Inamdar, A., Hankins, W. & Rossow, W. B. The international satellite cloud climatology project h-series climate data record product. Earth System Science Data 10, 583–593 (2018).
[50] Goldberger, A. L. et al. Physiobank, physiotoolkit, and physionet: components of a new research resource for complex physiologic signals. circulation 101, e215–e220 (2000).
[51] Oreshkin, B. N., Carpov, D., Chapados, N. & Bengio, Y. N-beats: Neural basis expansion analysis for interpretable time series forecasting. arXiv preprint arXiv:1905.10437 (2019).
[52] Lea, C., Vidal, R., Reiter, A. & Hager, G. D. Temporal convolutional networks: A uniﬁed approach to action segmentation. In European Conference on Computer Vision, 47–54 (Springer, 2016).
[53] Alexandrov, A. et al. GluonTS: Probabilistic and Neural Time Series Modeling in Python. J. Mach. Learn. Res. 21, 1–6 (2020).
[54] Herzen, J. et al. Darts: User-friendly modern machine learning for time series. arXiv preprint arXiv:2110.03224 (2021). URL https://arxiv.org/abs/2110.03224.
[55] Wang, W.-X., Yang, R., Lai, Y.-C., Kovanis, V. & Grebogi, C. Predicting catastrophes in nonlinear dynamical systems by compressive sensing. Physical review letters 106, 154101 (2011).
[56] Taylor, S. J. & Letham, B. Forecasting at scale. The American Statistician 72, 37–45 (2018).
13

[57] Lusch, B., Kutz, J. N. & Brunton, S. L. Deep learning for universal linear embeddings of nonlinear dynamics. Nature communications 9, 1–10 (2018).
[58] Hyndman, R. J. & Koehler, A. B. Another look at measures of forecast accuracy. International journal of forecasting 22, 679–688 (2006).
[59] Durbin, J. & Koopman, S. J. Time series analysis by state space methods (Oxford university press, 2012).
[60] Klus, S. et al. Data-driven model reduction and transfer operator approximation. Journal of Nonlinear Science 28, 985–1010 (2018).
[61] Otto, S. E. & Rowley, C. W. Koopman operators for estimation and control of dynamical systems. Annual Review of Control, Robotics, and Autonomous Systems 4, 59–87 (2021).
[62] Takeishi, N., Kawahara, Y. & Yairi, T. Learning koopman invariant subspaces for dynamic mode decomposition. arXiv preprint arXiv:1710.04340 (2017).
[63] Hastie, T., Tibshirani, R. & Friedman, J. The Elements of Statistical Learning: Data Mining, Inference, and Prediction. Springer series in statistics (Springer, 2009). URL https:// books.google.com/books?id=eBSgoAEACAAJ.
[64] Farmer, J. D. Dimension, fractal measures, and chaotic dynamics. In Evolution of order and chaos, 228–246 (Springer, 1982).
[65] Leitao, J. C., Lopes, J. V. P. & Altmann, E. G. Monte carlo sampling in fractal landscapes. Physical review letters 110, 220601 (2013).
[66] Press, W. H., Flannery, B. P., Teukolsky, S. A. & Vetterling, W. Numerical recipices, the art of scientiﬁc computing. Cambridge U. Press, Cambridge, MA (1986).
[67] Jiang, A. H. et al. Accelerating deep learning by focusing on the biggest losers. arXiv preprint arXiv:1910.00762 (2019).
[68] Kawaguchi, K. & Lu, H. Ordered sgd: A new stochastic optimization framework for empirical risk minimization. In International Conference on Artiﬁcial Intelligence and Statistics, 669– 679 (PMLR, 2020).
[69] Katharopoulos, A. & Fleuret, F. Not all samples are created equal: Deep learning with importance sampling. In International conference on machine learning, 2525–2534 (PMLR, 2018).
[70] Malhotra, P., TV, V., Vig, L., Agarwal, P. & Shroff, G. Timenet: Pre-trained deep recurrent neural network for time series classiﬁcation. arXiv preprint arXiv:1706.08838 (2017).
[71] Franceschi, J.-Y., Dieuleveut, A. & Jaggi, M. Unsupervised scalable representation learning for multivariate time series. Advances in Neural Information Processing Systems 32, 4650–4661 (2019).
[72] Löning, M. et al. sktime: A uniﬁed interface for machine learning with time series. arXiv preprint arXiv:1909.07872 (2019).
[73] Zhang, X., Wang, Z., Liu, D. & Ling, Q. Dada: Deep adversarial data augmentation for extremely low data regime classiﬁcation. In ICASSP 2019-2019 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP), 2807–2811 (IEEE, 2019).
[74] Tran, T., Pham, T., Carneiro, G., Palmer, L. & Reid, I. A bayesian data augmentation approach for learning deep models. In Advances in Neural Information Processing Systems, 2794–2803 (2017).
[75] Zhu, X., Liu, Y., Qin, Z. & Li, J. Data augmentation in emotion classiﬁcation using generative adversarial networks. arXiv preprint arXiv:1711.00648 (2017).
14

[76] Hauberg, S., Freifeld, O., Larsen, A. B. L., Fisher, J. & Hansen, L. Dreaming more data: Classdependent distributions over diffeomorphisms for learned data augmentation. In Artiﬁcial Intelligence and Statistics, 342–350 (PMLR, 2016).
[77] Karniadakis, G. E. et al. Physics-informed machine learning. Nature Reviews Physics 3, 422–440 (2021).
[78] de Silva, B. M., Higdon, D. M., Brunton, S. L. & Kutz, J. N. Discovery of physics from data: universal laws and discrepancies. Frontiers in artiﬁcial intelligence 3, 25 (2020).
[79] Callaham, J. L., Koch, J. V., Brunton, B. W., Kutz, J. N. & Brunton, S. L. Learning dominant physical processes with data-driven balance models. Nature communications 12, 1–10 (2021).
[80] Carleo, G. et al. Machine learning and the physical sciences. Reviews of Modern Physics 91, 045002 (2019).
[81] Costa, A. C., Ahamed, T., Jordan, D. & Stephens, G. Maximally predictive ensemble dynamics from data. arXiv preprint arXiv:2105.12811 (2021).
[82] Budišic´, M., Mohr, R. & Mezic´, I. Applied koopmanism. Chaos: An Interdisciplinary Journal of Nonlinear Science 22, 047510 (2012).
[83] Gilpin, W. Cellular automata as convolutional neural networks. Physical Review E 100, 032402 (2019).
[84] Chen, R. T., Rubanova, Y., Bettencourt, J. & Duvenaud, D. Neural ordinary differential equations. arXiv preprint arXiv:1806.07366 (2018).
[85] Kidger, P., Morrill, J., Foster, J. & Lyons, T. Neural controlled differential equations for irregular time series. arXiv preprint arXiv:2005.08926 (2020).
[86] Massaroli, S., Poli, M., Park, J., Yamashita, A. & Asama, H. Dissecting neural odes. arXiv preprint arXiv:2002.08071 (2020).
[87] Rackauckas, C. et al. Universal differential equations for scientiﬁc machine learning. arXiv preprint arXiv:2001.04385 (2020).
[88] Petersen, B. K. et al. Deep symbolic regression: Recovering mathematical expressions from data via risk-seeking policy gradients. arXiv preprint arXiv:1912.04871 (2019).
[89] Brunton, S. L., Proctor, J. L. & Kutz, J. N. Discovering governing equations from data by sparse identiﬁcation of nonlinear dynamical systems. Proceedings of the national academy of sciences 113, 3932–3937 (2016).
[90] Schmidt, M. & Lipson, H. Distilling free-form natural laws from experimental data. science 324, 81–85 (2009).
[91] Martin, B. T., Munch, S. B. & Hein, A. M. Reverse-engineering ecological theory from data. Proceedings of the Royal Society B: Biological Sciences 285, 20180422 (2018).
[92] Cranmer, M. et al. Discovering symbolic models from deep learning with inductive biases. NeurIPS 2020 (2020). 2006.11287.
[93] Rudy, S. H. & Sapsis, T. P. Sparse methods for automatic relevance determination. Physica D: Nonlinear Phenomena 418, 132843 (2021).
[94] Froyland, G. & Padberg, K. Almost-invariant sets and invariant manifolds—connecting probabilistic and geometric descriptions of coherent structures in ﬂows. Physica D: Nonlinear Phenomena 238, 1507–1523 (2009).
[95] Cranmer, M. Pysr: Fast & parallelized symbolic regression in python/julia (2020). URL http://doi.org/10.5281/zenodo.4041459.
[96] de Silva, B. et al. Pysindy: A python package for the sparse identiﬁcation of nonlinear dynamical systems from data. Journal of Open Source Software 5, 1–4 (2020).
15

[97] Sprott, J. C. Some simple chaotic ﬂows. Physical review E 50, R647 (1994).
[98] Gilpin, W., Huang, Y. & Forger, D. B. Learning dynamics from large biological datasets: machine learning meets systems biology. Current Opinion in Systems Biology (2020).
[99] Arbabi, H. & Mezic, I. Ergodic theory, dynamic mode decomposition, and computation of spectral properties of the koopman operator. SIAM Journal on Applied Dynamical Systems 16, 2096–2126 (2017).
[100] Ispolatov, I., Madhok, V., Allende, S. & Doebeli, M. Chaos in high-dimensional dissipative dynamical systems. Scientiﬁc reports 5, 1–6 (2015).
[101] Rößler, A. Runge–kutta methods for the strong approximation of solutions of stochastic differential equations. SIAM Journal on Numerical Analysis 48, 922–952 (2010).
[102] Guckenheimer, J. & Holmes, P. Nonlinear oscillations, dynamical systems, and bifurcations of vector ﬁelds, vol. 42 (Springer Science & Business Media, 2013).
[103] Kuznetsov, Y. A. Elements of applied bifurcation theory, vol. 112 (Springer Science & Business Media, 2013).
[104] Strogatz, S. H. Nonlinear dynamics and chaos with student solutions manual: With applications to physics, biology, chemistry, and engineering (CRC press, 2018).
[105] Ott, E. Chaos in Dynamical Systems (Cambridge University Press, 2002).
[106] Kantz, H. & Schreiber, T. Nonlinear time series analysis, vol. 7 (Cambridge university press, 2004).
[107] Wolf, A., Swift, J. B., Swinney, H. L. & Vastano, J. A. Determining lyapunov exponents from a time series. Physica D: nonlinear phenomena 16, 285–317 (1985).
[108] Holzfuss, J. & Parlitz, U. Lyapunov exponents from time series. In Lyapunov exponents, 263–270 (Springer, 1991).
[109] Datseris, G. DynamicalSystems.jl: A Julia software library for chaos and nonlinear dynamics. Journal of Open Source Software 3, 598 (2018).
[110] Grassberger, P. & Procaccia, I. Characterization of strange attractors. Physical review letters 50, 346 (1983).
[111] Costa, M., Goldberger, A. L. & Peng, C.-K. Multiscale entropy analysis of complex physiologic time series. Physical review letters 89, 068102 (2002).
[112] Ahmed, M. U. & Mandic, D. P. Multivariate multiscale entropy: A tool for complexity analysis of multichannel data. Physical Review E 84, 061918 (2011).
[113] Christ, M., Braun, N., Neuffer, J. & Kempa-Liehr, A. W. Time series feature extraction on basis of scalable hypothesis tests (tsfresh–a python package). Neurocomputing 307, 72–77 (2018).
[114] McInnes, L., Healy, J. & Melville, J. Umap: Uniform manifold approximation and projection for dimension reduction. arXiv preprint arXiv:1802.03426 (2018).
[115] Pedregosa, F. et al. Scikit-learn: Machine learning in python. the Journal of machine Learning research 12, 2825–2830 (2011).
[116] Löning, M. et al. sktime: A uniﬁed interface for machine learning with time series. arXiv preprint arXiv:1909.07872 (2019).
[117] Alexandrov, A. et al. GluonTS: Probabilistic and Neural Time Series Modeling in Python. J. Mach. Learn. Res. 21, 1–6 (2020).
[118] Herzen, J. et al. Darts: User-friendly modern machine learning for time series. arXiv preprint arXiv:2110.03224 (2021). URL https://arxiv.org/abs/2110.03224.
16

[119] Oreshkin, B. N., Carpov, D., Chapados, N. & Bengio, Y. N-beats: Neural basis expansion analysis for interpretable time series forecasting. arXiv preprint arXiv:1905.10437 (2019).
[120] Lea, C., Vidal, R., Reiter, A. & Hager, G. D. Temporal convolutional networks: A uniﬁed approach to action segmentation. In European Conference on Computer Vision, 47–54 (Springer, 2016).
[121] Godahewa, R., Bergmeir, C., Webb, G. I., Hyndman, R. J. & Montero-Manso, P. Monash time series forecasting archive. arXiv preprint arXiv:2105.06643 (2021).
[122] Hastie, T., Tibshirani, R. & Friedman, J. The Elements of Statistical Learning: Data Mining, Inference, and Prediction. Springer series in statistics (Springer, 2009). URL https:// books.google.com/books?id=eBSgoAEACAAJ.
[123] Dau, H. A. et al. The ucr time series archive. IEEE/CAA Journal of Automatica Sinica 6, 1293–1305 (2019).
[124] Franceschi, J.-Y., Dieuleveut, A. & Jaggi, M. Unsupervised scalable representation learning for multivariate time series. Advances in Neural Information Processing Systems 32, 4650–4661 (2019).
[125] Bai, S., Kolter, J. Z. & Koltun, V. An empirical evaluation of generic convolutional and recurrent networks for sequence modeling. arXiv preprint arXiv:1803.01271 (2018).
[126] Gilpin, W. Deep reconstruction of strange attractors from time series. Advances in Neural Information Processing Systems 33 (2020).
[127] Kingma, D. P. & Ba, J. Adam: A method for stochastic optimization. arXiv preprint arXiv:1412.6980 (2014).
[128] Dempster, A., Petitjean, F. & Webb, G. I. Rocket: exceptionally fast and accurate time series classiﬁcation using random convolutional kernels. Data Mining and Knowledge Discovery 34, 1454–1495 (2020).
[129] La Cava, W. et al. Contemporary symbolic regression methods and their relative performance. arXiv preprint arXiv:2107.14351 (2021).
[130] Petersen, B. K. et al. Deep symbolic regression: Recovering mathematical expressions from data via risk-seeking policy gradients. arXiv preprint arXiv:1912.04871 (2019).
[131] Chen, R. T., Rubanova, Y., Bettencourt, J. & Duvenaud, D. Neural ordinary differential equations. arXiv preprint arXiv:1806.07366 (2018).
[132] Gebru, T. et al. Datasheets for datasets. arXiv preprint arXiv:1803.09010 (2018).
[133] Shi, E., Chan, T. H., Rieffel, E., Chow, R. & Song, D. Privacy-preserving aggregation of time-series data. In Proc. NDSS, vol. 2, 1–17 (Citeseer, 2011).
[134] Sprott, J. C. Elegant chaos: algebraically simple chaotic ﬂows (World Scientiﬁc, 2010).
[135] Meier, J. Presentation of attractors with cinema. http://www.3d-meier.de/tut19/ Seite1.html (2003). [Online; accessed 19-March-2020].
[136] Myers, A. D., Yesilli, M., Tymochko, S., Khasawneh, F. & Munch, E. Teaspoon: A comprehensive python package for topological signal processing. In NeurIPS 2020 Workshop on Topological Data Analysis and Beyond (2020).
17

Checklist
1. For all authors...
(a) Do the main claims made in the abstract and introduction accurately reﬂect the paper’s contributions and scope? [Yes]
(b) Did you describe the limitations of your work? [Yes] The limitations have been combined into the end of the Discussion section.
(c) Did you discuss any potential negative societal impacts of your work? [Yes] In addition to the main text discussion, the supplementary material contains an additional dataset datasheet.
(d) Have you read the ethics review guidelines and ensured that your paper conforms to them? [Yes]
2. If you are including theoretical results...
(a) Did you state the full set of assumptions of all theoretical results? [Yes] (b) Did you include complete proofs of all theoretical results? [N/A] The paper does not
contain theorems or theoretical claims.
3. If you ran experiments (e.g. for benchmarks)...
(a) Did you include the code, data, and instructions needed to reproduce the main experimental results (either in the supplemental material or as a URL)? [Yes] All code used to produce benchmarks is included in the dataset repository.
(b) Did you specify all the training details (e.g., data splits, hyperparameters, how they were chosen)? [Yes] . In addition to the main text, the experiments are described in greater detail in the appendix. Additionally, all results and code are available (including the code to make the ﬁgures).
(c) Did you report error bars (e.g., with respect to the random seed after running experiments multiple times)? [Yes] For each of the 131 dynamical system datasets, we tuned hyperparameters and trained models separately for each of ﬁve distinct neural network architectures (in addition to a variety of other models), as well as for two different time series granularities each. While we did not train replicates of each model for each dynamical system, when comparing models we report distributions across the ensemble of dynamical systems. Likewise, for the transfer learning experiments, we report average scores across the entire UCR archive. Overall, all statistical estimates reported in our paper (i.e., those with error bars) aggregate at least 100 trained models.
(d) Did you include the total amount of compute and the type of resources used (e.g., type of GPUs, internal cluster, or cloud provider)? [Yes] Compute resources are described with the experiments in the main text, and we elaborate on our resources in the supplement.
4. If you are using existing assets (e.g., code, data, models) or curating/releasing new assets...
(a) If your work uses existing assets, did you cite the creators? [Yes] Our code and implementations of chaotic systems are new. Since most of the systems originally appear a mathematical statements in published papers, our database includes a dedicated citation ﬁeld.
(b) Did you mention the license of the assets? [Yes] . We include an Apache 2.0 License in the project repository.
(c) Did you include any new assets either in the supplemental material or as a URL? [Yes] Links to the dataset and benchmark code are provided in the main text, appendix, and with the submission.
(d) Did you discuss whether and how consent was obtained from people whose data you’re using/curating? [N/A] No human-generated data is involved in this study.
(e) Did you discuss whether the data you are using/curating contains personally identiﬁable information or offensive content? [N/A] No human-generated data is involved in this study.
5. If you used crowdsourcing or conducted research with human subjects...
(a) Did you include the full text of instructions given to participants and screenshots, if applicable? [N/A] No human-derived data is used in this study.
18

(b) Did you describe any potential participant risks, with links to Institutional Review Board (IRB) approvals, if applicable? [N/A] No human-derived data is used in this study.
(c) Did you include the estimated hourly wage paid to participants and the total amount spent on participant compensation? [N/A] No human-derived data is used in this study.
19

Contents

1 Introduction

1

2 Description of Datasets

2

2.1 Prior Work. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4

3 Experiments

5

4 Discussion

10

5 Data Availability

21

6 Descriptions of all systems

23

7 Dataset structure and format

26

8 Glossary

26

9 Calculation of mathematical properties

28

10 Statistical Features and Embedding

29

11 Forecasting Experiments

29

A The effect of noise on forecasting results. . . . . . . . . . . . . . . . . . . . . . . 29

12 Forecasting experiments as granularity and noise are varied

30

13 Relative performance of forecasting models across different mathematical properties 31

14 Importance Sampling Experiments

32

15 Transfer Learning Experiments

32

16 Symbolic Regression Experiments

33

17 Neural Ordinary Differential Equation Experiments

33

18 Datasheet: Dataset documentation and intended uses

33

.1 Motivation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34

.2 Composition . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34

.3 Collection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35

.4 Preprocessing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36

.5 Distribution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36

.6 Legal . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36

19 Author statement and hosting plan

36

20

5 Data Availability
The database of dynamical models and precomputed time series is available on GitHub at https: //github.com/williamgilpin/dysts. The benchmarks subdirectory contains all code needed reproduce the benchmarks, ﬁgures, and tables in this paper. All included equations are in the public domain, and all precomputed time series datasets have been generated de novo from these equations. No license is required to use these equations or datasets. The repository and precomputed datasets include an Apache 2.0 license. The author attests that they bear responsibility for copyright matters associated with this dataset.
21

Figure S1: All dynamical systems currently in the database. 22

6 Descriptions of all systems
Descriptions and citations for all systems are included below, and each system is visualized in Figure S1. Each system’s entry in the project repository contains full records and descriptions.

System
Aizawa AnishchenkoAstakhov Arneodo ArnoldBeltramiChildress ArnoldWeb BeerRNN BelousovZhabotinsky BickleyJet Blasius BlinkingRotlet BlinkingVortex Bouali Bouali2 BurkeShaw CaTwoPlus CaTwoPlusQuasiperiodic CellCycle CellularNeuralNetwork Chen ChenLee Chua CircadianRhythm CoevolvingPredatorPrey Colpitts Coullet Dadras DequanLi DoubleGyre DoublePendulum Dufﬁng ExcitableCell Finance FluidTrampoline ForcedBrusselator ForcedFitzHughNagumo ForcedVanDerPol GenesioTesi GuckenheimerHolmes Hadley Halvorsen HastingsPowell HenonHeiles HindmarshRose Hopﬁeld HyperBao HyperCai HyperJha HyperLorenz HyperLu HyperPang HyperQi HyperRossler HyperWang

Reference
Aizawa, Yoji, and Tatsuya Uezu (1982). Topolog... Anishchenko, et al. Nonlinear dynamics of chao... Arneodo, A., Coullet, P. & Tresser, C. Occuren... V. I. Arnold, Journal of Applied Mathematics a... Froeschle, C., Guzzo, M. & Legga, E (2000). Gr... Beer, R. D. (1995). On the dynamics of small c... Gyorgyi and Field (1992). A three-variable mod... Hadjighasem, Karrasch, Teramoto, Haller (2016)... Blasius, Huppert, Stone. Nature 1999 Meleshko & Aref. A blinking rotlet model for c... Aref (1984). Stirring by chaotic advection. J.... Bouali (1999). Feedback loop in extended Van d... Bouali (1999). Feedback loop in extended Van d... Shaw (1981). Zeitschrift fur Naturforschung. Houart, Dupont, Goldbeter. Bull Math Biol 1999. Houart, Dupont, Goldbeter. Bull Math Biol 1999. Romond, Rustici, Gonze, Goldbeter. 1999. Arena, Caponetto, Fortuna, and Porto., Int J B... Chen (1997). Proc. First Int. Conf. Control of... Chen HK, Lee CI (2004). Anti-control of chaos ... Chua, L. O. (1969) Introduction to Nonlinear N... Leloup, Gonze, Goldbeter. 1999. Gonze, Leloup... Gilpin & Feldman (2017). PLOS Comp Biol Kennedy (2007). IEEE Trans Circuits & Systems.... Arneodo, A., Coullet, P. & Tresser, C. Occuren... S Dadras, HR Momeni (2009). A novel three-dime... Li, Phys Lett A. 2008: 387-393. Shadden, Lekien, Marsden (2005). Deﬁnition an... See, for example: Marion (2013). Classical dyn... Dufﬁng, G. (1918), Forced oscillations with v... Teresa Chay. Chaos In A Three-variable Model O... Guoliang Cai, Juanjuan Huang. International Jo... Gilet, Bush. The ﬂuid trampoline: droplets bo... I. Prigogine, From Being to Becoming: Time and... FitzHugh, Richard (1961). Impulses and Physiol... B. van der Pol (1920). A theory of the amplitu... Genesio, Tesi (1992). Harmonic balance methods... Guckenheimer, John, and Philip Holmes (1983). ... G. Hadley (1735). On the cause of the general ... Sprott, Julien C (2010). Elegant chaos: algebr... Hastings, Powell. Ecology 1991 Henon, M.; Heiles, C. (1964). The applicabilit... Marhl, Perc. Chaos, Solitons, Fractals 2005. Lewis & Glass, Neur Comp (1992) Bao, Liu (2008). A hyperchaotic attractor coi... Guoliang, Huang (2007). A New Finance Chaotic ... Jürgen Meier (2003). Presentation of Attractor... Jürgen Meier (2003). Presentation of Attractor... Jürgen Meier (2003). Presentation of Attractor... Jürgen Meier (2003). Presentation of Attractor... G. Qi, M. A. van Wyk, B. J. van Wyk, and G. Ch... Rossler, O. E. (1979). An equation for hyperch... Wang, Z., Sun, Y., van Wyk, B. J., Qi, G. & va...

Description
A torus-like attractor related to the forced L... Stochastic resonance in forced oscillators. A modiﬁed Lotka-Volterra ecosystem, also know... An exact solution of Euler’s equation for invi... A quasi-integrable system that transitions to ... A two-neuron minimal model nervous system. A reduced-order model of the BZ reaction that ... A zonal jet passing between two counter rotati... A chaotic food web composed of interacting pr... The location of the mixer is chosen so that th... A classic minimal chaotic mixing ﬂow. Solutio... Economic cycles with ﬂuctuating demand. Relat... A modiﬁed economic cycle model. A scroll-like attractor with unique symmetry a... Intracellular calcium ion oscillations. Intracellular calcium ion oscillations with qu... A simpliﬁed model of the cell cycle. The para... Cellular neural network dynamics. A system based on feedback anti-control in eng... A rigid body with feedback anti-control. An electronic circuit with a diode providing n... The Drosophila circadian rhythm under periodic... A system of predator-prey equations with co-ev... An electrical circuit used as a signal generator. A variant of the Arneodo attractor An electronic circuit capable of producing mul... Related to the Three Scroll uniﬁed attractor ... A time-dependent ﬂuid ﬂow exhibiting Lagrang... Two coupled rigid pendula without damping. A monochromatically-forced rigid pendulum, wit... A reduced-order variant of the Hodgkin-Huxley ... Stock ﬂuctuations under varying investment de... A droplet bouncing on a horizontal soap ﬁlm. An autocatalytic chemical system. A driven neuron model sustaining both quiesent... An electronic circuit containing a triode. A nonlinear control system with feedback. A nonlinear oscillator. An atmospheric convective cell. An algebraically-simple chaotic system with qu... A three species food web. A star’s motion around the galactic center. A neuron model exhibiting spiking and bursting. A neural network with frustrated connectivity Hyperchaos in the Lu system. A hyperchaotic variant of the Finance system. A hyperchaotic system. A hyperchaotic variant of the Lorenz attractor. A hyperchaotic variant of the Lu attractor. A hyperchaotic system. A hyperchaotic variant of the Qi system. A hyperchaotic variant of the Rossler system. A hyperchaotic variant of the Wang system.

23

HyperXu HyperYan HyperYangChen IkedaDelay IsothermalChemical ItikBanksTumor JerkCircuit KawczynskiStrizhak Laser LiuChen Lorenz Lorenz84 Lorenz96 LorenzBounded LorenzCoupled LorenzStenﬂo LuChen LuChenCheng MacArthur MackeyGlass MooreSpiegel MultiChua NewtonLiepnik NoseHoover NuclearQuadrupole OscillatingFlow PanXuZhou PehlivanWei PiecewiseCircuit Qi QiChen RabinovichFabrikant RayleighBenard RikitakeDynamo Rossler Rucklidge Sakarya SaltonSea SanUmSrisuchinwong ScrollDelay ShimizuMorioka SprottA SprottB SprottC SprottD SprottDelay SprottE SprottF SprottG SprottH SprottI SprottJ SprottJerk SprottK SprottL SprottM SprottMore SprottN SprottO

Letellier & Rossler (2007). Hyperchaos. Schola... Jürgen Meier (2003). Presentation of Attractor... Jürgen Meier (2003). Presentation of Attractor... K. Ikeda and K. Matsumoto (1987). High-dimensi... Petrov, Scott, Showalter. Mixed-mode oscillati... Itik, Banks. Int J Bifurcat Chaos 2010 Sprott (2011). A new chaotic jerk circuit. IEE... P. E. Strizhak and A. L. Kawczynski, J. Phys. ... Abooee, Yaghini-Bonabi, Jahed-Motlagh (2013). ... Liu, Chen. Int J Bifurcat Chaos. 2004: 1395-1403. Lorenz, Edward N (1963). Deterministic nonperi... E. Lorenz (1984). Irregularity: a fundamental ... Lorenz, Edward (1996). Predictability: A probl... Sprott & Xiong (2015). Chaos. Lorenz, Edward N. Deterministic nonperiodic ﬂ... Letellier & Rossler (2007). Hyperchaos. Schola... Lu, Chen. Int J Bifurcat Chaos. 2002: 659-661. Lu, Chen, Cheng. Int J Bifurcat Chaos. 2004: 1... MacArthur, R. 1969. Species packing, and what ... Glass, L. and Mackey, M. C. (1979). Pathologic... Moore, Spiegel. A Thermally Excited Nonlinear ... Mufcstak E. Yalcin, Johan A. K. Suykens, Joos ... Leipnik, R. B., and T. A. Newton (1981). Doubl... Nose, S (1985). A uniﬁed formulation of the c... Baran V. and Raduta A. A. (1998), Internationa... T. H. Solomon and J. P. Gollub, Phys. Rev. A 3... Zhou, Wuneng, et al. On dynamics analysis of a... Pehlivan, Ihsan, and Wei Zhouchao (2012). Anal... A. Tamasevicius, G. Mykolaitis, S. Bumeliene, ... G. Qi, M. A. van Wyk, B. J. van Wyk, and G. Ch... Qi et al. Chaos, Solitons & Fractals 2008. Rabinovich, Mikhail I.; Fabrikant, A. L. (1979... Yanagita, Kaneko (1995). Rayleigh-Bénard... Rikitake, T., Oscillations of a system of disk... Rossler, O. E. (1976), An Equation for Continu... Rucklidge, A.M. (1992). Chaos in models of dou... Li, Chunbiao, et al (2015). A novel four-wing ... Upadhyay, Bairagi, Kundu, Chattopadhyay (2007)... San-Um, Srisuchinwong. J. Comp 2012 R.D. Driver, Ordinary and Delay Differential E... Shimizu, Morioka. Phys Lett A. 1980: 201-204 Sprott (1994). Some simple chaotic ﬂows. Phys... Sprott (1994). Some simple chaotic ﬂows. Phys... Sprott (1994). Some simple chaotic ﬂows. Phys... Sprott (1994). Some simple chaotic ﬂows. Phys... Sprott, J. C (2007). A simple chaotic delay di... Sprott (1994). Some simple chaotic ﬂows. Phys... Sprott (1994). Some simple chaotic ﬂows. Phys... Sprott (1994). Some simple chaotic ﬂows. Phys... Sprott (1994). Some simple chaotic ﬂows. Phys... Sprott (1994). Some simple chaotic ﬂows. Phys... Sprott (1994). Some simple chaotic ﬂows. Phys... Sprott, J. C. Simplest dissipative chaotic ﬂo... Sprott (1994). Some simple chaotic ﬂows. Phys... Sprott (1994). Some simple chaotic ﬂows. Phys... Sprott (1994). Some simple chaotic ﬂows. Phys... Sprott, J. C. (2020). Do We Need More Chaos Ex... Sprott (1994). Some simple chaotic ﬂows. Phys... Sprott (1994). Some simple chaotic ﬂows. Phys...

A hyperchaotic system. A hyperchaotic system. A hyperchaotic system. A passive optical resonator system. A standard... An isothermal chemical system with mixed-mode ... A model of cancer cell populations. An electronic circuit with nonlinearity provid... A chemical oscillator model describing mixed-m... A semiconductor laser model Derived from Sakarya. A minimal weather model based on atmospheric c... Atmospheric circulation analogous to Hadley co... A climate model containing ﬂuid-like advectiv... The Lorenz attractor in the presence of a conf... Two coupled Lorenz attractors. Atmospheric acoustic-gravity waves. A system that switches shapes between the Lore... A four scroll attractor that reduces to Lorenz... Population abundances in a plankton community,... A physiological circuit with time-delayed feed... A thermo-mechanical oscillator. Multiple interacting Chua electronic circuits. Euler’s equations for a rigid body, augmented ... Fixed temperature molecular dynamics for a str... A quadrupole boson Hamiltonian that produces c... A model ﬂuid ﬂow that produces KAM tori. Ori... A named attractor related to the DequanLi attr... A system with quadratic nonlinearity, which un... A delay model that can be implemented as an el... A hyperchaotic system with a wide power spectrum. A double-wing chaotic attractor that arises fr... A reduced-order model of propagating waves in ... A reduced-order model of a convective cell. Electric current and magnetic ﬁeld of two cou... Spiral-type chaos in a simple oscillator model. Two-dimensional convection in a horizontal lay... An attractor that arises due to merging of two... An eco-epidemiological model of bird and ﬁsh ... A two-scroll attractor arising from dynamical ... A delay model that can be implemented as an el... A system that bifurcates from a symmetric limi... A member of the Sprott family of algebraically... A member of the Sprott family of algebraically... A member of the Sprott family of algebraically... A member of the Sprott family of algebraically... An algebraically simple delay equation. A stan... A member of the Sprott family of algebraically... A member of the Sprott family of algebraically... A member of the Sprott family of algebraically... A member of the Sprott family of algebraically... A member of the Sprott family of algebraically... A member of the Sprott family of algebraically... An algebraidally simple ﬂow depending on a th... A member of the Sprott family of algebraically... A member of the Sprott family of algebraically... A member of the Sprott family of algebraically... A multifractal system with a nearly 3D attractor A member of the Sprott family of algebraically... A member of the Sprott family of algebraically...

24

SprottP SprottQ SprottR SprottS SprottTorus StickSlipOscillator SwingingAtwood Thomas ThomasLabyrinth Torus Tsucs2 TurchinHanski VallisElNino VossDelay WangSun WindmiReduced YuWang YuWang2 ZhouChen

Sprott (1994). Some simple chaotic ﬂows. Phys... Sprott (1994). Some simple chaotic ﬂows. Phys... Sprott (1994). Some simple chaotic ﬂows. Phys... Sprott (1994). Some simple chaotic ﬂows. Phys... Sprott Physics Letters A 2014 Awrejcewicz, Jan, and M. M. Holicke (1999). In... Tuﬁllaro, Nicholas B.; Abbott, Tyler A.; Grif... Thomas, Rene (1999). Deterministic chaos seen ... Thomas, Rene. Deterministic chaos seen in term... See, for example, Strogatz (1994). Nonlinear D... Pan, Zhou, Li (2013). Synchronization of Three... Turchin, Hanski. The American Naturalist 1997.... Vallis GK. Conceptual models of El Nio and the... Voss (2002). Real-time anticipation of chaotic... Wang, Z., Sun, Y., van Wyk, B. J., Qi, G. & va... Smith, Thiffeault, Horton. J Geophys Res. 2000... Yu, Wang (2012). A novel three dimension auton... Yu, Wang (2012). A novel three dimension auton... Zhou, Chen (2004). A simple smooth chaotic sys...

A member of the Sprott family of algebraically... A member of the Sprott family of algebraically... A member of the Sprott family of algebraically... A member of the Sprott family of algebraically... A multiattractor system that goes to a torus o... A weakly forced (quasiautonomous) oscillator w... A mechanical system consisting of two swinging... A cyclically-symmetric attractor correspondng ... A system in which trajectories seemingly under... A minimal quasiperiodic ﬂow on a torus. All l... A named attractor related to the DequanLi attr... A chaotic three species food web. The species... Atmospheric temperature ﬂuctuations with annu... An electronic circuit with delayed feedback. A... A four-scroll attractor Energy transfer into the ionosphere and magnet... A temperature-compensation circuit with an ope... An alternative temperature-compensation circui... A feedback circuit model.

25

Table S2: Properties recorded for each chaotic system in the dataset

System Name

Reference

A citation to published work or original source where available.

Description

A brief description of domain area, or original motivation for publication

Parameters

Parameters governing the differential equation (e.g for bifurcations)

Embedding Dimension

The number of dynamical variables, or the number set by default for delay equations

Unbounded Indices

Indices of dynamical variables that grow without bound (e.g. time for nonautonomous systems)

dt

The integration timestep, determined by surrogate testing of the power spectrum

Initial Conditions

Initial conditions on the attractor, determined by a long simulation discarding a transient

Period

The dominant timescale in the system, determined by surrogate testing of the power spectrum

Lyapunov Spectrum

The spectrum of Lyapunov exponents, measure of trajectory dispersion

Largest Lyapunov Exponent The largest Lyapunov exponent, a measure of chaoticity

Correlation Dimension

The fractal dimension, a measure of geometric complexity

Kaplan-Yorke Dimension An alternative fractal dimension, a measure of geometric complexity

Multiscale Entropy

A measure of signal complexity

Pesin Entropy

An upper bound on the entropy under discretized measurements

Delay

Whether the system is a delay differential equation

Hamiltonian

Whether the dynamics are Hamiltonian

Non-autonomous

Whether the dynamics depend explicitly on time

7 Dataset structure and format
All systems are primarily represented as Python objects, with names matching those in Figure S1 and the accompanying table. Underlying mathematical properties, parameters of the governing differential equation, recommended integration timestep and period, and default initial conditions are accessed as instance attributes. A callable implementation of the right hand side of the differential equation, a function for loading precomputed trajectories, and a function for re-integrating with default initial conditions and timescales, are included as instance methods. Additionally, we include a separate submodule for loading precomputed time series in bulk, or re-integrating all systems, which are useful for benchmarking tasks.
Our object representation abstracts the underlying records and metadata for each system, which are stored in a JSON ﬁle. The attributes recorded in the database ﬁle for each system are listed in Table S2.
For each dynamical system, we include 16 precomputed time series corresponding to all combinations of the following: coarse and ﬁne sampling granularity, train and test splits emanating from different initial conditions, multivariate and univariate views, and trajectories with and without Brownian noise inﬂuencing the dynamics. The precomputed granularities correspond to a coarse granularity sampled at 15 points per period (the dominant timescale determined by surrogate testing on the power spectrum), and a ﬁne granularity sampled at 100 points per period. The stochastically-forced trajectories correspond to adding a Langevin forcing term to the right hand side of each term in the dynamical equation. We used a scaled force with amplitude equal to to 1/40 the standard deviation of the values the dynamical variable takes on the attractor in the absence of noise. When integrating these trajectories, we use variant of the Runge-Kutta algorithm for stochastic differential equations [101], as implemented in the Python package sdeint.
8 Glossary
Here, we provide a glossary of several terms as they appear in the work presented here. More detailed treatments can be found in several references [102–105].
Attractor. A set of points within the state space of a dynamical system that most initial conditions approach over time. These points usually represent a subset of the full state space. In the work presented here, “attractor” and “dynamical attractor” are used interchangeably.
Bifurcation. A qualitative change in the dynamics exhibited by a dynamical system, as one or more system parameters is varied. For example, strange attractor can become a periodic orbit or ﬁxed point

26

as one of the parameters of the underlying dynamical equations is varied. Importantly, bifurcations occur as the result of changes to the underlying dynamical system, and do not in themselves result from the dynamics.
Dynamical System. A set of rules describing how points within a space evolve over time. Dynamical systems usually appear either as (1) systems of coupled ordinary differential equations, which can be integrated to produce continuous-time trajectories, or (2) discrete-time maps that send points at one timepoint to new points a ﬁxed interval ∆t later. In the context of the work presented here, a dynamical system is a single set of deterministic ordinary differential equations (e.g. the Lorenz system).
Entropy. A statistical property of a dynamical system corresponding to the gain of information over time as the system is observed. A highly regular and predictable process will have low entropy, while a stochastic process will have high entropy. Unlike dimensionality, the entropy of a system typically does not require a notion of distance on the state space. For example, if different regions of an attractor are colored with discrete labels, it is possible to deﬁne the entropy of a trajectory based on the sequence of symbols it passes through—without referencing the precise locations visited, or the distance among the symbols.
Ergodic. A property of a dynamical system specifying that, over sufﬁciently long timescales, the system will visit all parts of its state space. A dissipative dynamical system will not be ergodic over its full state space, but it may be ergodic once it settles onto an attractor. In the context of time series analysis, ergodicity implies that a forecasting model trained on many short trajectories initialized at different points on an attractor will have the same properties as a model trained on subsections of a single long trajectory.
Fractal. A set of points that appears self-similar over all length scales. Fractals have dimensionality intermediate to traditional mathematical objects like lines and surfaces, resulting in a diffuse appearance.
Initial Conditions. A point within the state space of a dynamical system. As time passes, the rules specifying the dynamical system will transmit this point to other points within the system’s state space. An initial condition does not necessarily lie on an attractor of the dynamical system.
Limit Cycle. A type of attractor in which trajectories undergo recurring periodic motion. A swinging, frictionless pendulum exhibits a limit cycle.
Lyapunov Exponent. The initial growth rate of an inﬁnitesimal perturbation to a point within a dynamical system’s state space. If two initial conditions are chosen with inﬁnitesimal initial separation, then as time passes the two points will spread apart exponentially. The logarithm of the rate of change in their separation equals the Lyapunov exponent. For non-chaotic systems (such as systems evolving along regular limit cycles), neighboring points do not diverge, and so the Lyapunov exponent is zero. When used in reference to an entire attractor, the Lyapunov exponent corresponds to an average over all points on the attractor.
Quasiperiodic Motion. A type of attractor corresponding to non-repeating continuous motion, which does not exhibit fractal structure. The dynamics contain at least two frequencies that are incommensurate with one another. Quasiperiodic attractors have integer fractal dimension and a surface-like appearance, in contrast to the diffuse appearance of strange attractors.
Stable Fixed Point. A type of attractor in which trajectories converge to a single location within the state space.
State Space. The set of all possible states of a dynamical system. Initial conditions, trajectories, and attractors are all subsets of this space.
Strange Attractor. An attractor in which trajectories continuously wander over a bounded region in state space, but never stop at a ﬁxed point or settle into a repeating limit cycle. The dynamics are
27

therefore globally stable, but locally unstable: the attractor contains a dense set of unstable periodic orbits, and trajectories brieﬂy shadow individual orbits before escaping onto others. These unstable orbits span a continuous range of frequencies, producing motion at a range of length scales—and resulting in the fractal appearance of strange attractors.
Trajectory. A set of points corresponding to the locations to which a given initial condition is mapped by a dynamical system. Trajectories are continuous curves for continuous-time systems, and isolated points for discrete-time maps.
9 Calculation of mathematical properties
For all mathematical properties we perform 20 replicate computations from different initial conditions, and record the average in our database. To ensure high-quality estimates, we compute trajectories at high granularity of 500 points per period (as determined by the dominant frequency in the power spectrum), and we use trajectories with length 2500, corresponding to ﬁve complete periods.
Timescale alignment. All systems in our database have been timescale-aligned, allowing them to be re-integrated at equivalent dominant timescales and sampling rates. This feature differentiates our approach from other time series collections, as well as previous applications of data-driven models to ordinary differential equations, and it allows easier comparison among systems. In order to align timescales, for each system we calculate the optimal integration timestep by computing the power spectrum, and then using random phase surrogates in order to identify the smallest and dominant signiﬁcant signiﬁcant frequencies [106]. The smallest frequency determines the integration timestep when re-integrating each system, while the highest amplitude peak in the power spectrum determines the dominant signiﬁcant frequency, and thus the governing timescale. We use the dominant timescale to downsample integrated dynamics, ensuring consistency across systems. We record both ﬁelds in our database.
Lyapunov Exponents. We implement standard techniques for computing Lyapunov exponents [107–109]. Our basic approach consists of following a bundle of vectors along a trajectory, and at each timestep using the Gram-Schmidt procedure to re-orthonormalize the bundle. The stretching rates of the principal axes provide estimates of the Lyapunov exponents in each direction.
When determining the Lyapunov exponents, for each initial condition we continue integration until the smallest-magnitude Lyapunov exponent drops below our tolerance level of 10−8, because all continuous time systems have at least one zero-magnitude exponent. Our replicate spectrum estimates across initial conditions are averaged with weighting proportional to the distance between the smallest magnitude exponent and zero, in order to produce a ﬁnal estimate.
Fractal Dimension. We compute the fractal dimension using the Grassberger-Procaccia algorithm for the correlation dimension, a robust nonparametric estimator of the fractal dimension that can be calculated deterministically from ﬁnite point sets [110].
Entropy. The multiscale entropy was used to estimate the intrinsic complexity of each trajectory [111]. While a multivariate generalization of the multiscale entropy has recently been proposed [112], due to convergence issues we calculate the entropy separately for each dynamical variable, and then record the median across all coordinates. Because this approach fails to take into account common motifs across multiple dimensions, we expect that our calculations overestimate the true entropy of the underlying systems. A similar effect occurs when mutual information is computed among subsets of correlated variables.
Additional mathematical properties. We derive and record in our database several properties derived from the spectrum of Lyapunov exponents, including the Pesin’s upper bound on the entropy (the sum of all positive Lyapunov exponents) and the Kaplan-Yorke fractal dimension (an alternative estimator of the fractal dimension) [105, 106].
28

10 Statistical Features and Embedding
For each dynamical system, we generate 40 trajectories of length 2000 originating from random initial conditions on the attractor. We use the default granularity of 100 points per dominant period as determined by Fourier transform. For each system and replicate, we compute 787 standard common time series features using standard methods [113]. For each dynamical system and replicate, we drop all null features, and then use an inner join operation to retain only features that appear across all dynamical systems and replicates. We then retain only the 100 features with the highest variance across all dynamical systems.
We use these features to generate an embedding with UMAP [114]. We repeat this procedure for each of the 40 random initial conditions that were featurized for each dynamical system, and we report the median across replicate as the embedding of the dynamical system. We use afﬁnity propagation with default hyperparameters in order to identify eight clusters within the embedding [115].
11 Forecasting Experiments
Benchmarks are computed on the Harvard FAS Cannon cluster, using two Tesla V100-PCIE-32GB GPU and 32 GB RAM per node. Benchmarks are implemented with the aid of the darts, GluonTS, and sktime libraries [116–118].
Models. We include forecasting models from several domains: deep learning methods (NBEATS, Transformer, LSTM, and Temporal Convolutional Network), statistical methods (Prophet, Exponential Smoothing, Theta, 4Theta), common machine learning techniques (Random Forest), classical forecasting methods (ARIMA, AutoARIMA, Fourier transform regression), and standard naive baselines (naive mean, naive seasonal, naive drift) [117, 119–121]. All non-tuned hyperparameters (e.g. training epochs, number of layers, etc) are kept at default values used in reference implementations included in the darts, GluonTS, and sktime libraries [116–118].
Hyperparameter tuning. Hyperparameter tuning is performed separately for each forecasting model, dynamical system, and sampling granularity. The training set for each attractor consists of a single train time series comprising a trajectory emanating from a random location on the chaotic attractor. For each trajectory, 10 full periods are used to train the model, and 2 periods are used to generate forecast mean-squared-errors to evaluate combinations of hyperparameters. These splits correspond to 150 and 30 timepoints for the coarse granularity datasets, and 1000 and 200 timepoints for the ﬁne granularity datasets.
Because benchmarks are computed on both coarse and ﬁne granularities, different value ranges are searched for the two granularities: 1 timepoint, 5 timepoints, half of a period (8 timepoints for the coarse granularity, 50 timepoints for the ﬁne granularity), and one full period (15 timepoints / 100 timepoints). For forecast models that accept a seasonality hyperparameter, the presence of additive seasonality (such as monochromatic forcing) is treated as an additional hyperparameter. A standard grid search is used to ﬁnd the best sets of hyperparameters separately for each model, system, and granularity.
Scoring. The testing dataset consists of a single time series emanating from another point on the same attractor. On this trajectory, a model is trained on the ﬁrst 10 periods using the best hyperparameters the train dataset, and the forecast score is generated on the remaining 2 periods of the testing time series. Several standard time series similarity metrics are recorded for each dynamical system and forecasting model: mean absolute percentage error (MAPE), symmetric mean absolute percentage error SMAPE, coefﬁcient of variation (CV), mean absolute error (MAE), mean absolute ranged relative error (MARRE), mean squared error (MSE), root mean squared error (RMSE), coefﬁcient of determination (r2), and mean absolute scaled error (MASE).
A The effect of noise on forecasting results.
In order to determine the robustness of our experimental results to the presence of non-deterministic noise in the dataset, we perform a full replication of our experiments above on a modiﬁed dataset that includes noise. For each dynamical system, the scale of each dynamical variable is determined by
29

Figure S2: Forecasting results with and without noise. Each panel shows the distribution of forecast errors for all dynamical systems across different forecasting models, sorted by increasing median error. Dark and light hues correspond to coarse and ﬁne time series sampling granularities. Upper panel corresponds to results for the full chaotic systems collection without noise, and lower panel corresponds to results from replicate experiments in which noise is present. Note that the model order along the horizontal axis differs between the two panels, because the relative performance of the different forecasting methods changes in the presence of noise.
generating a reference trajectory without noise, and calculating the standard deviation along each dimension. A new trajectory is then generated with noise of amplitude equal to 20% of the scale of each dynamical variable. Figure S2 shows the result of our benchmarks with noise, compared to our benchmarks in the absence of noise.
As expected, the median forecasting performance degrades for all methods in the presence of noise. Noise only weakly affects the naive baselines, because the range of values present in the data remains the same in the presence of noise. The deep learning models continue to perform very well, consistent with general intuition that large, overparametrized models effectively ﬁlter low-information content from complex signals [122]. Interestingly, the performance of the random forest model noticeably degrades with noise, suggesting that the representation learned by the model is fragile in the presence of extraneous information from noise. Conversely, the simple Fourier transform regression performs better than several more sophisticated models in the presence of noise. We hypothesize that highfrequency noise disproportionately obfuscates phase information within the signal, and so forecasting models that project time series onto periodic basis functions (e.g., Fourier and N-BEATS) are least impacted.
12 Forecasting experiments as granularity and noise are varied
In order to better understand how the performance of different forecasting models depends on properties of the time series, we perform a set of experiments in which we re-train all forecasting models on datasets with a range of granularities and noise levels. We deﬁne noise level the same way as in our forecasting experiments: a noise level of 0.2 corresponds to a noise amplitude equal to 20% of the normal standard deviation of the signal. Granularity refers to the number of points sampled per period, as deﬁned by the dominant signiﬁcant frequency in the power spectrum. For these experiments, the same hyperparameters are used as for the original forecasting experiments. However, for the granularity sweep, hyperparameters that have units equivalent to timescale (e.g. number of time lags, or input chunk size) are rescaled by the granularity.
The results are shown in Figure S3. We ﬁnd that forecasting models are most strongly differentiated at low noise levels, and that as the noise level exceeds the average amplitude of the signal the performance of models converges. This effect arises because there is less useable information in the
30

Forecast Error (sMAPE)

1.8 1.0

0.0 0.0

Noise Amplitude

5.0 Log10(5)

Granularity (points per period)

Tuned ARIMA AutoARIMA Exponential Smoothing FFT Four Theta Linear Regression NBEATS Naive Drift Naive Mean Naive Seasonal Prophet LSTM Random Forest TCN Theta Transformer
Log10(300)

Figure S3: Variation in forecasting model performance as noise level and granularity are varied. Points and shaded ranges correspond to medians and standard errors across dynamical systems.

Figure S4: Variation in forecasting model performance across different mathematical properties. The horizontal axis of each plot corresponds to a sliding window comprising a 20% quantile in the property across all systems. Points correspond to medians across all dynamical systems in that quantile.
signal for forecasting. However, the relative ranking of the different models remains somewhat stable as noise intensity increases, suggesting that the deep learning models remain effective at extracting relevant information even in the presence of dominant noise. The granularity results show that the relative performance of different forecasting models is stable across granularities, and that the deep learning models (and particularly NBEATS) continue to perform well across a range of granularities. However, unlike the statistical methods, the performance of the deep learning models ﬂuctuates widely across granularities, and in a systematic manner that cannot be attributed to sampling error—all points and rankings are averages over all 131 systems. These results suggest that more complex models may have timescale bias in their default architectures. However, we caution that exhaustive (albeit computationally expensive) hyperparameter tuning is needed to further understand this effect.
13 Relative performance of forecasting models across different mathematical properties
In order to determine whether different forecasting models are better suited to different types of dynamical system, we analyze our forecasting benchmarks striated by different mathematical properties of the dynamical systems. For a given mathematical property (such as Lyapunov exponent), we select only the dynamical systems among the bottom 20% of systems (i.e. the least chaotic systems), and we compute the average forecast error for each forecasting model on just this group. We repeat the analysis for the dynamical systems in the quantile 10 − 30%, then 20 − 40%, and so forth in order to determine how forecasting performance of each model type varies with level of chaoticity. We repeat the analysis for the correlation dimension and multiscale entropy. Our results are shown in Figure S4
31

14 Importance Sampling Experiments
Our importance sampling experiment consists of a modiﬁed version of our forecasting task. We choose a single model, the LSTM, and alter its training procedure in order to determine how it is affected by alternative sampling strategies. In order to control for unintended interactions, we use a single set of hyperparameters for models trained on all chaotic systems, corresponding to the most common values from our forecasting benchmark. As a result, the baseline forecast error is higher across the chaotic systems dataset compared to our forecasting experiments, in which the LSTM was tuned separately for each chaotic system.
Our procedure consists of the following: (1) We halt training every few epochs and compute historical forecasts (backtests) on the training trajectory. (2) We randomly sample timepoints proportionately to their error in the historical forecast, and then generate a set of initial conditions corresponding to random perturbations away from each sampled attractor point. (3) We simulate the full dynamical system for τ = 150 timesteps for each of these initial conditions, and we use these new trajectories as the training set for the next b = 30 epochs. We repeat this procedure for ν = 5 meta-epochs. For the original training procedure, the training time scales as ∼ B = 400, the number of training epochs times the number of timepoints in a full trajectory.
For the control "full epoch" baseline, we use the standard training procedure. For our "random batch" control experiments, we repeat the importance sampling procedure, but randomly sample timepoints, rather than weighting points by their backtest error. We include this control in order to account for the possibility of forecast error decreasing with total training data, an effect that would lead the importance sampling procedure to perform well spuriously.
15 Transfer Learning Experiments
For our classiﬁcation experiments, we start with the 128 tasks currently within the UCR time series classiﬁcation archive, and we narrow the set to the 96 datasets that contain at least 100 valid timepoints [123].
Our autoencoder is based on a causal dilated architecture recently shown to provide competitive performance among unsupervised embedding methods on the UCR archive [124]. Following previous work, our encoder comprises a single causal convolutional block [125], containing two causal convolutions with kernel size 3 and dilations of 2. A convolutional residual connection bridges the input layer and the latent layer, and leaky ReLU activations are used throughout. Unlike previous studies that learned embeddings using a triplet loss (thereby eliminating the need for a decoder) [124], we use a standard decoder similar to our previous study on chaotic system embedding [126], consisting of a three-layer standard convolutional network with ELU activation functions. We train our models using the Adam optimizer with mean squared error loss and a learning rate of 10−3 [127]. Our PyTorch network implementations are included in the project repository.
We train separate encoders for each classiﬁcation task in the UCR archive. Brieﬂy, we retrieve the training dataset for a given classifation task, and we use phase surrogate testing to determine the dominant frequency in the training data. We then convert this timescale into an effective granularity (in points per dominant period) for the training data. We then re-integrate all 131 dynamical systems within our dataset, with a granularity setting set to match the training data. We train the autoencoder on these trajectories, and we then apply the encoder to the training data of the classiﬁcation task, in order to generate a featurized time series. For our "random timescale" ablation experiment, we select random granularities unrelated to the training data, and otherwise repeat the procedure above.
Having obtained encoded representations of the classiﬁcation task training data, we then convert the training data into a featurized representation using tsfresh, a suite that generates 787 standard time series features (such as number of peaks, average power, wavelet coefﬁcients) [113]. We then pass these features to a standard ridge regression classiﬁer, which we set to search for α values over a range 10−3 – 103 via cross-validation [115]. Our approach to classifying time series is based upon recent methods for generating classiﬁcation results from features learned from time series in an unsupervised setting, which found that complex unsupervised feature extractors followed by supervised linear classiﬁcation yield competitive performance [128]. For our "no transfer learning" baseline, we apply the featurization and regression to the bare original training data for the classiﬁcation problem.
32

Our reported scores correspond to accuracy on the test partition of the UCR archive. The timescale extraction, surrogate data generation, autoencoder, tsfresh featurization, and ridge classiﬁer crossvalidation steps are all trained only on the training data, and the trained encoder, tsfresh featurization, and ridge classifer are applied to the test data.
16 Symbolic Regression Experiments
Our symbolic regression dataset consists of input values corresponding to points along a trajectory, and target values corresponding to the value of the right hand side of the governing differential equation at those points. For our benchmark, we generate train and test datasets corresponding to trajectories originating from different locations on the attractor. Because we are interested in performance using information sampled across the attractor, we generate long trajectories (10 full periods, as determined by dominant timescale in power spectrum) at low sampling granularity (15 points per period), for a total of 150 datapoints in each of the train and test trajectories. This number of points is comparable to existing benchmarks [129]. While, in principle, random inputs could be generated and used to produce output values for our differential equations, because our target formulae correspond to dynamical systems, we favor using trajectories—which would best simulate observations from a real-world system. As we note in the main text, the accuracy of the target formulae will likely be reduced in regions of the attractor with lower measure.
For PySINDY, we ﬁt separate models with purely polynomial and purely trigonometric bases. For DSR and pySR, we use default hyperparameters, and allow a ﬁxed library of binary and unary expressions, {+, −, ×, ÷}, {sin, cos, exp, log, tanh} [130]. Because our dynamical systems are multivariate, we ﬁt separate expressions to each dynamical variable, and record the median across dynamical variables as the overall error for the system.
We apply the expressions generated by symbolic regression to the unseen test trajectory, and we treat the resulting values as forecasts. We therefore record the same error metrics as for our forecasting benchmark above.
17 Neural Ordinary Differential Equation Experiments
We perform a preliminary neural ordinary differential equation (nODE) experiment, in order to evaluate whether mathematical properties of a dynamical system inﬂuence the properties of a ﬁtted nODE. We design our experiment identically to our ﬁne-granularity forecasting benchmark above: for each system, a multivariate training trajectory consisting of 1000 timepoints is used to train a nODE model [131]. An unseen "test" initial condition is then randomly chosen, and 200 timepoint trajectories are generated using both the true dynamical system, and the trained neural ODE. The quality of the resulting trajectory is evaluated using the sMAPE error between the predicted and true trajectory.
Our results are shown in Figure S5. Overall, the forecasting performance of the nODE model is competitive with other time series forecasting techniques, with the advantage of producing a differentiable representation of the underlying process that can potentially be used for downstream analysis. Qualitatively, we observe that the nODE dynamics frequently become trapped near unstable periodic orbits over long durations, suggesting that shadowing events observed in the training data dominate the learned representation [102].
Unlike our symbolic regression experiments, we ﬁnd that there is no signiﬁcant correlation between the quality of a nODE model and any underlying properties of the differential equations. Among the various mathematical properties (Lyapunov exponents, fractal dimension, etc) the largest observed Spearman correlation was not signiﬁcantly different from zero (0.072 ± 0.003, median with standard error determined by bootstrapping),
18 Datasheet: Dataset documentation and intended uses
The primary inclusion criteria for dynamical systems is appearance in published work with explicit equations and parameter values provided that created chaotic dynamics. While there are inﬁnite possible chaotic attractors, our collection surveys systems as they appear in the literature—which
33

Proportion of Systems

0.150 0.125 0.100 0.075 0.050 0.025 0.0000.0 0.2 0.4 0.6 0.8 1.0 1.2 1.4 1.6
Score (sMAPE)
Figure S5: Distribution of error scores for the neural ordinary differential equation benchmark.
primarily comprises particular domain-area applications, as well as systems with particular mathematical properties. Below, we address the questions included in an existing dataset datasheet guide [132].
.1 Motivation
Purpose This dataset was created for the purpose of providing a generative benchmark for time series mining applications, in which arbitrary synthetic data can be generated using a deterministic process.
Unintended Uses To our knowledge, there are no pressing uses for this data that could cause unintended harm. However, insofar as our dataset can be used to improve existing time series models (illustrated by our time series classiﬁcation benchmark), there is a possibility of our dataset contributing to privacy concerns with time series analysis—particularly by making it possible for large models to identify latent factors that could, for example, de-anonymize physiological recordings [133]. In our project repository, we include instructions asking users who become aware of any unintended harms to submit an issue on GitHub.
Previous Uses Some time series analysis utilities and speciﬁc systems in this repository were used in our previous work [126], but the full dataset and benchmarks are all new.
Creator and Funding. This repository was created by William Gilpin, with support from the NSFSimons Center for Quantitative Biology at Harvard University, as well as the University of Texas at Austin. No special funding was solicited for this project.
.2 Composition
Instances. Each instance in this dataset comprises a set of nonlinear differential equations describing a chaotic process, a set of standard parameter values and initial conditions, a set of default timescales and integration timesteps, a set of characteristic mathematica properties, a citation to a published source (where available), a brief description of the system, and 16 precomputed trajectories from the system under various granularities and initial conditions.
Instance Relationships. Each instance corresponds to a different dynamical system.
Instance Count. At time of writing, there are 131 continuous-time dynamical systems (126 ordinary differential equations, and 5 delay equations). There are also 30 discrete-time chaotic maps, however we do not include these in any analyses or discussion presented here.
Instance Scope. Each instance corresponds to a particular realization of a dynamical system, based on previously-published parameter values and initial conditions. In principle, an inﬁnite number of additional chaotic systems exists; our dataset seeks to provide a representative sample of published systems.
Labels. Each trajectory and system contains metadata describing its provenance, however there is not a particular label associated with each trajectory. However, all systems are labelled a variety of annotations that can, in principle, be used as labels (see Table S2).
External Dependencies. The data itself has no external dependencies. Simulating each system requires several standard scientiﬁc Python packages (enumerated in the repository README ﬁle). Running the benchmarks requires several additional dependencies, which are also listed in the README.
34

Data Splits. No splits are baked-in, because (in principle) arbitrary amounts of training, validation, and testing data can be generated for each dynamical system. Splits can either be performed by holding out some timepoints, or (for multivariate systems) by splitting the set of dynamical variables. For the purpose of benchmarking experiments, splits corresponding to 10 periods of training data, and 2 periods of unseen prediction/validation data, were used for both the train and test datasets (the test dataset corresponds to an unseen initial condition). For the ﬁne granularity time series, this corresponds to splits of 1000/200 for both the train and test initial conditions. For the coarse granularity time series, this corresponds to a split of 150/30. The data loader utilities included in the Python library use the 10 period / 2 period split by default.
Experiments. All benchmark experiments are described at length in our preprint. They primarily consist of forecasting benchmarks, generative experiments (importance sampling and model pretraining), and data-driven model inference experiments.
.3 Collection
Collection. ISI Web of Science was used to identify papers claiming novel low-dimensional chaotic systems published after 1963 (the year of Lorenz’s original paper). Papers were sorted by citations in order to determine priority for re-implementation, and systems were only included that had (1) explicit analytical expressions and (2) published parameter values and initial conditions leading to chaos. All systems were re-implemented in Python and checked to verify that the reported dynamics were chaotic. Additionally, several previous collections and galleries of chaos were checked, to ensure that all entries are included [109, 134–136].
Workers. All individuals involved in data collection and curation are authors on the paper.
Timeframe. Data was collected from 2018 – 2021.
Instance Acquisition. Each dynamical system required implementation in Python of the stated dynamical equations, as well as all parameter values and initial conditions leading to chaos. Each system was then numerically integrated in order to ensure that the observed dynamics matched those claimed in the original publication. Once chaos was validated, the integration timestep and the trajectory sampling rate were determined using the power spectrum, with time series surrogate analysis used to identify signiﬁcant frequencies. Once the correct timescales were known, properties such as the Lyapunov exponents and entropy were calculated. For all trajectory data and initial conditions, a long transient was discarded in order to ensure that the dynamics settled onto the attractor.
Instance Scope. There are effectively an inﬁnite number of possible chaotic dynamical systems, even in low dimensions. However, our collection represents a sample of named and published chaotic systems, and it includes most well-known systems.
Sampling. Because our dataset comprises only named and published chaotic systems, it does not comprise a representative sample of the larger space of all low-dimensional chaotic systems. Therefore, our database should not be used to compute any quantities that depend on the measure of chaotic systems within the broader space of all possible dynamical systems. For example, a study that seeks to identify the most common features or motifs of chaotic systems cannot use our database as representative sample. However, our database does comprise a representative sample of chaotic dynamics as they appear in the literature.
Missing Information. For systems in which a reference citation or additional context is unavailable, the corresponding ﬁeld in the metadata ﬁle is left blank. However, all systems have sufﬁcient information to be integrated.
Errors. If any errors or redundancies are identiﬁed, we encourage users to submit an issue via GitHub.
Noise. Noise can be added to the trajectories either by adding random values to each observed timepoint (measurement noise), or performing a stochastic simulation (stochastic dynamics). A stochastic integration function is included in the Python library. The precomputed trajectories associated with each system include trajectories with noise.
35

.4 Preprocessing
Cleaning. Dynamical systems may be numerically integrated with arbitrary precision, and their dynamics can be recorded at arbitrarily small intervals. In order to report all systems consistently, we use time series phase surrogate testing to identify the highest signiﬁcant frequency in the power spectrum of each system’s dynamics. We then set the numerical integration timestep to be proportional to this timescale. We then re-integrate, and use surrogates to identify the dominant signiﬁcant frequency in each system’s dynamics. We use this timescale to determine the sampling rate. This process ensures overall that all systems exhibit dynamical variation over comparable timescales, and that the integration timestep is sufﬁciently small to accurately resolve the dynamics. Having determined the appropriate integration timescales, we then determine the Lyapunov exponents, average period, and other ensemble-level properties of each dynamical system. We compute these quantities for replicate trajectories originating from different initial conditions on the attractor, and record the average. For each ﬁxed univariate time series dataset, the ﬁrst ordinal component of the system’s dynamics is included. Raw data. New time series data can be generated as needed via the make_trajectory() method of each dynamical system. Preprocessing Software. All analysis software is included in the repository. Motivation. To our knowledge, dataset processing is consistent with the underlying motivation of the dataset.
.5 Distribution
Distribution. The dataset is distributed on GitHub. First Distribution. A private fork may be distributed with the paper for review in order to maintain anonymity for certain venues. The updated repository will be distributed with the ﬁnal paper. License. We include an Apache 2.0 License in the project repository. Fees. None.
.6 Legal
People. No individuals are included in this dataset. Protected Subjects. No ethically-protected subjects are included in this dataset. Institutional Approval. No institutional approval is required for this dataset Consent. No individual data is included in this dataset. Harm. No individual data is included in this dataset. However, the README ﬁle of the dataset repository includes instructions to submit an issue if an unintended harm is detected in the process of using this dataset. Disadvantages. No individual data is included in this dataset. Privacy. None of the data contains personal information. GDPR. To our knowledge, this dataset complies with GDPR and equivalent foreign standards. Sensitivity. To our knowledge, this dataset contains no sensitive or conﬁdential information Inappropriate. This dataset contains no inappropriate or offensive content.
19 Author statement and hosting plan
The authors bear all responsibility in case of rights violations. The data license has been included elsewhere in this appendix. The authors have full control of the data repository on GitHub, and will ensure its continued accessibility.
36

References
[1] Crutchﬁeld, J. & Packard, N. Symbolic dynamics of one-dimensional maps: Entropies, ﬁnite precision, and noise. International Journal of Theoretical Physics 21, 433–466 (1982).
[2] Cvitanovic, P. et al. Chaos: classical and quantum, vol. 69 (Niels Bohr Institute, Copenhagen, 2005). URL http://chaosbook.org/.
[3] Farmer, J. D. Information dimension and the probabilistic structure of chaos. Zeitschrift für Naturforschung A 37, 1304–1326 (1982).
[4] Grebogi, C., Ott, E. & Yorke, J. A. Chaos, strange attractors, and fractal basin boundaries in nonlinear dynamics. Science 238, 632–638 (1987).
[5] Ott, E. Chaos in Dynamical Systems (Cambridge University Press, 2002).
[6] Tang, Y., Kurths, J., Lin, W., Ott, E. & Kocarev, L. Introduction to focus issue: When machine learning meets complex systems: Networks, chaos, and nonlinear dynamics. Chaos: An Interdisciplinary Journal of Nonlinear Science 30, 063151 (2020).
[7] Pathak, J., Hunt, B., Girvan, M., Lu, Z. & Ott, E. Model-free prediction of large spatiotemporally chaotic systems from data: A reservoir computing approach. Physical review letters 120, 024102 (2018).
[8] Boffetta, G., Cencini, M., Falcioni, M. & Vulpiani, A. Predictability: a way to characterize complexity. Physics reports 356, 367–474 (2002).
[9] Nassar, J., Linderman, S., Bugallo, M. & Park, I. M. Tree-structured recurrent switching linear dynamical systems for multi-scale modeling. In International Conference on Learning Representations (2018).
[10] Champion, K., Lusch, B., Kutz, J. N. & Brunton, S. L. Data-driven discovery of coordinates and governing equations. Proceedings of the National Academy of Sciences 116, 22445–22451 (2019).
[11] Costa, A. C., Ahamed, T. & Stephens, G. J. Adaptive, locally linear models of complex dynamics. Proceedings of the National Academy of Sciences 116, 1501–1510 (2019).
[12] Gilpin, W. Deep reconstruction of strange attractors from time series. Advances in Neural Information Processing Systems 33 (2020).
[13] Greydanus, S. J., Dzumba, M. & Yosinski, J. Hamiltonian neural networks. In Advances in Neural Information Processing Systems, 2794–2803 (2019).
[14] Lu, Z., Kim, J. Z. & Bassett, D. S. Supervised chaotic source separation by a tank of water. Chaos: An Interdisciplinary Journal of Nonlinear Science 30, 021101 (2020).
[15] Yu, R., Zheng, S., Anandkumar, A. & Yue, Y. Long-term forecasting using tensor-train rnns. arXiv preprint arXiv:1711.00073 (2017).
[16] Lu, Z. et al. Reservoir observers: Model-free inference of unmeasured variables in chaotic systems. Chaos: An Interdisciplinary Journal of Nonlinear Science 27, 041102 (2017).
[17] Bellot, A., Branson, K. & van der Schaar, M. Consistency of mechanistic causal discovery in continuous-time using neural odes. arXiv preprint arXiv:2105.02522 (2021).
[18] Wang, Z. & Guet, C. Reconstructing a dynamical system and forecasting time series by self-consistent deep learning. arXiv preprint arXiv:2108.01862 (2021).
[19] Li, X., Wong, T.-K. L., Chen, R. T. & Duvenaud, D. Scalable gradients for stochastic differential equations. In International Conference on Artiﬁcial Intelligence and Statistics, 3870–3882 (PMLR, 2020).
[20] Ma, Q.-L., Zheng, Q.-L., Peng, H., Zhong, T.-W. & Xu, L.-Q. Chaotic time series prediction based on evolving recurrent neural networks. In 2007 international conference on machine learning and cybernetics, vol. 6, 3496–3500 (IEEE, 2007).
37

[21] Kantz, H. & Schreiber, T. Nonlinear time series analysis, vol. 7 (Cambridge university press, 2004).
[22] Ismail, A., Gunady, M., Bravo, H. & Feizi, S. Benchmarking deep learning interpretability in time series predictions. Advances in Neural Information Processing Systems Foundation (NeurIPS) (2020).
[23] Lim, B., Arık, S. Ö., Loeff, N. & Pﬁster, T. Temporal fusion transformers for interpretable multi-horizon time series forecasting. International Journal of Forecasting (2021).
[24] Tél, T. The joy of transient chaos. Chaos: An Interdisciplinary Journal of Nonlinear Science 25, 097619 (2015).
[25] Chen, X., Nishikawa, T. & Motter, A. E. Slim fractals: The geometry of doubly transient chaos. Physical Review X 7, 021040 (2017).
[26] Grebogi, C., Ott, E. & Yorke, J. A. Critical exponent of chaotic transients in nonlinear dynamical systems. Physical review letters 57, 1284 (1986).
[27] Grebogi, C., Ott, E., Pelikan, S. & Yorke, J. A. Strange attractors that are not chaotic. Physica D: Nonlinear Phenomena 13, 261–268 (1984).
[28] Sommerer, J. C. & Ott, E. Particles ﬂoating on a moving ﬂuid: A dynamically comprehensible physical fractal. Science 259, 335–339 (1993).
[29] Grassberger, P. & Procaccia, I. Measuring the strangeness of strange attractors. Physica D: Nonlinear Phenomena 9, 189–208 (1983).
[30] Costa, M., Goldberger, A. L. & Peng, C.-K. Multiscale entropy analysis of complex physiologic time series. Physical review letters 89, 068102 (2002).
[31] Christ, M., Braun, N., Neuffer, J. & Kempa-Liehr, A. W. Time series feature extraction on basis of scalable hypothesis tests (tsfresh–a python package). Neurocomputing 307, 72–77 (2018).
[32] Myers, A. D., Yesilli, M., Tymochko, S., Khasawneh, F. & Munch, E. Teaspoon: A comprehensive python package for topological signal processing. In NeurIPS 2020 Workshop on Topological Data Analysis and Beyond (2020).
[33] Datseris, G. DynamicalSystems.jl: A Julia software library for chaos and nonlinear dynamics. Journal of Open Source Software 3, 598 (2018).
[34] Le Novere, N. et al. Biomodels database: a free, centralized database of curated, published, quantitative kinetic models of biochemical and cellular systems. Nucleic acids research 34, D689–D691 (2006).
[35] Lüders, C., Errami, H., Neidhardt, M., Samal, S. S. & Weber, A. Odebase: an extensible database providing algebraic properties of dynamical systems. In Proceedings of the Computer Algebra in Scientiﬁc Computing Conference (CASC, 2019).
[36] Uy, N. Q., Hoai, N. X., O’Neill, M., McKay, R. I. & Galván-López, E. Semantically-based crossover in genetic programming: application to real-valued symbolic regression. Genetic Programming and Evolvable Machines 12, 91–119 (2011).
[37] Udrescu, S.-M. & Tegmark, M. Ai feynman: A physics-inspired method for symbolic regression. Science Advances 6, eaay2631 (2020).
[38] La Cava, W., Danai, K. & Spector, L. Inference of compact nonlinear dynamic models by epigenetic local search. Engineering Applications of Artiﬁcial Intelligence 55, 292–306 (2016).
[39] Strogatz, S. H. Nonlinear dynamics and chaos with student solutions manual: With applications to physics, biology, chemistry, and engineering (CRC press, 2018).
[40] La Cava, W. et al. Contemporary symbolic regression methods and their relative performance. arXiv preprint arXiv:2107.14351 (2021).
38

[41] Dau, H. A. et al. The ucr time series archive. IEEE/CAA Journal of Automatica Sinica 6, 1293–1305 (2019).
[42] Bagnall, A., Lines, J., Bostrom, A., Large, J. & Keogh, E. The great time series classiﬁcation bake off: a review and experimental evaluation of recent algorithmic advances. Data mining and knowledge discovery 31, 606–660 (2017).
[43] Dempster, A., Petitjean, F. & Webb, G. I. Rocket: exceptionally fast and accurate time series classiﬁcation using random convolutional kernels. Data Mining and Knowledge Discovery 34, 1454–1495 (2020).
[44] Bagnall, A. et al. The uea multivariate time series classiﬁcation archive, 2018. arXiv preprint arXiv:1811.00075 (2018).
[45] Asuncion, A. & Newman, D. Uci machine learning repository (2007).
[46] Makridakis, S., Spiliotis, E. & Assimakopoulos, V. The m4 competition: 100,000 time series and 61 forecasting methods. International Journal of Forecasting 36, 54–74 (2020).
[47] Godahewa, R., Bergmeir, C., Webb, G. I., Hyndman, R. J. & Montero-Manso, P. Monash time series forecasting archive. arXiv preprint arXiv:2105.06643 (2021).
[48] Zhou, H. et al. Informer: Beyond efﬁcient transformer for long sequence time-series forecasting. In Proceedings of The Thirty-Fifth AAAI Conference on Artiﬁcial Intelligence, AAAI 2021, vol. 35, 11106–11115 (AAAI Press, 2021).
[49] Young, A. H., Knapp, K. R., Inamdar, A., Hankins, W. & Rossow, W. B. The international satellite cloud climatology project h-series climate data record product. Earth System Science Data 10, 583–593 (2018).
[50] Goldberger, A. L. et al. Physiobank, physiotoolkit, and physionet: components of a new research resource for complex physiologic signals. circulation 101, e215–e220 (2000).
[51] Oreshkin, B. N., Carpov, D., Chapados, N. & Bengio, Y. N-beats: Neural basis expansion analysis for interpretable time series forecasting. arXiv preprint arXiv:1905.10437 (2019).
[52] Lea, C., Vidal, R., Reiter, A. & Hager, G. D. Temporal convolutional networks: A uniﬁed approach to action segmentation. In European Conference on Computer Vision, 47–54 (Springer, 2016).
[53] Alexandrov, A. et al. GluonTS: Probabilistic and Neural Time Series Modeling in Python. J. Mach. Learn. Res. 21, 1–6 (2020).
[54] Herzen, J. et al. Darts: User-friendly modern machine learning for time series. arXiv preprint arXiv:2110.03224 (2021). URL https://arxiv.org/abs/2110.03224.
[55] Wang, W.-X., Yang, R., Lai, Y.-C., Kovanis, V. & Grebogi, C. Predicting catastrophes in nonlinear dynamical systems by compressive sensing. Physical review letters 106, 154101 (2011).
[56] Taylor, S. J. & Letham, B. Forecasting at scale. The American Statistician 72, 37–45 (2018).
[57] Lusch, B., Kutz, J. N. & Brunton, S. L. Deep learning for universal linear embeddings of nonlinear dynamics. Nature communications 9, 1–10 (2018).
[58] Hyndman, R. J. & Koehler, A. B. Another look at measures of forecast accuracy. International journal of forecasting 22, 679–688 (2006).
[59] Durbin, J. & Koopman, S. J. Time series analysis by state space methods (Oxford university press, 2012).
[60] Klus, S. et al. Data-driven model reduction and transfer operator approximation. Journal of Nonlinear Science 28, 985–1010 (2018).
39

[61] Otto, S. E. & Rowley, C. W. Koopman operators for estimation and control of dynamical systems. Annual Review of Control, Robotics, and Autonomous Systems 4, 59–87 (2021).
[62] Takeishi, N., Kawahara, Y. & Yairi, T. Learning koopman invariant subspaces for dynamic mode decomposition. arXiv preprint arXiv:1710.04340 (2017).
[63] Hastie, T., Tibshirani, R. & Friedman, J. The Elements of Statistical Learning: Data Mining, Inference, and Prediction. Springer series in statistics (Springer, 2009). URL https:// books.google.com/books?id=eBSgoAEACAAJ.
[64] Farmer, J. D. Dimension, fractal measures, and chaotic dynamics. In Evolution of order and chaos, 228–246 (Springer, 1982).
[65] Leitao, J. C., Lopes, J. V. P. & Altmann, E. G. Monte carlo sampling in fractal landscapes. Physical review letters 110, 220601 (2013).
[66] Press, W. H., Flannery, B. P., Teukolsky, S. A. & Vetterling, W. Numerical recipices, the art of scientiﬁc computing. Cambridge U. Press, Cambridge, MA (1986).
[67] Jiang, A. H. et al. Accelerating deep learning by focusing on the biggest losers. arXiv preprint arXiv:1910.00762 (2019).
[68] Kawaguchi, K. & Lu, H. Ordered sgd: A new stochastic optimization framework for empirical risk minimization. In International Conference on Artiﬁcial Intelligence and Statistics, 669– 679 (PMLR, 2020).
[69] Katharopoulos, A. & Fleuret, F. Not all samples are created equal: Deep learning with importance sampling. In International conference on machine learning, 2525–2534 (PMLR, 2018).
[70] Malhotra, P., TV, V., Vig, L., Agarwal, P. & Shroff, G. Timenet: Pre-trained deep recurrent neural network for time series classiﬁcation. arXiv preprint arXiv:1706.08838 (2017).
[71] Franceschi, J.-Y., Dieuleveut, A. & Jaggi, M. Unsupervised scalable representation learning for multivariate time series. Advances in Neural Information Processing Systems 32, 4650–4661 (2019).
[72] Löning, M. et al. sktime: A uniﬁed interface for machine learning with time series. arXiv preprint arXiv:1909.07872 (2019).
[73] Zhang, X., Wang, Z., Liu, D. & Ling, Q. Dada: Deep adversarial data augmentation for extremely low data regime classiﬁcation. In ICASSP 2019-2019 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP), 2807–2811 (IEEE, 2019).
[74] Tran, T., Pham, T., Carneiro, G., Palmer, L. & Reid, I. A bayesian data augmentation approach for learning deep models. In Advances in Neural Information Processing Systems, 2794–2803 (2017).
[75] Zhu, X., Liu, Y., Qin, Z. & Li, J. Data augmentation in emotion classiﬁcation using generative adversarial networks. arXiv preprint arXiv:1711.00648 (2017).
[76] Hauberg, S., Freifeld, O., Larsen, A. B. L., Fisher, J. & Hansen, L. Dreaming more data: Classdependent distributions over diffeomorphisms for learned data augmentation. In Artiﬁcial Intelligence and Statistics, 342–350 (PMLR, 2016).
[77] Karniadakis, G. E. et al. Physics-informed machine learning. Nature Reviews Physics 3, 422–440 (2021).
[78] de Silva, B. M., Higdon, D. M., Brunton, S. L. & Kutz, J. N. Discovery of physics from data: universal laws and discrepancies. Frontiers in artiﬁcial intelligence 3, 25 (2020).
[79] Callaham, J. L., Koch, J. V., Brunton, B. W., Kutz, J. N. & Brunton, S. L. Learning dominant physical processes with data-driven balance models. Nature communications 12, 1–10 (2021).
40

[80] Carleo, G. et al. Machine learning and the physical sciences. Reviews of Modern Physics 91, 045002 (2019).
[81] Costa, A. C., Ahamed, T., Jordan, D. & Stephens, G. Maximally predictive ensemble dynamics from data. arXiv preprint arXiv:2105.12811 (2021).
[82] Budišic´, M., Mohr, R. & Mezic´, I. Applied koopmanism. Chaos: An Interdisciplinary Journal of Nonlinear Science 22, 047510 (2012).
[83] Gilpin, W. Cellular automata as convolutional neural networks. Physical Review E 100, 032402 (2019).
[84] Chen, R. T., Rubanova, Y., Bettencourt, J. & Duvenaud, D. Neural ordinary differential equations. arXiv preprint arXiv:1806.07366 (2018).
[85] Kidger, P., Morrill, J., Foster, J. & Lyons, T. Neural controlled differential equations for irregular time series. arXiv preprint arXiv:2005.08926 (2020).
[86] Massaroli, S., Poli, M., Park, J., Yamashita, A. & Asama, H. Dissecting neural odes. arXiv preprint arXiv:2002.08071 (2020).
[87] Rackauckas, C. et al. Universal differential equations for scientiﬁc machine learning. arXiv preprint arXiv:2001.04385 (2020).
[88] Petersen, B. K. et al. Deep symbolic regression: Recovering mathematical expressions from data via risk-seeking policy gradients. arXiv preprint arXiv:1912.04871 (2019).
[89] Brunton, S. L., Proctor, J. L. & Kutz, J. N. Discovering governing equations from data by sparse identiﬁcation of nonlinear dynamical systems. Proceedings of the national academy of sciences 113, 3932–3937 (2016).
[90] Schmidt, M. & Lipson, H. Distilling free-form natural laws from experimental data. science 324, 81–85 (2009).
[91] Martin, B. T., Munch, S. B. & Hein, A. M. Reverse-engineering ecological theory from data. Proceedings of the Royal Society B: Biological Sciences 285, 20180422 (2018).
[92] Cranmer, M. et al. Discovering symbolic models from deep learning with inductive biases. NeurIPS 2020 (2020). 2006.11287.
[93] Rudy, S. H. & Sapsis, T. P. Sparse methods for automatic relevance determination. Physica D: Nonlinear Phenomena 418, 132843 (2021).
[94] Froyland, G. & Padberg, K. Almost-invariant sets and invariant manifolds—connecting probabilistic and geometric descriptions of coherent structures in ﬂows. Physica D: Nonlinear Phenomena 238, 1507–1523 (2009).
[95] Cranmer, M. Pysr: Fast & parallelized symbolic regression in python/julia (2020). URL http://doi.org/10.5281/zenodo.4041459.
[96] de Silva, B. et al. Pysindy: A python package for the sparse identiﬁcation of nonlinear dynamical systems from data. Journal of Open Source Software 5, 1–4 (2020).
[97] Sprott, J. C. Some simple chaotic ﬂows. Physical review E 50, R647 (1994).
[98] Gilpin, W., Huang, Y. & Forger, D. B. Learning dynamics from large biological datasets: machine learning meets systems biology. Current Opinion in Systems Biology (2020).
[99] Arbabi, H. & Mezic, I. Ergodic theory, dynamic mode decomposition, and computation of spectral properties of the koopman operator. SIAM Journal on Applied Dynamical Systems 16, 2096–2126 (2017).
[100] Ispolatov, I., Madhok, V., Allende, S. & Doebeli, M. Chaos in high-dimensional dissipative dynamical systems. Scientiﬁc reports 5, 1–6 (2015).
41

[101] Rößler, A. Runge–kutta methods for the strong approximation of solutions of stochastic differential equations. SIAM Journal on Numerical Analysis 48, 922–952 (2010).
[102] Guckenheimer, J. & Holmes, P. Nonlinear oscillations, dynamical systems, and bifurcations of vector ﬁelds, vol. 42 (Springer Science & Business Media, 2013).
[103] Kuznetsov, Y. A. Elements of applied bifurcation theory, vol. 112 (Springer Science & Business Media, 2013).
[104] Strogatz, S. H. Nonlinear dynamics and chaos with student solutions manual: With applications to physics, biology, chemistry, and engineering (CRC press, 2018).
[105] Ott, E. Chaos in Dynamical Systems (Cambridge University Press, 2002).
[106] Kantz, H. & Schreiber, T. Nonlinear time series analysis, vol. 7 (Cambridge university press, 2004).
[107] Wolf, A., Swift, J. B., Swinney, H. L. & Vastano, J. A. Determining lyapunov exponents from a time series. Physica D: nonlinear phenomena 16, 285–317 (1985).
[108] Holzfuss, J. & Parlitz, U. Lyapunov exponents from time series. In Lyapunov exponents, 263–270 (Springer, 1991).
[109] Datseris, G. DynamicalSystems.jl: A Julia software library for chaos and nonlinear dynamics. Journal of Open Source Software 3, 598 (2018).
[110] Grassberger, P. & Procaccia, I. Characterization of strange attractors. Physical review letters 50, 346 (1983).
[111] Costa, M., Goldberger, A. L. & Peng, C.-K. Multiscale entropy analysis of complex physiologic time series. Physical review letters 89, 068102 (2002).
[112] Ahmed, M. U. & Mandic, D. P. Multivariate multiscale entropy: A tool for complexity analysis of multichannel data. Physical Review E 84, 061918 (2011).
[113] Christ, M., Braun, N., Neuffer, J. & Kempa-Liehr, A. W. Time series feature extraction on basis of scalable hypothesis tests (tsfresh–a python package). Neurocomputing 307, 72–77 (2018).
[114] McInnes, L., Healy, J. & Melville, J. Umap: Uniform manifold approximation and projection for dimension reduction. arXiv preprint arXiv:1802.03426 (2018).
[115] Pedregosa, F. et al. Scikit-learn: Machine learning in python. the Journal of machine Learning research 12, 2825–2830 (2011).
[116] Löning, M. et al. sktime: A uniﬁed interface for machine learning with time series. arXiv preprint arXiv:1909.07872 (2019).
[117] Alexandrov, A. et al. GluonTS: Probabilistic and Neural Time Series Modeling in Python. J. Mach. Learn. Res. 21, 1–6 (2020).
[118] Herzen, J. et al. Darts: User-friendly modern machine learning for time series. arXiv preprint arXiv:2110.03224 (2021). URL https://arxiv.org/abs/2110.03224.
[119] Oreshkin, B. N., Carpov, D., Chapados, N. & Bengio, Y. N-beats: Neural basis expansion analysis for interpretable time series forecasting. arXiv preprint arXiv:1905.10437 (2019).
[120] Lea, C., Vidal, R., Reiter, A. & Hager, G. D. Temporal convolutional networks: A uniﬁed approach to action segmentation. In European Conference on Computer Vision, 47–54 (Springer, 2016).
[121] Godahewa, R., Bergmeir, C., Webb, G. I., Hyndman, R. J. & Montero-Manso, P. Monash time series forecasting archive. arXiv preprint arXiv:2105.06643 (2021).
42

[122] Hastie, T., Tibshirani, R. & Friedman, J. The Elements of Statistical Learning: Data Mining, Inference, and Prediction. Springer series in statistics (Springer, 2009). URL https:// books.google.com/books?id=eBSgoAEACAAJ.
[123] Dau, H. A. et al. The ucr time series archive. IEEE/CAA Journal of Automatica Sinica 6, 1293–1305 (2019).
[124] Franceschi, J.-Y., Dieuleveut, A. & Jaggi, M. Unsupervised scalable representation learning for multivariate time series. Advances in Neural Information Processing Systems 32, 4650–4661 (2019).
[125] Bai, S., Kolter, J. Z. & Koltun, V. An empirical evaluation of generic convolutional and recurrent networks for sequence modeling. arXiv preprint arXiv:1803.01271 (2018).
[126] Gilpin, W. Deep reconstruction of strange attractors from time series. Advances in Neural Information Processing Systems 33 (2020).
[127] Kingma, D. P. & Ba, J. Adam: A method for stochastic optimization. arXiv preprint arXiv:1412.6980 (2014).
[128] Dempster, A., Petitjean, F. & Webb, G. I. Rocket: exceptionally fast and accurate time series classiﬁcation using random convolutional kernels. Data Mining and Knowledge Discovery 34, 1454–1495 (2020).
[129] La Cava, W. et al. Contemporary symbolic regression methods and their relative performance. arXiv preprint arXiv:2107.14351 (2021).
[130] Petersen, B. K. et al. Deep symbolic regression: Recovering mathematical expressions from data via risk-seeking policy gradients. arXiv preprint arXiv:1912.04871 (2019).
[131] Chen, R. T., Rubanova, Y., Bettencourt, J. & Duvenaud, D. Neural ordinary differential equations. arXiv preprint arXiv:1806.07366 (2018).
[132] Gebru, T. et al. Datasheets for datasets. arXiv preprint arXiv:1803.09010 (2018). [133] Shi, E., Chan, T. H., Rieffel, E., Chow, R. & Song, D. Privacy-preserving aggregation of
time-series data. In Proc. NDSS, vol. 2, 1–17 (Citeseer, 2011). [134] Sprott, J. C. Elegant chaos: algebraically simple chaotic ﬂows (World Scientiﬁc, 2010). [135] Meier, J. Presentation of attractors with cinema. http://www.3d-meier.de/tut19/
Seite1.html (2003). [Online; accessed 19-March-2020]. [136] Myers, A. D., Yesilli, M., Tymochko, S., Khasawneh, F. & Munch, E. Teaspoon: A compre-
hensive python package for topological signal processing. In NeurIPS 2020 Workshop on Topological Data Analysis and Beyond (2020).
43

