CHARAGRAM: Embedding Words and Sentences via Character n-grams
John Wieting Mohit Bansal Kevin Gimpel Karen Livescu Toyota Technological Institute at Chicago, Chicago, IL, 60637, USA
{jwieting,mbansal,kgimpel,klivescu}@ttic.edu

arXiv:1607.02789v1 [cs.CL] 10 Jul 2016

Abstract
We present CHARAGRAM embeddings, a simple approach for learning character-based compositional models to embed textual sequences. A word or sentence is represented using a character n-gram count vector, followed by a single nonlinear transformation to yield a low-dimensional embedding. We use three tasks for evaluation: word similarity, sentence similarity, and part-of-speech tagging. We demonstrate that CHARAGRAM embeddings outperform more complex architectures based on character-level recurrent and convolutional neural networks, achieving new state-of-the-art performance on several similarity tasks.1
1 Introduction
Representing textual sequences such as words and sentences is a fundamental component of natural language understanding systems. Many functional architectures have been proposed to model compositionality in word sequences, ranging from simple averaging (Mitchell and Lapata, 2010; Iyyer et al., 2015) to functions with rich recursive structure (Socher et al., 2011; Tai et al., 2015; Bowman et al., 2016). Most work uses words as the smallest units in the compositional architecture, often using pretrained word embeddings or learning them speciﬁcally for the task of interest (Tai et al., 2015; He et al., 2015).
Some prior work has found beneﬁt from using character-based compositional models that
1Trained models and code are available at http://ttic.uchicago.edu/˜wieting.

encode arbitrary character sequences into vec-

tors. Examples include recurrent neural networks

(RNNs) and convolutional neural networks

(CNNs) on character sequences, showing improve-

ments for several NLP tasks (Ling et al., 2015a;

Kim et al., 2015;

Ballesteros et al., 2015;

dos Santos and Guimara˜es, 2015). By sharing

subword information across words, character mod-

els have the potential to better represent rare words

and morphological variants.

Our approach, CHARAGRAM, uses a much simpler functional architecture. We represent a character sequence by a vector containing counts of character n-grams, inspired by Huang et al. (2013). This vector is embedded into a low-dimensional space using a single nonlinear transformation. This can be interpreted as learning embeddings of character n-grams, which are learned so as to produce effective sequence embeddings when a summation is performed over the character n-grams in the sequence.

We consider three evaluations: word similarity, sentence similarity, and part-of-speech tagging. On multiple word similarity datasets, CHARAGRAM outperforms RNNs and CNNs, achieving state-of-the-art performance on SimLex999 (Hill et al., 2015). When evaluated on a large suite of sentence-level semantic textual similarity tasks, CHARAGRAM embeddings again outperform the RNN and CNN architectures as well as the PARAGRAM-PHRASE embeddings of Wieting et al. (2016). We also consider English part-of-speech (POS) tagging using the bidirectional long short-term memory tagger of Ling et al. (2015a). The three architectures reach

similar performance, though CHARAGRAM converges fastest to high accuracy.
We perform extensive analysis of our CHARAGRAM embeddings. We ﬁnd large gains in performance on rare words, showing the empirical beneﬁt of subword modeling. We also compare performance across different character n-gram vocabulary sizes, ﬁnding that the semantic tasks beneﬁt far more from large vocabularies than the syntactic task. However, even for challenging semantic similarity tasks, we still see strong performance with only a few thousand character n-grams.
Nearest neighbors show that CHARAGRAM embeddings simultaneously address differences due to spelling variation, morphology, and word choice. Inspection of embeddings of particular character ngrams reveals etymological links; e.g., die is close to mort. We release our resources to the community in the hope that CHARAGRAM can provide a strong baseline for subword-aware text representation.

2 Related Work

We ﬁrst review work on using subword informa-

tion in word embedding models. The simplest

approaches append subword features to word em-

beddings, letting the model learn how to use the sub-

word information for particular tasks. Some added

knowledge-based morphological features to word

representations (Alexandrescu and Kirchhoff, 2006;

El-Desoky Mousa et al., 2013). Others learned

embeddings jointly for subword units and words,

deﬁning simple compositional architectures (often

based on addition) to create word embeddings from

subword embeddings (Lazaridou et al., 2013;

Botha and Blunsom, 2014;

Qiu et al., 2014;

Chen et al., 2015).

A recent trend is to use richer functional ar-

chitectures to convert character sequences into

word embeddings. Luong et al. (2013) used re-

cursive models to compose morphs into word

embeddings, using unsupervised morphological

analysis. Ling et al. (2015a) used a bidirectional

long short-term memory (LSTM) RNN on char-

acters to embed arbitrary word types, showing

strong performance for language modeling and POS

tagging. Ballesteros et al. (2015) used this model

to represent words for dependency parsing. Sev-

eral have used character-level RNN architectures

for machine translation, whether for represent-

ing source or target words (Ling et al., 2015b;

Luong and Manning, 2016), or for gen-

erating entire translations character-by-

character (Chung et al., 2016).

Sutskever et al. (2011) and Graves (2013)

used character-level RNNs for language mod-

eling. Others trained character-level RNN

language models to provide features for NLP

tasks, including tokenization and segmenta-

tion (Chrupała, 2013; Evang et al., 2013), and text

normalization (Chrupała, 2014).

CNNs with character n-gram ﬁlters have

been used to embed arbitrary word types

for several tasks, including language mod-

eling (Kim et al., 2015), part-of-speech tag-

ging (dos Santos and Zadrozny, 2014), named entity

recognition (dos Santos and Guimara˜es, 2015), text

classiﬁcation (Zhang et al., 2015), and machine

translation

(Costa-Jussa` and Fonollosa, 2016).

Combinations of CNNs and RNNs on characters

have also been explored (Jo´zefowicz et al., 2016).

Most closely-related to our approach is the DSSM

(instantiated variously as “deep semantic similarity

model” or “deep structured semantic model”) de-

veloped by Huang et al. (2013). For an informa-

tion retrieval task, they represented words using

feature vectors containing counts of character n-

grams. Sperr et al. (2013) used a very similar tech-

nique to represent words in neural language models

for machine translation. Our CHARAGRAM embed-

dings are based on this same idea. We show this

strategy to be extremely effective when applied to

both words and sentences, outperforming character

LSTMs like those used by Ling et al. (2015a) and

character CNNs like those from Kim et al. (2015).

3 Models
We now describe models that embed textual sequences using their characters, including our CHARAGRAM model and the baselines that we compare to. We denote a character-based textual sequence by x = x1, x2, ..., xm , which includes space characters between words as well as special start-of-sequence and end-of-sequence characters. We use xji to denote the subsequence of char-

acters from position i to position j inclusive, i.e., xji = xi, xi+1, ..., xj , and we deﬁne xii = xi.
Our CHARAGRAM model embeds a character se-
quence x by adding the vectors of its character n-
grams followed by an elementwise nonlinearity:


m+1
gCHAR(x) = hb +



i

I xij ∈ V

W

x

i j



i=1 j=1+i−k

(1) where h is a nonlinear function, b ∈ Rd is a bias

vector, k is the maximum length of any character n-

gram, I[p] is an indicator function that returns 1 if p

is true and 0 otherwise, V is the set of character ngrams included in the model, and W xij ∈ Rd is the vector for character n-gram xij.
The set V is used to restrict the model to a pre-

determined set (vocabulary) of character n-grams.

Below, we compare several choices for deﬁning this

set. The number of parameters in the model is

d + d|V |. This model is based on the letter n-gram

hashing technique developed by Huang et al. (2013)

for their DSSM approach. One can also view Eq. (1)

(as they did) as ﬁrst populating a vector of length |V |

with counts of character n-grams followed by a non-

linear transformation.

We compare the CHARAGRAM model to two

other models. First we consider LSTM archi-

tectures (Hochreiter and Schmidhuber, 1997) over

the character sequence x, using the version from

Gers et al. (2003). We use a forward LSTM over

the characters in x, then take the ﬁnal LSTM hidden

vector as the representation of x. Below we refer to

this model as “charLSTM.”

We also compare to convolutional neural net-

work (CNN) architectures, which we refer to be-

low as “charCNN.” We use the architecture from

Kim (2014) with a single convolutional layer fol-

lowed by an optional fully-connected layer. We use

ﬁlters of varying lengths of character n-grams, us-

ing two primary conﬁgurations of ﬁlter sets, one of

which is identical to that used by Kim et al. (2015).

Each ﬁlter operates over the entire sequence of char-

acter n-grams in x and we use max pooling for each

ﬁlter. We tune over the choice of nonlinearity for

both the convolutional ﬁlters and for the optional

fully-connected layer. We give more details below

about ﬁlter sets, n-gram lengths, and nonlinearities.

We note that using character n-gram convolutional ﬁlters is similar to our use of character ngrams in the CHARAGRAM model. The difference is that, in the CHARAGRAM model, the n-gram must match exactly for its vector to affect the representation, while in the CNN each ﬁlter will affect the representation of all sequences (depending on the nonlinearity being used). So the CHARAGRAM model is able to learn precise vectors for particular character n-grams with speciﬁc meanings, while there is pressure for the CNN ﬁlters to capture multiple similar patterns that recur in the data. Our qualitative analysis shows the speciﬁcity of the learned character ngram vectors learned by the CHARAGRAM model.
4 Experiments
We perform three sets of experiments. The goal of the ﬁrst two (Section 4.1) is to produce embeddings for textual sequences such that the embeddings for paraphrases have high cosine similarity. Our third evaluation (Section 4.2) is a classiﬁcation task, and follows the setup of the English part-of-speech tagging experiment from Ling et al. (2015a).
4.1 Word and Sentence Similarity
We compare the ability of our models to capture semantic similarity for both words and sentences. We train on noisy paraphrase pairs from the Paraphrase Database (PPDB; Ganitkevitch et al., 2013) with an L2 regularized contrastive loss objective function, following the training procedure of Wieting et al. (2015) and Wieting et al. (2016). Key details are provided here, but see Appendix A for a fuller description.
4.1.1 Datasets
For word similarity, we focus on two of the most commonly used datasets for evaluating semantic similarity of word embeddings: WordSim-353 (WS353) (Finkelstein et al., 2001) and SimLex-999 (SL999) (Hill et al., 2015). We also evaluate our best model on the Stanford Rare Word Similarity Dataset (Luong et al., 2013).
For sentence similarity, we evaluate on a diverse set of 22 textual similarity datasets, including all datasets from every SemEval semantic textual similarity (STS) task from 2012 to 2015. We also evaluate on the SemEval 2015 Twitter

task (Xu et al., 2015) and the SemEval 2014 SICK Semantic Relatedness task (Marelli et al., 2014). Given two sentences, the aim of the STS tasks is to predict their similarity on a 0-5 scale, where 0 indicates the sentences are on different topics and 5 indicates that they are completely equivalent.
Each STS task consists of 4-6 datasets covering a wide variety of domains, including newswire, tweets, glosses, machine translation outputs, web forums, news headlines, image and video captions, among others. Most submissions for these tasks use supervised models that are trained and tuned on provided training data or similar datasets from older tasks. Further details are provided in the ofﬁcial task descriptions (Agirre et al., 2012; Agirre et al., 2013; Agirre et al., 2014; Agirre et al., 2015).
4.1.2 Preliminaries
For training data, we use pairs from PPDB. For word similarity experiments, we train on word pairs and for sentence similarity, we train on phrase pairs. PPDB comes in different sizes (S, M, L, XL, XXL, and XXXL), where each larger size subsumes all smaller ones. The pairs in PPDB are sorted by a conﬁdence measure and so the smaller sets contain higher precision paraphrases.
Before training the CHARAGRAM model, we need to populate V , the vocabulary of character n-grams included in the model. We obtain these from the training data used for the ﬁnal models in each setting, which is either the lexical or phrasal section of PPDB XXL. We tune over whether to include the full sets of character n-grams in these datasets or only those that appear more than once.
When extracting n-grams, we include spaces and add an extra space before and after each word or phrase in the training and evaluation data to ensure that the beginning and end of each word is represented. We note that strong performance can be obtained using far fewer character n-grams; we explore the effects of varying the number of n-grams and the n-gram orders in Section 4.4.
We used Adam (Kingma and Ba, 2014) with a learning rate of 0.001 to learn the parameters in the following experiments.

Model

Tuned on WS353 SL999

charCNN charLSTM
CHARAGRAM
inter-annotator agreement

SL999 WS353 SL999 WS353 SL999 WS353
-

26.31 33.19 48.27 51.43 53.87 58.35 75.6

30.64 16.73 54.54 48.83 63.33 60.00 78

Table 1: Word similarity results (Spearman’s ρ × 100) on

WS353 and SL999. The inter-annotator agreement is the aver-

age Spearman’s ρ between a single annotator with the average

over all other annotators.

4.1.3 Word Embedding Experiments
Training and Tuning For hyperparameter tuning, we used one epoch on the lexical section of PPDB XXL, which consists of 770,007 word pairs. We used either WS353 or SL999 for model selection (reported below). We then took the selected hyperparameters and trained for 50 epochs to ensure that all models had a chance to converge.
Full details of our tuning procedure are provided in Appendix B. In short, we tuned all models thoroughly, tuning the activation functions for CHARAGRAM and charCNN, as well as the regularization strength, mini-batch size, and sampling type for all models. For charCNN, we experimented with two ﬁlter sets: one uses 175 ﬁlters for each n-gram size ∈ {2, 3, 4}, and the other uses the set of ﬁlters from Kim et al. (2015), consisting of 25 ﬁlters of size 1, 50 of size 2, 75 of size 3, 100 of size 4, 125 of size 5, and 150 of size 6. We also experimented with using dropout (Srivastava et al., 2014) on the inputs of the last layer of the charCNN model in place of L2 regularization, as well as removing the last feedforward layer. Neither of these variations signiﬁcantly improved performance on our suite of tasks for word or sentence similarity. However, using more ﬁlters does improve performance, seemingly linearly with the square of the number of ﬁlters.
Architecture Comparison The results are shown in Table 1. The CHARAGRAM model outperforms both the charLSTM and charCNN models, and also outperforms recent strong results on SL999.
We also found that the charCNN and charLSTM models take far more epochs to converge than the CHARAGRAM model. We noted this trend across experiments and explore it further in Section 4.3.

Model Hill et al. (2014) Schwartz et al. (2015) Faruqui and Dyer (2015) Wieting et al. (2015) CHARAGRAM (large)

SL999 52 56 58 66.7 70.6

Table 2: Spearman’s ρ × 100 on SL999. CHARAGRAM (large)

refers to the CHARAGRAM model described in Section 4.4. This

model contains 173,881 character embeddings, more than the

100,283 in the CHARAGRAM model used to obtain the results in

Table 1.

Comparison to Prior Work We found that performance of CHARAGRAM on word similarity tasks can be improved by using more character n-grams. This is explored in Section 4.4. Our best result from these experiments was obtained with the largest model we considered, which contains 173,881 ngram embeddings. When using WS353 for model selection and training for 25 epochs, this model achieves 70.6 on SL999. To our knowledge, this is the best result reported on SL999 in this setting; Table 2 shows comparable recent results. Note that a higher SL999 number is reported in (Mrksˇic´ et al., 2016), but the setting is not comparable to ours as they started with embeddings tuned on SL999.
Lastly, we evaluated our model on the Stanford Rare Word Similarity Dataset (Luong et al., 2013), using SL999 for model selection. We obtained a Spearman’s ρ of 47.1, which outperforms the 41.8 result from Soricut and Och (2015) and is competitive with the 47.8 reported in Pennington et al. (2014), despite only using PPDB for training.
4.1.4 Sentence Embedding Experiments
Training and Tuning We did initial training of our models using one pass through PPDB XL, which consists of 3,033,753 unique phrase pairs. Following Wieting et al. (2016), we use the annotated phrase pairs developed by Pavlick et al. (2015) as our validation set, using Spearman’s ρ to rank the models. We then take the highest performing models and train on the 9,123,575 unique phrase pairs in the phrasal section of PPDB XXL for 10 epochs.
For all experiments, we ﬁx the mini-batch size to 100, the margin δ to 0.4, and use MAX sampling (see Appendix A). For the CHARAGRAM model,

V contains all 122,610 character n-grams (n ∈

{2, 3, 4}) in the PPDB XXL phrasal section. The

other tuning settings are the same as in Section 4.1.3.

For another baseline, we train the PARAGRAM-

PHRASE model of Wieting et al. (2016),

tuning its regularization strength over

{10−5, 10−6, 10−7, 10−8}.

The PARAGRAM-

PHRASE model simply uses word averaging as its

composition function, but outperforms many more

complex models.

In this section, we refer to our model as

CHARAGRAM-PHRASE because the input is a char-

acter sequence containing multiple words rather

than only a single word as in Section 4.1.3. Since

the vocabulary V is deﬁned by the training data se-

quences, the CHARAGRAM-PHRASE model includes

character n-grams that span multiple words, per-

mitting it to capture some aspects of word order

and word co-occurrence, which the PARAGRAM-

PHRASE model is unable to do.

We encountered difﬁculties training the char-

LSTM and charCNN models for this task. We

tried several strategies to improve their chance at

convergence, including clipping gradients, increas-

ing training data, and experimenting with differ-

ent optimizers and learning rates. We found suc-

cess by using the original (conﬁdence-based) or-

dering of the PPDB phrase pairs for the initial

epoch of learning, then shufﬂing them for subse-

quent epochs. This is similar to curriculum learn-

ing (Bengio et al., 2009). The higher-conﬁdence

phrase pairs tend to be shorter and have many over-

lapping words, possibly making them easier to learn

from.

Results An abbreviated version of the sentence similarity results is shown in Table 3; Appendix C contains the full results. For comparison, we report performance for the median (50%), third quartile (75%), and top-performing (Max) systems from the shared tasks. We observe strong performance for the CHARAGRAM-PHRASE model. It always does better than the charCNN and charLSTM models, and outperforms the PARAGRAM-PHRASE model on 15 of the 22 tasks. Furthermore, CHARAGRAM-PHRASE matches or exceeds the top-performing task-tuned systems on 5 tasks, and is within 0.003 on 2 more. The charLSTM and charCNN models are signiﬁ-

Dataset

50% 75% Max

STS 2012 Average STS 2013 Average STS 2014 Average STS 2015 Average 2014 SICK 2015 Twitter Average

54.5 59.5 70.3 45.3 51.4 65.3 64.7 71.4 76.7 70.2 75.8 80.2 71.4 79.9 82.8 49.9 52.5 61.9 59.7 65.6 73.6

charCNN
56.5 47.7 64.7 66.0 62.9 48.6 59.2

charLSTM
40.1 30.7 46.8 45.5 50.3 39.9 41.9

PARAGRAM-
PHRASE
58.5 57.7 71.5 75.7 72.0 52.7 66.2

CHARAGRAM-
PHRASE
66.1 57.2 74.7 76.1 70.0 53.6 68.7

Table 3: Results on SemEval textual similarity datasets (Pearson’s r × 100). The highest score in each row is in boldface (omitting

the ofﬁcial task score columns).

Model charCNN charLSTM
CHARAGRAM
CHARAGRAM (2-layer)

Accuracy (%) 97.02 96.90 96.99 97.10

Table 4: Results on part-of-speech tagging.

cantly worse, with the charCNN being the better of the two and beating PARAGRAM-PHRASE on 4 of the tasks.
We emphasize that there are many other models that could be compared to, such as an LSTM over word embeddings. This and many other models were explored by Wieting et al. (2016). Their PARAGRAM-PHRASE model, which simply learns word embeddings within an averaging composition function, was among their best-performing models. We used this model in our experiments as a stronglyperforming representative of their results.
Lastly, we note other recent work that considers a similar transfer learning setting. The FastSent model (Hill et al., 2016) uses the 2014 STS task as part of its evaluation and reports an average Pearson’s r of 61.3, much lower than the 74.7 achieved by CHARAGRAM-PHRASE on the same datasets.
4.2 POS Tagging Experiments
We now consider part-of-speech (POS) tagging, since it has been used as a testbed for evaluating architectures for character-level word representations. It also differs from semantic similarity, allowing us to evaluate our architectures on a syntactic task. We replicate the POS tagging experimental setup of Ling et al. (2015a). Their model uses a bidirectional LSTM over character embeddings to represent words. They then use the resulting word representations in another bidirectional LSTM that predicts the tag for each word. We replace their character bidirectional LSTM with our three architectures: char-

CNN, charLSTM, and CHARAGRAM. We use the Wall Street Journal portion of the Penn
Treebank, using Sections 1-18 for training, 19-21 for tuning, and 22-24 for testing. We set the dimensionality of the character embeddings to 50 and that of the (induced) word representations to 150. For optimization, we use stochastic gradient descent with a mini-batch size of 100 sentences. The learning rate and momentum are set to 0.2 and 0.95 respectively. We train the models for 50 epochs, again to ensure that all models have an opportunity to converge.
The other settings for our models are mostly the same as for the word and sentence experiments (Section 4.1). We again use character n-grams with n ∈ {2, 3, 4}, tuning over whether to include all 54,893 in the training data or only those that occur more than once. However, there are two minor differences from the previous sections. First, we add a single binary feature to indicate if the token contains a capital letter. Second, our tuning considers rectiﬁed linear units as the activation function for the CHARAGRAM and charCNN architectures.2
The results are shown in Table 4. Performance is similar across models. We found that adding a second fully-connected 150 dimensional layer to the CHARAGRAM model improved results slightly.3
4.3 Convergence
One observation we made during our experiments was that different models converged at signiﬁcantly different rates. Figure 1 plots the performance of the word similarity and tagging tasks as a function of
2We did not consider ReLU for the similarity experiments because the ﬁnal embeddings are used directly to compute cosine similarities, which led to poor performance when restricting the embeddings to be non-negative.
3We also tried adding a second (300 dimensional) layer for the word and sentence embedding models and found that it hurt performance.

Spearman’s ρ

Word Similarity 0.8 0.6 0.4 0.2
0

0 1

10 20 30 40 50 Epoch
POS Tagging

0.95

0.9

CHARAGRAM

0.85

charLSTM

charCNN

0.8

2

4

6

8

10

Epoch

Accuracy

Figure 1: Plots of performance versus training epoch for word similarity and POS tagging.

the number of examples processed during training. For word similarity, we plot the oracle Spearman’s ρ on SL999, while for tagging we plot tagging accuracy on the validation set. We evaluate performance every quarter epoch (approximately every 194,252 word pairs) for word similarity and every epoch for tagging. We only show the ﬁrst 10 epochs of training in the tagging plot.
The plots show that the CHARAGRAM model converges quickly to high performance. The charCNN and charLSTM models take many more epochs to converge. Even with tagging, which uses a very high learning rate, CHARAGRAM converges signiﬁcantly faster than the others. For word similarity, it appears that charCNN and charLSTM are still slowly improving at the end of 50 epochs. This suggests that if training was done for a much longer period, and possibly on more data, the charLSTM or charCNN models could match and surpass the CHARAGRAM model. However, due to the large training sets available from PPDB and the computational requirements of these architectures, we were unable to explore the regime of training for many epochs. We conjecture that slow convergence could be the reason for the inferior performance of LSTMs for similarity tasks as reported by Wieting et al. (2016).

Task POS Tagging
Word Similarity
Sentence Similarity

# n-grams 100
1,000 50,000
100 1,000 50,000
100 1,000 50,000

2 95.52 96.72 96.81
6.2 15.2 14.4 40.2 50.1 45.7

2,3 96.09 96.86 97.00
7.0 33.0 52.4 33.8 60.3 64.7

2,3,4 96.15 96.97 97.02
7.7 38.7 67.8 32.5 58.6 66.6

2,3,4,5 96.13 97.02 97.04 9.1 43.2 69.2 31.2 56.6 63.0

2,3,4,5,6 96.16 97.03 97.09 8.8 43.9 69.5 29.8 55.6 61.3

Table 5: Results of using different numbers and different combinations of character n-grams.

4.4 Model Size Experiments
The default setting for our CHARAGRAM and CHARAGRAM-PHRASE models is to use all character bigram, trigrams, and 4-grams that occur in the training data at least C times, tuning C over the set {1, 2}. This results in a large number of parameters, which could be seen as an unfair advantage over the comparatively smaller charCNN and charLSTM models, which have up to 881,025 and 763,200 parameters respectively in the similarity experiments.4
On the other hand, for a given training example, very few parameters in the CHARAGRAM model are actually used. For the charCNN and charLSTM models, by contrast, all parameters are used except the character embeddings for those characters that are not present in the example. For a sentence with 100 characters, and when using the 300-dimensional CHARAGRAM model with bigrams, trigrams, and 4grams, there are approximately 90,000 parameters in use for this sentence, far fewer than those used by the charCNN and charLSTM for the same sentence.
We performed a series of experiments to investigate how the CHARAGRAM and CHARAGRAMPHRASE models perform with different numbers and lengths of character n-grams. For a given k, we took the top k most frequent character n-grams for each value of n in use. We experimented with k values in {100, 1000, 50000}. If there were fewer than k unique character n-grams for a given n, we used all of them. For these experiments, we did very little tuning, setting the regularization strength to 0 and only tuning over the activation function. We repeated this experiment for all three of our tasks. For word similarity, we report performance on SL999 after training for 5 epochs on the lexical section of PPDB XXL. For sentence similarity, we report the
4This includes 134 character embeddings.

average Pearson’s r over all 22 datasets after training for 5 epochs on the phrasal section of PPDB XL. For tagging, we report accuracy on the validation set after training for 50 epochs. The results are shown in Table 5.
When using extremely small models with only 100 n-grams of each order, we still see relatively strong performance on POS tagging. However, the semantic similarity tasks require far more n-grams to yield strong performance. Using 1000 n-grams clearly outperforms 100, and 50,000 n-grams performs best.

5 Analysis

5.1 Quantitative Analysis
One of our primary motivations for character-based models is to address the issue of out-of-vocabulary (OOV) words, which were found to be one of the main sources of error for the PARAGRAM-PHRASE model from Wieting et al. (2016). They reported a negative correlation (Pearson’s r of -0.45) between OOV rate and performance. We took the 12,108 sentence pairs in all 20 SemEval STS tasks and binned them by the total number of unknown words in the pairs.5 We computed Pearson’s r over each bin. The results are shown in Table 6.

Number of Unknown Words
0 1 2 ≥1 ≥0

N
11,292 534 194 816
12,108

PARAGRAM-
PHRASE
71.4 68.8 66.4 68.6 71.0

CHARAGRAM-
PHRASE
73.8 78.8 72.8 77.9 74.0

Table 6: Performance (Pearson’s r × 100) as a function of

the number of unknown words in the sentence pairs over all

20 SemEval STS datasets. N is the number of sentence pairs.

The CHARAGRAM-PHRASE model has better performance for each number of unknown words. The PARAGRAM-PHRASE model degrades when more unknown words are present, presumably because it is forced to use the same unknown word embedding for all unknown words. The CHARAGRAM-PHRASE
5Unknown words were deﬁned as those not present in the 1.7 million unique (case-insensitive) tokens that comprise the vocabulary for the GloVe embeddings available at http://nlp.stanford.edu/projects/glove/. The PARAGRAM-SL999 embeddings, used to initialize the PARAGRAM-PHRASE model, use this same vocabulary.

model has no notion of unknown words, as it can embed any character sequence.
We next investigated the sensitivity of the two models to length, as measured by the maximum of the lengths of the two sentences in a pair. We binned all of the 12,108 sentence pairs in the 20 SemEval STS tasks by length and then again found the Pearson’s r for both the PARAGRAM-PHRASE and CHARAGRAM-PHRASE models. The results are shown in Table 7.

Max Length
≤4 5 6 7 8 9 10
11-15 16-20 ≥ 21

N
71 216 572 1,097 1,356 1,266 1,010 3,143 1,559 1,818

PARAGRAM-
PHRASE
67.9 71.1 67.0 71.5 74.2 71.7 70.7 71.8 73.0 74.5

CHARAGRAM-
PHRASE
72.9 71.9 69.7 74.0 74.5 72.7 74.2 73.7 75.1 75.4

Table 7: Performance (Pearson’s r × 100) as a function of the

maximum number of tokens in the sentence pairs over all 20

SemEval STS datasets. N is the number of sentence pairs.

We ﬁnd that both models are robust to sentence length, achieving the highest correlations on the longest sentences. We also ﬁnd that CHARAGRAMPHRASE outperforms PARAGRAM-PHRASE at all sentence lengths.
5.2 Qualitative Analysis

bigram not capable not able not possible not sufﬁcient not easy

CHARAGRAM-PHRASE incapable, unable, incapacity unable, incapable, incapacity impossible impracticable unable insufﬁcient, sufﬁcient, inadequate easy, difﬁcult, tough

PARAGRAM-PHRASE not, capable, stalled not, able, stalled not, stalled, possible not, sufﬁcient, stalled not, stalled, easy

Table 8: Nearest neighboring words of selected bigrams under

CHARAGRAM-PHRASE and PARAGRAM-PHRASE embeddings.

Aside from OOVs, the PARAGRAM-PHRASE model lacks the ability to model word order or cooccurrence, since it simply averages the words in the sequence. We were interested to see whether CHARAGRAM-PHRASE could handle negation, since it does model limited information about word order (via character n-grams that span multiple words in the sequence). We made a list of “not” bigrams that could be represented by a single word, then embedded each bigram using both models and did a

Word vehicals serious-looking near-impossible growths litered journeying babyyyyyy adirty

CHARAGRAM-PHRASE vehical, vehicles, vehicels, vehicular, cars, vehicle, automobiles, car serious, grave, acute, serious-minded, seriousness, gravity, serious-faced impossible, hard/impossible, audacious-impossible, impractical, unable growth, grow, growing, increases, grows, increase, rise, growls, rising liter, litering, lited, liters, literate, literature, literary, literal, lite, obliterated journey, journeys, voyage, trip, roadtrip, travel, tourney, voyages, road-trip babyyyyyyy, baby, babys, babe, baby.i, babydoll, babycake, darling dirty, dirtyyyyyy, ﬁlthy, down-and-dirty, dirtying, dirties, ugly, dirty-blonde

refunding professors huge

refunds, refunded, refund, repayment, reimbursement, rebate, repay reimbursements, reimburse, repaying, repayments, rebates, rebating, reimburses professor, professorships, professorship, teachers, professorial, teacher prof., teaches, lecturers, teachings, instructors, headteachers, teacher-student enormous, tremendous, large, big, vast, overwhelming, immense, giant formidable, considerable, massive, huger, large-scale, great, daunting

Table 9: Nearest neighbors of CHARAGRAM-PHRASE embeddings. Above the double horizontal line are nearest neighbors of

words that were not in our training data, and below it are nearest neighbors of words that were in our training data.

nearest-neighbor search over a working vocabulary.6 The results, in Table 8, show how the CHARAGRAMPHRASE embeddings model negation. In all cases but one, the nearest neighbor is a paraphrase for the bigram and the next neighbors are mostly paraphrases as well. The PARAGRAM-PHRASE model, unsurprisingly, is incapable of modeling negation. In all cases, the nearest neighbor is not, as this word carries much more weight than the word it modiﬁes. The remaining nearest neighbors are either the modiﬁed word or stalled.
We did two additional nearest neighbor explorations with our CHARAGRAM-PHRASE model. In the ﬁrst, we collected the nearest neighbors for words that were not in the training data (i.e. PPDB XXL), but were in our working vocabulary. This consisted of 59,660 words. In the second, we collected nearest neighbors of words that were in our training data which consisted of 37,765 tokens.
A sample of the nearest neighbors is shown in Table 9. Several kinds of similarity are being captured simultaneously by the model. One kind is similarity in terms of spelling variation, including misspellings (vehicals, vehicels, and vehicles) and repetition for emphasis (baby and babyyyyyyy). Another kind is similarity in terms of morphological variants of a shared root (e.g., journeying and journey). We also see that the model has learned many strong synonym relationships without signiﬁcant amounts of over-
6This contained all words in PPDB-XXL, our evaluations, and in two other datasets: the Stanford Sentiment task (Socher et al., 2013) and the SNLI dataset (Bowman et al., 2015), resulting in 93,217 unique (up-to-casing) tokens.

lapping n-grams (e.g., vehicles, cars, and automobiles). We ﬁnd these characteristics for words both in and out of the training data. Words in the training data, which tend to be more commonly used, do tend to have higher precision in their nearest neighbors (e.g., see neighbors for huge). We noted occasional mistakes for words that share a large number of ngrams but are not paraphrases (see nearest neighbors for litered which is likely a misspelling of littered).

n-gram die foo pee aiv ngu 2

n-gram Embedding dy, die, dead, dyi, rlif, mort, ecea, rpse, d aw foo, eat, meal, alim, trit, feed, grai, din, nutr, toe peed, hast, spee, fast, mpo , pace, vel, loci, ccel waiv, aive, boli, epea, ncel, abol, lift, bort, bol ngue, uist, ongu, tong, abic, gual, fren, ocab, ingu 2 , 02, 02 , tw, dua, xx, ii , xx, o 14, d .2

Table 10: Nearest neighbors of character n-gram embeddings

from our trained CHARAGRAM-PHRASE model. The under-

score indicates a space, which signals the beginning or end of a

word.

Lastly, since our model learns embeddings for character n-grams, we include an analysis of character n-gram nearest neighbors in Table 10. These n-grams appear to be grouped into themes, such as death (ﬁrst row), food (second row), and speed (third row), but have different granularities. The n-grams in the last row appear in paraphrases of 2, whereas the second-to-last row shows n-grams in words like french and vocabulary, which can broadly be classiﬁed as having to do with language.

6 Conclusion
We performed a careful empirical comparison of character-based compositional architectures on three

NLP tasks. While most prior work has considered machine translation, language modeling, and syntactic analysis, we showed how characterlevel modeling can improve semantic similarity tasks, both quantitatively and with extensive qualitative analysis. We found a consistent trend: the simplest architecture converges fastest to high performance. These results, coupled with those from Wieting et al. (2016), suggest that practitioners should begin with simple architectures rather than moving immediately to RNNs and CNNs. We release our code and trained models so they can be used by the NLP community for general-purpose, character-based text representation.
Acknowledgments
We would like to thank the developers of Theano (Theano Development Team, 2016) and NVIDIA Corporation for donating GPUs used in this research.
Appendix A Training
For word and sentence similarity, we follow the training procedure of Wieting et al. (2015) and Wieting et al. (2016), described below. For part-ofspeech tagging, we follow the English Penn Treebank training procedure of Ling et al. (2015a).
For the similarity tasks, the training data consists of a set X of phrase pairs x1, x2 from the Paraphrase Database (PPDB; Ganitkevitch et al., 2013), where x1 and x2 are assumed to be paraphrases. We optimize a margin-based loss:

min 1 θ |X|

max(0, δ − cos(g(x1), g(x2))
x1,x2 ∈X

+ cos(g(x1), g(t1))) + max(0, δ − cos(g(x1), g(x2))

+ cos(g(x2), g(t2))) + λ θ 2

where g is the embedding function in use, δ is the margin, the full set of parameters is contained in θ (e.g., for the CHARAGRAM model, θ = W, b ), λ is the L2 regularization coefﬁcient, and t1 and t2 are carefully selected negative examples taken from a mini-batch during optimization (discussed below).

Intuitively, we want the two phrases to be more similar to each other (cos(g(x1), g(x2))) than either is to their respective negative examples t1 and t2, by a margin of at least δ.
A.1 Selecting Negative Examples
To select t1 and t2 in Eq. 2, we tune the choice between two approaches. The ﬁrst, MAX, simply chooses the most similar phrase in some set of phrases (other than those in the given phrase pair). For simplicity and to reduce the number of tunable parameters, we use the mini-batch for this set, but it could be a separate set. Formally, MAX corresponds to choosing t1 for a given x1, x2 as follows:
t1 = argmax cos(g(x1), g(t))
t: t,· ∈Xb\{ x1,x2 }
where Xb ⊆ X is the current mini-batch. That is, we want to choose a negative example ti that is similar to xi according to the current model parameters. The downside of this approach is that we may occasionally choose a phrase ti that is actually a true paraphrase of xi.
The second strategy selects negative examples using MAX with probability 0.5 and selects them randomly from the mini-batch otherwise. We call this sampling strategy MIX. We tune over the choice of strategy in our experiments.
Appendix B Tuning Word Similarity Models
For all architectures, we tuned over the mini-batch size (25 or 50) and the type of sampling used (MIX or MAX). δ was set to 0.4 and the dimensionality d of each model was set to 300.
For the CHARAGRAM model, we tuned the activation function h (tanh or linear) and regularization coefﬁcient λ (over {10−4, 10−5, 10−6}). The n-gram vocabulary V contained all 100,283 character n-grams (n ∈ {2, 3, 4}) in the lexical section of PPDB XXL.
For charCNN and charLSTM, we randomly initialized 300 dimensional character embeddings for all unique characters in the training data. For charLSTM, we tuned over whether to include an output gate. For charCNN, we tuned the ﬁlter activation function (rectiﬁed linear or tanh) and tuned the activation for the fully-connected layer (tanh or linear).

Dataset

50% 75% Max

MSRpar MSRvid SMT-eur OnWN SMT-news STS 2012 Average headline OnWN FNWN SMT STS 2013 Average deft forum deft news headline images OnWN tweet news STS 2014 Average answers-forums answers-students belief headline images STS 2015 Average 2014 SICK 2015 Twitter Average

51.5 57.6 73.4 75.5 80.3 88.0 44.4 48.1 56.7 60.8 65.9 72.7 40.1 45.4 60.9 54.5 59.5 70.3 64.0 68.3 78.4 52.8 64.8 84.3 32.7 38.1 58.2 31.8 34.6 40.4 45.3 51.4 65.3 36.6 46.8 53.1 66.2 74.0 78.5 67.1 75.4 78.4 75.6 79.0 83.4 78.0 81.1 87.5 64.7 72.2 79.2 64.7 71.4 76.7 61.3 68.2 73.9 67.6 73.6 78.8 67.7 72.2 77.2 74.2 80.8 84.2 80.4 84.3 87.1 70.2 75.8 80.2 71.4 79.9 82.8 49.9 52.5 61.9 59.7 65.6 73.6

charCNN
50.6 72.2 50.9 61.8 46.8 56.5 68.1 54.4 26.4 42.0 47.7 45.6 73.5 67.4 68.7 66.8 66.2 64.7 47.2 75.0 65.7 72.2 70.0 66.0 62.9 48.6 59.2

charLSTM
23.6 47.2 38.5 53.0 38.3 40.1 54.4 33.5 10.6 24.2 30.7 19.4 54.6 53.7 53.6 46.1 53.6 46.8 27.3 63.1 22.6 61.7 52.8 45.5 50.3 39.9 41.9

PARAGRAM-
PHRASE
42.9 76.1 45.5 70.7 57.2 58.5 72.3 70.5 47.5 40.3 57.7 50.2 73.2 69.1 80.0 79.9 76.8 71.5 67.4 78.3 76.0 74.5 82.2 75.7 72.0 52.7 66.2

CHARAGRAM-
PHRASE
59.7 79.6 57.2 68.7 65.2 66.1 75.0 67.8 42.3 43.6 57.2 62.7 77.0 74.3 77.6 77.0 79.1 74.7 61.5 78.5 77.2 78.7 84.4 76.1 70.0 53.6 68.7

Table 11: Results on SemEval textual similarity datasets (Pearson’s r ×100). The highest score in each row is in boldface (omitting

the ofﬁcial task score columns).

For both the charLSTM and charCNN models, we tuned λ over {10−4, 10−5, 10−6}.
Appendix C Full Sentence Similarity Results
Table 11 shows the full results of our sentence similarity experiments.
References
[Agirre et al.2012] Eneko Agirre, Mona Diab, Daniel Cer, and Aitor Gonzalez-Agirre. 2012. SemEval-2012 task 6: A pilot on semantic textual similarity. In Proceedings of the First Joint Conference on Lexical and Computational Semantics-Volume 1: Proceedings of the main conference and the shared task, and Volume 2: Proceedings of the Sixth International Workshop on Semantic Evaluation. Association for Computational Linguistics.
[Agirre et al.2013] Eneko Agirre, Daniel Cer, Mona Diab, Aitor Gonzalez-Agirre, and Weiwei Guo. 2013. *SEM 2013 shared task: Semantic textual similarity. In Second Joint Conference on Lexical and Computational Semantics (*SEM), Volume 1: Proceedings of

the Main Conference and the Shared Task: Semantic Textual Similarity. [Agirre et al.2014] Eneko Agirre, Carmen Banea, Claire Cardie, Daniel Cer, Mona Diab, Aitor GonzalezAgirre, Weiwei Guo, Rada Mihalcea, German Rigau, and Janyce Wiebe. 2014. SemEval-2014 task 10: Multilingual semantic textual similarity. In Proceedings of the 8th International Workshop on Semantic Evaluation (SemEval 2014). [Agirre et al.2015] Eneko Agirre, Carmen Banea, Claire Cardie, Daniel Cer, Mona Diab, Aitor GonzalezAgirre, Weiwei Guo, Inigo Lopez-Gazpio, Montse Maritxalar, Rada Mihalcea, German Rigau, Larraitz Uria, and Janyce Wiebe. 2015. SemEval-2015 task 2: Semantic textual similarity, English, Spanish and pilot on interpretability. In Proceedings of the 9th International Workshop on Semantic Evaluation (SemEval 2015). [Alexandrescu and Kirchhoff2006] Andrei Alexandrescu and Katrin Kirchhoff. 2006. Factored neural language models. In Proceedings of the Human Language Technology Conference of the NAACL, Companion Volume: Short Papers, pages 1–4, New York City, USA, June. Association for Computational Linguistics. [Ballesteros et al.2015] Miguel Ballesteros, Chris Dyer, and Noah A. Smith. 2015. Improved transition-based parsing by modeling characters instead of words with

lstms. In Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing, pages 349–359, Lisbon, Portugal, September. Association for Computational Linguistics.
[Bengio et al.2009] Yoshua Bengio, Je´roˆme Louradour, Ronan Collobert, and Jason Weston. 2009. Curriculum learning. In Proceedings of the 26th annual international conference on machine learning, pages 41– 48. ACM.
[Botha and Blunsom2014] Jan A. Botha and Phil Blunsom. 2014. Compositional morphology for word representations and language modelling. In International Conference on Machine Learning (ICML).
[Bowman et al.2015] Samuel R Bowman, Gabor Angeli, Christopher Potts, and Christopher D Manning. 2015. A large annotated corpus for learning natural language inference. arXiv preprint arXiv:1508.05326.
[Bowman et al.2016] Samuel R. Bowman, Jon Gauthier, Abhinav Rastogi, Raghav Gupta, Christopher D. Manning, and Christopher Potts. 2016. A fast uniﬁed model for parsing and sentence understanding. In Proceedings of ACL.
[Chen et al.2015] Xinxiong Chen, Lei Xu, Zhiyuan Liu, Maosong Sun, and Huanbo Luan. 2015. Joint learning of character and word embeddings. In Proceedings of International Joint Conference on Artiﬁcial Intelligence (IJCAI).
[Chrupała2013] Grzegorz Chrupała. 2013. Text segmentation with character-level text embeddings. arXiv preprint arXiv:1309.4628.
[Chrupała2014] Grzegorz Chrupała. 2014. Normalizing tweets with edit scripts and recurrent neural embeddings. In Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics (Volume 2: Short Papers), pages 680–686. Association for Computational Linguistics.
[Chung et al.2016] Junyoung Chung, Kyunghyun Cho, and Yoshua Bengio. 2016. A character-level decoder without explicit segmentation for neural machine translation. arXiv preprint arXiv:1603.06147.
[Costa-Jussa` and Fonollosa2016] Marta R. Costa-Jussa` and Jose´ A. R. Fonollosa. 2016. Characterbased neural machine translation. arXiv preprint arXiv:1603.00810.
[dos Santos and Guimara˜es2015] Cicero dos Santos and Victor Guimara˜es. 2015. Boosting named entity recognition with neural character embeddings. In Proceedings of the Fifth Named Entity Workshop, pages 25–33, Beijing, China, July. Association for Computational Linguistics.
[dos Santos and Zadrozny2014] Cicero N. dos Santos and Bianca Zadrozny. 2014. Learning character-level representations for part-of-speech tagging. In Proceed-

ings of the 31st International Conference on Machine Learning (ICML-14), pages 1818–1826.
[El-Desoky Mousa et al.2013] Amr El-Desoky Mousa, Hong-Kwang Jeff Kuo, Lidia Mangu, and Hagen Soltau. 2013. Morpheme-based feature-rich language models using deep neural networks for lvcsr of egyptian arabic. In 2013 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP), pages 8435–8439. IEEE.
[Evang et al.2013] Kilian Evang, Valerio Basile, Grzegorz Chrupała, and Johan Bos. 2013. Elephant: Sequence labeling for word and sentence segmentation. In Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing, pages 1422–1426. Association for Computational Linguistics.
[Faruqui and Dyer2015] Manaal Faruqui and Chris Dyer. 2015. Non-distributional word vector representations. arXiv preprint arXiv:1506.05230.
[Finkelstein et al.2001] Lev Finkelstein, Evgeniy Gabrilovich, Yossi Matias, Ehud Rivlin, Zach Solan, Gadi Wolfman, and Eytan Ruppin. 2001. Placing search in context: The concept revisited. In Proceedings of the 10th international conference on World Wide Web. ACM.
[Ganitkevitch et al.2013] Juri Ganitkevitch, Benjamin Van Durme, and Chris Callison-Burch. 2013. Ppdb: The paraphrase database. In HLT-NAACL. The Association for Computational Linguistics.
[Gers et al.2003] Felix A Gers, Nicol N Schraudolph, and Ju¨rgen Schmidhuber. 2003. Learning precise timing with lstm recurrent networks. The Journal of Machine Learning Research, 3.
[Graves2013] Alex Graves. 2013. Generating sequences with recurrent neural networks. arXiv preprint arXiv:1308.0850.
[He et al.2015] Hua He, Kevin Gimpel, and Jimmy Lin. 2015. Multi-perspective sentence similarity modeling with convolutional neural networks. In Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing.
[Hill et al.2014] Felix Hill, Kyunghyun Cho, Sebastien Jean, Coline Devin, and Yoshua Bengio. 2014. Embedding word similarity with neural machine translation. arXiv preprint arXiv:1412.6448.
[Hill et al.2015] Felix Hill, Roi Reichart, and Anna Korhonen. 2015. SimLex-999: Evaluating semantic models with (genuine) similarity estimation. Computational Linguistics, 41(4).
[Hill et al.2016] Felix Hill, Kyunghyun Cho, and Anna Korhonen. 2016. Learning distributed representations of sentences from unlabelled data. arXiv preprint arXiv:1602.03483.

[Hochreiter and Schmidhuber1997] Sepp Hochreiter and Ju¨rgen Schmidhuber. 1997. Long short-term memory. Neural computation, 9(8).
[Huang et al.2013] Po-Sen Huang, Xiaodong He, Jianfeng Gao, Li Deng, Alex Acero, and Larry Heck. 2013. Learning deep structured semantic models for web search using clickthrough data. In Proceedings of the 22nd ACM international conference on Conference on information & knowledge management, pages 2333–2338. ACM.
[Iyyer et al.2015] Mohit Iyyer, Varun Manjunatha, Jordan Boyd-Graber, and Hal Daume´ III. 2015. Deep unordered composition rivals syntactic methods for text classiﬁcation. In Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics and the 7th International Joint Conference on Natural Language Processing (Volume 1: Long Papers).
[Jo´zefowicz et al.2016] Rafal Jo´zefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. 2016. Exploring the limits of language modeling. CoRR, abs/1602.02410.
[Kim et al.2015] Yoon Kim, Yacine Jernite, David Sontag, and Alexander M. Rush. 2015. Character-aware neural language models. CoRR, abs/1508.06615.
[Kim2014] Yoon Kim. 2014. Convolutional neural networks for sentence classiﬁcation. In Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP).
[Kingma and Ba2014] Diederik Kingma and Jimmy Ba. 2014. Adam: A method for stochastic optimization. arXiv preprint arXiv:1412.6980.
[Lazaridou et al.2013] Angeliki Lazaridou, Marco Marelli, Roberto Zamparelli, and Marco Baroni. 2013. Compositional-ly derived representations of morphologically complex words in distributional semantics. In Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 1517–1526, Soﬁa, Bulgaria, August. Association for Computational Linguistics.
[Ling et al.2015a] Wang Ling, Chris Dyer, Alan W Black, Isabel Trancoso, Ramon Fermandez, Silvio Amir, Luis Marujo, and Tiago Luis. 2015a. Finding function in form: Compositional character models for open vocabulary word representation. In Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing, pages 1520–1530, Lisbon, Portugal, September. Association for Computational Linguistics.
[Ling et al.2015b] Wang Ling, Isabel Trancoso, Chris Dyer, and Alan W. Black. 2015b. Characterbased neural machine translation. arXiv preprint arXiv:1511.04586.

[Luong and Manning2016] Minh-Thang Luong and Christopher D. Manning. 2016. Achieving open vocabulary neural machine translation with hybrid wordcharacter models. arXiv preprint arXiv:1604.00788.
[Luong et al.2013] Thang Luong, Richard Socher, and Christopher Manning. 2013. Better word representations with recursive neural networks for morphology. In Proceedings of the Seventeenth Conference on Computational Natural Language Learning, pages 104–113, Soﬁa, Bulgaria, August. Association for Computational Linguistics.
[Marelli et al.2014] Marco Marelli, Luisa Bentivogli, Marco Baroni, Raffaella Bernardi, Stefano Menini, and Roberto Zamparelli. 2014. SemEval-2014 task 1: Evaluation of compositional distributional semantic models on full sentences through semantic relatedness and textual entailment. In Proceedings of the 8th International Workshop on Semantic Evaluation (SemEval 2014).
[Mitchell and Lapata2010] Jeff Mitchell and Mirella Lapata. 2010. Composition in distributional models of semantics. Cognitive Science, 34(8).
[Mrksˇic´ et al.2016] Nikola Mrksˇic´, Diarmuid O´ Se´aghdha, Blaise Thomson, Milica Gasˇic´, Lina Rojas-Barahona, Pei-Hao Su, David Vandyke, TsungHsien Wen, and Steve Young. 2016. Counter-ﬁtting word vectors to linguistic constraints. arXiv preprint arXiv:1603.00892.
[Pavlick et al.2015] Ellie Pavlick, Pushpendre Rastogi, Juri Ganitkevich, Benjamin Van Durme, and Chris Callison-Burch. 2015. PPDB 2.0: Better paraphrase ranking, ﬁne-grained entailment relations, word embeddings, and style classiﬁcation. In Proceedings of the Annual Meeting of the Association for Computational Linguistics.
[Pennington et al.2014] Jeffrey Pennington, Richard Socher, and Christopher D Manning. 2014. Glove: Global vectors for word representation. Proceedings of Empirical Methods in Natural Language Processing (EMNLP 2014).
[Qiu et al.2014] Siyu Qiu, Qing Cui, Jiang Bian, Bin Gao, and Tie-Yan Liu. 2014. Co-learning of word representations and morpheme representations. In Proceedings of COLING 2014, the 25th International Conference on Computational Linguistics: Technical Papers, pages 141–150, Dublin, Ireland, August. Dublin City University and Association for Computational Linguistics.
[Schwartz et al.2015] Roy Schwartz, Roi Reichart, and Ari Rappoport. 2015. Symmetric pattern based word embeddings for improved word similarity prediction. In Proceedings of CoNLL 2015.
[Socher et al.2011] Richard Socher, Eric H Huang, Jeffrey Pennin, Christopher D Manning, and Andrew Y

Ng. 2011. Dynamic pooling and unfolding recursive autoencoders for paraphrase detection. In Advances in Neural Information Processing Systems. [Socher et al.2013] Richard Socher, Alex Perelygin, Jean Wu, Jason Chuang, Christopher D. Manning, Andrew Ng, and Christopher Potts. 2013. Recursive deep models for semantic compositionality over a sentiment treebank. In Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing. [Soricut and Och2015] Radu Soricut and Franz Och. 2015. Unsupervised morphology induction using word embeddings. In Proc. NAACL. [Sperr et al.2013] Henning Sperr, Jan Niehues, and Alex Waibel. 2013. Letter n-gram-based input encoding for continuous space language models. In Proceedings of the Workshop on Continuous Vector Space Models and their Compositionality, pages 30–39, Soﬁa, Bulgaria, August. Association for Computational Linguistics. [Srivastava et al.2014] Nitish Srivastava, Geoffrey Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdinov. 2014. Dropout: A simple way to prevent neural networks from overﬁtting. The Journal of Machine Learning Research, 15(1):1929–1958. [Sutskever et al.2011] Ilya Sutskever, James Martens, and Geoffrey E Hinton. 2011. Generating text with recurrent neural networks. In Proceedings of the 28th International Conference on Machine Learning (ICML-11), pages 1017–1024. [Tai et al.2015] Kai Sheng Tai, Richard Socher, and Christopher D Manning. 2015. Improved semantic representations from tree-structured long short-term memory networks. arXiv preprint arXiv:1503.00075. [Theano Development Team2016] Theano Development Team. 2016. Theano: A Python framework for fast computation of mathematical expressions. arXiv eprints, abs/1605.02688, May. [Wieting et al.2015] John Wieting, Mohit Bansal, Kevin Gimpel, Karen Livescu, and Dan Roth. 2015. From paraphrase database to compositional paraphrase model and back. Transactions of the ACL (TACL). [Wieting et al.2016] John Wieting, Mohit Bansal, Kevin Gimpel, and Karen Livescu. 2016. Towards universal paraphrastic sentence embeddings. In Proceedings of International Conference on Learning Representations. [Xu et al.2015] Wei Xu, Chris Callison-Burch, and William B Dolan. 2015. SemEval-2015 task 1: Paraphrase and semantic similarity in Twitter (PIT). In Proceedings of the 9th International Workshop on Semantic Evaluation (SemEval). [Zhang et al.2015] Xiang Zhang, Junbo Zhao, and Yann LeCun. 2015. Character-level convolutional networks for text classiﬁcation. In Advances in Neural Information Processing Systems 28.

