arXiv:1705.06840v1 [cs.AI] 19 May 2017

The Conference Paper Assignment Problem: Using Order Weighted Averages to Assign Indivisible
Goods
Jing Wu Lian1, Nicholas Mattei2, Renee Noble1, and Toby Walsh3
1 Data61, CSIRO and UNSW, Sydney, Australia renee.noble@data61.csiro.au, lianjingwu@gmail.com
2 IBM T.J. Watson Research Center, New York, USA n.mattei@ibm.com
3 Data61, CSIRO, UNSW, and TU Berlin, Berlin, Germany toby.walsh@data61.csiro.au
Abstract. Motivated by the common academic problem of allocating papers to referees for conference reviewing we propose a novel mechanism for solving the assignment problem when we have a two sided matching problem with preferences from one side (the agents/reviewers) over the other side (the objects/papers) and both sides have capacity constraints. The assignment problem is a fundamental problem in both computer science and economics with application in many areas including task and resource allocation. We draw inspiration from multicriteria decision making and voting and use order weighted averages (OWAs) to propose a novel and ﬂexible class of algorithms for the assignment problem. We show an algorithm for ﬁnding an Σ -OWA assignment in polynomial time, in contrast to the NP-hardness of ﬁnding an egalitarian assignment. Inspired by this setting we observe an interesting connection between our model and the classic proportional multi-winner election problem in social choice.
1 Introduction
Assigning indivisible items to multiple agents is a fundamental problem in many ﬁelds including computer science, economics and operations research. Algorithms for matching and assignment are used in a variety of application areas including allocating runways to airplanes, residents to hospitals, kidneys to patients [15], students to schools [10], assets to individuals in a divorce, jobs to machines, and tasks to cloud computing nodes [26]. Understanding the properties of the underlying algorithms is an important aspect to ensuring that all participating agents are happy with their allocations and do not attempt to misrepresent their preferences; a key area of study for computational social choice [9].
An area that is near to many academics’ hearts is the problem of allocating papers to referees for peer review. The results of grant, journal, and conference reviewing can have signiﬁcant impact on the careers of scientists. Ensuring that papers and proposals are reviewed by the most qualiﬁed/interested referees most is part of ensuring that items are treated properly and all participants support the outcome of the processes. Making

sure these processes work for both the proposers and the reviewers is important and methods for improving peer review have been proposed and discussed in AI [29] and broadly across the sciences [28].
There are a number of ways one can improve the quality of peer review [29]. First is to ensure that reviewers are not incentivized to misreport their reviews for personal gain. Along this line there has been signiﬁcant interest recently in strategyproof mechanisms for peer review [6]. Unfortunately, the method that we discuss in this paper is not strategyproof. Another way is to ensure that reviewers are competent to provide judgements on the papers they are assigned. The Toronto Paper Matching System [11] is designed to improve the process from this paper-centric model. A third alternative, and the one we focus on in this study, is ensuring that reviewers are happy with the papers they are asked to review. This is fundamentally a question about the optimization objectives of the assignment functions used.
Formally, we study the Conference Paper Assignment Problem (CPAP) [22] which is a special of the Multi-Agent Resource Allocation Problem (MARA) [7], and propose a novel assignment, the Σ -OWA assignment. In the CPAP setting we have a two-sided market where on one side the agents/reviewers have preferences over the other side, the objects/papers, and both sides have (possibly inﬁnite) upper and lower capacities. A fundamental tension in assignment settings is the tradeoff between maximizing the social welfare, also know as the utilitarian maximal assignment and the Rawlsian [30] fairness concept of maximizing the utility of the worst off agent, known as the egalitarian maximal assignment. These two ideas are incompatible optimization objectives and diverge in a computational sense as well: computing the utilitarian assignment for additive utilities can be done in polynomial time, while computing the egalitarian assignment is NP-complete [14]. This, perhaps, could be the reason that implementers of large conference paper assignment software often opt for utilitarian assignments, as is supposedly the case for EasyChair [19].4 However, it is also not clear if an egalitarian assignment is desirable for CPAP.
Contributions. We establish a motivation for using OWA vectors in the assignment setting and deﬁne a novel notion of allocation, the Σ -OWA assignment. We give algorithm to compute an Σ -OWA maximal assignment in polynomial time and we show that the Σ OWA objective generalizes the utilitarian objective. We show that Σ -OWA assignments satisfy a notion of Pareto optimality w.r.t. the pairwise comparisons of the objects by the agents. We implement an algorithm for Σ -OWA assignments and perform experiments on real world conference paper assignment data.
2 Preliminaries
From here we will use the more general notation agents/objects to describe our setting. In assignment settings each agent provides their preference over the objects as a reﬂexive, complete, and transitive preference relation (weak order) over the set of objects, i.
4 This is technically unsubstantiated as when the authors contacted EasyChair to understand the assignment process we were told, “We do not provide information on how paper assignment in EasyChair is implemented. The information in Garg et.al. may be incorrect or out of date none of the authors worked for EasyChair, they also had no access to the EasyChair code.”

We do not assume that i is complete; it is possible that some agents may have conﬂicts of interest or have no preference for a particular object; this assumption is often called “having unacceptable objects” in the literature [26].
In many real-world CPAP settings there are a ﬁxed number of equivalence classes into which agents are asked to place the objects [27]. We assume that the number of equivalence classes (ranks) of objects are given as input to the problem and agents tell us within which rank each objects belong. Agents also provide a decreasing utility value for each rank5. Our main result can be extended to the case where the number of equivalence classes is not ﬁxed.
Formally, the CPAP problem is deﬁned by (N, O, , u, ∆ ): a set of n agents N = {a1, . . . , an}; a set of m objects O = {o1, . . . , om}; for each i ∈ N, a reﬂexive and transitive preference relation (weak order) over the set of objects, i, divided into ∆ equivalence classes (ranks); and for each i ∈ N a utility vector ui is of length ∆ and assigns a decreasing utility ui(k) → R for each k ∈ [1, ∆ ], i.e., ui(1) > ui(2) > . . . > ui(∆ ). Let ri( j) be the rank of object j for i and ui(ri( j)) denote the value of i for j.
2.1 Side Constraints and Feasible Assignments
There are two practical constraints that we include in our model, making our model more general than the standard MARA or CPAP problems studied in computer science [7]: upper and lower capacities on both the agents and objects.
Agent Capacity: each agent i ∈ N has (possibly all equal) upper and lower bound on their capacity, the number of objects they can be allocated, cNmin(i) and cNmax(i).
Object Capacity: each object j ∈ O has a (possibly all equal) upper and lower bound on the number of agents assigned to it, cOmin( j) and cOmax( j), respectively.
We can now deﬁne a feasible assignment A for an instance (N, O, , u, ∆ ). For a given assignment A, let A(i, :) denote the set of objects assigned to agent i in A, let A(:, j) denote the set of agents assigned to object j, and let | · | denote the size (number of elements) of a set or vector. A feasible assignment A must obey:
[∀i ∈ N : cNmin(i) ≤ |A(i, :)| ≤ cNmax(i)] ∧ [∀ j ∈ O : cOmin( j) ≤ |A(:, j)| ≤ cOmax( j)].
We write the set of all feasible assignments for an instance as A(N, O, , u, ∆ ).6
2.2 Individual Agent Evaluation
We ﬁrst formalize how an individual agent evaluates their assigned objects. Each feasible assignment A ∈ A gives rise to a signature vector for each agent i ∈ N; intuitively the signature vector is the number of objects at each rank assigned to i. Formally let σ i(A) = (σ i,1(A), . . . , σ i,∆ (A)) where σ i,l(A) = |{ j ∈ A(i, :)|ri( j) = l}| for each l ∈ [1, . . . , ∆ ].
5 We assume that agents can give any utilities as input. However, often the utilities are restricted to be the same, i.e., Borda utilities in conference paper bidding, or come from some ﬁxed budget, i.e., bidding fake currency as in course allocation at Harvard [10].
6 We will omit the arguments when they are clear from context.

For indivisible (discrete) objects the lexicographic relation can be modeled by the additive utility relation by setting the agent utilities to high enough values. Formally, if the utility for rank i < j is u(i) > u( j) · m then the lexicographic and additive utility relations are the same, i.e., no matter how many additional objects of rank j the agent receives, one additional object of rank i is more preferred. We now deﬁne the relations that a referee might consider between assignments A and B.
Lexicographic: An agent i lexicographically prefers A to B if σ i(A) comes before σ i(B) in the lexicographic order. That is, there is an index 1 ≥ l ≥ ∆ such that for all k > l we have σ i,k(A) = σ i,k(B) and σ i,l(A) > σ i,l(B); i.e., i receives at least one more paper of a higher rank in A than in B. The lexicographic relation over vectors has a long history in the assignment literature [18].
Additive Utility: An agent i prefers assignment A to B if he has more additive utility for the objects assigned to him in A than in B. Formally, (and slightly abusing notation) ui(A) = ∑ j∈A(i,:) ui(ri( j)) > ∑ j∈B(i,:) ui(ri( j)), or an alternative formulation using the dot product, ui(A) = ui · σ i(A) > ui · σ i(B).

2.3 Overall Assignment Evaluation

In the literature there are several optimization objectives deﬁned over an assignment that an implementer may wish to consider. We limit our discussion to the two classical notions below. Additional discussion of objectives, including the imposition of various fairness criteria for the CPAP setting can be found in Garg et al. [19] and for the MARA setting see e.g., Bouveret and Lemaˆıtre [8].
Utilitarian Social Welfare Maximal Assignment: Often called the utilitarian assignment, we want to maximize the total social welfare over all the agents. An assignment is a utilitarian assignment if it satisﬁes:

∑ ∑ ∑ argmax

ui(ri( j)) = arg max ui · σ i(A).

A∈A i∈N j∈A(i,:)

A∈A i∈N

Egalitarian Social Welfare Maximal Assignment: Often called the egalitarian assignment, we want to enforce the Rawlsian notion of fairness by making sure that the worst off referee is as happy as possible, i.e., maximize the utility of the least well off agent. Formally,

∑ arg max min

ui(ri( j)) = arg max min ui · σ i(A).

A∈A i∈N j∈A(i,:)

A∈A i∈N

In the discrete MARA and CPAP setting where objects are not divisible, the problem of ﬁnding an egalitarian assignment is NP-hard [14] while ﬁnding a utilitarian assignment can be done in polynomial time [7].

3 Background and Related Work
One and two sided matching and assignment problems have been studied in economics [31] and computer science [26, 9] for over 40 years. Matching and assignment have

many applications including kidneys exchanges [15] and school choice [1]. Our problem is often called the multi-agent resource allocation (MARA) problem in computer science [7] The papers to referees formulation of this problem has some additional side constraints common in the economics literature, but not as common in computer science [26]. In the economics literature the Workers-Firms problem is the most closely related analogue to our problem, modeling many-many matchings with capacities [24].
The conference paper assignment has been studied a number of times over the years in computer science [22], as has deﬁning and reﬁning notions of fairness for the assignment vectors in multi-agent allocation problems [20]. We build off the work of Garg et al. [19], who extensively study the notion of fair paper assignments, including leximin and rank-maximal assignments, within the context of conference paper assignment. Garg et al. [19] show that for the setting we study, ﬁnding an egalitarian optimal assignment and ﬁnding a leximin optimal assignment are both NP-hard when there are three or more equivalence classes; and polynomial time computable when there are only two. They also provide an approximation algorithm for leximin optimal assignments. We know that if the capacity constraints are hard values, i.e., each reviewer must review ≤ x papers and each paper must receive exactly y reviews, then the resulting version of capacitated assignment is NP-hard [25]. Answer set programming for CPAP was studied by Amendola et al. [3]; they encode the CPAP problem in ASP and show that ﬁnding a solution that roughly correspond to the leximin optimal and egalitarian solutions can be done in reasonable time for large settings (≈ 100 agents).
CPAP also receives considerable attention in the recommender systems [13] and machine learning [12] communities. Often though, this work takes the approach of attempting to infer a more reﬁned utility or preference model in order to distinguish papers. Fairness and efﬁciency concerns are secondary. A prime example of this is the Toronto Paper Matching System designed by Charlin and Zemel [11]. This system attempts to increase the accuracy of the matching algorithms by having the papers express preferences over the reviewers themselves; where these preferences are inferred from the contents of the papers.
We make use of Order weighted averages (OWAs), often employed in multi-criteria decision making [33]. OWAs have recently received attention in computational social choice for voting and ranking [21], ﬁnding a collective set of items for a group [32], and multi-winner voting with proportional representation [17, 16]. The key difference between CPAP and voting using OWAs in the ComSoc literature is that CPAP does not select a set of winners that all agents will share. Instead, all agents are allocated a possibly disjoint set of objects.
4 Σ -OWA Assignments
We now formally deﬁne OWAs and their use for deﬁning assignment objectives. We will discuss alternative formulations of Σ -OWA which have been studied.
An order weighted average (OWA) is a function deﬁned for an integer K as a vector α(K) = (α1, . . . , αK) of K non-negative numbers. Let x = (x1, . . . , xK) be a vector of K numbers and let x↓ be the non-increasing rearrangement of x, i.e. x↓ = x↓1 ≥ x↓2 ≥ . . . ≥

x↓K. Then we say:

∑K
OWAα (x) = α · x↓ = αi · x↓i .
i=1

In order to apply OWAs to our setting we need to deﬁne the weighted rank signature of an assignment. Let ωi(A) be deﬁned as the sorted vector of utility that a referee gets from an assignment A. Formally,

ωi(A) = sort({∀ j ∈ A(i, :) : ui(r( j))}).

For example, if A(i, :) included two objects with utility 3, one of utility 1, and one of utility 0, we would have
ωi(A) = (3, 3, 1, 0).
Our inspiration for applying OWAs comes from a multi-winner voting rule known as Proportional Approval Voting (PAV) [23, 5, 4]. In approval voting settings, each agent can approve of as many candidates as they wish. Under the standard approval voting (AV) method, all approvals from each agent assign one point to the candidate for which they are cast. However, this can lead to a number of pathologies described by Aziz et al. [5] and it intuitively does not seem fair; once a candidate that you like has been selected to the winning set your next candidate selected to the winning set should seemingly count less. Hence in PAV, which is designed to be more fair [4], a voter’s ﬁrst approval counts for a full point, the second for 1/2, the next for 1/3, and on as a harmonically decreasing sequence.
Transitioning this logic to the CPAP setting, we were motivated to ﬁnd a way to distribute objects to agents that increases the number of agents who receive their top ranked objects. This is the logic of PAV: once you get a candidate into the winning set, you should count less until everyone else has a candidate in the winning set. If we desire to directly get a rank maximal assignment, completely ignoring the utilities, then we know this is polynomial by a result from Garg et al. [19]. However, if we wish to modulate between using the utilities and using only the ranks, perhaps we can use OWAs. We use the sum over all agents of OWAα (ω) = α · ω as the optimization criteria for the assignment.
In order to cleanly deﬁne this we need to place some restrictions on our OWA vectors. Firstly, the length of α needs to be at least as long as the maximum agent capacity, i.e., |α| ≥ arg maxi∈N(cNmax(i)). Typically the literature on OWAs assumes that α is normalized, i.e., ∑1≤i≤K αi = 1. We do not enforce this convention as we wish to study the PAV setting with α = (1, 1/2, . . .). This is formally a relaxation and we observe that whether or not the OWAs are normalized does not affect our computational results. However, we do require that our OWA vector be non-increasing and that each entry be ≥ 0, i.e., for any i, j ∈ |α|, i < j we have αi ≥ α j ≥ 0.

Σ -OWA ASSIGNMENT

Input: Given an assignment setting (N, O, , u, ∆ ) with agent ca-

pacities [cNmin(i), cNmax(i)] for all i ∈ N, and object capacities

[cOmin

(

j

),

c

O max

(

j

)]

for

all

j

∈

O,

and

a

non-increasing

OWA

vec-

tor αi with |α| ≥ max∀i∈N (cNmax(i)).

Question: Find a feasible assignment A such that

|n|
∑ A = arg max αi · ωi(A). A∈A i=1

In our formulation, the OWA operator is applied to the vector of agent utilities and then we aggregate (or sum) these modiﬁed utilities to give the assignment objective. Hence, the Σ -OWA name. We observe that this formulation strictly generalizes the utilitarian assignment objective; if we set α = (1)n we recover the utilitarian assignment.
One may also wish to consider applying the OWA over the sorted vector of total agent utility for their allocation, which one could call the OWA-Σ version of our problem. Indeed, this formulation of the problem has been considered before and proposed in the earliest writings on OWAs for decision making [33]. Taking the OWA-Σ formulation allows one to recover both the utilitarian assignment, α = (1/n, . . . , 1/n), as well as the egalitarian assignment, α = (0, . . . , 0n−1, 1). However, because the OWA-Σ formulation is a generalization of the egalitarian assignment, it becomes NP-hard in general [14].
We think of the α vector as a kind of control knob given to the implementer of the market, allowing them to apply a sub-linear transform to the agent utilities. This ability may be especially useful when agents are free to report their (normalized) utilities for ranks via bidding or other mechanisms [10]. In many settings the utility vector is controlled by the individual agents, while the OWA vector is under the control of the market implementers. Consider the following example.
Example 1. Consider a setting with four agents N = {a1, a2, a3, a4} agents and four objects O = {o1, o2, o3, o4}. For all agents let cNmin = cNmax = 2 and for all objects let cOmin = cOmax = 2. For the Σ -OWA assignment, let α = (1, 1/2).
o1 o2 o3 o4 a1 11 9 0 0 a2 8 8 2 2 a3 7 7 3 3 a4 6 6 4 4
We get the following allocations. Utilitarian:
A(a1, :) = {o1, o2}, u1(A) = 20; A(a2, :) = {o1, o2}, u2(A) = 16; A(a3, :) = {o3, o4}, u3(A) = 6; A(a4, :) = {o3, o4}, u4(A) = 8; ∑i ui(A) = 50.

OWA, α = (1, 1/2): A(a1, :) = {o1, o2}, u1(A) = 20, α · ω1 = 15.5; A(a2, :) = {o2, o3}, u2(A) = 10, α · ω2 = 9.0; A(a3, :) = {o1, o4}, u3(A) = 10, α · ω3 = 8.5; A(a4, :) = {o3, o4}, u4(A) = 8, α · ω4 = 5.0; ∑i ui(A) = 48.
Egalitarian: A(a1, :) = {o1, o4}, u1(A) = 11; A(a2, :) = {o2, o4}, u2(A) = 10; A(a3, :) = {o2, o3}, u3(A) = 10; A(a4, :) = {o1, o3}, u4(A) = 10; ∑i ui(A) = 41.
Inspecting the results of Example 1, we observe that in the set of all utilitarian maximal assignments have a1 and a2 each being assigned to o1 and o2, in the set of all Σ -OWA maximal assignments a3 is assigned one of o1 or o2 while a2 is assigned one of o3 or o4, while in the set of all egalitarian maximal assignments each of the agents receives one of either o1 or o2 along with one of o3 or o4. Thus we observe the following.
Observation 1 The set of assignments returned by each of the three objective functions, utilitarian, egalitarian, and OWA, can be disjoint.
There are instances where the set of Σ -OWA assignments is the same as the set of egalitarian assignments, but disjoint from the set of utilitarian assignments. Hence, it is an interesting direction for future work to fully characterize Σ -OWA assignments and discover OWA vectors with nice properties.
4.1 Pareto Optimality
An allocation S is more preferred by a given agent with respect to pairwise comparisons than allocation T if S is a result of replacing an item in T with a strictly more preferred item. Note that the pairwise comparison relation is transitive. An allocation is Pareto optimal with respect to pairwise comparisons if there exists no other allocation that each agent weakly prefers and at least one agent strictly prefers.
Lemma 1. Consider an agent i and two allocations S and T of equal size. Then if S is at least as preferred as T by i with respect to pairwise comparison, then S yields at least as much OWA value as T for any OWA vector no matter if it is increasing or decreasing.
Proof. Note that S can be viewed as a transformation from T where each item j is replaced by some other item j that is at least as preferred. Hence, the value of the item either stays the same or increases. In either case, the corresponding OWA multiplied with the value is the same. Since the OWA transform is bilinear, the total OWA score of S is at least as much as that of T .
Proposition 1. The Σ -OWA maximal assignment is Pareto optimal with respect to pairwise comparison irrespective of the OWA.

Proof. Assume for contradiction that a Σ -OWA maximal assignment A is not Pareto optimal with respect to pairwise comparisons. From Lemma 1, there exists another outcome A that each agent weakly prefers and at least one agent strictly prefers. But this means that in A each agent gets at least as much OWA score and at least one agent gets strictly more. But this contradicts the fact that A is OWA maximal.
5 An Algorithm for Σ -OWA assignments
We give an algorithm for ﬁnding Σ -OWA assignments using ﬂow networks. In this proof we use the most general formulation of our problem by allowing the values of the upper and lower per-agent capacities, [cNmin(i), cNmax(i)], to vary for each agent; and the upper and lower object capacities, [cOmin( j), cOmax( j)], to vary for each object.
Theorem 2. An Σ -OWA assignment can be found in polynomial time.
Proof. We reduce our problem to the problem of ﬁnding a minimum cost feasible ﬂow in a graph with upper and lower capacities on the edges, which is a polynomial time solvable problem. In addition to being polynomial time solvable, we know that the ﬂow is integral as long as all edge capacities are integral, even if we have real valued costs [2]. Figures 1 and 2 provide a high level view of the ﬂow network that we will construct.

C = [cNmin(1), cNmax(1)]

N a1 ...

N (2)] a2 ...

N (2), cmax

C = [cmin

s

a3 ...

C = [cNmin(3), cNmax(3)]

Gadget a1 Gadget a2 Gadget a3

O o C = [cOmin(1), cOmax(1)]
1
o2 C = [c O
min (2), c O max (2)]
o t 3
C = [cOmin(3), cOmax(3)]

C = [cNmin(n), cNmax(n)]

an ...

Gadget an

om
C = [cOmin(m), cOmax(m)]

Fig. 1. Main gadget for the reduction which enforces the agent and object capacity constraints.

In Figure 1 we ﬁrst build a tripartite graph with two sets of nodes and one set of

gadgets per agent: the agent nodes, one for each agent ai; the agent gadgets, one (il-

lustrated in Figure 2) for each agent ai; and the object nodes, one for each object o j.

There is an edge from the source node s to each of the agent nodes, each with cost 0,

minimum ﬂow capacity cNmin(i) and a maximum ﬂow capacity cNmax(i). This set of edges and nodes enforces the constraint that each ai has capacity [cNmin(i), cNmax(i)]. We also construct an edge from each object node to the sink t. Each of these edges has a cost

0,

a

minimum

capacity

c

O min

(

j

),

and

a

maximum

capacity

c

O max

(

j

).

This

set

of

edges

enforces the constraint that each o j has capacity [cOmin( j), cOmax( j)].

We now turn to the agent gadget depicted in Figure 2 for arbitrary ai. The leftmost

node and the rightmost set of nodes in Figure 2 correspond to the agent nodes N and

N

o1α1

)·α1 −u i(o 1 w=
ui(o2) · α1 w=−

o2α1

w = −ui(o3) · α1 o3α1 α1
w = −ui (o m)·α
1

omα1

ai

α2

(o1) · αd = −ui w w = −ui(o2) · αd

o1αd o2αd

αd

w = −ui(o3) · αd o3αd

w = −u

i (om ) · αD

omαd

O

aio1

o1

aio2

o2

aio3

o3

aiom

om

Fig. 2. The per agent gadget. Note that all costs on edges are 0 and all capacities are [0,1] unless otherwise noted.

object nodes O in Figure 1, respectively. In each agent gadget we create a tripartite sub-
graph with the agent node ai serving as the source and the set of object nodes O serving as the sinks.
We create three layers of nodes which we describe in turn from left to right. First, we create a set of decision nodes with labels α1, . . . , αd where cNmax(i) ≤ d ≤ |α|. Intuitively, we will be multiplying the OWA value α1 by the utility for some object, so we need to keep track of all the values that could result. The arcs from ai to each of the nodes in this set has upper capacity 1, minimum capacity 0, and cost 0. If we have the case that cNmax(i) < d then we can set the maximum capacity of the edges to node(s) α j, j > cNmax(i) to 0. This enforces that each value in the OWA vector can modify at most one utility value.
For each of the decision nodes α1, . . . , αd constructed, we create a set of object/decision nodes for each o j which we denote o jαk. From each of the decision nodes α1, . . . , αd we create an edge to each of the object/decision nodes created for this particular decision node αk, i.e., o1α1, o2α1, . . . , omα1 for α1. Each of these edges has maximum capacity 1 and a cost equal to −1 · ui(o j) · α1 for rank 1 and object o j ∈ O. These costs are the (negative) cost that matching agent ai with object o j at weighted rank dk contributes to the OWA objective.
Finally, we create one set of agent/object nodes, one for each o j denoted aio j. From all the object/decision nodes we connect all nodes with a label of o j to the corresponding agent/paper node, i.e., o1α1, o1α2, . . . o1αd all connect to aio1 with cost 0 and maximum capacity 1. We then connect the agent/object node to the corresponding object node in
the main construction from O, i.e., aio1 to o1 with cost 0 and maximum capacity 1. This set of nodes and edges enforces that each agent can be assigned each object once.
We can extract an assignment from the minimum cost feasible ﬂow by observing
that paper o j is allocated to agent ai if and only if there is a unit of ﬂow passing from the

particular agent/object node aio j to the object node o j. We now argue for the correctness of our algorithm in two steps, (1) that all constraints for the Σ -OWA assignment problem are enforced and (2) that a minimum cost feasible ﬂow in the constructed graph gives an Σ -OWA assignment. For (1) we note that since the units of ﬂow across the graph represent the assignment and we have explained how the capacity constraints on all edges enforce each of the particular constraints imposed by our deﬁnition of a feasible assignment, there is a feasible ﬂow iff the ﬂow satisﬁes the constraints.
For (2) observe that for each agent, the α nodes ﬁll with ﬂow in order from α1 to αd as the OWA vector is non-increasing and the utilities are decreasing, i.e., for each agent, the edge costs monotonically increase from the edges associated with α1 to the edges associated with αd. Thus, for each agent, the ﬁrst unit of ﬂow to this agent will use the least cost (most negative) edge must be associated with α1; and similarly for α2 through αd. From the capacity constraints we know there is only one unit of ﬂow that enters each decision node αi and there is only one unit of ﬂow that can leave each agent/paper node aio j. This means that each αi can modify only one o j and each o j selected must be unique for this agent.
As the decision nodes are ﬁlled in order and αi can only modify the value for a single object, we know the total cost of the ﬂow across the agent gadget for each ai is equal to −1 · αi · ωi. Hence, the price of the min cost ﬂow across all agents is equal to −1 · ∑∀i∈N αi · ωi(A). Thus, the min cost ﬂow in the graph is an Σ -OWA assignment.
5.1 Generalizations
We observe two possible generalizations of the above construction which allow us to use this constructive proof for more general instances than the CPAP. First, The proof above can be generalized to allow for α to vary for each agent. Speciﬁcally, observe that the decision nodes for each agent ai are independent from all other agents. This means that, for each agent (or a class of agents) we could use an OWA vector αai . This ability may be useful, for instance, when a group of agents reports the same extreme utility distribution and the organizer wishes to apply the same transform to these utilities.
The second generalization that we can make to the above construction is to allow each agent to be assigned to each object more than once. While this ability does not make sense in the reviewers/papers setting (unless there are sub reviewers) there could be other capacitated assignment settings where we may wish to assign the agents to objects multiple times e.g., if there are discrete jobs that need to be done a certain number of times but and a single agent can be assigned the same job multiple times.
In order to generalize the capacity constraint from 1 for each agent i for each object j we introduce a capacity upper bound zi, j which encodes the number of times that agent i can be assigned to object j. Taking zi, j = 1 for all i and j gives us the original CPAP setting. In order to enforce this constraint, within each agent gadget (Figure 2) we add a capacity constraint equal to zi, j from each edge aio j to o j. If we want a lower bound for the number of copies of o j assigned to ai we can encode this lower bound on this edge as well.
We can extract an assignment from the minimum cost feasible ﬂow by observing that paper o j is allocated to agent ai zi j times if and only if there are units of ﬂow

passing from the particular agent/object node aio j to the object node o j. The argument for correctness follows exactly from the proof of Theorem 2 above.
Corollary 1. An Σ -OWA assignment can be found in polynomial time even if each agent ai has a unique OWA vector αai and each object o j can be assigned to each agent ai any number of times (not just once).

6 Experiments

We now turn to the question of how good are Σ -OWA assignments in practice? We answer this question using real world data from three large international conferences (MD-00002-00000001 – 00000003) from WWW.PREFLIB.ORG [27]. We focus discussion on MD-00002-00000003 which has 146 agents and 175 objects. We implemented the algorithm given in Section 5 using networkX for Python and Lemon for C++. However, we still have a run time ≈ O(V 4), giving runtime ≈ (1502 · 3)4) = 2 × 1019, which caused our computers to crash even with 16GB of memory. This was quite disappointing as we thought the ﬂow argument could be used to solve this problem on real-world instances.
Not to be deterred, we still wanted to investigate the assignments we get from Σ OWA compare to the utilitarian and egalitarian assignments. Consequently, we implemented the model as an MIP in Gurobi 7.0 and it ran in under 1 minute for all instances and settings using 4 cores. Our MIP is similar to the one given by Skowron et al. [32] and the MARA MIP by Bouveret et al. [7]. However, as we have capacity constraints and individual/variable length OWAs, our MIP is more general than either.
To encode the Σ -OWA problem we introduce a binary variable xa,o indicating that agent a is assigned object o. We introduce a real valued variable uowa,a which is the Σ -OWA utility for agent a. Finally, we introduce ra,o,p for the OWA matrix which notes that agent a is assigned object o at OWA rank p. The MIP is given below.

max ∑a∈A ∑o∈O,p∈P ua(o) · αp · ra,o,p

Description:

s.t. cOmin(o) ≤ ∑a∈A xa,o ≤ cOmax(o) cNmin(a) ≤ ∑o∈O xa,o ≤ cNmax(a)

∀o ∈ O ∀a ∈ A

(1) Object Capacities (2) Agent Capacities

∑p∈P ra,o,p ≤ 1

∀a ∈ A, ∀o ∈ O (3) One Object per OWA Rank

∑o∈O ra,o,p ≤ 1

∀a ∈ A, ∀p ∈ P (4) Objects Have One Rank

∑p∈P ra,o,p ≥ xa,o

∀a ∈ A, ∀o ∈ O (5) Assignment to OWA Link Fcn.

∑o∈O ra,o,p ≥ ∑o∈O ra,o,p+1

∀a ∈ A, ∀p ∈ P (6) Ranks Fill in Increasing Order

∑o∈O ra,o,p · ua(o) ≥ ∑o∈O ra,o,p+1 · ua(o) ∀a ∈ A, ∀p ∈ P (7) Agent Utility Must Be Decreasing

Constraints (1)–(4) enforce the cardinality constraints on the agents, objects, and OWA rank matrix. Constraint (5) links the agent and object assignments to be positions in the OWA rank matrix. Line (6) enforces that the rank matrix ﬁlls from the ﬁrst position to the cNmax position for each agent. And ﬁnally (7) enforces that the Σ -OWA value of the assignment positions in the rank matrix must be decreasing. We then maximize the sum over all agents of the OWA objective value.
We found the utilitarian, egalitarian, and Σ -OWA assignments for each of the real world datasets when each object must receive 3–4 reviews and each agent must review

6–7 objects. In the data, each agent sorts the papers into 4 equivalence classes which we gave utility values (5, 3, 1, 0). We use the PAV inspired decreasing harmonic OWA vector (1, 1/2, 1/3, . . .) to compute the Σ -OWA assignment.
One of the reasons we wanted to use the Σ -OWA assignment is to allow the market designer to enforce a more equitable distribution of papers with respect to the ranks. Hence, our test statistic is the number of top ranked items that the average agent can expect to receive. Figure 3 shows the agent counts and the cumulative distribution function (CDF) for the number of top ranked items the agents receive.
Looking at the left side of the ﬁgure, we see that 71 agents receive 5 top ranked papers under the Σ -OWA assignment while under the utilitarian assignment only 46 do. Under the utilitarian assignment 35 agents receive more than 5 top ranked papers. Consequently, on average, agents can expect to get 4 top ranked papers in the Σ -OWA assignment, 3 in the egalitarian assignment, and 4.2 in the utilitarian assignemnt. However under the utilitarian assignment, several agents receive an entire set of top ranked objects, while the egalitarian assignment modulates this so that most agents only receive 3–4 top ranked items. In contrast, the Σ -OWA assignment is a balance between these with the most agents receiving 5 top ranked items.

Num. of Agents P(Num. Top Ranked) < x

Agents Per Num. Top Ranked

Utilitarian

70

Egalitarian

60

OWA

50

40

30

20

10

00 1 2 3 4 5 6 7 Num. Top Ranked

CDF of Num. Top Ranked

Utilitarian

1.0

Egalitarian OWA

0.8

0.6

0.4

0.2

0.00 1 2 3 4 5 6 7 Num. Top Ranked

Fig. 3. The count of agents receiving x top ranked papers (top) and the cumulative distribution function (CDF) (bottom) for the number of agents being assigned x top ranked objects for MD00002-00000003. Though 100% of the agents receive between 1 and 5 top ranked items for the egalitarian and Σ -OWA assignments (CDF), the PDF shows that the most agents receive the most top ranked items under the Σ -OWA assignment.

7 Conclusions
We have proposed and provided algorithms for the novel notion of a Σ -OWA assignment. The Σ -OWA assignment using decreasing OWA vectors gives the central orga-

nizer a “slider” to move from utility maximizing towards a more rank maximal assignment computationally efﬁcient package. An important open question for future work is to ﬁnd axiomatic characterizations for good OWA vectors. Additionally, the OWA method, and all methods for CPAP that we surveyed, treat objects as having positive utility. It is generally the case that reviewers at a conference want to review fewer, not more, papers. Consequently it would be interesting to study CPAP from the point of view of chores, as they are called in the economics literature.
References
[1] Abdulkadirog˘lu, A., Pathak, P., Roth, A.E.: The New York City high school match. American Economic Review pp. 364–367 (2005)
[2] Ahuja, R.K., Magnanti, T.L., B.Orlin, J.: Network Flows: Theory, Algorithms, and Applications. Prentice Hall (1993)
[3] Amendola, G., Dodaro, C., Leone, N., Ricca, F.: On the application of answer set programming to the conference paper assignment problem. In: Proc. of the 15th International Conference of the Italian Association for Artiﬁcial Intelligence (AI*IA), pp. 164–178 (2016)
[4] Aziz, H., Brill, M., Conitzer, V., Elkind, E., Freeman, R., Walsh, T.: Justiﬁed representation in approval-based committee voting. In: Proc. of the 29th AAAI Conference (2015)
[5] Aziz, H., Gaspers, S., Gudmundsson, J., Mackenzie, S., Mattei, N., Walsh, T.: Computational aspects of multi-winner approval voting. In: Proc. of the 14th AAMAS Conference (2015)
[6] Aziz, H., Lev, O., Mattei, N., Rosenschein, J.S., Walsh, T.: Strategyproof peer selection: Mechanisms, analyses, and experiments. In: Proc. of the 30th AAAI Conference (2016)
[7] Bouveret, S., Chevaleyre, Y., Lang, J.: Fair allocation of indivisible goods. In: Brandt, F., Conitzer, V., Endriss, U., Lang, J., Procaccia, A.D. (eds.) Handbook of Computational Social Choice, chap. 12, pp. 284–311. Cambridge University Press (2016)
[8] Bouveret, S., Lemaˆıtre, M.: Characterizing conﬂicts in fair division of indivisible goods using a scale of criteria. Autonomous Agents and Multi-Agent Systems 30(2), 259–290 (2016)
[9] Brandt, F., Conitzer, V., Endriss, U., Lang, J., Procaccia, A.D. (eds.): Handbook of Computational Social Choice. Cambridge University Press (2016)
[10] Budish, E., Cantillon, E.: The multi-unit assignment problem: Theory and evidence from course allocation at harvard. The American Economic Review 102(5), 2237–2271 (2012)
[11] Charlin, L., Zemel, R.S.: The Toronto paper matching system: an automated paper-reviewer assignment system. In: Proc. of the ICML Workshop on Peer Reviewing and Publishing Models (PEER) (2013)
[12] Charlin, L., Zemel, R.S., Boutilier, C.: A framework for optimizing paper matching. CoRR abs/1202.3706 (2012)

[13] Conry, D., Koren, Y., Ramakrishnan, N.: Recommender systems for the conference paper assignment problem. In: Proc. of the 3rd ACM Conference on Recommender Systems (RecSyS). pp. 357–360 (2009)
[14] Demko, S., Hill, T.P.: Equitable distribution of indivisible objects. Mathematical Social Sciences 16, 145–158 (1988)
[15] Dickerson, J.P., Procaccia, A.D., Sandholm, T.: Price of fairness in kidney exchange. In: Proc. of the 13th AAMAS Conference. pp. 1013–1020 (2014)
[16] Elkind, E., Ismaili, A.: Owa-based extensions of the Chamberlin-Courant rule. In: Proc. of the 4th ADT Conference. pp. 486–502 (2015)
[17] Elkind, E., P., Faliszewski, Skowron, P., Slinko, A.: Properties of multiwinner voting rules. In: Proc. of the 13th AAMAS Conference. pp. 53–60 (2014)
[18] Fishburn, P.C.: Lexicographic orders, utilities and decision rules: A survey. Management science 20(11), 1442–1471 (1974)
[19] Garg, N., Kavitha, T., Kumar, A., Mehlhorn, K., Mestre, J.: Assigning papers to referees. Algorithmica 58(1), 119–136 (2010)
[20] Golden, B., Perny, P.: Inﬁnite order lorenz dominance for fair multiagent optimization. In: Proc. of the 9th AAMAS Conference. pp. 383–390 (2010)
[21] Goldsmith, J., Lang, J., Mattei, N., Perny, P.: Voting with rank dependent scoring rules. In: Proc. of the 28th AAAI Conference. pp. 698–704 (2014)
[22] Goldsmith, J., Sloan, R.: The AI onference paper assignment problem. In: Proc. of the 22nd AAAI ConferenceWorkshop on Preference Handling for Artiﬁcial Intelligence (MPREF) (2007)
[23] Kilgour, D.M.: Approval balloting for multi-winner elections. In: Handbook on Approval Voting, chap. 6. Springer (2010)
[24] Klaus, B., Manlove, D.F., Rossi, F.: Matching under preferences. In: Brandt, F., Conitzer, V., Endriss, U., Lang, J., Procaccia, A.D. (eds.) Handbook of Computational Social Choice, chap. 14, pp. 333–356. Cambridge University Press (2016)
[25] Long, C., Wong, R., Peng, Y., Ye, L.: On good and fair paper-reviewer assignment. In: Proc. of the 13th IEEE International Conference on Data Mining (ICDM). pp. 1145–1150 (2013)
[26] Manlove, D.: Algorithmics of Matching Under Preferences. World Scientiﬁc (2013)
[27] Mattei, N., Walsh, T.: Preﬂib: A library for preferences, http://www.preﬂib.org. In: Proc. of the 3rd ADT Conference. pp. 259–270 (2013)
[28] Merriﬁeld, M.R., Saari, D.G.: Telescope time without tears: a distributed approach to peer review. Astronomy & Geophysics 50(4), 4–16 (2009)
[29] Price, S., Flach, P.A.: Computational support for academic peer review: A perspective from artiﬁcial intelligence. CACM 60(3), 70–79 (2016)
[30] Rawls, J.: A Theory of Justice. Harvard University Press (1971) [31] Roth, A.E., Sotomayor, M.A.O.: Two-Sided Matching: A Study in Game-
Theoretic Modeling and Analysis. Cambridge University Press (1992) [32] Skowron, P., Faliszewski, P., Lang, J.: Finding a collective set of items: From
proportional multi-representation to group recommendation. AIJ 241, 191–216 (2016) [33] Yager, R.: On ordered weighted averaging aggregation operators in multicriteria decisionmaking. IEEE Transactions on Systems, Man and Cybernetics 18(1), 183–190 (1988)

