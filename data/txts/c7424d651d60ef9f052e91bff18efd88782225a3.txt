How Hard Is It to Control an Election by Breaking Ties?
Nicholas Mattei1 and Nina Narodytska2 and Toby Walsh3

arXiv:1304.6174v2 [cs.AI] 29 May 2014

Abstract. We study the computational complexity of controlling the result of an election by breaking ties strategically. This problem is equivalent to the problem of deciding the winner of an election under parallel universes tie-breaking. When the chair of the election is only asked to break ties to choose between one of the co-winners, the problem is trivially easy. However, in multi-round elections, we prove that it can be NP-hard for the chair to compute how to break ties to ensure a given result. Additionally, we show that the form of the tie-breaking function can increase the opportunities for control. Indeed, we prove that it can be NP-hard to control an election by breaking ties even with a two-stage voting rule.
1 INTRODUCTION
Voting is a general mechanism to combine individual orderings into a group preference (e.g. preferences of agents over different plans, or rankings of web pages by different search engines). One concern that the individual agents may have is that the chair may manipulate the result. For example, the chair might introduce a spoiler candidate or delete some votes. Bartholdi, Tovey and Trick [6] explored an interesting barrier to such manipulation; perhaps it is computationally too difﬁcult for the chair to work out how to perform such control? They proved that many types of control problems are NP-hard even for simple voting rules like plurality.
Interestingly, one type of control not considered by Bartholdi, Tovey and Trick is control by choosing how ties are broken. This is surprising since the chair is actually the person who breaks ties in many elections. For example, the Speaker in many parliaments has the casting vote in case of a tied vote. Another reason to consider such control is that in many elections the tie breaking rule is unspeciﬁed or is left ambiguous. The chair therefore has an opportunity to inﬂuence the outcome by selecting a beneﬁcial (to him) rule.
This control problem also avoids one of the criticisms raised against the analysis of some of the other forms of control. In particular, many complexity results about control suppose that the chair has complete knowledge of the votes. This might be considered unreasonable. For example, how do we know how voters will rank a new spoiler candidate till their candidature has been announced? When studying control by breaking ties, it is natural to suppose the chair knows how the votes are cast when asked to break a tie.
Control by tie-breaking is equivalent to the problem of determining if a chosen alternative can win under some tie-breaking rule, an idea known as parallel universes tie-breaking (PUT) [9]. As PUT does not instantiate a particular tie-breaking rule, but rather the set of all tie-breaking rules, there is no longer a dependency on the names of the individual candidates. This property, known as neutrality, can
1 NICTA and UNSW, Sydney, Australia. 2 University of Toronto and UNSW, Toronto, ON, Canada. 3 NICTA and UNSW, Sydney, Australia

be restored under PUT whereas tie-breaking off a lexicographical ordering does not allow for neutrality in the ﬁnal resolute voting rule [28]. Deciding if a candidate is the winner of such a neutral rule with ranked pairs voting has recently been shown to be NPcomplete [8]; it follows that control by tie-breaking is NP-complete. Winner determination under is PUT is also closely related to determining if a given alternative has a chance to win in the presence of certain types of uncertain information [3, 33]
Tie-breaking has played an important role in some of the earliest literature on computational social choice. For example, Bartholdi, Tovey and Trick [5] proved that a single agent can manipulate a Copeland election in polynomial time when ties are broken in favour of the manipulators, but manipulation becomes NP-hard when the tie-breaking rule used in chess competitions is employed. With Copeland voting, Faliszewski, Hemaspaandra, and Schnoor [15] proved that the choice of how ties are scored can change the computational complexity of computing a manipulation from polynomial to NP-hard. More recently work by Obraztsova, Elkind and Hazon [24] and Aziz et al. [2] considered the impact of different randomized tiebreaking schemes on the computational complexity of computing a manipulation. They proved, for example, that all scoring rules are polynomial to manipulate for some tie-breaking rules but not others; additionally rules like maximin, STV and ranked pairs are NP-hard.
In this paper, we study the computational complexity of control by breaking ties. While ties in a real elections may not be that common, they have been observed. For instance, US Vice Presidents have had to cast tie-breaking votes in 244 Senate votes. Indeed John Adams, the ﬁrst Vice President, cast 29 such votes. Often elections that are not closely contested cannot be manipulated [32] and therefore, tied elections being the most closely contested of all, represent an interesting edge case that has not been greatly investigated. We show that when the chair only breaks ties to choose between co-winners, as is the case in many single round rules, control by tie-breaking is polynomial. On the other hand, for many multi-round rules like Coombs, Cup, and STV, the chair may have to break multiple ties, and the control by tie-breaking problem is NP-complete. Even with two-stage rules, where the chair may have to break ties only twice, the control by tie-breaking problem can be NP-complete.
2 FORMAL BACKGROUND
An election is deﬁned by a set of candidates C with |C| = m, a proﬁle P which is a set of n strict linear orders (votes) over C, and a voting correspondence R. Let R be a function R : P → W mapping a proﬁle onto a set of co-winners where W ⊆ C. If |W | = 1 then we have a voting rule, otherwise we may require a tie-breaking rule T that will return a unique winner (single element) from W . Let N(i, j) be the number of voters preferring i to j. We consider the following voting rules in this study [1].

Scoring rules: (w1, . . . , wm) is a vector of weights where the ith candidate in a vote scores wi, and the co-winners are the candidates with highest total score. Plurality has w1 = 1, and wi = 0 for i > 1; veto has wi = 1 for i < m, and wm = 0, ; k-approval has wi = 1 for i ≤ k, and wi = 0 for i > k; Borda has wi = m − i.
Plurality with runoff: If one candidate has a majority, then she wins. Otherwise we eliminate all but the two candidates with the most votes and apply the plurality rule.
Black’s Rule: If one candidate is the Condorcet winner, a candidate preferred by a majority of voters to all others, then she wins. Otherwise, we apply the Borda rule.
Bucklin: The Bucklin score of a candidate is his k-approval score with k set to be the smallest value such that the k-approval score of at least one candidate exceeds n/2 . The co-winners are the candidates with the largest Bucklin score. The simpliﬁed Bucklin procedure is the same except that all candidates with score exceeding n/2 are co-winners.
Fallback: This is a combination of Bucklin and approval voting. Voters approve and rank a subset of the candidates. If there is a k such that the k-approval score of at least one candidate, the sum of the approvals appearing in the ﬁrst k places of each voter’s ranked order, exceeds n/2 then the co-winners are the set of candidates exceeding this threshold. If there is no such k (as no candidate receives enough approvals), the winner is the approval winner.
Single Transferable Vote (STV): This rule requires up to m − 1 rounds. In each round, the candidate with the least number of voters ranking him ﬁrst is eliminated until one of the remaining candidates has a majority.
Nanson and Baldwin: These are elimination versions of Borda voting. In each round of Nanson, we eliminate all candidates with less than the average Borda score. In each round of Baldwin, we eliminate the candidate with the lowest Borda score.
Coombs: This is the elimination version of veto voting. In each round, we eliminate the candidate with the lowest veto score until we have one candidate with a plurality score of n/2 or greater. In the simpliﬁed version of Coombs, we eliminate the candidate with the lowest veto score until one candidate remains.
Cup: Given a schedule S and a labeling L, we run a knockout tournament. Candidates are compared pairwise with the winner in each moving to the next round. The overall winner is the candidate to win the ﬁnal matchup round.
Copelandα : The candidates with the highest Copelandα score win. The Copelandα score of candidate i is ∑ j=i(N(i, j) > 2n ) + α(∑ j=i(N(i, j) = n2 )). In the second order Copeland rule, if there is a tie, the winner is the candidate whose defeated competitors have the largest sum of Copeland scores.
Ranked pairs: We consider all pairs of candidates in order of the pairwise margin of victory, from greatest to least. For each considered pair, we construct an ordering which ranks these candidates unless it creates a cycle. The winner is the candidate at the top of the constructed ordering. For a non-neutral variant, when there are two or more pairwise relations with the same amount of support, we resolve ties according to an outside ordering. For a neutral variant, the co-winners are any candidate who can be made top element under some tie breaking order [8].
Maximin: The Maximin score of a candidate is the number of votes received in his worst pairwise election. The co-winners are the candidates with the largest such score.
Schulze Method: The Schulze ranking [27] of candidates is computed from the pairwise majority graph where an edge between candidates i and j is weighted by N(i, j). A beatpath score is com-

puted for all candidates, which is the maximum weight path to all other candidates. The winning set is the set of candidates with highest beathpath scores. Kemeny-Young: The Kemeny-Young rule selects the ranking with maximal Kemeny score [19, 34]. The Kemeny score of a ranking is measured by summing, for each candidate pair i, j ∈ C, N(i, j). Finding the ranking(s) with highest Kemeny score(s) is computational hard to compute when m ≥ 4 [7, 18].
A tie-breaking rule T for an election is a single valued choice function that, for any subset W ⊆ C, W = 0/ , and proﬁle P, T (P,W ) returns a single element c ∈ W [24]. Commonly, T is a strict linear order over C that is provided aprori (e.g. by age or alphabetically). However, this deﬁnition allows us to represent functions that are not necessarily a linear order over the candidate set. This includes functions that are not transitive for all the candidates, and, while this can be seen as an undesirable propriety in elections, it is a common element in sports competitions (e.g., NCAA Football) where aspects like goal differential and total points scored are used as non-transitive tie-breaking functions. We consider the following decision problem. Name: CONTROL BY TIE-BREAKING Question: Given proﬁle P and preferred candidate p ∈ C, is there a tie-breaking rule T such that p can be made the unique winner of the election under voting rule R?
A voting rule is vulnerable to such control if this problem is polynomial, and resistant if it is NP-hard. All voting rules that require tie-breaking at some point, which includes all voting rules presented in this section, are susceptible to this form of control.
In the manipulation problem [6], we wish to decide if we can cast one additional vote to make p win. All our results here apply to the variants of the manipulation problem in which we break ties in favour of or against the manipulator. Finally, in the manipulation problem with random tie-breaking [2, 24], we are also given a probability t and we wish to decide if we can cast one additional vote to make p the winner with probability at least t supposing ties are broken uniformly at random between candidates.
3 RELATIONSHIP TO MANIPULATION
We start by considering how control by breaking ties is related to other manipulation problems. A little surprisingly, the complexity of control by breaking ties is not related to that of the manipulation problem with random tie-breaking or the standard manipulation problem when ties are broken in a ﬁxed order.
Theorem 1 There exists a voting correspondence such that the control by tie-breaking problem is polynomial but the manipulation problem with random tie-breaking is NP-complete (and vice versa).
Proof. In Corollary 2, we prove that the control by tie-breaking problem for Copeland is polynomial. On the other hand, Obraztsova and Elkind [23] prove that the manipulation problem with random tie-breaking for Copeland is NP-complete.
Consider the voting rule that eliminates half the candidates using the veto rule, then elects the plurality winner. In Theorem 9, we prove that the control by tie-breaking problem for this rule is NP-complete. However, the manipulation problem with random tie-breaking for this rule is polynomial since we can exhaustively try all m(m − 1)/2 votes with different candidates in the ﬁrst and the last position.
Theorem 2 There exists a voting correspondence such that the control by tie-breaking problem is polynomial but the manipulation problem is NP-complete (and vice versa).

Proof. In Theorem 3, we prove that the control by tie-breaking problem for Nanson is polynomial. On the other hand, the manipulation problem for Nanson is NP-complete [22].
Consider again the voting rule that eliminates half the candidates using the veto rule, then elects the plurality winner. In Theorem 9, we prove that the control by tie-breaking problem for this rule is NPcomplete. However, the manipulation problem is polynomial since we can exhaustively try all m(m − 1)/2 votes with different candidates in ﬁrst and last position.
4 SELECTING FROM THE WINNING SET
We start with some very simple cases. When tie-breaking only ever takes place once and at the end, then the chair is choosing between the co-winners. In such cases, control by breaking ties is trivially polynomial. The chair can ensure a candidate p wins if and only if p is amongst the co-winners.
Theorem 3 The control by tie-breaking problem when we select from among a set of co-winners once is polynomial.
Theorem 3 covers the majority of voting rules presented in Section 2. Speciﬁcally, control by tie-breaking is easy for:
• All scoring rules, Bucklin, Black, maximin, and Copelandα for any α are polynomial.
• Plurality with runoff is polynomial since only O(m) candidates can enter the runoff with the candidate we wish to win, so we can try all possibilities.
• Fallback is polynomial, this is interesting as it holds the current record of resistance to 20 of the 22 methods of control [26].
• Nanson’s rule is a multi-round rule where manipulation is NPcomplete [22]. However, control by tie-breaking is polynomial. Since Nanson’s rule eliminates all alternatives with less than the average Borda score, the only time that it breaks ties is in the ﬁnal round when multiple candidates have the maximal Borda score.
• Schulze Method is also polynomial. In the two common implementations, edge(s) between candidate i and j is either N(i, j) or the margin of votes N(i, j) − N( j, i). In the former case, even if these numbers are tied it does not imply a tie in the outcome ordering of i and j. In the latter case, if there is a tie then the edge appears in the graph with 0 weight. The only possible tie in the method occurs when two candidates have the same beatpath score. Ofﬁcially Schulze rule requires that an order is drawn at random from P and ties are resolved according to this order. If we assume the chair can select a ballot then he just selects the ballot that is closest to his true preference.
• For the Kemeny-Young method with m ≤ 3, the only ties that can occur are between pairs of elements in the outcome ordering, we need to select a resolution of these pairs such that p wins. This can be computed in polynomial time through brute force computation as the number of possible resolutions of the pairwise ties is polynomial. Note that the problem is trivially hard for instances where m ≥ 4.
To have any resistance to control by tie-breaking, we need more complex tie-breaking. One place to see more complexity is with multi-round rules like STV and Coombs in which candidates are successively eliminated. Such rules increase the number of times ties may need to be broken.
The Copeland rule offers another interesting control opportunity for the chair. The chair might be in a position to set α, the score that

a candidate receives in the event of a tie in the tournament graph. The choice of α has an impact on the computational complexity of computing a manipulation [14, 15]. What happens when we hand the choice of α over to the manipulator? He just needs to ﬁnd ∀c ∈ C : wins(p) + α · ties(p) ≥ wins(c) + α · ties(c). Where wins(p) is the number of points received for wins and ties is the number of points received for tied competitions. Since α must be a rational number between 0 ≤ α ≤ 1 we can ﬁnd it quickly with a short linear program.
Theorem 4 The control problem of setting α for Copelandα is polynomial.
5 BREAKING TIES DURING EXECUTION
We now move to multi-round voting rules. Bartholdi and Orlin [4] showed that the manipulation problem for STV is NP-complete; Conitzer et al. [9] showed that the winner determination under PUT for STV, and therefore control by tie-breaking, is NP-complete.
5.1 Baldwin and Coombs rules
We next consider Baldwin and Coombs’s voting rules. These are multi-round rules that successively eliminate candidates based on their Borda or Veto scores, respectively. The manipulation problem for Baldwin’s rule is NP-complete and we can modify the proof given by Narodytska et al. [22].
Theorem 5 The control by tie-breaking problem for Baldwin’s rule is NP-complete.
Proof. (Sketch) We modify the NP-completeness proof for Baldwin manipulation [22] to move the burden of ﬁnding the exact cover from the manipulator and onto the tie-breaking rule. The chair will set the tie-breaking order such that we select exactly a subset of sets that give us an exact cover in an instance of EXACT COVER BY 3 SETS (X3C). Given two sets V = {v1, . . . , vq}, q = 3t, and S = {S1, . . . , St }, where t ≥ 2 and for all j ≤ t, |S j| = 3, and S j ⊆ V we create an instance with the set of candidates C = {p, d, b} ∪ V ∪ A. Note that p is the preferred candidate, members of A = {a1, . . . , at } correspond to the 3-sets in S, and m = |C| = q + t + 3. The construction is made up of two parts. The ﬁrst set of votes P1 remains unchanged from Narodytska et al. [22] and is used to control changes in the score difference between candidates as they are eliminated. The second set of votes P2, which are the votes that set the initial score differences between the candidates, are modiﬁed so that the dangerous candidates are tied with p (rather than having one more vote than p).
We will make use of the votes W(u,v) = {(u v Others), (rev(Others) u v)}, where Others are all the candidates in C \ {u, v} in lexicographical order. Votes of this form (1) give m points to u, m − 2 points to v, and m − 1 points to all other candidates; and (2) have the property that for any set of candidates C ⊆ C and any pair of candidates x, y ∈ C \ C if x = v and u is removed, the score of v to increase by 1, if x = u and v is removed, the score of u decreases by 1, otherwise the scores are unchanged. These votes allow us to construct a proﬁle such that removing candidates in a particular order creates ties in the next round.
The set of votes P1 is the machinery that creates a series of ties that we must select from and is unchanged from Narodytska et al. [22]. Let sbase(P1) = m(6mt + mq + m(t + 6)).
The votes in P1 are:
• for each j ≤ t and each vi ∈ S j there are 2m copies of W(vi,aj);

• for each i ≤ q, there are m copies of W(b,vi); • m(t + 6) copies of W(b,p).
The set of votes P2 set the initial score differences between the candidates. Let sbase(P2) = m(m(7t + 5 − q) + (mt2) + 2m(t + 6)).
• for each i ≤ q, there are 2m · occ(i) + mt + 4m copies of W(d,vi); • for each j ≤ t, there are mt copies of W(d,aj); • 2m(t + 6) copies of W(d,b).
This gives the candidates the following scores for the votes in P2:
s(vi, P2) = sbase(P2) − (2m · occ(i) + mt + 4m) s(a j, P2) = sbase(P2) − (mt) s(p, P2) = sbase(P2) s(b, P2) = sbase(P2) − 2m(t + 6) s(d, P2) = sbase(P2) + m(7t + 5 − q) + (mt2) + 2m(t + 6).
This modiﬁcation gives us the following combined Borda scores for all the candidates (assuming sbase = P1 ∪ P2):
s(vi, P) = sbase(P) − m(t + 5) s(a j, P) = sbase(P) − m(t + 6) s(p, P) = sbase(P) − m(t + 6) s(b, P) = sbase(P) + mq − m(t + 6) s(d, P) = sbase(P) + m(7t + 5 − q) + (mt2) + 2m(t + 6).
Now all candidates in A are tied with p in the ﬁrst round and therefore the tie-breaking rule must choose one to remove in each round. In round 4k = 0, . . . , q/3 we must select some set of candidates a1, . . . , aq/3 to eliminate (in the interleaving rounds 4k + 1, 4k + 2, 4k + 3, the elements vi in the set S j corresponding to a j will drop out). At each 4k, p will be tied with the remaining candidates in A which correspond to sets S until there are no more sets to cover (after 4q/3 rounds). Then p will be tied with b if and only if we have eliminated a cover and the remaining a j that were not part of the cover. We then select p to win over b. There is a solution to the X3C instance if and only if there is a selection of q/3 elements of A that exactly cover the elements of V .
We move on to the Coombs rule which successively eliminates the candidate with the largest number of last place votes.
Theorem 6 The control by tie-breaking problem for Coombs rule is NP-complete.
Proof. (Sketch) The result holds for both the simpliﬁed and unsimpliﬁed Coombs rule. Starting from Theorem 3 in Davies et al. [12] which shows that the manipulation problem for Coombs is NPcomplete we modify the proﬁle E to show hardness. With a slight modiﬁcation of the scores, increasing the initial veto scores of s2 and d0 by 1 each, we move the burden from the manipulator to the tie-breaking rule. The proﬁle E, generally, creates a voting instance where a cover is selected and then veriﬁed through sequential eliminations through a complex setting of initial candidate scores (see Table 1 in [12]). Here, we need to show that the inﬂuence that a single manipulator has on the outcome of the election can be again simulated by the tie-breaking rule.
We observe that the manipulator only changes the outcome of a round in two cases: (1) when two candidates are tied to select the loser during the ﬁrst 4m rounds and the manipulator can only change

the outcome of E at rounds p ∈ {1, 5, 9, . . . , 4m}, where exactly two candidates are tied [12]. The ﬁrst case is when two candidates a and b are tied so that a static tie-breaking rule should be used to decide the loser of this round. The manipulator ranks a (or b) at the bottom of his preference proﬁle and decides which candidate is eliminated at this round regardless of the tie-breaking rule.
This case occurs m times during the ﬁrst 4m rounds in the proof in [12]. The manipulator can only change the outcome of E at rounds p ∈ {1, 5, 9, . . . , 4m}, where exactly two candidates are tied. In this case, we can simulate the manipulator’s inﬂuence using the tiebreaking rule. (2) Where we increase the veto-score of a some candidate a to tie him with a candidate b so that the static tie-breaking rule eliminates b at this round. This occurs after all d1, . . . , dn are eliminated (when there is a cover) allowing the elimination of d0 and after d0, d1 . . . , dn are eliminated, the score of c is the same as the score of s2.
Increasing the initial scores of d0 and s2 by 1 means d0 and c are tied after d1, . . . , dn are eliminated and the tie-breaking rule can be used to eliminate d0. Additionally, c and s2 have the same score and we can eliminate s2 before c with the tie-breaking rule. The elimination order at the 4th stage is independent of the manipulator’s vote. Hence, p wins the election if and only if we select a cover during the ﬁrst 4m rounds by means of breaking ties appropriately. Hence, control by tie-breaking for Coombs is NP-complete.
The construction in the proof of Theorem 6 can be used to state the following corollary for the (unsimpliﬁed) Coombs rule.
Corollary 1 The control by tie-breaking problem for the Coombs rule is NP-complete.
5.2 Cup and Copeland
Cup and Copeland are often used in real life settings involving sports or other competitions where ties must be resolved on the ﬂy. Under Cup all ties must be resolved before the next round can be computed. In Copeland, when we only select a winner from the set of elements tied with highest Copeland score, we fall under the result of Theorem 3. However, when Copeland is used in a sports competition, often pairwise ties between candidates need to be resolved before the ﬁnal Copeland score can be computed (i.e., NCAA football).
To determine the best tie-breaking order for Cup we can use the algorithm from Theorem 2 in [11] that computes a manipulating vote and use the returned manipulation as the linear order for tie-breaking.
Theorem 7 The control by tie-breaking problem for the Cup rule is polynomial when each candidate appears only once in S.
Notice that the above procedure always returns a linear tiebreaking order. When each candidate appears only once, a manipulator cannot beneﬁt by breaking ties with an order that violates transitivity. To proﬁt from a non-transitive order, we would need multiple pairwise comparisons between candidates. For example, in double elimination tournaments such as the Australian Rules Football League Finals Series, candidates appear twice. We only need a linear schedule and one candidate to appear twice to see the difference. Consider the tournament illustrated in Figure 1; in order to select between a, b, and c to ensure a win for p we must choose a non-linear order where c > b, b > a and a > c.
If we allow candidates to enter the tournament more than once, and if the tournament can have arbitrary shape, the control by tiebreaking problem becomes hard.

Figure 1. Pairwise relation and Cup graph illustrating that it is possible to increase the chances for control if we allow the chair to specify a nontransitive tie-breaking order.
Theorem 8 When the Cup schedule S can have arbitrary shape and candidates can appear more than once, control by tie-breaking is NP-complete.
Proof. We reduce from an instance of 3SAT where we are given a set of clauses K = {k1, . . . , kn} and a set of literals with their negations L = {l1, l1, . . . , lm, lm} and asked to ﬁnd an assignment to every literal, either l1 or l1 such that every clause in K is satisﬁed.
Given an instance of 3SAT, we create a Cup tournament with candidates C = K ∪ L ∪ {p}. The pairwise relation between the candidates in the cup has p defeating all elements of L; each literal and its negation are tied and each literal and its negation defeat any literal with a higher number (l1 ∼ l1 > l2 ∼ l2); each clause is defeated by only those literals that would satisfy it while defeating all other literals and p. We construct S, the cup tournament, as follows: for each ki we pair the three literals that would satisfy ki with their negations in a sub-cup where each literal matches against its negation in the ﬁrst round. In the second to fourth round of the sub-cup ki plays the winner of each of these three literal vs. literal match-ups, sequentially. We then compose each of these sub-cups, for each ki such that p faces the winner of each of the sub-cups sequentially. Thus every literal plays the clause that contains it and every clause plays p.
The manipulator must select a tie-breaking order for each pair of literals and their negations. If there is a tie-breaking order which selects either l1 or l1 for every literal such that all clauses are satisﬁed, then p will win the Cup. Each ki will face each literal or negation in ki, depending on the tie-breaking rule. Since only literals that satisfy ki defeat it, one must be selected, otherwise p will lose to ki when p plays the winner of each of the sub-tournaments. If ki is satisﬁed by one (or more) of its literals, then ki will be eliminated and a literal will face (and lose to) p in the latter part of the tournament. Hence p will win the tournament if and only if there is tie-breaking rule that satisﬁes the 3SAT instance.
For the Copeland rule, we know that the second-order tie-breaking rule is NP-hard to manipulate [5]. We can also devise other tiebreaking rules to add to Copeland to make manipulation NP-hard [24]. On the other hand, the regular Copeland rule is vulnerable to control by breaking ties. Here we consider the variant of Copeland often used in conjunction with sports tournaments where we must resolve ties in the pairwise graph before we resolve any ties related to the total Copeland score (e.g., Olympic Ice Hockey). This problem is closely related to the possible winner problem when there are partially speciﬁed preference proﬁles [33]. If we require that the tie-breaking rule be transitive then we can use the algorithm from Bartholdi, Tovey and Trick [5] which provides a score minimizing

the maximum score of all other candidates to set the tie-break order. Allowing the tie-breaking rule to be non-transitive increases the
potential for control of the tie-breaking rule under Copeland. Consider the election with the following 6 votes: (d, f , g, p, a, b, c), (d, f , g, p, c, b, a), 2 × (p, a, b, c, d, f , g), and 2 × (c, b, a, d, f , g, p). Suppose we want p to win. The Copeland score of the candidates (denoted s(c)) are s(p) = s(a) = s(b) = s(c) = s(d) = s(3), s( f ) = 2, s(g) = 0. We need to submit a tie-breaking order that will resolve the pairwise ties between a, b and c. There is no transitive order that we can submit to resolve these such that p wins. However, we can submit pairwise preferences that will maintain the cycle and allow p to win with an additional point over g.
We note that such tie-breaking is closely to the problem of manipulating a Copeland election with irrational voters [14] which is polynomial time computable [16]. If we allow the chair to specify the result of each pair-wise tie separately (and thus to break ties non-transitively), Copeland remains vulnerable to control by breaking ties. This problem is closely related to the problem of ﬁnding possible winners in a tournament that is partially speciﬁed [3]. We can use the algorithm presented in Theorem 5.2 from Faliszewski et al. [16] which allows us to ﬁnd an assignment to the pairwise relationship between all the non-p candidates to minimize their scores.
Corollary 2 The control by tie-breaking problem for Copeland is polynomial, even when tie-breaking is speciﬁed in terms of a nontransitive ordering on pairwise contests.

6 COMBINING VOTING RULES
We have seen many rules are vulnerable to control by breaking ties when there is only one opportunity to break ties. Conversely, we have seen that some rules are resistant when many tie-breaks are required. This leaves open the question of what happens when only a small, ﬁxed number of tie-breaks are required. Interestingly, we show that in these cases, rules can be resistant to control by tie-breaking.

Theorem 9 There exists a two stage voting rule based on veto and plurality where the control by tie-breaking problem is NP-complete.

Proof. We consider the rule that ﬁrst eliminates half the candidates using the veto rule, then elects the plurality winner. Clearly, the control problem is in NP. We select the subset of candidates through tiebreaking for the runoff. To show NP-hardness, we adapt the reduction from X3C used in the proof of Theorem 3 in [6] that demonstrates control by elimination of candidates for plurality is NP-hard.
Given two sets V = {v1, . . . , vm} and S = {S1, . . . , Sn}, this reduction uses n + 4m/3 + 2 candidates where m is the size of the set being covered, n is the number of 3-element sets from which the cover is built: p is the preferred candidate, w is the current winner, si, i = 1, . . . , n are candidates that correspond to sets Si, v j, j = 1, . . . , m represent the elements of V ; fk, k = 1, . . . , m/3 are additional candidates. We double the number of candidates to 2n + 8m/3 + 4 with n + 4m/3 + 2 additional dummy candidates di that occur in the same ﬁxed order in every vote. The ﬁrst n + m + 1 candidates appear at the front of the votes, whilst the last m/3 + 1 appear at the end. The unlisted candidates are ranked in an arbitrary order between the candidates fm/3 and dm+n+2.

• for i = 1, . . . , n: 1 vote (d1 . . . dn+m+1 si fm/3 . . . dn+m+2 . . . dn+4m/3+2)
• for i = 1, . . . , n and vij ∈ Si, j = 1, 2, 3: 1 vote (d1 si vij f1 . . . fm/3 . . . dn+m+2 . . .

c f1 ...
. . . dn+m+1 dn+4m/3+2).

• m/3 − 1 votes (d1 . . . dn+m+1 w f1 . . . fm/3 . . . dn+m+2 . . . dn+4m/3+2)
• for j = 1, . . . , m: m/3 − 2 votes (d1 . . . dn+m+1 v j f1 . . . fm/3 . . . dn+m+2 . . . dn+4m/3+2).
With our two stage rule, one of the dummy candidates, dn+4m/3+2, has all the vetoes so will be eliminated. The chair therefore has to tie-break and select, sequentially, n + 4m/3 + 2 of the remaining 2n + 8m/3 + 3 candidates. We start with W = C \ {dn+4m/3+2} and apply the tie-breaking rule sequentially m/2 times. At each step we select some candidate, T (W, P) = ci, then re-apply the tie-breaking rule on the set T (W \ {ci}, P), continuing until we select a set of the correct size for the second round. To ensure that the distinguished candidate is the plurality winner, the chair’s tie-breaking must eliminate all n + m + 1 dummy candidates at the front of the vote, plus m/3 of the candidates from the original election corresponding to the cover. Hence, the X3C problem has a solution if and only if the chair can tie-break to ensure the distinguished candidate wins.
Conitzer and Sandholm [10] give a general construction that builds a two-stage voting rule that often makes it intractable to compute a manipulating vote. This construction runs one round of the Cup rule, eliminating half of the candidates, and then applies the original base rule to the candidates that remain. For the base rule X, we denote this as Cup1 + X. The control by tie-breaking problem is also typically intractable for such two-stage voting rules. Adapting Theorem 2 in Conitzer and Sandholm [10] we can make the following statement.
Theorem 10 The control by tie-breaking problem for Cup1 + Plurality, Cup1 + Borda, and Cup1 + Maximin are NP-complete.
Proof. Consider the reduction from SAT used in Theorem 2 in Conitzer and Sandholm [10] showing that it is NP-hard to construct a single vote to ensure a distinguished candidate wins Cup1 + Plurality. This reduction sets up a proﬁle in which the candidates c+v and c−v corresponding to a literal and its negation which are paired in the ﬁrst round of a Cup and are tied. The construction of the Cup is similar to the one described in Theorem 8. There is a vote that breaks these ties so that the distinguished candidate wins if and only if the SAT instance is satisﬁable. Let us consider just the original proﬁle, without the single manipulating vote. Now, the chair can break these ties so that the distinguished candidate wins if and only the SAT instance is satisﬁable. The other proofs are similar and are adapted from reductions in [10].
Elkind and Lipmaa [13] generalize this construction to run a number of rounds, k, of some rule before calling a second rule; making computing a manipulating vote NP-hard in many cases. Control by tie-breaking for such hybrids is often NP-hard as tie-breaking can simulate the manipulating vote used in the proofs in Elkind and Lipmaa [13]. For example, control by tie-breaking for HYB(STVk,Y ) and HYB(Y, STVk) is NP-hard, where Y is one of: plurality, Borda, maximin or Cup. Interestingly, HYB(pluralityk, plurality) is vulnerable to manipulation [13] and manipulation is polynomial if k is bounded; this result carries to our problem. However, this hybrid is resistant to control by tie-breaking for unbounded k.
Theorem 11 The control by tie-breaking problem for HYB(Pluralityk, Plurality) is polynomial if k or m − k is bounded.
Proof. If k is bounded, we can try all O(mk) possible tiebreaking decisions about candidates to eliminate. Similarly, if m − k is bounded, we can try all O(mm−k) possible tie-breaking decisions about candidates to survive.

Theorem 12 The control by tie-breaking problem for HYB(Pluralityk, Plurality) if k is unbounded is NP-complete and polynomial if k or m − k is bounded.
Proof. If k is bounded, we can try all O(mk) possible tie-breaking decisions about candidates to eliminate or all O(mm−k) possible tiebreaking decisions about candidates to survive if m − k is bounded.
When k is unbounded our construction is similar to the construction in the proof of Theorem 3 in Elkind and Lipmaa [13]. We reduce from an instance of the X3C problem where each item occurs in at most 3 subsets. We are given a set of items V = {v1, . . . , vm} with |V | = m and subsets S1, S2, . . . , Sn ⊂ V with |Si| = 3 for i = 1, . . . , n. The question is whether there exists an index set I with |I| = m/3 and i∈I Si = S. We build an election with n + m + 2 candidates: C = V ∪ S ∪ {p, d}. We have m candidates V = {v1, . . . , vm} that encode items, n candidates S = {s1, . . . , sn} that encode sets, a dummy candidate d and the preferred candidate p. Let T be a constant ≥ 3nm.
We introduce the following two sets of votes, P = P1 ∪ P2. We denote Si = {s j|vi ∈ S j}. The ﬁrst set P1 contains the following votes:
• for each vi, i = 1, . . . , m: T votes (p C \ {p}) • for each vi, i = 1, . . . , m: T − 2 votes (vi C \ {vi}) • for each Si, i = 1, . . . , m: 3 votes (Si vi C \ Si) • 4 votes (d C \ {d})
To build P2, let n j be the number of ﬁrst places occupied by s j in P1, thus n j ≤ 3. We introduce 3 − n j votes (s j d C \ {s j, d}). The rest of the votes are irrelevant. Thus, the initial plurality scores of the candidates are: score(p) = T , score(vi) = T − 2, i = 1, . . . , m, score(s j) = 3, j = 1, . . . , n and score(d) = 4. We set k = n − m/3.
During the ﬁrst n − m/3 rounds, n − m/3 candidates from S are eliminated and the tie-breaking rule decides which n − m/3 out of m candidates to eliminate as all n candidates in S are tied. If the remaining m/3 candidates in S are not a cover, then an uncovered item vi gets 3 points resulting in a plurality score of T + 1. Hence, p loses. Therefore, tie-breaking must ensure that the remaining candidates from S form a cover. Finally, if a valid cover is selected, the maximal plurality score of d after k rounds is 4 + 3n, the maximal plurality score of any surviving s j is 9, the maximal plurality score of vi is T − 2 and the score of p is T . Hence, p wins iff there is a cover.

7 CONCLUSION
We have studied the computational complexity of the control by tiebreaking problem. This problem is equivalent to the problem of deciding the winner of an election under PUT. When the chair is only asked to choose between the co-winners, the problem is trivially polynomial. However, in multi-round elections, where the chair may have to break multiple ties, we proved that this control problem can be NP-complete, and the form of the tie-breaking function can increase the opportunities for control. Table 1 provides a summary of these results.

P
scoring rules, Cup, Nanson, Copeland, maximin Bucklin, fallback, Schulze
Kemeny-Young (m ≤ 3)

NP-complete
STV, Baldwin ranked pairs,
Coombs Kemeny-Young (m ≥ 3)

Table 1. Complexity of control by tie-breaking. The result for ranked pairs is due to [8] and the result for STV is due to [9].

Interestingly, with a two-stage voting rule, even though the chair might only be asked to break ties at most twice, control by tie-braking can be NP-hard. Of course, many of our results are worst-case and may not reﬂect the difﬁculty of manipulation in practice. A number of recent theoretical and empirical results suggest that manipulation can often be computationally easy on average (e.g. [17, 20, 25, 29– 32]). We intend to explore the hardness of control by tie-breaking using data from PrefLib [21] and other sources.
Acknowledgements. NICTA is funded by the Australian Government through the Department of Communications and the Australian Research Council through the ICT Centre of Excellence Program.
REFERENCES
[1] Handbook of Social Choice and Welfare, eds., K. J. Arrow, A. K. Sen, and K. Suzumura, volume 1, North-Holland, 2002.
[2] H. Aziz, S. Gaspers, N. Mattei, N. Narodytska, and T. Walsh, ‘Ties matter: Complexity of manipulation when tie-breaking with a random vote’, in Proc. AAAI 2013, pp. 74–80, (2013).
[3] H. Aziz, P. Harrenstein, M. Brill, J. Lang, F. Fischer, and H. G. Seedig, ‘Possible and necessary winners of partial tournaments’, in Proc. AAMAS 2012, pp. 585–592, (2012).
[4] J.J. Bartholdi and J.B. Orlin, ‘Single transferable vote resists strategic voting’, Social Choice and Welfare, 8(4), 341–354, (1991).
[5] J.J. Bartholdi, C.A. Tovey, and M.A. Trick, ‘The computational difﬁculty of manipulating an election’, Social Choice and Welfare, 6(3), 227–241, (1989).
[6] J.J. Bartholdi, C.A. Tovey, and M.A. Trick, ‘How hard is it to control an election’, Mathematical and Computer Modelling, 16(8-9), 27–40, (1992).
[7] J.J. Bartholdi III, C. A. Tovey, and M. A. Trick, ‘Voting schemes for which it can be difﬁcult to tell who won the election’, Social Choice and welfare, 6(2), 157–165, (1989).
[8] M. Brill and F.A. Fischer, ‘The price of neutrality for the ranked pairs method’, in Proc. AAAI 2012, pp. 1299–1305, (2012).
[9] V. Conitzer, M. Rognlie, and L. Xia, ‘Preference functions that score rankings and maximum likelihood estimation’, in Proc. IJCAI 2009, pp. 109–115, (2009).
[10] V. Conitzer and T. Sandholm, ‘Universal voting protocol tweaks to make manipulation hard’, in Proc. IJCAI 2003, pp. 781–788, (2003).
[11] V. Conitzer, T. Sandholm, and J. Lang, ‘When are elections with few candidates hard to manipulate?’, Journal of the ACM, 54(3), (2007).
[12] J. Davies, N. Narodytska, and T. Walsh, ‘Eliminating the weakest link: Making manipulation intractable?’, in Proc. AAAI 2012, pp. 1334– 1339, (2012).
[13] E. Elkind and H. Lipmaa, ‘Hybrid voting protocols and hardness of manipulation’, in Proc. ISAAC 2005, pp. 206–215, (2005).
[14] P. Faliszewski, E. Hemaspaandra, L.A. Hemaspaandra, and J. Rothe, ‘Llull and copeland voting computationally resist bribery and constructive control’, JAIR, 35, 275–341, (2009).
[15] P. Faliszewski, E. Hemaspaandra, and H. Schnoor, ‘Copeland voting: Ties matter’, in Proc. AAMAS 2008, pp. 983–990, (2008).
[16] P. Faliszewski, E. Hemaspaandra, and H. Schnoor, ‘Manipulation of copeland elections’, in Proc. AAMAS 2010, pp. 367–374, (2010).
[17] E. Friedgut, G. Kalai, and N. Nisan, ‘Elections can be manipulated often’, in Proc. FOCS 2008, pp. 243–249, (2008).
[18] E. Hemaspaandra, H. Spakowski, and J. Vogel, ‘The complexity of kemeny elections’, Theoretical Computer Science, 349(3), 382–391, (2005).
[19] J. G. Kemeny, ‘Mathematics without numbers’, Daedalus, 88(4), 577– 591, (1959).
[20] N. Mattei, J. Forshee, and J. Goldsmith, ‘An empirical study of voting rules and manipulation with large datasets’, in Proc. COMSOC 2012, (2012).
[21] N. Mattei and T. Walsh, ‘Preﬂib: A library of preference data’, in Proc. ADT 2013, pp. 259–270, (2013).
[22] N. Narodytska, T. Walsh, and L. Xia, ‘Manipulation of Nanson’s and Baldwin’s rules’, in Proc. AAAI 2011, pp. 713–718, (2011).
[23] S. Obraztsova and E. Elkind, ‘On the complexity of voting manipulation under randomized tie-breaking’, in Proc. IJCAI 2011, pp. 319–324, (2011).

[24] S. Obraztsova, E. Elkind, and N. Hazon, ‘Ties matter: Complexity of voting manipulation revisited’, in Proc. AAMAS 2011, pp. 71–78, (2011).
[25] A. D. Procaccia and J. S. Rosenschein, ‘Junta distributions and the average-case complexity of manipulating elections’, JAIR, 28, 157– 181, (2007).
[26] J. Rothe and L. Schend, ‘Control complexity in bucklin, fallback, and plurality voting: An experimental approach’, in Proc. SEA 2012, pp. 356–368, (2012).
[27] M. Schulze, ‘A new monotonic, clone-independent, reversal symmetric, and condorcet-consistent single-winner election method’, Social Choice and Welfare, 36(2), 267–303, (2011).
[28] N. Tideman, ‘Independence of clones as a criterion for voting rules’, Social Choice and Welfare, 4(3), 185–206, (1987).
[29] T. Walsh, ‘Where are the really hard manipulation problems? The phase transition in manipulating the veto rule’, in Proc. IJCAI 2009, pp. 324– 329, (2009).
[30] T. Walsh, ‘An empirical study of the manipulability of single transferable voting’, in Proc. ECAI 2010, pp. 257–262, (2010).
[31] L. Xia and V. Conitzer, ‘Generalized scoring rules and the frequency of coalitional manipulability’, in Proc. EC 2008, pp. 109–118, (2008).
[32] L. Xia and V. Conitzer, ‘A sufﬁcient condition for voting rules to be frequently manipulable’, in Proc. EC 2008, pp. 99–108, (2008).
[33] L. Xia and V. Conitzer, ‘Determining possible and necessary winners under common voting rules given partial orders’, JAIR, 41(2), 25–67, (2011).
[34] P Young, ‘Optimal voting rules’, Journal of Economic Perspectives, 9, 51–51, (1995).

