Long-term secure distributed storage using quantum key distribution network with third-party verification
Mikio Fujiwara1, Ryo Nojima1, Toyohiro Tsurumaru2, Shiho Moriai1, Masahiro Takeoka1, and Masahide Sasaki1
1National Institute of Information and Communications Technology, Nukui-kita, Koganei, Tokyo 184-8795 Japan. 2Mitsubishi Electric Corp., Kanagawa, 247-8501 Japan.
Corresponding author: Mikio Fujiwara (email: fujiwara@ nict.go.jp).
This work was partly supported by Council for Science, Technology and Innovation (CSTI), Cross-ministerial Strategic Innovation Promotion Program (SIP), “Photonics and Quantum Technology for Society 5.0” (Funding agency: QST) and JSPS KAKENHI Grant Number JP18H05237.

ABSTRACT The quantum key distribution (QKD) network [1,2] with Vernam’s One Time Pad (OTP) encryption [3] and secret sharing [4] are powerful security tools to realize an information theoretically secure (ITS) distributed storage system. In [5], a single-password-authenticated secret sharing (SPSS) scheme based on the QKD network and Shamir’s secret sharing [4] was experimentally demonstrated; it confirmed ITS data transmission, storage, authentication, and integrity. To achieve data integrity, an ITS message authentication code (MAC) tag is employed and a data owner of the secret sharing performs both the MAC tag generation and verification. However, for a scenario in which the data owner and end users are different entities, the above approach may not work since the data owner can cheat the end users. In this paper, we resolve this problem by proposing an ITS integrity protection scheme employing a third-party verification with timestamp. The ITS integrity protection is realized by two steps: integrity check by the data owner at data reconstruction, and data integrity certification by the data owner, the end user, and the third-party verifier using a MAC based on universal2 hash function [6] and random number provided from the QKD network [7]. In addition to introduce the third-party verifier, we institute “a trusted calculator” which computes shares of the data and MAC tags and sends MAC tags to the third-party verifier. The random number used in calculating MAC tag is stored in the trusted calculator. We implement this scheme on the SPSS system installed in the Tokyo QKD Network [8] and evaluate the performance of the third-party verification in view of attack scenarios on this system. In addition, we demonstrate a simple share renewal function based on verifiable secret sharing scheme which ensures the data integrity for a certain practical period based on the hardness of discrete logarithm problem. To our best knowledge, this is the first demonstration of ITS secure data transmission, storage, authentication, and data integrity with the third-party in a metropolitan area network.
INDEX TERMS Quantum key distribution, Tokyo QKD Network, secret sharing, time-stamp, third-party verification

I. INTRODUCTION Long-term protection of integrity, authenticity, and confidentiality are required for critical information assets, for example, medical information such as genomic data and classified national information. Information leakage may cause criminal and/or civil penalties to data owners and system providers [9, 10]. In addition, these information assets should be available against disasters and various technical faults, in view of reasonable “Business Continuity Plan (BCP)s”. Distributed data backup in distant places is one of effective solutions to the BCP issue. To combine this approach with

the long-term security, transmission and storage of critical data must be strictly protected even against future technologies including quantum computers, which will be realistic, taking into account recent efforts on its development around the world [11,12]. In this regard, a distributed data storage system with information theoretical security, which consists of quantum key distribution (QKD) [1,2] links and a secret sharing protocol [4], is a very promising solution. A QKD link enables two remote users to share Information Theoretically Secure (ITS) key (random number). Vernam’s One Time Pad (OTP) [3] with such keys provides ITS data transmission.

1

Shamir’s secret sharing scheme [4] can realize ITS storage system, if data transmission and authentication is carried out in an ITS way. These two schemes can provide ITS confidentiality of transmission and storage of data. Besides this, integrity protection of data is also an important concern in practice. Here the integrity means that illegitimate or accidental changes of data can be discovered (see, e.g., Ref. [13]). And a correct data must be shared between the data owner and the ultimate user of the data (we name him as an end user). This is the main topic of this paper. In our previous work [5], we have proposed an ITS distributed storage system with ITS authentication based on a user-friendly single-password-authenticated secret sharing (SPSS) scheme and secure transmission using QKD and demonstrated it in the Tokyo QKD network [8]. In this scheme, the ITS message authentication code (MAC) tag, generated by the universal2 hash function [6,14,15] with a password used as the key, is added to the storage data. Thereby, the data owner can confirm the ITS integrity of the data by oneself when the data owner reconstructs the data. We note that several methods have been reported to also protect data integrity against share holders’ cheating by using hash functions [16,17], while our method [5] enables the data owner to know falsification of the data at a singlepassword authentication simultaneously. (Outline of this scheme is summarized in section 3.) In some cases, it is valuable that the function of the integrity protection be provided by a third-party. If the data owner and the end user are different, for example, saving a testament, the integrity check of the testament data by the third-party is extremely important since either the data owner or the end user may tamper with the data. To provide the third-party integrity check, in our subsequent work, we proposed Longterm INtegrity and COnfidentiality protection System (LINCOS) under some security assumptions [13]. In this system, the secret data is reconstructed at regular intervals, and integrity of the data is protected by commitment renewal guaranteed by the evidence service and time-stamp service (i.e. the third-party) in the authenticated network. Such a verification system with the third party is widely used in time-stamp service [18]. It is known that commitment schemes used for data integrity cannot achieve ITS binding and ITS hiding, simultaneously [19]. In [13], therefore, only ITS hiding is employed. In this paper, we propose another third-party verification scheme with MAC, which realizes both the ITS binding and hiding simultaneously. The proposed system is based on the distributed storage system in [5] but additionally introduces the third-party verifier. We use universal2 hash function [6,14,15] to calculate MAC tags, which preserves the ITS confidentiality. Unlike in the case of [5], where the MAC tag-generation and verification are both performed by the data owner alone, in the present scheme, the MAC taggenerator and the MAC verifier are different persons. A

problem of this setting is that the MAC generator enables to falsify the MAC tags easily due to the property of the universal2 hash function. Therefore, in the proposed scheme, we introduce “a trusted calculator” [20] for the MAC taggenerator. Such a concept of secure computation using a trusted hardware, which is trusted but has small long-term memory capacities, is used in practices (an example of such a device is in [21,22]). In our system, the trusted calculator computes shares and MAC tags. In calculation of MAC tags, the calculator uses random number provided from a QKD network and memorizes this random number until verification by the end user. The proposed scheme is experimentally demonstrated in a QKD network testbed, referred to as the Tokyo QKD Network [8]. A distributed storage system with four share holders is implemented, which is supported by the five-nodes QKD network. In the same system, we also implement a simple share renewal function based on Pedersen’s verifiable secret sharing scheme, which may be of independent interest on practical implementation of the share renewal function. The paper is organized as follows. In section 2, we describe our verification scheme with the trusted calculator which calculates shares and MAC tags, and memorizes random numbers used in tag-generation of the MAC. And summary of SPSS scheme is described in section 3. The experimental results of the verification scheme with the simple share renewal function are given in section 4. Conclusion is summarized in section 5.
II. THIRD-PARTY VERIFICATON SCHEME 2.1 Motivation and basic ideas Conventional secret sharing schemes usually consist only of a data owner and share holders. We consider here a new setting where there is an additional player, called an end user, who receives the data from the data owner and casts doubt on its integrity. The goal of our third-party verification function is to resolve a dispute about data integrity, even if a malicious end user entertains false doubts about the secret data, disclosed by the data owner. Figure 1 shows a basic configuration of a secret sharing scheme with data integrity. Note here that a third-party, the verifier, is newly introduced. This is necessary in order to ensure data integrity to an end user [13]. As mentioned in introduction, the efficient way to achieve data integrity is to use commitment scheme [13]. However, in commitment schemes, ITS binding and ITS hiding have not been achieved simultaneously [19]. As a solution to break through this limitation, we adopt a trusted server with small long-term memory as a key player to realize ITS binding and ITS hiding in a distributed data backup system on the QKD network. The overview of our scheme is described below.
2

FIGURE 1. Conceptual view of a secret sharing scheme with data integrity. The verifier enforces the third-party verification.
2.2 Setting and the goals Given a 𝑡𝑡SH -out-of-𝑛𝑛SH secret sharing (SS) scheme SS, we add to it a third-party verification function as follows. The underlying SS scheme SS can be arbitrary, hence we do not specify its details here.
2.2.1 Players and their roles: We consider the situation where there are the following players with the following roles (Fig. 2).  Data owner is the original owner of data 𝐷𝐷 ∈ 𝒟𝒟 (𝒟𝒟 is
the set of all possible data). He asks the share calculator to register and store 𝐷𝐷. Whenever requested by an end user, he must retrieve and release 𝐷𝐷.  Share calculator calculates shares 𝑠𝑠 = �𝑠𝑠1, … , 𝑠𝑠𝑛𝑛SH� of 𝐷𝐷 using the SS scheme SS, and sends 𝑠𝑠ℎ to share holder ℎ ∈ {1, … , 𝑛𝑛SH}. He also generates the MAC tag 𝜎𝜎 using random number 𝑅𝑅MAC provided from the QKD network. The MAC tag 𝜎𝜎 serves as the evidence that 𝐷𝐷 was received at time 𝑡𝑡1. He then asks the verifier to store 𝜎𝜎. He memorizes 𝑅𝑅MAC.  Share holders. There are 𝑛𝑛SH share holders. Each of them, indexed by ℎ ∈ {1, … , 𝑛𝑛SH}, stores a share 𝑠𝑠ℎ of 𝐷𝐷 calculated by the share calculator.  Verifier receives and stores tag 𝜎𝜎 delivered from the share calculator, along with the time 𝑡𝑡2 of its receipt.  End user: An end user requests data owner to send 𝐷𝐷 and 𝑡𝑡1. He can detect a possibility of receiving false data with the help of the share calculator and the verifier. We stress that the end user may not be specified until the date reconstruction phase. As mentioned above, we assume that the share calculator is trusted but has small long-term memory capacities. That is, the share calculator can store small data (the random numbers) for a long time but can store large data only for short time (the original data and its shares) [21,22]. In other words, the share calculator is fully trusted but kept minimal for a practical purpose. One of important roles of the share calculator is to store the random numbers used in calculation of MAC tags. This makes it impossible for the data owner to guess the MAC tag of the data.
2.2.2 Goals (Security Criteria)

We let 𝑘𝑘 ∈ ℕ be the security parameter. Typically, k is 256 . Our goal in the scheme defined below is to fulfill the following security criteria. Below, |𝒟𝒟|denotes the cardinality of the set 𝒟𝒟 of all possible data 𝐷𝐷.  SC1 (Integrity from the viewpoint of the end user):
Except with a probability ≤ 2−𝑘𝑘 log2|𝒟𝒟|, an honest end user can detect when the data owner reveals the data 𝐷𝐷′′, which differs from 𝐷𝐷 that was registered.  SC2 (Integrity from the viewpoint of the data owner): Except with a probability ≤ 2−𝑘𝑘 log2|𝒟𝒟| , the data owner, if honest, can refute a false claim made by an end user that received a data 𝐷𝐷′′, which differs from 𝐷𝐷.  SC3 (Secrecy): The amount of information that the end user or the verifier obtains concerning 𝐷𝐷, prior to the reveal phase, is less than k bits.
2.3 Description of our scheme In this subsection we defined our scheme. 2.3.1 Assumptions We begin by the listing the underlying assumptions.  A1 (Share calculator): The share calculator is trusted ,
meaning that he follows the procedure specified in the next subsection correctly and leaks no information.  A2 (Data reconstruction phase): At the data reconstruction phase of SS, the share calculator can verify that he indeed recovered the correct data 𝐷𝐷.  A3 (Verifier): The verifier is honest but curious, meaning he follows the procedure specified in the next subsection correctly but may leak information.  A4 (Channels with the perfect security in the ITS sense): Each pair of players (all players listed in Sec. 2.1.1) are connected by a channel with the perfect secrecy and the perfect authenticity in the ITS sense. That is, every player pair can use a channel where no eavesdropping or modification is possible, even when equipped with an unlimited computation power. Several remarks are in order concerning these assumptions. First, none of assumptions above restricts behaviors of the data owner and the end user; hence these two players can always deviate from our scheme in any way. Second, item A2 can be guaranteed e.g. by assuming (i) that share calculators always submit correct shares, or (ii) that the underlying SS schemes SS is equipped with certain cheater detection mechanisms (see e.g. Refs. [5,16,17]). Third, item A3 entails that the verifier, when asked, answers the correct values of 𝜎𝜎 and 𝑡𝑡2, but does not necessarily keep them secret. Finally, we stress that item A4 (the perfectly secure channels) can easily be realized in QKD networks, where every player pair p, q has access to an arbitrarily long secret key𝑘𝑘𝑝𝑝𝑝𝑝 with the perfect security. The secrecy of the channel can be guaranteed by OTP using 𝑘𝑘𝑝𝑝𝑝𝑝 . The authenticity can be guaranteed, e.g., by message authentication codes with the ITS, which uses 𝑘𝑘𝑝𝑝𝑝𝑝 only once (see e.g. Ref. [15]).

3

2.3.2 Specification of the MAC tag σ In generating, the MAC tag σ, the share calculator uses an almost universal2 hash function 𝑢𝑢, which has the following property. Lemma 1 (Existence of an almost universal2 function): There exists a function 𝑢𝑢: ℛMAC × 𝒟𝒟 → {0,1}𝑘𝑘 for which
|ℛMAC|−1 � 1�𝑢𝑢(𝑅𝑅MAC, 𝑎𝑎) = 𝑢𝑢�𝑅𝑅MAC, 𝑎𝑎′��
𝑅𝑅MAC∈ℛMAC
≤ 2−𝑘𝑘 log2|𝒟𝒟| holds for ∀𝑎𝑎, 𝑎𝑎′ ∈ {0,1}∗ satisfying 𝑎𝑎 ≠ 𝑎𝑎′ . Here |𝐴𝐴| denotes the cardinality of set 𝐴𝐴, and 1[𝑄𝑄] is the function that equals 1 if proposition 𝑄𝑄 holds, and 0 otherwise. Proof: Let ℛMAC be a finite field 𝔽𝔽𝑞𝑞 with the size 𝑞𝑞 satisfying 2𝑘𝑘 ≥ 𝑞𝑞 ≥ 𝑘𝑘−12𝑘𝑘 . Then let 𝑢𝑢 be the hash function family given in Theorem 3.5 of Ref. [23]. In order to guarantee the ITS, we require that variable 𝑅𝑅MAC be a true random number [15]; e.g. a quantum random number provided from a QKD system. We also require that 𝑅𝑅MAC be generated newly every time the scheme is started [15].
2.3.3 Procedures The procedure of our scheme consists of two phases, the data registration phase and the data reconstruction phase. The latter includes the integrity check of the reconstructed data 𝐷𝐷’ corresponding to 𝐷𝐷. (1) Data registration phase:
1.1 Initiation by the data owner: The data owner sends data 𝐷𝐷 ∈ 𝒟𝒟 to the share calculator.
1.2 Share calculator: The share calculator executes the following processing. 1.2.1 Share calculation: Record the receipt time 𝑡𝑡1 of 𝐷𝐷 , sent by the data owner. Then calculate shares 𝑠𝑠 = �𝑠𝑠1, … , 𝑠𝑠𝑛𝑛SH� of 𝐷𝐷 and send 𝑠𝑠ℎ to share holder ℎ. 1.2.2 Calculation of tag 𝝈𝝈 : Choose 𝑅𝑅MAC randomly (𝑅𝑅MAC ∈R ℛMAC) and calculate a MAC tag 𝜎𝜎 = 𝑢𝑢(𝑅𝑅MAC, 𝑡𝑡1|𝐷𝐷) , where 𝑡𝑡1|𝐷𝐷 denotes the concatenation of 𝑡𝑡1 and 𝐷𝐷. Then send 𝑡𝑡1 and 𝜎𝜎 to the verifier via an authenticated channel (cf. item A4 in Sec. 2.3.1). 1.2.3 Post-processing: Record 𝑡𝑡1, 𝑅𝑅MAC and erase 𝐷𝐷, 𝜎𝜎 from the memory.
1.3 Verifier records the receipt time 𝑡𝑡2 of messages 𝑡𝑡1 and 𝜎𝜎, sent by the share calculator.
(2) Data reconstruction phase: 2.1 Initiation by the data owner: The data owner requests the share calculator to send 𝐷𝐷. 2.2 Data reconstruction: 2.2.1 The share calculator collects from the share
holders shares 𝑠𝑠 = �𝑠𝑠1, … , 𝑠𝑠𝑛𝑛SH� of 𝐷𝐷. If he could collect only less than 𝑡𝑡SH shares, he announces “abort” of the entire scheme.

From the collected shares, he calculates a data 𝐷𝐷′ (which is supposed to equal 𝐷𝐷) and sends it to the data owner. 2.2.2 The data owner sends 𝑡𝑡1 and 𝐷𝐷′′ to the end user. If the data owner is honest, 𝐷𝐷′′ = 𝐷𝐷′. 2.3 Integrity check by the end user: 2.3.1 The end user sends 𝐷𝐷′′ and 𝑡𝑡1 to the share calculator. 2.3.2 The share calculator calculates a MAC tag 𝜎𝜎′′ = 𝑢𝑢(𝑅𝑅MAC, 𝑡𝑡1|𝐷𝐷′′). He then sends 𝜎𝜎′′ and 𝑡𝑡1 to the verifier. 2.3.3 The verifier verifies the integrity of 𝐷𝐷′′, by searching his memory for MAC tag 𝜎𝜎 registered with time 𝑡𝑡1 and by checking if it satisfies 𝜎𝜎′′ = 𝜎𝜎 and 𝑡𝑡1 ≤ 𝑡𝑡2 . If the check was successful, he sends “success” to the data owner and the end user; and otherwise send “fail”.
2.4 Security of our scheme We state and then prove the security of our scheme.
Theorem 1: Our verification scheme defined in Sec. 2.3 satisfies security criteria SC1, SC2, and SC3, specified in Sec. 2.2.2. Proof:
SC1: This corresponds to the case where the data owner chooses an incorrect data 𝐷𝐷′′(≠ 𝐷𝐷′) registered with time 𝑡𝑡1 without knowing 𝑅𝑅MAC, and sends 𝐷𝐷′′, instead of 𝐷𝐷, to the end user in step 2.2.2. An honest end user can detect this alteration of 𝐷𝐷 in step 2.3.3, except with a probability no larger than 2−𝑘𝑘 log2|𝒟𝒟|, due to the almost universality2 (cf. Lemma 1) of function 𝑢𝑢.
SC2: This corresponds to the case where, after the scheme is finished, the end user chooses an incorrect data 𝐷𝐷′′(≠ 𝐷𝐷′) without knowing 𝑅𝑅MAC, and claims that the data owner sent 𝐷𝐷′′ with time 𝑡𝑡1 instead of 𝐷𝐷′ in step 2.2.2. The data owner, if honest, can refute such claim by i. calculating the MAC tag 𝜎𝜎′′ = 𝑢𝑢(𝑅𝑅MAC, 𝑡𝑡1|𝐷𝐷′′) , with
the help of the share calculator, and ii. then demonstrating to the end user, with the help of the
verifier, that 𝜎𝜎′′ differs from the correct tag 𝜎𝜎 stored by the verifier. This refutation fails only when 𝜎𝜎′′ equals 𝜎𝜎 accidentally, which occurs with a probability no larger than 2−𝑘𝑘 log2|𝒟𝒟|, again due to the almost universality2 of function 𝑢𝑢. SC3: This is because the verifier is correlated only through the MAC tag 𝜎𝜎 ∈ {0,1}𝑘𝑘.
4

FIGURE 2. Conceptual view of third-party verification scheme. Long-term means elapsed time between (1) data registration phase and (2) data reconstruction and verification phase. The end user is not always fixed at data registration phase.
2.5 Optional: Simplified scheme achieving a weaker security (computational security) So far, we have restricted ourselves with a scheme achieving information theoretical security. In this subsection, we consider a case with the computational security, a weaker notion of security, and show that it admits a simplification of our scheme. The basic idea is simply to replace the almost universal2 hash function u, used in the above scheme, with a computationally collision resistant hash function [14], instantiated, e.g., by SHA-512. More precisely, we prepare an optional mode in which the data owner and the end user themselves calculate hash values ℎ(𝑡𝑡1|𝐷𝐷) using the SHA-512 function h. In this option, they need not use the share calculator. The data owner calculates ℎ(𝑡𝑡1|𝐷𝐷)and sends it to the verifier. The end user, after receiving 𝐷𝐷′′', calculates ℎ(𝑡𝑡1|𝐷𝐷′′) and sends it to the verifier. The verifier checks if ℎ(𝑡𝑡1|𝐷𝐷′′) = ℎ(𝑡𝑡1|𝐷𝐷) and 𝑡𝑡1 ≤ 𝑡𝑡2 hold and informs the end user of the result.

While this option can omit the share calculator, the data integrity (SC1 and SC2) must be somewhat mitigated; it can no longer be guaranteed in the sense of ITS, but only in the sense of computational security. That is, the success probability of an attack in SC1 or SC2 can no longer be bounded by 2−𝑘𝑘 log2|𝒟𝒟| , but can only be shown to be negligible (with respect to the security parameter k) against a probabilistic polynomial-time (PPT) malicious user [6]. On the other hand, the secrecy (SC3) still holds, as long as we set the MAC tag length to be smaller than k (see the proof of Theorem 1).

2.6 Advantage of our schemes (for both information theoretical security and computational security) If there is a conflict during the authentication process, the verifier enables to judge whether the data owner or the end user is correct. As mentioned above, no commitment scheme for data integrity application can achieve instant ITS binding and hiding [19]. Our third-party verification scheme is based on the use of a trusted third-party [24]. The novelty of our scheme is to introduce the share calculator to guarantee an integrity of the data. The trusted assumptions on processing hardware are practical and have often been introduced in secure multiparty computation studies [20, 25]. In our case, we require that share calculations are performed secretly and the memory used to calculate MAC tags is long-term secure but small. We think these assumptions are acceptable for practical use.

III. SPSS scheme and share renewal process

In the previous section, we introduced the third-party

verification scheme which can be combined with an arbitrary

secret

sharing

(SS)

scheme,

SS.

In this section, we choose the underlying SS scheme, SS, to be

the single-password-authenticated secret sharing (SPSS)

given in our previous paper [5], and discuss details of the

combined scheme. Then we present its demonstration on an

actual QKD network testbed, called the Tokyo QKD Network

[8] in section 4. Our SPSS scheme [5] achieves ITS data

transmission, storage, authentication, and integrity. In

particular, the data owner can verify the integrity of the data

when he reconstructs the data by himself. By combining this

scheme with the third-party verification scheme of the

previous section, we can enhance the data integrity guarantee

function. In this section, we outline the procedure of the

combined scheme. Further details and the security proof of the

SPSS scheme are described in the supplemental information

in Ref. [5]. We introduce the (3,4)-threshold scheme below.

(1) Registration phase (1-1) The data owner sends data D and password P to the share calculator. The share calculator informs received time 𝑡𝑡1 to the data owner. For the efficiency of calculation, Mersenne primes should be used in the following calculation. Of course, other primes can be applied. To better

5

understanding, we show an example of calculation with Mersenne prime. Since each calculation in the finite field with prime order 𝑞𝑞 = 2𝑚𝑚 − 1 can deal with only blocks of length at most 𝑚𝑚 − 1 bits, secret data 𝐷𝐷, which has generally a much longer length, needs to be divided into pieces of (𝑚𝑚 − 1)-bit block, e.g. 𝑙𝑙 pieces; 𝐷𝐷 = 𝐷𝐷𝑙𝑙 |𝐷𝐷𝑙𝑙−1 | ⋯ |𝐷𝐷1. The data owner sets a (𝑚𝑚 − 1)-bit password 𝑃𝑃 , which should have sufficient entropy against the on-line dictionary attack, then computes a message authentication code, MAC tag= 𝐷𝐷𝑙𝑙𝑃𝑃𝑙𝑙 + 𝐷𝐷𝑙𝑙−1𝑃𝑃𝑙𝑙−1 + ⋯ + 𝐷𝐷1𝑃𝑃, which is denoted as 𝐷𝐷𝑙𝑙+1, and finally adds it to the data for later purpose of message authentication by the data owner. (1-2) For each data block, data shares 𝑓𝑓𝐷𝐷𝑖𝑖(1), 𝑓𝑓𝐷𝐷𝑖𝑖(2), 𝑓𝑓𝐷𝐷𝑖𝑖(3), 𝑓𝑓𝐷𝐷𝑖𝑖(4) are created for share holders 1, 2, 3, and 4, respectively, by using polynomial 𝑓𝑓𝐷𝐷𝑖𝑖 of degree at most 2, where 𝑖𝑖 = 1, … , 𝑙𝑙 + 1 . Password shares 𝑓𝑓𝑃𝑃(1), 𝑓𝑓𝑃𝑃(2), 𝑓𝑓𝑃𝑃(3), 𝑓𝑓𝑃𝑃(4) are created by using polynomial 𝑓𝑓𝑃𝑃 of degree at most 1. (1-3) They are then sent to the corresponding share holders from the share calculator. (1-4) Each share holder stores the set of shares. (1-5) Simultaneously, the share calculator computes the other MAC tag of 𝑡𝑡1|𝐷𝐷 by using random number 𝑅𝑅MAC for verification, and sends 𝑡𝑡1 and the MAC tag to the verifier as mentioned in section 2. 𝑅𝑅MAC and 𝑡𝑡1 are stored in the share calculator. Here, we used the Toeplitz matrix-multiplication [26] as the almost universal2 hash function 𝑢𝑢 (satisfying the property of Lemma 1) for calculating the MAC tag. Overall process of (1-1) to (1-5) are shown in Fig. 3 (1).
(2) Pre-computation and communication phase (2-1) Each share holder generates a random number, denoted as 𝑅𝑅𝑗𝑗 for the 𝑗𝑗 -th storage server, and makes its shares 𝑓𝑓𝑅𝑅𝑅𝑅(1), 𝑓𝑓𝑅𝑅𝑅𝑅(2), 𝑓𝑓𝑅𝑅𝑅𝑅(3), 𝑓𝑓𝑅𝑅𝑅𝑅(4) by using polynomial 𝑓𝑓𝑅𝑅𝑅𝑅 of degree at most 1. Furthermore each server generates shares of the “0” 𝑓𝑓0𝑗𝑗(1), 𝑓𝑓0𝑗𝑗(2), 𝑓𝑓0𝑗𝑗(3), 𝑓𝑓0𝑗𝑗(4) by using polynomial 𝑓𝑓0𝑗𝑗 of degree at most 2, such that 𝑓𝑓0𝑗𝑗(0) = 0 should hold so as to keep confidentiality of the share in data reconstruction phase without changing the value of the data share. (2-2) The share holders send these shares to each other. (2-3) Each share holder receives three shares of three random numbers and three shares of the “0,” and stores them together with the ones produced by itself. For ITS, the above procedure has to be iterated 𝑙𝑙 + 1 times before each data reconstruction of l blocks secret data. That is, 𝑗𝑗 -th share holder has to keep 𝑙𝑙 + 1 sets of (𝑓𝑓𝑅𝑅1(𝑗𝑗), 𝑓𝑓𝑅𝑅2(𝑗𝑗), 𝑓𝑓𝑅𝑅3(𝑗𝑗), 𝑓𝑓𝑅𝑅4(𝑗𝑗), 𝑓𝑓01(𝑗𝑗), 𝑓𝑓02(𝑗𝑗), 𝑓𝑓03(𝑗𝑗), 𝑓𝑓04(𝑗𝑗)). These processes are shown in Fig. 3(2-1-2). And share renewal process described in appendix are summarized in Fig. 3 (2-3)-(2-6).
(3) Data reconstruction phase We assume P' be the password in the data owner's memory.
(3-1) The data owner sends 𝑃𝑃′ to the share calculator. And the share calculator chooses three share holders among the

four to recover data. We may assume that they are share holder 1, 2, and 3 without loss of generality, denoting them as a set 𝐿𝐿 = {1, 2, 3}. The share calculator generates shares
of 𝑃𝑃′ , 𝑓𝑓𝑃𝑃′(1), 𝑓𝑓𝑃𝑃′(2), 𝑓𝑓𝑃𝑃′(3) by using polynomial 𝑓𝑓𝑃𝑃′ of
degree at most 1. Each set (𝐿𝐿, 𝑓𝑓𝑃𝑃′(𝑗𝑗)) is sent to each corresponding share holder (request). If |𝐿𝐿| ≠ 3, the request is rejected regarding it as an improper request. Otherwise, for each data block, each server, say j-th one, computes 𝑅𝑅 = 𝑓𝑓𝑅𝑅1(𝑗𝑗) + 𝑓𝑓𝑅𝑅2(𝑗𝑗) + 𝑓𝑓𝑅𝑅3 (𝑗𝑗), 𝑍𝑍 = 𝑓𝑓01(𝑗𝑗) + 𝑓𝑓02(𝑗𝑗) + 𝑓𝑓03(𝑗𝑗) and 𝐹𝐹𝑗𝑗𝑖𝑖 = (𝑓𝑓𝑃𝑃(𝑗𝑗) − 𝑓𝑓𝑃𝑃′(𝑗𝑗))𝑅𝑅 + 𝑍𝑍 + 𝑓𝑓𝐷𝐷𝑖𝑖(𝑗𝑗). The 𝐹𝐹𝑗𝑗𝑗𝑗 (𝑖𝑖 = 1, … , 𝑙𝑙 + 1) are then sent to the share calculator (response). Here note that 𝑅𝑅 and 𝑍𝑍 should be discarded at each request-response for ITS. (3-2) For each data block, the share calculator computes polynomial 𝐹𝐹𝑖𝑖(𝑥𝑥) of degree 2 that satisfies 𝐹𝐹𝑖𝑖(𝑗𝑗) = 𝐹𝐹𝑗𝑗𝑗𝑗 for all 𝑗𝑗. 𝐹𝐹𝑖𝑖(0) is the reconstructed block. (3-3) The share calculator computes the MAC tag from 𝐹𝐹1(0), … , 𝐹𝐹𝑙𝑙(0) by using the password. If 𝐹𝐹𝑙𝑙+1(0) is equal to calculated MAC tag, the share calculator determines that the stored data has been successfully reconstructed and sends the data to the owner. If necessary, the data owner or the end user can check the data integrity as mentioned in section 2. These processes are shown in Fig.3 (3-1)-(3-3). (1)
(2-1)
6

(2-2) (2-3 optional) (2-4 optional)

(2-5 optional) (2-6 optional) (3-1)

7

(3-2)
(3-3)
FIGURE 3. Schematic diagram of distributed storage with password authenticated secret sharing and share renewal scheme.
IV. Experimental setup and demonstration on the QKD Network The third-party verification scheme described in sections 2 and 3 is experimentally demonstrated in a QKD network testbed. As mentioned above, the QKD network can provide not only secure communication lines but also random numbers generated from physical random number generators, because these devices are inside QKD systems. The random numbers generated by intrinsically non-deterministic physical processes are useful for various crypt applications. The verifiable share renewal function is useful to realize longterm security. Several verification methods have been reported [27-29]. We use Pedersen’s protocol [28] for a verification of the share renewal among the share holders. In our scheme, the share holders renew shares by adding shares of “0” with verifying whether their partial information is correct or not. The detailed process is described in the Appendix. This scheme enables a verification of the share renewal with ITS hiding but with computationally secure binding. This verification scheme relies on the hardness of discrete logarithm problem. Therefore, if an eavesdropper and/or an adversary has a quantum computer, the data integrity in this scheme (binding or often called correctness of the data) can be

compromised. However, this scheme would still be useful to protect malicious insiders who do not have quantum computers. In fact, the share renewal can be carried out before the number of the compromised share holders exceeds the threshold. Furthermore, outsiders cannot get information about share renewal, because transmission lines are encrypted by OTP. Note that even if this process is eavesdropped, the information of the secret data is not leaked. This share renewal function is the optional countermeasure against malicious classical cyber attack.
4.1 QKD network structure The structure of our system is shown Fig. 4. The QKD network [8] works as a secure key supply infrastructure. Secret sharing or other services are installed in this QKD network. The data owner, the share calculator, share holders, the verifier, and the end user communicate through OTP encrypted communication lines in which secure key are provided from the QKD network. The share calculator also requests random number to the key supply agent (KSA) of the QKD network to calculate shares or MAC tags. Once supplied with the keys or random numbers, the key data in the QKD network are erased and the responsibility of key management moves to application users. Generated keys in each QKD link are pushed up to servers, called key management agents (KMAs). Each KMA is set in a physically protected place, referred to as “a trusted node”. A KSA is integrated to the KMA. The KSAs supply users the keys. A key management server (KMS) gathers link information and instructs KMAs to execute key relay according to request from the application layer.
FIGURE 4. Schematic view of the layer structure of QKD Network and our third-party verification system.

8

NEC-0 NEC-1 Toshiba NTT-NICT Gakushuin SeQureNet

TABLE I SPECIFICATION OF QKD LINKS

Protocol

Transmission

BB84 with decoy
BB84 with decoy
BB84 with decoy
DPS-QKD
CV-QKD
CV-QKD

Length (km)

50 (Spooled

fiber NICT

premise)

22

(field

installed 95%

areal line)

45

(field

installed 50%

areal line)

90

(field

installed 50%

areal line)

2

(NICT

premise)

2

(NICT

premise)

Loss (dB) 10
13
14.5
28.6-30.1
2 2

The Tokyo QKD Network consists of five nodes (called Koganei-1-4 and Ohtemachi-1) connected by six QKD links. The QKD links consist of the QKD systems provided by NEC [30], Toshiba [31], NTT-NICT [32], Gakushuin [33], and SeQureNet [34]. Specification of each QKD link are listed in Table 1 [5,13]. The key relays are carried out in the key management layer of the Tokyo QKD Network with OTP. Each communication line in the application layer is also encrypted by an OTP manner and authenticated with MAC tag based on Wegman-Carter [15] protocol by using the key from the QKD network. Therefore, each player uses ITS communication. Moreover, high quality physical random number is provided to the share calculator to calculate shares and MAC tags from the KSA of the QKD network. In the application layer, servers of the data owner, the share calculator, share holders, the verifier, and the end user are set. In this experiment, the data owner is set in Ohtemachi-1. Each share holder (1-4) is located in Koganei-1-4. The verifier and the share calculator are set in Koganei-1 and Koganei-2 respectively. The terminal of the end user is established in Koganei-3.

4.2 Experimental results A prime number q is used in calculation of shares with Galois field. A condition to carry out the share renewal, q must be a divisor of p-1. We selected p and q from data sets in [35]. From the viewpoint of fast computation, q should be selected from Mersenne primes. However, it is not so easy to find a prime to meet conditions. Therefore, we selected p and q from data sets in [35].

250

Registration

Communication

200

Renewal

Reconstrcution

150

Processing time (s)

100

50

0

0

20

40

60

80

100

Data size (kB)

FIGURE 5. Processing time of the registration phase (Registration), the communication and communication among share holders phase (Communication), the share renewal phase (Renewal), and the data reconstruction phase (Reconstruction) as functions of data size.
When we carried out this protocol, threshold was set (3,4) shown in Fig.3. The experimental results are shown in Fig. 5. These results indicate practical processing time including data transfer time. Compared with previous results, about threefold processing time are necessary. It is because we did not use Mersenne prime in calculation of shares. To improve throughput, we shall find Mersenne primes which meet conditions mentioned above.
V. Conclusion We propose and demonstrate third-party verification with information theoretical security in a distributed storage system built on the QKD network. We demonstrated, for the first time to our best knowledge, a distributed storage system with information theoretically secure data transmission, storage, authentication, and data integrity with the third-party verification in a real metropolitan area network. By establishing the trusted share calculator and the verifier, falsifying data by the data owner or the end user become extremely difficult, and accidental data leakage from the verifier can be also protected with information theoretical security. We use the universal2 hash function to calculate MAC tags, therefore, calculation load can be extenuated compared with SHA families. It may imply that our scheme is suitable to guarantee integrity of big data. Moreover, we add share renewal function on our previous system “singepassword-authenticated secret sharing (SPSS) system” which enables ITS authentication, data transfer, data storage, and data reconstruction for resisting to against classical cyber attack. In verification scheme, we use universal2 hash function, however, we also developed another option with strongly universal2 hash function. This option enables to prevent accidental data leakage more efficiently, though more random numbers are necessary [6,14]. Our proposed scheme will make a significant contribution to enhancing function of the longterm secure distributed storage system. Our scheme consists
9

of five constituent members (data owner, share calculator, share holder, end user, and verifier) because our scheme includes time-stamp and verification functions. On the other hand, there exists a simpler ITS commitment scheme [24] and its realization with the QKD network is an interesting future work. Another important future direction is an improvement of the share renewal process. We demonstrated the optional-simple share renewal function based on Pedersen’s verifiable secret sharing scheme against malicious insiders or classical cyber attack. The security of this share renewal is based on computational complexity, therefore, it is efficient only against malicious attackers who do not have quantum computers and need a certain time to crack the share holders. It future, it is desirable to realize long-term integrity based on a novel ITS share renewal function, e.g. using a trusted calculator.

ACKNOWLEDGMENT This work was partly supported by Council for Science, Technology and Innovation (CSTI), Cross-ministerial Strategic Innovation Promotion Program (SIP), “Photonics and Quantum Technology for Society 5.0” (Funding agency: QST), Ministry of Internal Affairs and Communications "ICT Priority Technology Research and Development Project (JPMI00316)" and JSPS KAKENHI Grant Number JP18H05237. The authors would like to thank NEC, Toshiba, Gakushuin University, and NTT for their contribution to an operation of the Tokyo QKD Network.

Appendix The detailed process of optional share renewal shown in Fig.3 (2-3)-(2-6) is listed as follows; 1. Each i’th shareholder 𝑖𝑖 ∈ [1 … 𝑛𝑛] randomly picks t-1 numbers from the finite field. These numbers define a polynomial 𝑃𝑃𝑖𝑖(𝑥𝑥) of degree t-1 whose free coefficient is zero (𝑃𝑃𝑖𝑖(0) = 0). Pi1(X)=𝑎𝑎𝑖𝑖,1𝑥𝑥 + 𝑎𝑎𝑖𝑖,2𝑥𝑥2 + ⋯ + 𝑎𝑎𝑖𝑖,𝑡𝑡−1𝑥𝑥𝑡𝑡−1 mod q, Pi2(X)=𝑏𝑏𝑖𝑖,1𝑥𝑥 + 𝑏𝑏𝑖𝑖,2𝑥𝑥2 + ⋯ + 𝑏𝑏𝑖𝑖,𝑡𝑡−1𝑥𝑥𝑡𝑡−1mod q. And each 𝑖𝑖’th share holder selects common security parameters g and h, and computes
𝜖𝜖𝑖𝑖,𝑗𝑗 = 𝑔𝑔𝑎𝑎𝑖𝑖,𝑗𝑗ℎ𝑏𝑏𝑖𝑖,𝑗𝑗 mod 𝑝𝑝(𝑗𝑗 = 1, … , 𝑡𝑡 − 1). (𝑔𝑔 = ℎ𝑥𝑥) Shown in Fig.3 (2-3).
2. Each i’th shareholder computes the shares Pi1(1),…Pi1(n),

and Pi2(1),…Pi2(n). And �𝐸𝐸�𝑃𝑃𝑖𝑖1(𝑐𝑐), 𝑃𝑃𝑖𝑖2(𝑐𝑐)�� is encrypted

with one time pad using key from QKD.3. Each i’th

shareholder publishes the message: (𝑖𝑖, 𝜖𝜖𝑖𝑖,𝑗𝑗𝑗𝑗∈{1…𝑡𝑡−1},

𝐸𝐸(𝑃𝑃𝑖𝑖1(𝑐𝑐), 𝑃𝑃𝑖𝑖2(𝑐𝑐))𝑐𝑐∈{1…𝑛𝑛}∖𝑖𝑖) and a signature each other.

Shown in Fig.3 (2-4).

4. For all such messages (from other servers) that the i’th

shareholder receives, he/she verifies the correctness of

shares using the same equation as

𝑔𝑔𝑃𝑃𝑗𝑗1 (𝑖𝑖) ℎ𝑃𝑃𝑗𝑗2 (𝑖𝑖)

=

𝑖𝑖

𝑖𝑖2

�𝜖𝜖𝑗𝑗,1� �𝜖𝜖𝑗𝑗,2�

⋯

𝑖𝑖𝑡𝑡−1
�𝜖𝜖𝑗𝑗,𝑡𝑡−1� mod

𝑝𝑝

.

Shown in Fig.3 (2-5).

5. If the 𝑖𝑖’th shareholder finds all the messages sent by other shareholders to be correct (e.g., correct signature, correct time period, etc.), and all the above equations hold, then it broadcasts a signed acceptance message announcing that all the checks are successful. 6. If all shareholders sent such acceptance messages, the i’th shareholder updates his/her own share by ℎ(𝑖𝑖) = 𝑓𝑓(𝑖𝑖) + ∑𝑛𝑑𝑑𝑛=1 𝑃𝑃𝑑𝑑1 (𝑖𝑖) + 𝑃𝑃𝑑𝑑2(𝑖𝑖) mod 𝑞𝑞 . Shown Fig. 3 (2-6). 7. If in step 5, the i’th shareholder finds any irregularities in the behavior of any shareholder during step 4, then he/she broadcasts a signed accusation against the misbehaving shareholder.
REFERENCES [1] C. H. Bennett and G. Brassard, “Quantum cryptography: public-key distribution and coin tossing,” in Proceedings of the IEEE International Conference on Computers, Systems and Signal Processing (Institute of Electrical and Electronics Engineers, New York, 1984), pp. 175–179. [2] N. Gisin G. Ribordy, W. Tittel, and H. Zbinden, “Quantum cryptography,” Rev. Mod. Phys. 74(1), pp. 145–195, 2002. [3] G. S. Vernam, “Cipher printing telegraph systems for secret wire and radion telegraphic communications,” J. American Institute of Electrical Engineers, 45, pp. 295-301, 1926. [4] A. Shamir, “How to share a secret,” Communications of the ACM, 22, pp. 612-613, 1979. [5] M. Fujiwara, A. Waseda, R. Nojima, S. Moriai, W. Ogata, and M. Sasaki, “Unbreakable distributed storage with quantum key distribution network and password-authenticated secret sharing,” Sci. Reports, 6, pp. 28988-1-8, 2016. [6] L. Carter and M. Wegman, “Universal classes of hash functions,” J. Comput. System Sci., vol. 18, No. 2, 143–154, 1979. [7] M. Sasaki, M. Fujiwara, R. Jin, M. Takeoka, T. Han, H. Endo, K. Yoshino, T. Ochi, S. Asami, and A. Tajima, “Quantum Photonic Network: Concept, Basic Tools, and Future Issues,” J. Selected Topics in Quant. Elec., 21, 6400313, 2015. [8] M. Sasaki, M. Fujiwara, H. Ishizuka, W. Klaus, K. Wakui, M. Takeoka, A. Tanaka, K. Yoshino, Y. Nambu, S. Takahashi, A. Tajima, A. Tomita, T. Domeki, T. Hasegawa, Y. Sakai, H. Kobayashi, T. Asai, K. Shimizu, T. Tokura, T. Tsurumaru, M. Matsui, T. Honjo, K. Tamaki, H. Takesue, Y. Tokura, J. F. Dynes, A. R. Dixon, A. W. Sharpe, Z. L. Yuan, A. J. Shields, S. Uchikoga, M. Legre, S. Robyr, P. Trinkler, L. Monat, J.-B. Page, G. Ribordy, A. Poppe, A. Allacher, O. Maurhart, T. Langer, M. Peev, and A. Zeilinger, “Field test of quantum key distribution in the Tokyo QKD Network,” Opt. Express 19(11), pp. 10387–10409, 2011. [9] https://eur-lex.europa.eu/eli/reg/2016/679/oj. Date of access: 06/18/2021. [10] https://www.hhs.gov/hipaa/for-professionals/special-topics/hitechact-enforcement-interim-final-rule/index.html. Date of access: 06/18/2021. [11] https://ec.europa.eu/digital-single-market/en/quantum-technologies. Date of access: 06/18/2021. [12] https://www.congress.gov/bill/115th-congress/house-bill/6227/text. Date of access: 06/18/2021. [13] J. Braun, J. Buchmann, D. Demirel, M. Geihs, M. Fujiwara, S. Moriai, M. Sasaki, and A. Waseda, “LINCOS - A Storage System Providing Long-Term Integrity, Authenticity, and Confidentiality,” Proc. the 2017 ACM on Asia Conference on Computer and Communications Security, pp. 461-468, 2017. [14] J. Katz and Y. Lindell, Introduction to Modern Cryptography, Second Edition (CRC Press, Boca Raton, 2015)
10

[15] M. N. Wegman and J. L. Carter, “New Hash Functions and Their Use

in Authentication and Set Inequality,” J. Comput. System Sci. 22,

pp.265-279, 1981.

[16] Y. Ishai, R. Ostrovsky, and H. Seyalioglu, “Identifying cheaters

without an honest majority”, in Proc. the 9th Theory of Cryptography

Conference (TCC 2012), Lecture Notes in Computer Science 7194,

pp.21-38, Springer (2012).

[17] M. Hayashi and T. Koshiba, “Universal Construction of Cheater-

Identifiable Secret Sharing Against Rushing Cheaters Based on

Message Authentication”, Proc. IEEE International Symposium on

Information Theory (ISIT2018), Talisa Hotel in Vail, Colorado, USA,

June, 17 - 22, 2018. pp.2614-2618.

[18] https://www.dekyo.or.jp/tb/contents/english/ Date of access:

12/02/2021; RFC 3161-Internet X.509 Public Key Infrastructure

Time-Stamp Protocol (TSP).

[19] G. Brassrd, C. Crepean, D. Mayers, L. Salvail, “A brief review on the

impossibility

of

quantum

bit

commitment,”

https://arxiv.org/pdf/quant-ph/9712023.pdf. Date of access:

06/18/2021.

[20] N. von Bomhard, B. Ahlborn, C. Masson, and U. Mansmann, “The

trusted server; a secure computational environment for privacy

compliant evaluations on plain personal data,” PLOS ONE, 0202752,

September 6, pp. 1-19, 2018.

[21] K. Kursawe, A.-R. Sadeghi, D. Schellekens, B. Skoric, and P. Tuyls,

“Reconfigurable physical unclonable functions – enabling technology

for tamper-resistant storage,” IEEE Int. Workshop on hardware-

oriented security and trust, 10844409, 2009.

[22] https://software.intel.com/en-us/sgx. Date of access: 06/18/2021.

[23] D. R. Stinson. “Universal hash families and the leftover hash lemma,

and applications to cryptography and computing,” J. Combin. Math.

Combin. Comput. 42, pp.3-31, 2002.

[24] R. L. Rivest, “Unconditionally secure commitment and oblivious

transfer schemes using private channels and a trusted initializer,”

https://people.csail.mit.edu/rivest/Rivest-commitment.pdf. Date of

access: 06/18/2021.

[25] J. I. Choi and K. R. B. Butler, “Secure multiparty computation and

trusted hardware: examining adoption challenges and opportunities,”

Security and Communication Networks, 19, (1360905), pp. 1-18,

2019.

[26] Y. Mansour, N. Nisan, P. Tiwari, “The Computational Complexity of

Universal Hashing,” in STOC ’90, Proceedings of the twenty-second

annual ACM symposium on Theory of computing, pp. 235-243

(1990).

[27] P. Feldman, “A practical scheme for non-interactive verifiable secret

sharing,” IEEE Symposium on Foundations of Computer Science, pp.

427--437. IEEE, 1987.

[28] T. P. Pedersen, “Non-interactive and information theoretic secure

verifiable secret sharing,” Advances in Cryptology — CRYPTO ’91

pp. 129-140.

[29] R. Gennaro, M. O. Rabin, and T. Rabin, “Simplified VSS and Fast-

track multiparty computations with applications to threshold

cryptography,” Proc. 17th ACM Symposium on Principles of

Distributed Computing, 1998, pp. 101-110.

[30] K. Yoshino, T. Ochi, M. Fujiwara, M. Sasaki, and A. Tajima,

“Maintenance-free operation of WDM quantum key distribution

system through a field fiber over 30 days,” Opt. Express 21,

pp.31395-31401, 2013.

[31] J. F. Dyne, I. Choi, A.W. Sharpe. A. R. Dixon, Z. L. Yuan, M. Fujiwara,

M. Sasaki, and A.J. Shields, “Stability of high bit rate quantum key

distribution on installed fiber,” Opt. Express 20, pp.16339-16347,

2012.

[32] K. Shimizu, T. Honjo, M. Fujiwara, T. Ito, K. Tamaki, S. Miki, T.

Yamashita, H. Terai, Z. Wang, and M. Sasaki, “Performance of long-

distance quantum key distribution over 90-km optical links installed

in a field environment of Tokyo metropolitan area,” IEEE J.

Lightwave tech. 32, pp.141-151, 2014.

[33] T. Hirano, H. Yamanaka, M. Ashikaga, T. Konishi, and R. Namiki, “Quantum cryptography using pulsed homodyne detection,” Phys. Rev. A68, 042331, 2003.
[34] http://www.sequrenet.com/datasheets/datasheet_cygnus.pdf. Date of access: 01/03/2016.
[35] https://www.ietf.org/rfc/rfc5114.txt. Date of access: 06/18/2021.
11

MIKIO FUJIWARA received the B.S. and M.S. degrees in electrical engineering and the Ph.D. degree in physics from Nagoya University, Nagoya, Japan, in 1990, 1992, and 2002, respectively. He has been involved R&D activities at NICT (previous name CRL, Ministry of Posts and Telecommunications of Japan) since 1992. His main research interests include quantum key distribution, and QKD network application.

MASAHIDE SASAKI received the B.S., M.S., and Ph.D. degrees in physics from Tohoku University, Japan, in 1986, 1988 and 1992, respectively. During 1992-1996, he worked on the development of semiconductor devices in NipponKokan Company (currently JFE Holdings). In 1996, he joined the Communications Research Laboratory, Ministry of Posts and Telecommunications (since 2004, NICT). He has been working on quantum optics, quantum communication and quantum cryptography. He is presently Distinguished Researcher of Advanced ICT Research Institute, and NICT Fellow.

RYO NOJIMA is Director of Security Fundamentals Laboratory, Network Security Research Institute, NICT. His main research interests include privacy, cryptography, and information security, especially privacy preserving protocols.

TOYOHIRO TSURUMARU was born in Japan in 1973. He received the B.S. degree from the Faculty of Science, University of Tokyo, Japan in 1996, and the M.S. and Ph.D. degrees in physics from the Graduate School of Science, University of Tokyo, Japan in 1998 and 2001, respectively. Then he joined Mitsubishi Electric Corporation in 2001. His research interests include theoretical aspects of quantum cryptography, as well as modern cryptography.
SHIHO MORIAI received the B.E. degree from Kyoto University in 1993 and Ph.D. from the University of Tokyo in 2003. She is Managing Director of Strategic Planning Department, and Executive Researcher of Cybersecurity Research Institute, NICT. Her research interests include information security and data privacy.

MASAHIRO TAKEOKA received the Ph.D. degree in electrical engineering from Keio University, Kanagawa, Japan, in 2001. He is a director of Quantum ICT Advanced Development Center in NICT. His current research interests are in quantum cryptography, quantum information theory, and optical quantum information processing.

12

