Design of false data injection attack on distributed process estimation
Moulik Choraria, Arpan Chattopadhyay, Urbashi Mitra, Erik Strom

arXiv:2101.05567v1 [eess.SY] 14 Jan 2021

Abstract—Herein, design of false data injection attack on a distributed cyber-physical system is considered. A stochastic process with linear dynamics and Gaussian noise is measured by multiple agent nodes, each equipped with multiple sensors. The agent nodes form a multi-hop network among themselves. Each agent node computes an estimate of the process by using its sensor observation and messages obtained from neighboring nodes, via Kalman-consensus ﬁltering. An external attacker, capable of arbitrarily manipulating the sensor observations of some or all agent nodes, injects errors into those sensor observations. The goal of the attacker is to steer the estimates at the agent nodes as close as possible to a pre-speciﬁed value, while respecting a constraint on the attack detection probability. To this end, a constrained optimization problem is formulated to ﬁnd the optimal parameter values of a certain class of linear attacks. The parameters of linear attack are learnt on-line via a combination of stochastic approximation based update of a Lagrange multiplier, and an optimization technique involving either the Karush-KuhnTucker (KKT) conditions or online stochastic gradient descent. The problem turns out to be convex for some special cases. Desired convergence of the proposed algorithms are proved by exploiting the convexity and properties of stochastic approximation algorithms. Finally, numerical results demonstrate the efﬁcacy of the attack.
Index Terms—Attack design, distributed estimation, CPS security, false data injection attack, Kalman-consensus ﬁlter, stochastic approximation.
I. INTRODUCTION
In recent times, there have been signiﬁcant interest in designing cyber-physical systems (CPS) that combine the cyber world and the physical world via seamless integration of sensing, computation, communication, control and learning. CPS has widespread applications such as networked monitoring and control of industrial processes, disaster management, smart grids, intelligent transportation systems, etc. These applications critically depend on estimation of a physical process via multiple sensors over a wireless network. However, increasing use of wireless networks in sharing the sensed data has rendered the sensors vulnerable to various cyber-attacks. In this paper, we focus on false data injection (FDI) attacks which is an integrity or deception attack where the attacker modiﬁes the information ﬂowing through the network [2], [3],
Moulik Choraria is with EPFL Switzerland. Arpan Chattopadhyay is with the Department of Electrical Engineering and the Bharti School of Telecom Technology and Management, Indian Institute of Technology (IIT), Delhi. Urbashi Mitra is with the Department of Electrical Engineering, University of Southern California. Erik Strom is with the Department of Signals and Systems, Chalmers University, Sweden. Email: moulik.choraria@epﬂ.ch, arpanc@ee.iitd.ac.in, ubli@usc.edu, erik.strom@chalmers.se
This work was supported by the faculty seed grant and professional development allowance (PDA) of IIT Delhi.
This manuscript is an extended version of our conference paper [1].

in contrast to a denial-of-service attack where the attacker blocks system resources (e.g., wireless jamming attack [4]). In FDI, the attacker either breaks the cryptography of the data packets or physically manipulates the sensors (e.g., putting a heater near a temperature sensor).
The cyber-physical systems either need to compute the process estimate in a remote estimator (centralized case), or often multiple nodes or components of the system need to estimate the same process over time via sensor observations and the information shared over a network (distributed case). The problem of FDI attack design and its detection has received signiﬁcant attention in recent times; attack design: conditions for undetectable FDI attack [5], design of a linear deception attack scheme to fool the popular χ2 detector (see [6]), optimal attack design for noiseless systems [7]. The paper [8] designs an optimal attack to steer the state of a control system to a desired target under a constraint on the attack detection probability. On the other hand, attempts on attack detection includes centralized (and decentralized as well) schemes for noiseless systems [9], coding of sensor output along with χ2 detector [10], comparing the sensor observations with those coming from from a few known safe sensors [11], and the attack detection and secure estimation schemes based on innovation vectors in [12]. Attempts on attack-resilient state estimation include: [13] for bounded noise, [14]–[16] for adaptive ﬁlter design using stochastic approximation, [17] that uses sparsity models to characterize the switching location attack in a noiseless linear system and state recovery constraints for various attack modes. FDI attack and its mitigation in power systems are addressed in [18]– [20]. Attack-resilient state estimation and control in noiseless systems are discussed in [21] and [22]. Performance bound of stealthy attack in a single sensor-remote estimator system using Kalman ﬁlter was characterized in [23].
However, there have been very few attempts for attack mitigation in distributed CPS, except [24] for attack detection and secure estimation, [25] for attack detection in networked control system using a certain dynamic watermarking strategy, and [26] for attack detection in power systems. On the other hand, the authors of [27] have designed an attack scheme to maximize the network-wide estimation error, which is different from our objective of pushing the estimates across nodes towards a target value, while respecting the attack detection constraint. Also, contrary to [27] which adds a simple Gaussian noise to the attacked node’s observation, we focus on the class of linear attacks, and provide theoretical convergence results of our proposed online learning based attack schemes. To our knowledge, there has been no other

attempt to theoretically design an attack strategy in distributed CPS. In light of these, our contributions in this paper are the following:
1) Under the Kalman-consensus ﬁlter (KCF, see [28]) for distributed estimation, we design a novel attack scheme that steers the estimates in all estimators towards a target value, while respecting a constraint on the attack detection probability under the popular χ2 detector adapted to the distributed setting. The attack scheme is reminiscent of the popular linear attack scheme [6], but the novelty lies in online learning and optimization of the parameters in the attack algorithm via Karush-Kuhn-Tucker (KKT) conditions, multi-timescale stochastic approximation [29] and simultaneous perturbation stochastic approximation (SPSA [30]). The attack algorithm, unlike the linear attack scheme of [6], uses a non-zero mean Gaussian perturbation to modify the observation made at a node, and this non-zero mean is an afﬁne function of the process estimate at a node. The optimization problem is cast as an online optimization problem, where KKT conditions are used for ﬁnding the optimal attack scheme, and, alternatively, SPSA is used for online stochastic gradient descent based learning of attack parameters (see [31, Chapter 3]). These works are also extended to the case where the attacker has access to the FDI alarm at each node.
2) The constraint on attack detection probability is met by updating a Lagrange multiplier via stochastic approximation at a slower timescale.
3) The dynamics of the deviation of the estimates from the target is derived analytically, which is used later to formulate the online optimization problem.
4) Theoretical convergence results are proved for all attack design schemes proposed in this paper.
5) Though the proposed algorithm involves on-line parameter learning, it can be used off-line to optimize the attack parameters which can then be used in real CPS.
The rest of the paper is organized as follows. System model and the necessary background related to the problem are provided in Section II. Error dynamics expressions under FDI are calculated in Section III. Attack design algorithms are developed in Section IV via KKT conditions, and in Section V via SPSA. Numerical results are presented in Section VI, followed by the conclusions in Section VII. All proofs are provided in the appendices.
II. SYSTEM MODEL
In this paper, bold capital letters, bold small letters and capital letters with caligraphic font will denote matrices, vectors and sets respectively.
A. Sensing and estimation model: no attack
We consider a connected, undirected, multi hop wireles.s network (see Figure 1) of N agent nodes denoted by N = {de1n, o2t,e·d· · b,yNN}.kT, haendseltetofNnkei=g.hb|oNrikn|g. Tnhoedrees iosf anoddiescrketeistime stochastic process {x(t)}t≥0 (where x(t) ∈ Rq×1 with

xˆ(1)(t)

xˆ(2)(t)

xˆ(3)(t)

xˆ(4)(t)

Attacked vehicle sending false information to its neighbors
Fig. 1: False data injection attack in distributed estimation.

process dimension q) which is a linear process with Gaussian noise evolving as follows:

x(t + 1) = Ax(t) + w(t)

(1)

∼N (0,Q)
where w(t) is zero-mean i.i.d. Gaussian noise with covariance matrix Q, and A ∈ Rq×q is the process matrix.
Each agent node is equipped with one or more sensors which make some observation about the process. The vector observation received at node k at time t is given by:

yk(t) = Hkx(t) + vk(t) ,

(2)

∼N (0,Rk)

where Hk is an observation matrix of appropriate dimension,

and vk(t) is a zero-mean Gaussian observation noise with

covariance matrix Rk, which is independent across sensors

and

i.i.d.

across

t.

The

pair

(

A,

Q

1 2

)

is

assumed

to

be

stabilizable, and the pair (A, Hk) is assumed to be observable

for each 1 ≤ k ≤ N .

At time t, each agent node k ∈ N declares an estimate xˆ(k)(t) using Kalman consensus ﬁltering (KCF, see [28])

which involves the following sequence of steps:

1) Node k computes an intermediate estimate x¯(k)(t) = Axˆ(k)(t − 1).
2) Node k broadcasts x¯(k)(t) to all j ∈ Nk.

3) Node k computes its ﬁnal estimate of the process as:

xˆ(k)(t) = x¯(k)(t) + Gk(yk(t) − Hkx¯(k)(t))

+Ck (x¯(j)(t) − x¯(k)(t))

(3)

j∈Nk

Here Gk and Ck are the Kalman and consensus gain matrices used by node k, respectively.

B. The χ2 detector
Let us deﬁne the innovation vector at node k by zk(t) := yk(t) − HkAxˆ(k)(t − 1). Let us assume that, under no attack, {zk(t)}t≥0 reaches its steady-state distribution N (0, Σk). Under a possible attack, a standard technique (see [6], [11]) to detect any anomaly in {zt}t≥0 is the χ2 detector, which tests whether the innovation vector follows the
desired Gaussian distribution. The detector at each agent

node observes the innovation sequence over a pre-speciﬁed

window of J time-slots, and declares an attack at time τ if

τ t=τ −J+1

zk (t)

Σ−k 1zk(t)

≥

η,

where

η

is

a

threshold

which

can be adjusted to control the false alarm probability. The

covariance matrix Σk can be computed from standard results

on KCF as in [28].

C. False data injection (FDI) attack
At time t, sensors associated to any subset of nodes At ⊂ N can be under attack. A node k ∈ At receives an observation:

y˜k(t) = yk(t) + ek(t)

= Hkx(t) + ek(t) + vk(t),

(4)

where ek(t) is the error injected by the attacker. The attacker seeks to insert the error sequence {ek(t) : k ∈ At}t≥0 in order to introduce error in the estimation. If At = A for all t, then the attack is called a static attack, otherwise the attack is called
a switching location attack. We will consider only static attack
in this paper, though the theory developed in this paper can
be extended to switching location attack. We assume that the attacker can observe xˆ(k)(t) for all 1 ≤ k ≤ N once they are
computed by the agent nodes. We also assume that the attacker knows the matrices A, Q, {Hk}1≤k≤N , {Rk}1≤k≤N .

where the two inequalities come from the union bound and the Markov inequality, respectively. Hence, the attacker seeks to solve the following constrained optimization problem:

min lim sup 1 T N E||xˆ(k)(t) − x∗||2 {Tk,Sk,Mk,dk}N k=1 T →∞ T + 1 t=0 k=1

1 TN

−1

αη

s.t. liTm→s∞ up T + 1 t=0 k=1 E(z˜k(t) Σk z˜k(t)) ≤ J

(CP)

This problem can be relaxed by a Lagrange multiplier λ to obtain the following unconstrained optimization problem:

min
{Tk ,Sk ,Mk ,dk }N k=1

lim sup 1

TN
E(||xˆ(k)(t) − x∗||2

T →∞ T + 1 t=0 k=1

+λz˜k(t) Σ−k 1z˜k(t)) (UP)

The following standard result tells us how to choose λ.

Proposition 1. Let us consider (CP) and its relaxed ver-
sion (UP). If there exists a λ∗ ≥ 0 and matrices {Tk∗, Sk∗, Mk∗, d∗k}Nk=1 such that (i) {Tk∗, Sk∗, Mk∗, d∗k}Nk=1 is the optimal solution of (UP) under λ = λ∗, and (ii) the tuple {Tk∗, Sk∗, Mk∗, d∗k}Nk=1 satisﬁes the constraint in (CP) with equality, then {Tk∗, Sk∗, Mk∗, d∗k}Nk=1 is an optimal solution for (CP) as well.

D. The optimization problem
The attacker seeks to steer the estimate at each agent node as close as possible to some pre-deﬁned value x∗, while
keeping the attack detection probability per unit time under some constraint value α. The authors of [6] proposed a linear injection attack to fool the χ2 detector in a centralized,
remote estimation setting. Motivated by [6], we also propose a linear attack, where, at time t, the sensor(s) associated with any node k ∈ A modiﬁes the innovation vector as z˜k(t) = Tkzk(t) + bk(t), where Tk is a square matrix and ibtks(mt)e∼anNta(kµenk(aθs(ak)f(utn−ct1i)o)n, Sofk)θ(iks)i(ntd−ep1e)n=d.exnˆt(kG)(atu−ssi1a)n−wxit∗h. The bias term µk(θ(k)(t − 1)) is assumed to take a linear form µk(θ(k)(t − 1)) = Mkθ(k)(t − 1) + dk for suitable matrix and vector Mk and dk. This is equivalent to modifying the observation vector to y˜k(t). If {Tk, Sk, Mk, dk}1≤k≤N is constant over time t, the attack is called stationary, else non-
stationary.
Note that, the probability of attack detection per unit time slot under the χ2 detector can be upper bounded as:

1T

N

τ

−1

Pd = liTm→s∞ up T + 1 P ∪k=1 {

z˜k(t) Σk z˜k(t) ≥ η}

τ =0

t=τ −J+1

1 TN

τ

−1

≤ lim sup T →∞ T + 1

P(

z˜k(t) Σk z˜k(t) ≥ η)

τ =0 k=1 t=τ −J+1

1

T

N E(

τ t=τ −J+1

z˜k (t)

Σ−k 1z˜k(t))

≤ lim sup

T →∞ T + 1 τ =0 k=1

η

J

1 TN

−1

= lim sup η T →∞ T + 1

E(z˜k(t) Σk z˜k(t))

(5)

τ =0 k=1

Proposition 1 says that, if we choose an appropriate value

for λ∗ and solve (UP), we will obtain an optimal solution

to (CP). In this section, we provide an on-line learning algo-

rithm

to

ﬁnd

({

Tk∗

,

Sk∗

,

M

∗ k

,

d∗k

}Nk=1

,

λ∗

).

However,

we

will

ﬁrst analytically characterize the dynamics of the deviation

(xˆ(k)(t) − x∗) in presence of linear attack, which will be used

in developing the attack design algorithm later.

III. ERROR DYNAMICS UNDER ATTACK

Let us consider an algorithm that maintains iterates
{Tk(t), Uk(t), Mk(t), dk(t)}1≤k≤N and λ(t) . for {Tk, Uk, Mk, dk}1≤k≤N and λ, where UkUk = Sk. Since it is difﬁcult to maintain Sk(t) positive deﬁnite in an iterative algorithm, we choose to iteratively update Uk(t) and set Sk(t) = Uk(t)Uk(t).
Let us deﬁne the sigma algebra:

Fτ =. σ({xˆ(k)(t), yk(t), Tk(t), Uk(t), Mk(t), dk(t),

bk(t), λ(t)}1≤k≤N , λ(t) : 1 ≤ t ≤ τ )

(6)

This is the information available to the attacker at time (τ +1)

before a new attack. However, let us assume for the sake

of analysis that the attacker uses constant Tk, Mk, dk, Uk

respectively, for Let φ˜(t)

a.ll =

k

∈ {1, 2, (xˆ(t)

··· −

, N }. x(t)),

where

xˆ(t)

=.

E(x(t)|{yk(τ )}1≤k≤N,τ≤t) = E(x(t)|Ft) is the

MMSE estimate of x(t) under no attack and can be

computed by the attacker using a standard Kalman ﬁlter. Clearly, φ˜(t) ∼ N (0, R(t)) where R(t) can be

computed by a standard Kalman ﬁlter. Hence, given Ft,

x(t) ∼ N (xˆ(t), R.(t)). Also, conditioned on Ft, the distribution of φ(t) = (x(t) − x∗) is N (xˆ(t) − x∗, R(t)).

Note that, these quantities can be computed by the attacker via a standard Kalman ﬁlter.
Let us also recall that θ(k)(t) =. xˆ(k)(t) − x∗.

Theorem 1. Under a constant {Tk, Mk, dk, Uk}1≤k≤N , the quantity E(||θ(k)(t)||2|Ft−1) can be expressed as (7) and E(z˜k(t) Σ−k 1z˜k(t)|Ft−1) can be expresed by (8).

Proof: See Appendix A.

Note that, given {θ(k)(t − 1) : 1 ≤ k ≤ N },

the

function

N k=1

E(||θ(k)

(t)||2

|Ft−1

)

and

N k=1

E(z˜k(t)

Σ−k 1z˜k(t)|Ft−1)

are

quadratic

in

{Tk, Uk, Mk, dk}1≤k≤N . Hence, the function

ft({Tk, Uk, Mk, dk}1≤k≤N , λ)
N
=. E(||θ(k)(t)||2 + λz˜k(t) Σ−k 1z˜k(t)|Ft−1) (9)
k=1
is also quadratic in {Tk, Uk, Mk, dk}1≤k≤N . In case of non-stationary attack, these results will hold w.r.t. {Tk(t), Uk(t), Mk(t), dk(t)}1≤k≤N .
Lemma 1. The function E(z˜k(t) Σ−k 1z˜k(t)|Ft−1) is convex in {Tk, Uk, Mk, dk}1≤k≤N . For ﬁxed {Tk}1≤k≤N , the functions E(||θ(k)(t)||2|Ft−1) and ft({Tk, Uk, Mk, dk}1≤k≤N , λ) are convex in {Uk, Mk, dk}1≤k≤N .
Proof: See Appendix B. 1) Stability of {θ(k)(t)}: Let us consider constant {Tk(t), Uk(t), Mk(t), dk(t)}1≤k≤N over time. Let us deﬁne the matrix M consisting of N 2 blocks (each block is a square matrix) where:
• The (k, k)-th block in M is (A−GkTkHkA−NkCkA). • For k = j and j ∈ Nk, the (k, j)-th block of M is CkA. • For k = j and j ∈/ Nk, the (k, j)-th block of M is 0.
Lemma 2. The error dynamics {θ(k)(t)}1≤k≤N is stable if the spectral radius of M is less than 1.
Proof: See Appendix C. Clearly, if we choose Tk = I for 1 ≤ k ≤ N , then the {θ(k)(t) : 1 ≤ k ≤ N }t≥0 process remains stable if the estimates at various nodes are stable under no attack.
Lemma 3. If the spectral radius of M is less than 1, then the {z˜k(t)}t≥0 process is also stable for all 1 ≤ k ≤ N .
Proof: We know that z˜(t) = Tk(yk(t) − HkAxˆ(k)(t − 1)) + bk(t). Since the true observation sequence {yk(t)}t≥0 is stable, {bk(t)}t≥0 is i.i.d., and {xˆ(k)(t)}t≥0 is stable under FDI (by Lemma 2), the proof follows.

IV. ATTACK DESIGN VIA DIRECT OPTIMIZATION

A. KKT based solution: the LAADE-KKT algorithm

Let us consider the modiﬁed constrained problem:

N

min

E(||θ(k)(t)||2|Ft−1)

{Tk∗,Uk∗,Mk∗,d∗k}1≤k≤N k=1

N
s.t. E(z˜ (t) Σ−1z˜ (t)|F

) ≤ αη

k

kk

t−1

J

k=1

(MCP1)

Clearly, applying KKT conditions on the relaxed version of
this problem, using a Lagrange multiplier λ, will involve setting the gradient of ft({Tk, Uk, Mk, dk}1≤k≤N , λ) w.r.t. the primal variables {Tk, Uk, Mk, dk}1≤k≤N equal to 0. However, it turns out that, the function ft({Tk, Uk, Mk, dk}1≤k≤N , λ) is convex (by Lemma 1) but not strictly convex w.r.t. {Mk, dk}1≤k≤N , and that the derivative of this function w.r.t. {Mk, dk}1≤k≤N is a function of {Mkθ(k)(t − 1) + dk}1≤k≤N , which can lead to many possible solutions. Hence, we introduce a regularization term
involving the Frobenius norm of {Mk}1≤k≤N :

N

N

min

E(||θ(k)(t)||2|Ft−1) + ξ ||Mk||2F

{Tk∗,Uk∗,Mk∗,d∗k }1≤k≤N k=1

k=1

N −1

αη

s.t. E(z˜k(t) Σk z˜k(t)|Ft−1) ≤ J

k=1

(MCP)

where ξ > 0 is a pre-determined constant. Applying

KKT conditions on the relaxed version of (MCP), using a

Lagrange multiplier λ, will involve setting the gradient of

ft({Tk, Uk, Mk, dk}1≤k≤N , λ) + ξ

N k=1

||Mk

||2F

w.r.t.

the

primal variables {Tk, Uk, Mk, dk}1≤k≤N equal to 0. This

yields a set of linear equations (10), (11), (12), (13) of these

primal variables.

Lemma 4. The optimal solution of (MCP) yields Uk∗ = 0 and hence Sk∗ = 0 for all 1 ≤ k ≤ N .

Proof: (11) directly shows that Uk∗ = 0, since GkGk + λΣ−k 1 is a positive deﬁnite matrix.
Hence, by solving (10), (12) and (13), we can ﬁnd

{

Tk∗

(

λ)

,

M

∗ k

(λ

),

d

∗ k

(

λ)

}1≤

k

≤N

as

a

function

of

λ.

Putting

these values in the constraint of (MCP) and equating both

sides

yields

λ;

then

{T

∗ k

(λ

),

Mk∗

(λ

),

d∗k

(λ

)}

1≤k

≤

N

can

be

used for the attack at time t. It is important to note that,

{

Tk∗

(

λ)

,

M

∗ k

(λ

),

d

∗ k

(

λ)

}1≤

k

≤N

depend

on

the

estimates,

and

thus on the history of observations as well.

Note that, (MCP) is a quadratically constrained quadratic

problem (QCQP), which is not necessarily convex. Hence,

KKT conditions may not yield the globally optimal solution. However, for the special case where {Tk}1≤k≤N is ﬁxed, (MCP) becomes a convex optimization problem by Lemma 1,

and hence the above KKT-based procedure yields globally optimally solution. This algorithm is called linear attack algorithm for distributed estimation based on KKT (LAADE-

KKT).

In this section, we will apply the well-known Karush-Kuhn-
Tucker (KKT) conditions to ﬁnd {Tk∗, Uk∗, Mk∗, d∗k}1≤k≤N for designing the attack at time t.

B. Updating λ(t) iteratively: OLAADE-KKT
Note that, solving (CP) will require us to solve a constrained average-cost Markov decision process (MDP; see [32]) to

E(||θ(k)(t)||2|Ft−1) = ||(A − GkTkHkA − NkCkA)θ(k)(t − 1) + CkA

θ(j)(t − 1) − (I − A)x∗ + Gk(Mkθ(k)(t − 1) + dk)||2

j∈Nk

+Tr(GkTkHkQHkTkGk + GkSkGk + GkTkRkTkGk)

+2 (A − GkTkHkA − NkCkA)θ(k)(t − 1) + CkA

θ(j)(t − 1) − (I − A)x∗ + Gk(Mkθ(k)(t − 1) + dk))

j∈Nk

GkTkHkA E(φ(t − 1)|Ft−1) +

E(||GkTkHkAφ(t − 1)||2|Ft−1)

(7)

=xˆ(t−1)−x∗

=Tr GkTkHkA R(t−1)+(xˆ(t−1)−x∗)(xˆ(t−1)−x∗) A HkTkGk

E(z˜k(t) Σ−k 1z˜k(t)|Ft−1) = Tr Σk− 21 TkHkQHkTk + TkRkTk + Sk + TkHkAR(t − 1)A HkTk
+[TkHkAxˆ(t − 1) − TkHkAxˆ(k)(t − 1) + Mkθ(k)(t − 1) + dk] [TkHkAxˆ(t − 1) − TkHkAxˆ(k)(t − 1) + Mkθ(k)(t − 1) + dk] Σ−k 21 (8)

Differentiation w.r.t. Tk:

GkGkTk∗ HkAθ(k)(t − 1) θ(k)(t − 1) A Hk + HkQHk + Rk + HkA R(t − 1) + (xˆ(t − 1) − x∗)(xˆ(t − 1) − x∗) A Hk

− HkAθ(k)(t − 1)(xˆ(t − 1) − x∗) A Hk + HkA(xˆ(t − 1) − x∗)(θ(k)(t − 1)) A Hk

−Gk (A − NkCkA)θ(k)(t − 1) + CkA

θ(j)(t − 1) − (I − A)x∗ + Gk(Mk∗θ(k)(t − 1) + d∗k) (θ(k)(t − 1)) A Hk

j∈Nk

+λΣ−k 1Tk∗ HkQHk + Rk + HkAR(t − 1)HkA + HkA xˆ(t − 1) − xˆ(k)(t − 1) xˆ(t − 1) − xˆ(k)(t − 1) HkA

+λΣ−k 1 Mk∗θ(k)(t − 1) + d∗k xˆ(t − 1) − xˆ(k)(t − 1) A Hk = 0

(10)

Differentiation w.r.t. Uk:

GkGk + λΣ−k 1 Uk = 0

(11)

Differentiation w.r.t. Mk: GkGkMk∗θ(k)(t − 1)(θ(k)(t − 1))

+2Gk (A − GkTk∗HkA − NkCkA)θ(k)(t − 1) + CkA

θ(j)(t − 1) − (I − A)x∗ + Gkd∗k

j∈Nk

θ(k)(t − 1)

+GkGkTk∗HkA xˆ(t − 1) − x∗ θ(k)(t − 1) + 2λΣ−k 1Tk∗HkA xˆ(t − 1) − xˆ(k)(t − 1) θ(k)(t − 1)

+2λΣ−k 1Mk∗θ(k)(t − 1) θ(k)(t − 1) + 2ξMk = 0

(12)

Differentiation w.r.t. dk:

Gk (A − GkTk∗HkA − NkCkA)θ(k)(t − 1) + CkA

θ(j)(t − 1) − (I − A)x∗ + Gk(Mk∗θ(k)(t − 1) + d∗k)

j∈Nk

+GkGkTk∗HkA xˆ(t − 1) − x∗ + λΣ−k 1 Tk∗HkAxˆ(t − 1) − Tk∗HkAxˆ(k)(t − 1) + Mk∗θ(k)(t − 1) + d∗k = 0

(13)

ﬁnd an optimal policy, since the decision obtained by solving (MCP) at any time will affect the future estimates made at the nodes, and thus the future cost incurred by the attacker as well. Obviously, solving (MCP) will always return a myopic policy. However, due to the complicated structure of the problem, especially due to the complex process of evolution of the single stage objective function and constraint function in (CP) over time, we resorted to solve (MCP) as an alternative to solving MDP. However, (MCP) is a one-shot optimization problem where the objective and constraint both are some conditional expectations given the history Ft−1, while (CP) is a sequential

optimization problem where the objective and constraint are averaged over independent sample paths.
In this subsection, we will provide an online version of LAADE-KKT, i.e., OLAADE-KKT, which will seek to meet the constraint of (CP). This algorithm maintains a running iterate λ(t − 1), and computes Tk(t − 1) = Tk∗(λ(t − 1)), Mk(t − 1) = Mk∗(λ(t − 1)), dk(t − 1) = d∗k(λ(t − 1)) to solve (UP) at time t by using the set of linear equations (10),

(11), (12), (13). Then it makes the following update:

λ(t) = [λ(t − 1) + b(t)( N z˜˜k(t) Σ−k 1z˜˜k(t) − αJη )]A0 0 (14)
k=1

where z˜˜k(t) is the innovation at node k at time t, which is

obtained by applying {Tk(t − 1) = Tk∗(λ(t − 1)), Mk(t − 1) = Mk∗(λ(t − 1)), dk(t − 1) = d∗k(λ(t − 1))}1≤k≤N

on an independently generated/simulated state-observation

sequence {x˜˜(τ ), y˜˜(τ )}0≤τ≤t. Step size sequence {b(t)}t≥0 is

a sequence of non-negative numbers such that

∞ t=0

b(t)

=

∞,

∞ t=0

b2(t)

<

∞.

The

iterations

are

projected

onto

a

compact interval [0, A0] to ensure boundedness. The number

A0 is chosen to be sufﬁciently large so that, if, for any

λ∗ ≥ 0, the constraint in (MCP) is met with equality under

{

Tk∗

(

λ∗

)

,

Mk∗

(λ

∗

),

d

∗ k

(

λ∗

)

}1≤

k

≤N

,

then

λ∗

∈

[0, A0).

This

iteration is motivated by the theory of stochastic approxima-

tion [29], where the goal is to meet the constraint in (CP) with

equality. This algorithm is referred to as OLAADE-KKT-1.

However, the constraint in (CP) actually involves an upper

bound to the attack detection probability averaged over time.

If the attacker has access to the alarms raised by the detectors

deployed in various nodes, then that additional information

can be used to update λ(t). Let the indicator that at least

one alarm is raised at time t be denoted by It, which is obtained by applying {Tk(t−1) = Tk∗(λ(t−1)), Mk(t−1) = Mk∗(λ(t − 1)), dk(t − 1) = d∗k(λ(t − 1))}1≤k≤N on an
independently generated/simulated state-observation sequence {x˜˜(τ ), y˜˜(τ )}0≤τ≤t. Then, λ(t) can be updated as:

λ(t) = [λ(t − 1) + b(t)(It − α)]A0 0

(15)

Again here A0 is chosen so large that, for any λ∗ ≥ 0 such that the detection probability Pd(λ∗) = α, we have λ∗ < A0.

This modiﬁed algorithm is called OLAADE-KKT-2. It is

interesting to note that OLAADE-KKT-2 is agnostic to the

value of η used by the detectors.

1) Complexity reduction: Note that, in OLAADE-KKT1, z˜˜k(t) is the innovation at node k at time t, when

{

Tk∗

(

λ(

t

−

1)),

M

∗ k

(λ

(t

−

1)),

d

∗ k

(

λ(

t

−

1))}

1≤k

≤

N

is

applied

on an independently genereted/simulated state-observation sequence {x˜˜(τ ), y˜˜(τ )}0≤τ≤t. Using an independently gener-

ated/simulated state-observation sequence up to time t is

necessary for the convergence proof of OLAADE-KKT-1,

because a particular noise sequence in the convergence proof

need to be Martingale difference noise sequence. Also, at each

time t, we need to run this operation over the simulated history

over time {0, 1, · · · , t} in order to ensure that an offset term

in the proof remains o(1) instead of O(1). Hence, computing {z˜˜k(t)}1≤k≤N will require O(t) computations at time t, which is not practically feasible. However, we can avoid this O(t) computation by replacing z˜˜k(t) in (14) simply by z˜k(t) which

is the innovation at node k at time t under the scheme that
applies {Tk∗(λ(τ − 1)), Mk∗(λ(τ − 1)), d∗k(λ(τ − 1))}1≤k≤N on y(τ ) for all τ . This low complexity version of OLAADE-

KKT-1 is denoted by OLAADE-KKT-1-LC.

Similarly, the O(t) computation at time t for OLAADE-

KKT-2 can be avoided by replacing It in (15) by It which is obtained by applying {Tk∗(λ(τ −1)), Mk∗(λ(τ −1)), d∗k(λ(τ −

1))}1≤k≤N on y(τ ) for all τ ; this low complexity version is henceforth called OLAADE-KKT-2-LC.
While the low-complexity versions are practically feasible, their convergence proof is technically very challenging. Hence, we will only prove convergence of OLAADE-KKT-1 and OLAADE-KKT-2 later in this paper.

C. Convergence analysis of OLAADE-KKT

Since LAADE-KKT does not involve any iteration, it does not exhibit any convergence property. Here, we discuss convergence properties of OLAADE-KKT-1 and OLAADE-KKT2, where {Tk}1≤k≤N are ﬁxed and known, so that (MCP) becomes a convex optimization problem by Lemma 1.

Assumption 1. The matrices {Tk}1≤k≤N are such that the M matrix of Section III has a spectral radius less than 1.

1) Convergence of OLAADE-KKT-1: Note that, if

OLAADE-KKT-1 uses a ﬁxed λ ≥ 0 all the time, then at

time t, the attacker takes up the history available up to time

(t

−

1),

and

computes

{M

∗ k

(λ,

{xˆ

(j

)

(t

−

1)}1≤j≤N , xˆ(t

−

1)), d∗k(λ, {xˆ(j)(t − 1)}1≤j≤N , xˆ(t − 1))}1≤k≤N (which are

sample-path-dependent, i.e., dependent on {y(τ )}0≤τ≤t−1)

which are further used to compute the estimates at time t.

Lemma 5. For a ﬁxed λ ≥ 0 and under OLAADE-
KKT-1 and Assumption 1, the sequence of iterates
{Mk(t), dk(t)}1≤k≤N,t≥0 reach a steady state distribution gλ∗ (·).

Proof: By Assumption 1 and Lemma 2, {xˆk(t)}t≥0 and

{xˆ(t)}t≥0 are stable. Hence, from (12) and (13), the lemma

is proved.

Let us deﬁne the distribution of {Mk(t), dk(t)}1≤k≤N,t≥0

under OLAADE-KKT-1 with a ﬁxed λ as gt,λ(·), and the

distribution of {Mk(t), dk(t)}1≤k≤N,t≥0 under OLAADE-

KKT-1 with λ(t) update as gt(·). Also, let µλ,{Mk,dk}1≤k≤N

denote a generic decision rule or policy under OLAADE-KKT-

1 with a ﬁxed parameter set λ, {Mk, dk}1≤k≤N .

Let us deﬁne:

Λ =. {λ ∈ [0, A0) : lim E{M ,d }

∼g∗ (·)Eµ

t→∞

k k 1≤k≤N λ

λ,{Mk ,dk }1≤k≤N

[ N z˜˜k(t) Σ−k 1z˜˜k(t)] = αJη }
k=1

Theorem 2. Under Assumption 1 and OLAADE-KKT-1, the iterates λ(t) → Λ almost surely, and the limiting distributions satisfy limt→∞ ||gt(·) − gt,λ(t)(·)||T V = 0 almost surely.

Proof: See Appendix D. The proof is based on the theory of stochastic approximation in [29].
However, it is important to note that the convergence can be sample-path dependent.
2) Convergence of OLAADE-KKT-2: Let us deﬁne:

Λ =. {λ ∈ [0, A0) : lim E{M ,d }

∼g∗ (·)Eµ

t→∞

k k 1≤k≤N λ

λ,{Mk ,dk }1≤k≤N

(It) = α}

Theorem 3. Under Assumption 1 and OLAADE-KKT-2, the iterates λ(t) → Λ almost surely, and the limiting distributions satisfy limt→∞ ||gt(·) − gt,λ(t)(·)||T V = 0 almost surely.

Proof: The proof is very similar to that of Theorem 3,

except that we use It instead of

N k=1

z˜˜k(t)

Σ−k 1z˜˜k(t)

in

this

proof. Hence, we omit details of the proof.

V. ATTACK DESIGN VIA SPSA
In this section, we propose an online linear attack algorithm for distributed estimation using SPSA (OLAADE-SPSA) that allows us to avoid solving the KKT equations at each time t. The OLAADE-SPSA algorithm involves two-timescale stochastic approximation [29], which is basically a stochastic gradient descent algorithm with a noisy gradient estimate; (UP) is solved via SPSA in the faster timescale, and λ is updated in the slower timescale.

A. Description of OLAADE-SPSA

The algorithm requires three positive step size sequences

{a(t)}t≥0, {b(t)}t≥0 and {c(t)}t≥0 satisfying the follow-

ing criteria: (i)

∞ t=0

a(t)

=

∞ t=0

b(t)

=

∞, (ii)

∞ t=0

a2(t)

<

∞,

∞ t=0

b2(t)

<

∞,

(iii)

limt→∞

b(t) a(t)

=

0,

(iv) limt→∞ c(t) = 0, and (v)

∞ a2(t) t=0 c2(t)

<

∞.

The

ﬁrst

three conditions are standard requirements for two-timescale

stochastic approximation. The fourth condition ensures that

the gradient estimate is asymptotically unbiased, and the ﬁfth

condition is required for the convergence of SPSA.

The OLAADE-SPSA algorithm
Input: {a(t)}t≥0, {b(t)}t≥0, {c(t)}t≥0, α, η, J , A0. Initialization: Tk(0), Mk(0), dk(0) for all k ∈ N , λ(0), {xˆ(k)(0)}1≤k≤N , xˆ(0) For t = 1, 2, 3, · · · :

1) For each 1 ≤ k ≤ N , the attacker generates random matrices ∆(k)(t), Π(k)(t) and β(k)(t) having same

dimensions as Tk(t−1), Mk(t−1) and dk(t−1) respec-

tively, whose entries are uniformly and independently

chosen from the set {−1,+1}..

(k)

2)

The
−

a.ttacker

computes

Tk =
(k)

Tk (t

−+1). +

c(t)∆

(t),

Tk

= Tk(t
(k)

−

1)−−.c(t)∆

(t), Mk

=

Mk (t
(k)

−

1)
+

+.

c(t)Π

(t),

Mk

=
(k)

Mk(−t −.

1)

−

c(t)Π

(t), dk =
(k)

dk(t − 1) + c(t)β (t), dk = dk(t − 1) − c(t)β (t),

for all 1 ≤ k ≤ N .

3) The attacker computes:

κ+t =.

N
E (||θ(j)(t)||2 + λ(t − 1)z˜j(t) Σ−j 1z˜j(t)

j=1

+ξ||Mk+||2F |Ft−1, {Tk+, Mk+, d+k }1≤k≤N

using (7) and (8) under {Tk+, Mk+, d+k }1≤k≤N . The attacker computes κ−t in a similar way using {Tk−, Mk−, d−k }1≤k≤N . 4) The attacker updates each element (i, j) of Tk(t − 1),
Mk(t − 1) and dk(t − 1) for all 1 ≤ k ≤ N as follows:

Tk(t)(i, j) = Mk(t)(i, j) =
dk(t)(i, 1) =

(κ+t − κ−t ) A0

Tk(t − 1)(i, j) − a(t) ×

(k)

2c(t)∆(i,j)(t) −A0

(κ+t − κ−t ) A0

Mk(t − 1)(i, j) − a(t) ×

(k)

2c(t)Π(i,j)(t) −A0

(κ+t − κ−t ) A0

dk(t − 1)(i, 1) − a(t) ×

(k)

2c(t)β(i,1)(t) −A0

(16)

5) The sensors make observations {yk(t)}1≤k≤N , which
are accessed by the attacker. 6) The attacker calculates zk(t) = yk(t)−HkAxˆ(k)(t−1)
for all k ∈ {1, 2, · · · , N }. 7) The attacker calculates z˜k(t) = Tk(t)zk(t) + bk(t) for
all k ∈ {1, 2, · · · , N }, where bk(t) = Mk(t)θ(k)(t − 1) + dk(t). The observations are accordingly modiﬁed as y˜k(t) = z˜k(t) + HkAxˆ(k)(t − 1) and sent to the
agent nodes.
8) The attacker updates the Lagrange multiplier as follows:
If η is known to attacker: OLAADE-SPSA-1

N
λ(t) = [λ(t − 1) + b(t)(

z˜

(t) Σ−1z˜

(t) − αη )]A0

k

kk

J0

k=1

(17)

If η is unknown to attacker but alarms are observable:

OLAADE-SPSA-2

λ(t) = [λ(t − 1) + b(t)(It − α)]0A0

(18)

9) The agent nodes compute the estimates locally, using (3) and the modiﬁed {y˜k(t)}1≤k≤N . The agent nodes broadcast their estimates to their neighboring nodes.
end

B. Discussion of OLAADE-SPSA

1) If {Tk}1≤k≤N is kept ﬁxed, then the ﬁrst update in step 4 of OLAADE-SPSA is not required.

2) The OLAADE-SPSA algorithm combines the online

stochastic gradient descent (OSGD) algorithm of [31,

Chapter 3] with two-timescale stochastic approximation

of [29]. The λ(t) iterate is updated in the slower

timescale to meet either the constraint in (CP) or the ex-

act attack detection probability constraint with equality.

In the faster timescale, OSGD is used for solving (UP).

Since

limt→∞

b(t) a(t)

=

0, the faster timescale iterates

{Tk(t), Mk(t), dk(t)}1≤k≤N view the slower timescale

iterate λ(t) as quasi-static, while the λ(t) iteration ﬁnds

the faster timescale iterates as almost equilibriated; as if,

the faster timescale iterates are varied in an inner loop

and the slower timescale iterate is varied in an outer

loop.

3) Steps 1 − 4 of OLAADE-SPSA is basically using SGD,

but via simultaneous perturbation stochastic approxi-

mation (SPSA; see [30]). SPSA allows us to avoid

coordinate wise perturbation for gradient estimation of

the function under consideration, by providing a zero-

mean random perturbation to all coordinates (entries) of

a vector or matrix variable simultaneously and indepen-

dently. Steps 1 − 4 of OLAADE-SPSA is equivalent to

one iteration of SGD by using SPSA, where the time-

varying function to optimize is

N k=1

E(||θ(k)(t)||2

+

λ(t − 1)z˜k(t) Σ−k 1z˜k(t) + ξ||Mk||2F |Ft−1).

4) All iterates are projected onto various large but compact

intervals to ensure boundedness.

and Table II. The mean and standard deviation values are obtained from 10 sample runs. Similar results for OLAADKKT-2-LC are summarized in Table III and Table IV. For OLAAD-KKT-1-LC, we report the results for that particular choice of hyper-parameter which allowed us to achieve the detection probability closest to the target, based on a gridsearch.

VI. NUMERICAL RESULTS
We consider a distributed system with N = 6 agent
nodes and consider two different network topologies, the 3-
regular hexagon and the line topology. The underlying process is q-dimensional, with q = 2, while the observations recorded at each node yk ∈ R3. The system parameters A, Q, {Rk}1≤k≤6, {Hk}1≤k≤6 are chosen randomly and independently for the two different topologies. The KCF parameters {Gk, Ck}1≤k≤6 are computed using a technique from [28], and {Σk}1≤k≤6 are computed by simulating the KCF under no attack.
For FDI attack, we set x∗ = [2, 2] , η = 300, χ2 window size J = 10 and λ(0) = 4 and regularization constant ζ = 0.5. To maintain the convexity of the problem, we ﬁx Tk(t) = I, ∀ 1 ≤ k ≤ 6 and ∀ t ≥ 1. We then allow the algorithm to run until convergence on λ(t). The χ2 detector raises concerns
about FDI though alarms.
For the attack variants KKT-1 and SPSA-1, the adversary
does not have access to the alarms. In this case, we notice
that the Markov inequality based upper bound to the detection probability Pd as in (5) is too loose in practice, which in turn leads to a higher than necessary penalty in λ update equation
(14). To alleviate this problem, we introduce a hyper-parameter c to be multiplied to the term αJη , which is tuned to get closer to the detection probability upper bound. For the KKT-2 and
SPSA-2 variants, since the attacker has access to alarm triggers
at the nodes, such a hyper-parameter is not required.
Motivated by the ADAM algorithm [33], we implement an adaptive step size optimization variant for λ(t) for faster
convergence. However, to be able to reasonably observe the effect of changing λ on the detection probability, we update λ on a lower timescale of 0.1×, i.e., for each iterative update of λ, we let the underlying process be simulated for 10 iterations
before the next update.

A. OLAADE-KKT

Recall that for OLAADE-KKT, we want to obtain the value

of λ for optimizing the MSE from target vs detection proba-

bility trade-off. Once the λ(t) iterate converges to λ∗, we sim-

ulate multiple sample paths under this ﬁxed λ∗, and calculate

the deviation from target, i.e., T1

T t=1

N k=1

||xˆ(k)

(t)

−

x∗

||2

for each sample path.

In Figure VI-A, we demonstrate the effectiveness of the

attack along one sample path, by plotting the deviation of

the state estimates from the speciﬁed target across the nodes,

under attack and no attack cases. The broader simulation

results for OLAAD-KKT-1-LC are summarized in Table I

Fig. 2: OLAADE-KKT-1-LC: Average MSE from x∗, 3regular topology, α = 0.3

Permissible detection
probability (α)

Detection probability (no attack)

Detection probability under FDI

Deviation from x∗
(no attack)

Deviation from x∗
under FDI

0.2

0.044 +/- 0.003 0.186 +/- 0.01 2.062 +/- 0.002 1.793 +/- 0.002

0.3

0.044 +/- 0.005 0.286 +/- 0.011 2.063 +/- 0.004 1.738 +/- 0.003

TABLE I: N = 6, 3-regular topology, OLAADE-KKT-1-LC

Permissible detection
probability(α)

Detection probability (no attack)

Detection probability under FDI

Deviation from x∗
(no attack)

Deviation from x∗
under FDI

0.25

0.047 +/- 0.004 0.235 +/- 0.009 2.045 +/- 0.007 1.289 +/- 0.003

0.4

0.05 +/- 0.005 0.389 +/- 0.013 2.038 +/- 0.008 1.196 +/- 0.003

TABLE II: N = 6, Line topology, OLAADE-KKT-1-LC

Permissible detection
probability (α)

Detection probability (no attack)

Detection probability under FDI

Deviation from x∗
(no attack)

Deviation from x∗
under FDI

0.2

0.046 +/- 0.003 0.178 +/- 0.008 2.063 +/- 0.005 1.799 +/- 0.004

0.3

0.044 +/- 0.003 0.287 +/- 0.013 2.062 +/- 0.002 1.741 +/- 0.002

TABLE III: N = 6, 3-regular topology, OLAADE-KKT-2-LC

Permissible detection
probability(α)

Detection probability (no attack)

Detection probability under FDI

Deviation from x∗
(no attack)

Deviation from x∗
under FDI

0.25

0.05 +/- 0.004 0.223 +/- 0.01 2.048 +/- 0.012 1.305 +/- 0.005

0.4

0.049 +/- 0.003 0.355 +/- 0.016 2.046 +/- 0.009 1.211 +/- 0.004

TABLE IV: N = 6, Line topology, OLAADE-KKT-2-LC

As mentioned previously, it is important to note that the underlying process parameters were different for the two topologies. This can be seen from the fact that the detection probability under the no-attack case varies slightly for the two settings. In fact, the nature of these underlying parameters often determines how well the attack can drive the estimates to the target value, while keeping the detection rate under α.

B. OLAADE-SPSA
We repeat the same set of experiments, with the same set of attack parameters for the OLAADE-SPSA attack scheme.

Note that in this case, we want to estimate the values of M , d for mounting an effective attack. As before, we report the mean performance of the attack, averaged over ten sample runs. It is again observed that OLAADE-SPSA is able to push all estimates closer to the target, while respecting the detection constraint.

Permissible detection
probability (α)

Detection probability (no attack)

Detection probability under FDI

Deviation from x∗
(no attack)

Deviation from x∗
under FDI

0.2

0.043 +/- 0.005 0.189 +/- 0.012 2.062 +/- 0.003 1.804 +/- 0.003

0.3

0.044 +/- 0.005 0.28 +/- 0.013 2.062 +/- 0.002 1.75 +/- 0.002

TABLE V: N = 6, 3-regular topology, OLAADE-SPSA-1

Permissible detection
probability(α)

Detection probability (no attack)

Detection probability under FDI

Deviation from x∗
(no attack)

Deviation from x∗
under FDI

0.25

0.052 +/- 0.006 0.232 +/- 0.014 2.042 +/- 0.014 1.491 +/- 0.010

0.4

0.049 +/- 0.006 0.385 +/- 0.008 2.041 +/- 0.009 1.381 +/- 0.005

TABLE VI: N = 6, Line topology, OLAADE-SPSA-1

Permissible detection
probability (α)

Detection probability (no attack)

Detection probability under FDI

Deviation from x∗
(no attack)

Deviation from x∗
under FDI

0.2

0.043 +/- 0.004 0.184 +/- 0.01 2.064 +/- 0.003 1.805 +/- 0.002

0.3

0.045 +/- 0.006 0.292 +/- 0.013 2.061 +/- 0.004 1.746 +/- 0.004

TABLE VII: N = 6, 3-regular topology, OLAADE-SPSA-2

Permissible detection
probability(α)

Detection probability (no attack)

Detection probability under FDI

Deviation from x∗
(no attack)

Deviation from x∗
under FDI

0.25

0.049 +/- 0.006 0.234 +/- 0.011 2.04 +/- 0.009 1.426 +/- 0.005

0.4

0.054 +/- 0.007 0.385 +/- 0.012 2.042 +/- 0.012 1.323 +/- 0.007

TABLE VIII: N = 6, q = 2, Line topology, OLAADE-SPSA2

C. Discussion
We highlight some key takeaways from the simulation results. Firstly, the OLAADE-KKT attack variants are always at least as good or better than their OLAADE-SPSA counterparts, depending on the underlying process parameters. This matches our intuition, since the KKT variants are indeed provably optimal for the convex formulation. However, it is important to note that the KKT algorithms require us to solve a family of matrix equations at each iteration, which requires matrix inversion; this makes the computational complexity of the KKT variants per slot higher than that of the SPSA variants.
The second observation is that, the performance of the respective variants of KKT and SPSA when the adversary does not have direct access to alarms does not alter much even if access is made available. In practice, however, this will seldom be the case, since the true values of η, J and α are not directly available to the attacker apriori, and will therefore need to be assumed. Therefore, any conservative attacker without access to alarms would tend to lower the estimate for the detection threshold in order to avoid detection, and consequently, the performance of the attack without access to alarms will be worse.

VII. CONCLUSIONS
In this paper, we designed an optimal linear attack for distributed cyber-physical systems. The problem was posed an a constrained optimization problem. The parameters of the attack scheme were learnt and optimized on-line, using tools from KKT, two-timescale stochastic approximation and SPSA. Numerical results demonstrated the efﬁcacy of each of the proposed attack scheme. It is important to note that OLAADKKT based attacks require an active adversary in the sense that while the attack parameters converge in a distribution, they have to be updated in each iteration to remain effective. And while OLAAD-SPSA does not have that particular bottleneck, it can often require more effort to tune its parameters for convergence. In future, we seek to extend this work for unknown process and observation dynamics, and also prove convergence of the proposed algorithms.

APPENDIX A PROOF OF THEOREM 1
Under this FDI attack, we have:

xˆ(k)(t)

= Axˆ(k)(t − 1) + Gkz˜k(t) + Ck

(x¯(j)(t) − x¯(k)(t))

j∈Nk

= Axˆ(k)(t − 1) + Gk(Tk(yk(t) − HkAxˆ(k)(t − 1)) + bk(t))

+ CkA

(xˆ(j)(t − 1) − xˆ(k)(t − 1))

(19)

j∈Nk

Now,

θ(k)(t)

= (A − GkTkHkA)xˆ(k)(t − 1)

+Gk Tk

yk (t)

+Gk bk (t)

.
=Hk Ax(t−1)+Hk w(t−1)+vk (t)

+Ck A

(xˆ(j)(t − 1) − xˆ(k)(t − 1)) − x∗

j∈Nk

= (A − GkTkHkA)θ(k)(t − 1) + GkTkHkAφ(t − 1)

+Ck A

(θ(j)(t − 1) − θ(k)(t − 1)) − (I − A)x∗

j∈Nk

+GkTkHkw(t − 1) + Gkbk(t) + GkTkvk(t)

= (A − GkTkHkA − NkCkA)θ(k)(t − 1)

+Ck A

θ(j)(t − 1) − (I − A)x∗ + GkTkHkAφ(t − 1)

j∈Nk

+GkTkHkw(t − 1) + Gkbk(t) + GkTkvk(t)

(20)

Clearly, E(||θ(k)(t)||2|Ft−1) can be expressed as (7); in this
expression, we have used the fact that, for a column vector a, ||a||22 = Tr(aa ) where a is the transpose of a.
On the other hand, given Ft−1, x(t − 1) ∼ N (xˆ(t − 1), R(t − 1)) where (xˆ(t − 1), R(t − 1)) can be computed
by a standard Kalman ﬁlter. Now,

z˜k(t) = Tkzk(t) + bk(t)

= Tkyk(t) − TkHkAxˆ(k)(t − 1) + bk(t)

= Tk(Hkx(t) + vk(t)) − TkHkAxˆ(k)(t − 1) + bk(t)

= TkHkAx(t − 1) + TkHkw(t − 1) + Tkvk(t)

−TkHkAxˆ(k)(t − 1) + bk(t)

(21)

which, given Ft−1, is distributed as N (TkHkAxˆ(t − 1) − TkHkAxˆ(k)(t − 1) + Mkθ(k)(t − 1) + dk, TkHkQHkTk + TkRkTk + TkHkAR(t − 1)A HkTk + Sk). Hence, E(z˜k(t) Σ−k 1z˜k(t)|Ft−1) is given by (8).

APPENDIX B

PROOF OF LEMMA 1

The proof uses the fact that the function ||

n i=1

civi

+

c||22

for any arbitrary real known coefﬁcients {ci}1≤i≤n and c

and scalar variables {vi}1≤i≤n is convex in {vi}1≤i≤n, since

Hessian of this function will be [c1, c2, · · · , cn] [c1, c2, · · · , cn]

which is a positive semi-deﬁnite matrix. Hence, the ﬁrst term

in the R.H.S. of (7) is convex in the arguments. Just as an-

other example, let us consider another term Tr(Σk− 21 SkΣ−k 12 )

from (8); this can be rewritten as Tr(Σ−k 12 UkUkΣk− 21 ) =

||Σ−k

1 2

Uk

||2F

which

is

convex

in

Uk

since

Σk− 21 Uk

is

a

linear

function of Uk. Convexity of other terms can be proven in a

similar way.

N
Eµλ(t−1),{Mk (t−1),dk (t−1)}1≤k≤N
k=1

z˜˜k(t)Σ−k 1z˜˜k(t)

N

= lim

Eµλ(t−1),{M (t−1),d (t−1)}

τ →∞

k

k

1≤k≤N

k=1

z˜˜k(τ )Σ−k 1z˜˜k(τ ) + o(1)

N
= Eµλ(t−1),{Mk(t−1),dk(t−1)}1≤k≤N z˜˜k (∞)Σ−k 1z˜˜k (∞) + o(1)
k=1

N

=

E{Mk ,dk }1≤k≤N ∼gt,λ(t−1)(·)Eµλ(t−1),{Mk ,dk }1≤k≤N

k=1

z˜˜k(∞)Σ−k 1z˜˜k(∞) + o(1) + ζ2(t)

N
= E{Mk ,dk }1≤k≤N ∼gλ∗(t−1)(·)Eλ(t−1),µ{Mk ,dk }1≤k≤N
k=1

z˜˜k(∞)Σ−k 1z˜˜k(∞) + o(1) + o(1) + ζ2(t)

APPENDIX C
PROOF OF LEMMA 2
Let us consider the evolution of θ(k)(t) in (20), and let θ(t) be the vertical concatenation of the column vectors {θ(k)(t)}1≤k≤N . Hence, the evolution of θ(t) is given by: θ(t) = M θ(t − 1) + ζt where ζt is a stable Gaussian proces since φ(t) is a stable process. Hence, {θ(t)}t≥0 is a stable process if the spectral radius of M is less than 1.

APPENDIX D
PROOF OF THEOREM 2
Note that, the {Mk(t), dk(t)}1≤k≤N update and hence the evolution of gt(·) runs in a faster timescale, while the λ(t) update runs in a slower timescale. Also gt,λ(·) and gλ∗(·) are continuously differentiable in λ over a compact interval [0, A0], and hence are Lipschitz continuous. Clearly, by an argument similar to [29, Chapter 6, Lemma 1], we claim that limt→∞ ||gt(·) − gt,λ(t)(·)||T V = 0 almost surely. This proves convergence in faster timescale.
Now we will prove convergence in the slower timescale. Note that, using the fact that λ(t) ∈ [0, A0] for all t ≥ 0, and using Assumption 1 and Lemma 3, we can easily say that {z˜˜k(t)}1≤k≤N is stable under µλ(t−1),{Mk(t−1),dk(t−1)}1≤k≤N . Also, note that {x(t), xˆ(k)(t), yk(t), z˜˜k(t), Mk(t), dk(t)}1≤k≤N }t≥0 is a stable Markov chain under any µλ(t−1),{Mk(t−1),dk(t−1)}1≤k≤N with λ(t − 1) ∈ [0, A0]. Hence, the λ(t) iteration can be written as:

N

λ(t + 1) = [λ(t − 1) + b(t)( Eµλ(t−1),{Mk(t−1),dk(t−1)}1≤k≤N
k=1

z˜˜k(t)Σ−k 1z˜˜k(t) − αηJ + ζ1(t))]A0 0

where ζ1(t)

=.

N k=1

z˜˜k

(t)Σ−k 1

z˜˜k

(t)

−

E N
k=1

µλ(t−1),{Mk (t−1),dk (t−1)}1≤k≤N

z˜˜k(t)Σ−k 1z˜˜k(t)

is a zero-mean Martingale difference noise. Now,

where the ﬁrst equality follows from the stability of the
above Markov chain, and the second equality follows from
the dominated convergence theorem. The third equality uses the fact that X = E(X) + X − E(X), with ζ2(t) being a Martingale difference noise. The fourth equality follows from the fact that limt→∞ ||gt,λ(·) − gλ∗(·)||T V = 0 and the dominated convergence theorem.
Hence, the λ(t) iteration can be rewritten as:

N

λ(t + 1) =

λ(t − 1) + b(t)(

E{M

k

,d

k

}1≤k

≤

N

∼g

∗ λ(

t−

1)

(·

)

k=1

Eµλ(t−1),{Mk ,dk }1≤k≤N

z˜˜k(∞)Σ−k 1z˜˜k(∞)

A0
+ ζ1(t) + ζ2(t) + o(1)
0

Now, since gλ∗(·) is continuous in λ, we can say that

E{Mk,dk}1≤k≤N ∼g∗

E (·) µλ(t−1),{M ,d }

(z˜˜k(∞)Σ−k 1z˜˜k(∞))

λ(t−1)

k k 1≤k≤N

is continuously differentiable in λ(t − 1) ∈ [0, A0] and hence

Lipschitz continuous. Also, the offset o(1) goes to 0 as t → ∞.

Hence, by the theory of basic stochastic approximation [29, Chapter 2], two-timescale stochastic approximation [29, Chapter 6] and projected stochastic approximation [29, Chapter 5], we can say that λ(t) → Λ almost surely.

REFERENCES
[1] Moulik Choraria, Arpan Chattopadhyay, Urbashi Mitra, and Erik Strom. Optimal deception attack on networked vehicular cyber physical systems. In 2019 53rd Asilomar Conference on Signals, Systems, and Computers, pages 1131–1135. IEEE, 2019.
[2] Yilin Mo and Bruno Sinopoli. Secure control against replay attacks. In Communication, Control, and Computing, 2009. Allerton 2009. 47th Annual Allerton Conference on, pages 911–918. IEEE, 2009.
[3] Yilin Mo, Rohan Chabukswar, and Bruno Sinopoli. Detecting integrity attacks on scada systems. IEEE Transactions on Control Systems Technology, 22(4):1396–1407, 2014.
[4] Yanpeng Guan and Xiaohua Ge. Distributed attack detection and secure estimation of networked cyber-physical systems against false data injection attacks and jamming attacks. IEEE Transactions on Signal and Information Processing over Networks, 4(1):48–59, 2018.
[5] Yuan Chen, Soummya Kar, and José MF Moura. Optimal attack strategies subject to detection constraints against cyber-physical systems. IEEE Transactions on Control of Network Systems, 2017.

[6] Ziyang Guo, Dawei Shi, Karl Henrik Johansson, and Ling Shi. Optimal linear cyber-attack on remote state estimation. IEEE Transactions on Control of Network Systems, 4(1):4–13, 2017.
[7] Jian Sun Guangyu Wu and Jie Chen. Optimal data injection attacks in cyber-physical systems. IEEE Transactions on Cybernatics, 48(12):3302–3312, 2018.
[8] Yuan Chen, Soummya Kar, and José MF Moura. Cyber physical attacks with control objectives and detection constraints. In Decision and Control (CDC), 2016 IEEE 55th Conference on, pages 1125–1130. IEEE, 2016.
[9] Fabio Pasqualetti, Florian Dörﬂer, and Francesco Bullo. Attack detection and identiﬁcation in cyber-physical systems. IEEE Transactions on Automatic Control, 58(11):2715–2729, 2013.
[10] Fei Miao, Quanyan Zhu, Miroslav Pajic, and George J Pappas. Coding schemes for securing cyber-physical systems against stealthy data injection attacks. IEEE Transactions on Control of Network Systems, 4(1):106–117, 2017.
[11] Yuzhe Li, Ling Shi, and Tongwen Chen. Detection against linear deception attacks on multi-sensor remote state estimation. IEEE Transactions on Control of Network Systems, 2017.
[12] Shaunak Mishra, Yasser Shoukry, Nikhil Karamchandani, Suhas N Diggavi, and Paulo Tabuada. Secure state estimation against sensor attacks in the presence of noise. IEEE Transactions on Control of Network Systems, 4(1):49–59, 2017.
[13] Miroslav Pajic, Insup Lee, and George J Pappas. Attack-resilient state estimation for noisy dynamical systems. IEEE Transactions on Control of Network Systems, 4(1):82–92, 2017.
[14] Arpan Chattopadhyay and Urbashi Mitra. Attack detection and secure estimation under false data injection attack in cyber-physical systems. In Information Sciences and Systems (CISS), 2018 52nd Annual Conference on, pages 1–6. IEEE, 2018.
[15] Arpan Chattopadhyay, Urbashi Mitra, and Erik G Ström. Secure estimation in v2x networks with injection and packet drop attacks. In 2018 15th International Symposium on Wireless Communication Systems (ISWCS), pages 1–6. IEEE, 2018.
[16] Arpan Chattopadhyay and Urbashi Mitra. Security against false data injection attack in cyber-physical systems. IEEE Transactions on Control of Network Systems, 2019.
[17] Chensheng Liu, Jing Wu, Chengnian Long, and Yebin Wang. Dynamic state recovery for cyber-physical systems under switching location attacks. IEEE Transactions on Control of Network Systems, 4(1):14– 22, 2017.
[18] Kebina Manandhar, Xiaojun Cao, Fei Hu, and Yao Liu. Detection of faults and attacks including false data injection attack in smart grid using kalman ﬁlter. IEEE transactions on control of network systems, 1(4):370–379, 2014.
[19] Gaoqi Liang, Junhua Zhao, Fengji Luo, Steven R Weller, and Zhao Yang Dong. A review of false data injection attacks against modern power systems. IEEE Transactions on Smart Grid, 8(4):1630–1638, 2017.
[20] Qie Hu, Dariush Fooladivanda, Young Hwan Chang, and Claire J Tomlin. Secure state estimation and control for cyber security of the nonlinear power systems. IEEE Transactions on Control of Network Systems, 2017.
[21] Yorie Nakahira and Yilin Mo. Attack-resilient h2, h-inﬁnity, and l1 state estimator. IEEE Transactions on Automatic Control, 2018.
[22] Hamza Fawzi, Paulo Tabuada, and Suhas Diggavi. Secure estimation and control for cyber-physical systems under adversarial attacks. IEEE Transactions on Automatic Control, 59(6):1454–1467, 2014.
[23] Cheng-Zong Bai, Vijay Gupta, and Fabio Pasqualetti. On kalman ﬁltering with compromised sensors: Attack stealthiness and performance bounds. IEEE Transactions on Automatic Control, 62(12):6641–6648, 2017.
[24] Yanpeng Guan and Xiaohua Ge. Distributed attack detection and secure estimation of networked cyber-physical systems against false data injection attacks and jamming attacks. IEEE Transactions on Signal and Information Processing over Networks, 4(1):48–59, 2017.
[25] Bharadwaj Satchidanandan and Panganamala R Kumar. Dynamic watermarking: Active defense of networked cyber–physical systems. Proceedings of the IEEE, 105(2):219–240, 2016.
[26] Florian Dörﬂer, Fabio Pasqualetti, and Francesco Bullo. Distributed detection of cyber-physical attacks in power networks: A waveform relaxation approach. In 2011 49th Annual Allerton Conference on Communication, Control, and Computing (Allerton), pages 1486–1491. IEEE, 2011.
[27] Ashkan Moradi, Naveen KD Venkategowda, and Stefan Werner. Coordinated data-falsiﬁcation attacks in consensus-based distributed kalman ﬁltering. In 2019 IEEE 8th International Workshop on Computational

Advances in Multi-Sensor Adaptive Processing (CAMSAP), pages 495– 499. IEEE, 2019. [28] R. Olfati-Saber. Kalman-consensus ﬁlter : Optimality, stability, and performance. In Conference on Decision and Control, pages 7036–7042. IEEE, 2009. [29] Vivek S. Borkar. Stochastic approximation: a dynamical systems viewpoint. Cambridge University Press, 2008. [30] J.C. Spall. Multivariate stochastic approximation using a simultaneous perturbation gradient approximation. IEEE Transactions on Automatic Control, 37(3):332–341, 1992. [31] Elad Hazan et al. Introduction to online convex optimization. Foundations and Trends® in Optimization, 2(3-4):157–325, 2016. [32] D.P. Bertsekas. Dynamic Programming and Optimal Control, Vol. II. Athena Scientiﬁc, 2007. [33] Diederik P. Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In Yoshua Bengio and Yann LeCun, editors, 3rd International Conference on Learning Representations, (ICLR) 2015, San Diego, CA, USA, May 7-9, 2015, Conference Track Proceedings, 2015.

