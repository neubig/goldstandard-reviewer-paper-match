{"title": "Communication performance of Java\u2010based parallel virtual machines", "abstract": "Message-passing libraries such as the Parallel Virtual Machine (PVM) and Message Passing Interface (MPI) provide a common Application Programming Interface (API) to implement parallel programs across multiple computers. Such libraries provide a means to program a collection of normally independent computers to work co-operatively on a single computation. However, for programs written in C and Fortran these collections of machines may provide a heterogenous set of computer architectures, requiring a different executable for each type of architecture. \n \nThe Java language offers a potentially machine-independent method of distributing the same code to perform the computations on different computer architectures. The communication performance between processors running Java programs is a crucial issue for this type of application. This paper compares the performance between tradition PVM implemented in C code, Java code interfaced to the traditional PVM libraries (JavaPVM), and Java code that performs functions equivalent to the traditional PVM library (JPVM). The Java implementations are slower, but performance improvements are possible. \u00a9 1998 John Wiley & Sons, Ltd.", "year": 1998, "ssId": "ef09dd6f5615e2b937d3f9dd555c2daafb4c4f4b", "arXivId": null, "link": null, "openAccess": false, "authors": ["N. Yalamanchilli", "William W. Cohen"]}