{"title": "SIMD compression and the intersection of sorted integers", "abstract": "Sorted lists of integers are commonly used in inverted indexes and database systems. They are often compressed in memory. We can use the single\u2010instruction, multiple data (SIMD) instructions available in common processors to boost the speed of integer compression schemes. Our S4\u2010BP128\u2010D4 scheme uses as little as 0.7\u2009CPU cycles per decoded 32\u2010bit integer while still providing state\u2010of\u2010the\u2010art compression. However, if the subsequent processing of the integers is slow, the effort spent on optimizing decompression speed can be wasted. To show that it does not have to be so, we (1) vectorize and optimize the intersection of posting lists; (2) introduce the SIMD GALLOPING algorithm. We exploit the fact that one SIMD instruction can compare four pairs of 32\u2010bit integers at once. We experiment with two Text REtrieval Conference (TREC) text collections, GOV2 and ClueWeb09 (category B), using logs from the TREC million\u2010query track. We show that using only the SIMD instructions ubiquitous in all modern CPUs, our techniques for conjunctive queries can double the speed of a state\u2010of\u2010the\u2010art approach. Copyright \u00a9 2015 John Wiley & Sons, Ltd.", "year": 2014, "ssId": "781e0e81834119c135091c8bdfcd1966c10b09ab", "arXivId": "1401.6399", "link": "https://arxiv.org/pdf/1401.6399.pdf", "openAccess": true, "authors": ["D. Lemire", "Leonid Boytsov", "Nathan Kurz"]}