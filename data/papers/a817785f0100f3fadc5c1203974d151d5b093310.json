{"title": "Communication Performance of Java-Based Parallel Virtual Machines", "abstract": "Message passing libraries such as Parallel Virtual Machine (PVM) and Message Passing Interface (MPI) provide a common Application Programming Interface (API) to implement parallel programs across multiple computers. Such libraries provide a means to program a collection of normally independent computers to work cooperatively on a single computation. However, for programs written in C and Fortran these collections of machines may provide a heterogenous set of computer architectures, requiring a di erent executable for each type of architecture. The Java language o ers a potentially machine-independent method of distributing the same code to perform the computations on di erent computer architectures. The communication performance between processors running Java programs is a crucial issue for this type of application. This paper compares the performance between tradition PVM implemented in C code, Java code interfaced to the traditional PVM libraries (JavaPVM), and Java code that performs functions equivalent to the traditional PVM library (JPVM). The Java implementations are slower, but performance improvements are possible.", "year": 1998, "ssId": "a817785f0100f3fadc5c1203974d151d5b093310", "arXivId": null, "link": null, "openAccess": false, "authors": ["N. Yalamanchilli", "William W. Cohen"]}